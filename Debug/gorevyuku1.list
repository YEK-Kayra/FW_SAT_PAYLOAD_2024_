
gorevyuku1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000139ec  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ae8  08013b90  08013b90  00014b90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014678  08014678  000161f0  2**0
                  CONTENTS
  4 .ARM          00000008  08014678  08014678  00015678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014680  08014680  000161f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014680  08014680  00015680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08014684  08014684  00015684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  08014688  00016000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002c30  200001f0  08014878  000161f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002e20  08014878  00016e20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000161f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022064  00000000  00000000  00016220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005074  00000000  00000000  00038284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b78  00000000  00000000  0003d2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000155c  00000000  00000000  0003ee70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000917e  00000000  00000000  000403cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028aca  00000000  00000000  0004954a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a8b7f  00000000  00000000  00072014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011ab93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008b3c  00000000  00000000  0011abd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00123714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08013b74 	.word	0x08013b74

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	08013b74 	.word	0x08013b74

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <SubSys_Actuator_Servo_Init>:
 * @param *dev,  Connect struct parameter htim_X, tim_channel_in as given below
 *
 * @retval none
 */
extern TIM_HandleTypeDef htim1;
void SubSys_Actuator_Servo_Init(Actuator_Servo_HandleTypeDef *dev){
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]

	HAL_TIM_Base_Start(dev->htim_X);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4618      	mov	r0, r3
 8001002:	f007 fdc1 	bl	8008b88 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(dev->htim_X,dev->tim_channel_in);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	4619      	mov	r1, r3
 8001010:	4610      	mov	r0, r2
 8001012:	f007 fe63 	bl	8008cdc <HAL_TIM_PWM_Start>

}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
	...

08001020 <SubSys_Actuator_Servo_MoveTo>:
 * 		   The correct duty cycle range is between 2% and 12%.
 *
 * @param *dev, Connect struct parameter htim_X, tim_channel_in as given below
 * @param Angle The desired angle for the motor to turn.
 */
void SubSys_Actuator_Servo_MoveTo(Actuator_Servo_HandleTypeDef *dev, uint16_t Angle){
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	460b      	mov	r3, r1
 800102a:	807b      	strh	r3, [r7, #2]

	if(dev == &dev_Servo_Separation){
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4a17      	ldr	r2, [pc, #92]	@ (800108c <SubSys_Actuator_Servo_MoveTo+0x6c>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d110      	bne.n	8001056 <SubSys_Actuator_Servo_MoveTo+0x36>
		dev->htim_X->Instance->CCR2 = (((Angle*100)/180)+20);
 8001034:	887b      	ldrh	r3, [r7, #2]
 8001036:	2264      	movs	r2, #100	@ 0x64
 8001038:	fb02 f303 	mul.w	r3, r2, r3
 800103c:	4a14      	ldr	r2, [pc, #80]	@ (8001090 <SubSys_Actuator_Servo_MoveTo+0x70>)
 800103e:	fb82 1203 	smull	r1, r2, r2, r3
 8001042:	441a      	add	r2, r3
 8001044:	11d2      	asrs	r2, r2, #7
 8001046:	17db      	asrs	r3, r3, #31
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	f103 0214 	add.w	r2, r3, #20
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	639a      	str	r2, [r3, #56]	@ 0x38
	}

	if(dev == &dev_Servo_ColorFilter){
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a0e      	ldr	r2, [pc, #56]	@ (8001094 <SubSys_Actuator_Servo_MoveTo+0x74>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d110      	bne.n	8001080 <SubSys_Actuator_Servo_MoveTo+0x60>
		dev->htim_X->Instance->CCR1 = (((Angle*100)/180)+20);
 800105e:	887b      	ldrh	r3, [r7, #2]
 8001060:	2264      	movs	r2, #100	@ 0x64
 8001062:	fb02 f303 	mul.w	r3, r2, r3
 8001066:	4a0a      	ldr	r2, [pc, #40]	@ (8001090 <SubSys_Actuator_Servo_MoveTo+0x70>)
 8001068:	fb82 1203 	smull	r1, r2, r2, r3
 800106c:	441a      	add	r2, r3
 800106e:	11d2      	asrs	r2, r2, #7
 8001070:	17db      	asrs	r3, r3, #31
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	f103 0214 	add.w	r2, r3, #20
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	635a      	str	r2, [r3, #52]	@ 0x34
	}

}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	20002c58 	.word	0x20002c58
 8001090:	b60b60b7 	.word	0xb60b60b7
 8001094:	20002c60 	.word	0x20002c60

08001098 <PassiveBuzz_ON>:
 * @brief : Buzzer is set when the function is called(DutyCycle is configurated by the CCRx REG)
 * @param :  htim_X        : it's set by &htimX. X is the number of timers
 * @param :  PWM_Channel_X :  it's set by TIM_CHANNEL_X . X is the number of timer's channels
 * @retval: None
 */
void PassiveBuzz_ON(TIM_HandleTypeDef *htim_X, uint32_t PWM_Channel_X){
 8001098:	b590      	push	{r4, r7, lr}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]

	switch (PWM_Channel_X){
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	2b0c      	cmp	r3, #12
 80010a6:	d875      	bhi.n	8001194 <PassiveBuzz_ON+0xfc>
 80010a8:	a201      	add	r2, pc, #4	@ (adr r2, 80010b0 <PassiveBuzz_ON+0x18>)
 80010aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ae:	bf00      	nop
 80010b0:	080010e5 	.word	0x080010e5
 80010b4:	08001195 	.word	0x08001195
 80010b8:	08001195 	.word	0x08001195
 80010bc:	08001195 	.word	0x08001195
 80010c0:	08001111 	.word	0x08001111
 80010c4:	08001195 	.word	0x08001195
 80010c8:	08001195 	.word	0x08001195
 80010cc:	08001195 	.word	0x08001195
 80010d0:	0800113d 	.word	0x0800113d
 80010d4:	08001195 	.word	0x08001195
 80010d8:	08001195 	.word	0x08001195
 80010dc:	08001195 	.word	0x08001195
 80010e0:	08001169 	.word	0x08001169

	case TIM_CHANNEL_1 :
		htim_X->Instance->CCR1 =  0.5 * (htim_X->Instance->ARR);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fa12 	bl	8000514 <__aeabi_ui2d>
 80010f0:	f04f 0200 	mov.w	r2, #0
 80010f4:	4b29      	ldr	r3, [pc, #164]	@ (800119c <PassiveBuzz_ON+0x104>)
 80010f6:	f7ff fa87 	bl	8000608 <__aeabi_dmul>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	4610      	mov	r0, r2
 8001100:	4619      	mov	r1, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681c      	ldr	r4, [r3, #0]
 8001106:	f7ff fd57 	bl	8000bb8 <__aeabi_d2uiz>
 800110a:	4603      	mov	r3, r0
 800110c:	6363      	str	r3, [r4, #52]	@ 0x34
	break;
 800110e:	e041      	b.n	8001194 <PassiveBuzz_ON+0xfc>

	case TIM_CHANNEL_2 :
		htim_X->Instance->CCR2 =  0.5 * (htim_X->Instance->ARR);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff f9fc 	bl	8000514 <__aeabi_ui2d>
 800111c:	f04f 0200 	mov.w	r2, #0
 8001120:	4b1e      	ldr	r3, [pc, #120]	@ (800119c <PassiveBuzz_ON+0x104>)
 8001122:	f7ff fa71 	bl	8000608 <__aeabi_dmul>
 8001126:	4602      	mov	r2, r0
 8001128:	460b      	mov	r3, r1
 800112a:	4610      	mov	r0, r2
 800112c:	4619      	mov	r1, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681c      	ldr	r4, [r3, #0]
 8001132:	f7ff fd41 	bl	8000bb8 <__aeabi_d2uiz>
 8001136:	4603      	mov	r3, r0
 8001138:	63a3      	str	r3, [r4, #56]	@ 0x38
	break;
 800113a:	e02b      	b.n	8001194 <PassiveBuzz_ON+0xfc>

	case TIM_CHANNEL_3 :
		htim_X->Instance->CCR3 =  0.5 * (htim_X->Instance->ARR);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff f9e6 	bl	8000514 <__aeabi_ui2d>
 8001148:	f04f 0200 	mov.w	r2, #0
 800114c:	4b13      	ldr	r3, [pc, #76]	@ (800119c <PassiveBuzz_ON+0x104>)
 800114e:	f7ff fa5b 	bl	8000608 <__aeabi_dmul>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	4610      	mov	r0, r2
 8001158:	4619      	mov	r1, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681c      	ldr	r4, [r3, #0]
 800115e:	f7ff fd2b 	bl	8000bb8 <__aeabi_d2uiz>
 8001162:	4603      	mov	r3, r0
 8001164:	63e3      	str	r3, [r4, #60]	@ 0x3c
	break;
 8001166:	e015      	b.n	8001194 <PassiveBuzz_ON+0xfc>

	case TIM_CHANNEL_4 :
		htim_X->Instance->CCR4 =  0.5 * (htim_X->Instance->ARR);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff f9d0 	bl	8000514 <__aeabi_ui2d>
 8001174:	f04f 0200 	mov.w	r2, #0
 8001178:	4b08      	ldr	r3, [pc, #32]	@ (800119c <PassiveBuzz_ON+0x104>)
 800117a:	f7ff fa45 	bl	8000608 <__aeabi_dmul>
 800117e:	4602      	mov	r2, r0
 8001180:	460b      	mov	r3, r1
 8001182:	4610      	mov	r0, r2
 8001184:	4619      	mov	r1, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681c      	ldr	r4, [r3, #0]
 800118a:	f7ff fd15 	bl	8000bb8 <__aeabi_d2uiz>
 800118e:	4603      	mov	r3, r0
 8001190:	6423      	str	r3, [r4, #64]	@ 0x40
	break;
 8001192:	bf00      	nop
	}


}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	bd90      	pop	{r4, r7, pc}
 800119c:	3fe00000 	.word	0x3fe00000

080011a0 <PassiveBuzz_OFF>:
 * @brief  : Buzzer is deactivated when the function is called (DutyCycle is zero)
 * @param  : htim_X        : it's set by &htimX. X is the number of timers
 * @param  : PWM_Channel_X :  it's set by TIM_CHANNEL_X . X is the number of timer's channels
 * @retval : None
 */
void PassiveBuzz_OFF(TIM_HandleTypeDef *htim_X, uint32_t PWM_Channel_X){
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
	switch (PWM_Channel_X){
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	2b0c      	cmp	r3, #12
 80011ae:	d831      	bhi.n	8001214 <PassiveBuzz_OFF+0x74>
 80011b0:	a201      	add	r2, pc, #4	@ (adr r2, 80011b8 <PassiveBuzz_OFF+0x18>)
 80011b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b6:	bf00      	nop
 80011b8:	080011ed 	.word	0x080011ed
 80011bc:	08001215 	.word	0x08001215
 80011c0:	08001215 	.word	0x08001215
 80011c4:	08001215 	.word	0x08001215
 80011c8:	080011f7 	.word	0x080011f7
 80011cc:	08001215 	.word	0x08001215
 80011d0:	08001215 	.word	0x08001215
 80011d4:	08001215 	.word	0x08001215
 80011d8:	08001201 	.word	0x08001201
 80011dc:	08001215 	.word	0x08001215
 80011e0:	08001215 	.word	0x08001215
 80011e4:	08001215 	.word	0x08001215
 80011e8:	0800120b 	.word	0x0800120b

	case TIM_CHANNEL_1 :
		htim_X->Instance->CCR1 = 0;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2200      	movs	r2, #0
 80011f2:	635a      	str	r2, [r3, #52]	@ 0x34
	break;
 80011f4:	e00e      	b.n	8001214 <PassiveBuzz_OFF+0x74>

	case TIM_CHANNEL_2 :
		htim_X->Instance->CCR2 = 0;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2200      	movs	r2, #0
 80011fc:	639a      	str	r2, [r3, #56]	@ 0x38
	break;
 80011fe:	e009      	b.n	8001214 <PassiveBuzz_OFF+0x74>

	case TIM_CHANNEL_3 :
		htim_X->Instance->CCR3 = 0;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2200      	movs	r2, #0
 8001206:	63da      	str	r2, [r3, #60]	@ 0x3c
	break;
 8001208:	e004      	b.n	8001214 <PassiveBuzz_OFF+0x74>

	case TIM_CHANNEL_4 :
		htim_X->Instance->CCR4 = 0;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2200      	movs	r2, #0
 8001210:	641a      	str	r2, [r3, #64]	@ 0x40
	break;
 8001212:	bf00      	nop
	}
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <PassiveBuzz_Init>:
 * @param  : htim_X        : it's set by &htimX. X is the number of timers
 * @param  : PWM_Channel_X :  it's set by TIM_CHANNEL_X . X is the number of timer's channels
 * @param  : Buzzer_Frequency : it's necessary to calculate PSC value, it is recommended to look at product datasheet
 * @retval : None
 */
void PassiveBuzz_Init(TIM_HandleTypeDef *htim_X, uint32_t PWM_Channel_X){
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]

	switch (PWM_Channel_X){
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	2b0c      	cmp	r3, #12
 800122e:	d831      	bhi.n	8001294 <PassiveBuzz_Init+0x74>
 8001230:	a201      	add	r2, pc, #4	@ (adr r2, 8001238 <PassiveBuzz_Init+0x18>)
 8001232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001236:	bf00      	nop
 8001238:	0800126d 	.word	0x0800126d
 800123c:	08001295 	.word	0x08001295
 8001240:	08001295 	.word	0x08001295
 8001244:	08001295 	.word	0x08001295
 8001248:	08001277 	.word	0x08001277
 800124c:	08001295 	.word	0x08001295
 8001250:	08001295 	.word	0x08001295
 8001254:	08001295 	.word	0x08001295
 8001258:	08001281 	.word	0x08001281
 800125c:	08001295 	.word	0x08001295
 8001260:	08001295 	.word	0x08001295
 8001264:	08001295 	.word	0x08001295
 8001268:	0800128b 	.word	0x0800128b
	case TIM_CHANNEL_1 :
		   htim_X->Instance->CCR1 = 0;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2200      	movs	r2, #0
 8001272:	635a      	str	r2, [r3, #52]	@ 0x34
	break;
 8001274:	e00e      	b.n	8001294 <PassiveBuzz_Init+0x74>

	case TIM_CHANNEL_2 :
		   htim_X->Instance->CCR2 = 0;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2200      	movs	r2, #0
 800127c:	639a      	str	r2, [r3, #56]	@ 0x38
	break;
 800127e:	e009      	b.n	8001294 <PassiveBuzz_Init+0x74>

	case TIM_CHANNEL_3 :
		   htim_X->Instance->CCR3 = 0;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2200      	movs	r2, #0
 8001286:	63da      	str	r2, [r3, #60]	@ 0x3c
	break;
 8001288:	e004      	b.n	8001294 <PassiveBuzz_Init+0x74>

	case TIM_CHANNEL_4 :
		   htim_X->Instance->CCR4 = 0;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2200      	movs	r2, #0
 8001290:	641a      	str	r2, [r3, #64]	@ 0x40
	break;
 8001292:	bf00      	nop
	}

	HAL_TIM_PWM_Start(htim_X, PWM_Channel_X);
 8001294:	6839      	ldr	r1, [r7, #0]
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f007 fd20 	bl	8008cdc <HAL_TIM_PWM_Start>

	PassiveBuzz_ON(htim_X, PWM_Channel_X);
 800129c:	6839      	ldr	r1, [r7, #0]
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f7ff fefa 	bl	8001098 <PassiveBuzz_ON>
	HAL_Delay(1000);
 80012a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012a8:	f003 f8d0 	bl	800444c <HAL_Delay>
	PassiveBuzz_OFF(htim_X, PWM_Channel_X);
 80012ac:	6839      	ldr	r1, [r7, #0]
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f7ff ff76 	bl	80011a0 <PassiveBuzz_OFF>
}
 80012b4:	bf00      	nop
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <SubSys_ColorFilterMechanism_TurnTo>:
#include "SubSys_ColorFilterControl_Driver.h"


void SubSys_ColorFilterMechanism_TurnTo(SubSys_ColorFilter_MagazineColor Color){
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	71fb      	strb	r3, [r7, #7]

	switch(Color)
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	2b03      	cmp	r3, #3
 80012ca:	d81f      	bhi.n	800130c <SubSys_ColorFilterMechanism_TurnTo+0x50>
 80012cc:	a201      	add	r2, pc, #4	@ (adr r2, 80012d4 <SubSys_ColorFilterMechanism_TurnTo+0x18>)
 80012ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d2:	bf00      	nop
 80012d4:	080012e5 	.word	0x080012e5
 80012d8:	080012ef 	.word	0x080012ef
 80012dc:	080012f9 	.word	0x080012f9
 80012e0:	08001303 	.word	0x08001303
	{

		case Filter_None :
			SubSys_Actuator_Servo_MoveTo(&dev_Servo_ColorFilter, 0);
 80012e4:	2100      	movs	r1, #0
 80012e6:	480b      	ldr	r0, [pc, #44]	@ (8001314 <SubSys_ColorFilterMechanism_TurnTo+0x58>)
 80012e8:	f7ff fe9a 	bl	8001020 <SubSys_Actuator_Servo_MoveTo>
			break;
 80012ec:	e00e      	b.n	800130c <SubSys_ColorFilterMechanism_TurnTo+0x50>

		case filter_Red :
			SubSys_Actuator_Servo_MoveTo(&dev_Servo_ColorFilter, 60);
 80012ee:	213c      	movs	r1, #60	@ 0x3c
 80012f0:	4808      	ldr	r0, [pc, #32]	@ (8001314 <SubSys_ColorFilterMechanism_TurnTo+0x58>)
 80012f2:	f7ff fe95 	bl	8001020 <SubSys_Actuator_Servo_MoveTo>
			break;
 80012f6:	e009      	b.n	800130c <SubSys_ColorFilterMechanism_TurnTo+0x50>

		case filter_Green :
			SubSys_Actuator_Servo_MoveTo(&dev_Servo_ColorFilter, 120);
 80012f8:	2178      	movs	r1, #120	@ 0x78
 80012fa:	4806      	ldr	r0, [pc, #24]	@ (8001314 <SubSys_ColorFilterMechanism_TurnTo+0x58>)
 80012fc:	f7ff fe90 	bl	8001020 <SubSys_Actuator_Servo_MoveTo>
			break;
 8001300:	e004      	b.n	800130c <SubSys_ColorFilterMechanism_TurnTo+0x50>

		case filter_Blue :
			SubSys_Actuator_Servo_MoveTo(&dev_Servo_ColorFilter, 180);
 8001302:	21b4      	movs	r1, #180	@ 0xb4
 8001304:	4803      	ldr	r0, [pc, #12]	@ (8001314 <SubSys_ColorFilterMechanism_TurnTo+0x58>)
 8001306:	f7ff fe8b 	bl	8001020 <SubSys_Actuator_Servo_MoveTo>
			break;
 800130a:	bf00      	nop

	}

}
 800130c:	bf00      	nop
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20002c60 	.word	0x20002c60

08001318 <SubSys_SatelliteMission_Continue>:

#include "SubSys_Payload_FlightStatus.h"


void SubSys_SatelliteMission_Continue(){
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0


	SubSys_Payload_MissionRetryLoop();
 800131c:	f000 f8a4 	bl	8001468 <SubSys_Payload_MissionRetryLoop>

	/*! Model Satellite is on the ground*/
	if( ((-2 <= MS5611_VertSpeed) && (MS5611_VertSpeed <= 4)) && (SatelliteStatus == ReadyForLaunch) )
 8001320:	4b4a      	ldr	r3, [pc, #296]	@ (800144c <SubSys_SatelliteMission_Continue+0x134>)
 8001322:	edd3 7a00 	vldr	s15, [r3]
 8001326:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800132a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800132e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001332:	db0f      	blt.n	8001354 <SubSys_SatelliteMission_Continue+0x3c>
 8001334:	4b45      	ldr	r3, [pc, #276]	@ (800144c <SubSys_SatelliteMission_Continue+0x134>)
 8001336:	edd3 7a00 	vldr	s15, [r3]
 800133a:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800133e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001346:	d805      	bhi.n	8001354 <SubSys_SatelliteMission_Continue+0x3c>
 8001348:	4b41      	ldr	r3, [pc, #260]	@ (8001450 <SubSys_SatelliteMission_Continue+0x138>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d101      	bne.n	8001354 <SubSys_SatelliteMission_Continue+0x3c>
	{
		__NOP();
 8001350:	bf00      	nop
					PassiveBuzz_ON(&htim3, TIM_CHANNEL_1);		/*! The payload of the satellite has made contact with the ground */
				}

	     }

}
 8001352:	e078      	b.n	8001446 <SubSys_SatelliteMission_Continue+0x12e>
		SatelliteStatus = Ascent;
 8001354:	4b3e      	ldr	r3, [pc, #248]	@ (8001450 <SubSys_SatelliteMission_Continue+0x138>)
 8001356:	2201      	movs	r2, #1
 8001358:	701a      	strb	r2, [r3, #0]
				if( ((0 <= MS5611_VertSpeed) && (MS5611_VertSpeed <= 3))  && (SatelliteStatus == Ascent) )	//TODO: Euler angles will be added
 800135a:	4b3c      	ldr	r3, [pc, #240]	@ (800144c <SubSys_SatelliteMission_Continue+0x134>)
 800135c:	edd3 7a00 	vldr	s15, [r3]
 8001360:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001368:	db10      	blt.n	800138c <SubSys_SatelliteMission_Continue+0x74>
 800136a:	4b38      	ldr	r3, [pc, #224]	@ (800144c <SubSys_SatelliteMission_Continue+0x134>)
 800136c:	edd3 7a00 	vldr	s15, [r3]
 8001370:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8001374:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800137c:	d806      	bhi.n	800138c <SubSys_SatelliteMission_Continue+0x74>
 800137e:	4b34      	ldr	r3, [pc, #208]	@ (8001450 <SubSys_SatelliteMission_Continue+0x138>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d102      	bne.n	800138c <SubSys_SatelliteMission_Continue+0x74>
					SatelliteStatus = ModelSatelliteDescent;
 8001386:	4b32      	ldr	r3, [pc, #200]	@ (8001450 <SubSys_SatelliteMission_Continue+0x138>)
 8001388:	2202      	movs	r2, #2
 800138a:	701a      	strb	r2, [r3, #0]
				if( ((-14 <= MS5611_VertSpeed) && (MS5611_VertSpeed <= -12)) && (SatelliteStatus == ModelSatelliteDescent) )
 800138c:	4b2f      	ldr	r3, [pc, #188]	@ (800144c <SubSys_SatelliteMission_Continue+0x134>)
 800138e:	edd3 7a00 	vldr	s15, [r3]
 8001392:	eeba 7a0c 	vmov.f32	s14, #172	@ 0xc1600000 -14.0
 8001396:	eef4 7ac7 	vcmpe.f32	s15, s14
 800139a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800139e:	db13      	blt.n	80013c8 <SubSys_SatelliteMission_Continue+0xb0>
 80013a0:	4b2a      	ldr	r3, [pc, #168]	@ (800144c <SubSys_SatelliteMission_Continue+0x134>)
 80013a2:	edd3 7a00 	vldr	s15, [r3]
 80013a6:	eeba 7a08 	vmov.f32	s14, #168	@ 0xc1400000 -12.0
 80013aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b2:	d809      	bhi.n	80013c8 <SubSys_SatelliteMission_Continue+0xb0>
 80013b4:	4b26      	ldr	r3, [pc, #152]	@ (8001450 <SubSys_SatelliteMission_Continue+0x138>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d105      	bne.n	80013c8 <SubSys_SatelliteMission_Continue+0xb0>
					SatelliteStatus = Separation;
 80013bc:	4b24      	ldr	r3, [pc, #144]	@ (8001450 <SubSys_SatelliteMission_Continue+0x138>)
 80013be:	2203      	movs	r2, #3
 80013c0:	701a      	strb	r2, [r3, #0]
					AutonomoSeparationStatus = Permission_OK;
 80013c2:	4b24      	ldr	r3, [pc, #144]	@ (8001454 <SubSys_SatelliteMission_Continue+0x13c>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	701a      	strb	r2, [r3, #0]
				if( ((390 <= MS5611_Altitude) && (MS5611_Altitude <= 410)) && (AutonomoSeparationStatus = Permission_OK) && (SatelliteStatus == Separation) )
 80013c8:	4b23      	ldr	r3, [pc, #140]	@ (8001458 <SubSys_SatelliteMission_Continue+0x140>)
 80013ca:	edd3 7a00 	vldr	s15, [r3]
 80013ce:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 800145c <SubSys_SatelliteMission_Continue+0x144>
 80013d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013da:	db15      	blt.n	8001408 <SubSys_SatelliteMission_Continue+0xf0>
 80013dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001458 <SubSys_SatelliteMission_Continue+0x140>)
 80013de:	edd3 7a00 	vldr	s15, [r3]
 80013e2:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8001460 <SubSys_SatelliteMission_Continue+0x148>
 80013e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ee:	d80b      	bhi.n	8001408 <SubSys_SatelliteMission_Continue+0xf0>
 80013f0:	4b18      	ldr	r3, [pc, #96]	@ (8001454 <SubSys_SatelliteMission_Continue+0x13c>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	701a      	strb	r2, [r3, #0]
 80013f6:	4b16      	ldr	r3, [pc, #88]	@ (8001450 <SubSys_SatelliteMission_Continue+0x138>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	2b03      	cmp	r3, #3
 80013fc:	d104      	bne.n	8001408 <SubSys_SatelliteMission_Continue+0xf0>
					SatelliteStatus = PayloadDescent;
 80013fe:	4b14      	ldr	r3, [pc, #80]	@ (8001450 <SubSys_SatelliteMission_Continue+0x138>)
 8001400:	2204      	movs	r2, #4
 8001402:	701a      	strb	r2, [r3, #0]
					SubSys_SeparationMechanism_UnLock_PayloadFromCarrier();
 8001404:	f001 fa1a 	bl	800283c <SubSys_SeparationMechanism_UnLock_PayloadFromCarrier>
				if( ((0 <= MS5611_Altitude) && (MS5611_Altitude <= 2)) && (SatelliteStatus == PayloadDescent) )
 8001408:	4b13      	ldr	r3, [pc, #76]	@ (8001458 <SubSys_SatelliteMission_Continue+0x140>)
 800140a:	edd3 7a00 	vldr	s15, [r3]
 800140e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001416:	da00      	bge.n	800141a <SubSys_SatelliteMission_Continue+0x102>
}
 8001418:	e015      	b.n	8001446 <SubSys_SatelliteMission_Continue+0x12e>
				if( ((0 <= MS5611_Altitude) && (MS5611_Altitude <= 2)) && (SatelliteStatus == PayloadDescent) )
 800141a:	4b0f      	ldr	r3, [pc, #60]	@ (8001458 <SubSys_SatelliteMission_Continue+0x140>)
 800141c:	edd3 7a00 	vldr	s15, [r3]
 8001420:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001424:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800142c:	d900      	bls.n	8001430 <SubSys_SatelliteMission_Continue+0x118>
}
 800142e:	e00a      	b.n	8001446 <SubSys_SatelliteMission_Continue+0x12e>
				if( ((0 <= MS5611_Altitude) && (MS5611_Altitude <= 2)) && (SatelliteStatus == PayloadDescent) )
 8001430:	4b07      	ldr	r3, [pc, #28]	@ (8001450 <SubSys_SatelliteMission_Continue+0x138>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b04      	cmp	r3, #4
 8001436:	d106      	bne.n	8001446 <SubSys_SatelliteMission_Continue+0x12e>
					SatelliteStatus = Recovery;
 8001438:	4b05      	ldr	r3, [pc, #20]	@ (8001450 <SubSys_SatelliteMission_Continue+0x138>)
 800143a:	2205      	movs	r2, #5
 800143c:	701a      	strb	r2, [r3, #0]
					PassiveBuzz_ON(&htim3, TIM_CHANNEL_1);		/*! The payload of the satellite has made contact with the ground */
 800143e:	2100      	movs	r1, #0
 8001440:	4808      	ldr	r0, [pc, #32]	@ (8001464 <SubSys_SatelliteMission_Continue+0x14c>)
 8001442:	f7ff fe29 	bl	8001098 <PassiveBuzz_ON>
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	200029ec 	.word	0x200029ec
 8001450:	20002c68 	.word	0x20002c68
 8001454:	20002c6a 	.word	0x20002c6a
 8001458:	200029e8 	.word	0x200029e8
 800145c:	43c30000 	.word	0x43c30000
 8001460:	43cd0000 	.word	0x43cd0000
 8001464:	200028a0 	.word	0x200028a0

08001468 <SubSys_Payload_MissionRetryLoop>:

#include "SubSys_Payload_PeriodicReattempt.h"

void SubSys_Payload_MissionRetryLoop(){
 8001468:	b598      	push	{r3, r4, r7, lr}
 800146a:	af00      	add	r7, sp, #0

	/*! At the beginning of each loop, the system retrieves the last recorded milliseconds */
	SystemTick = HAL_GetTick();
 800146c:	f002 ffe2 	bl	8004434 <HAL_GetTick>
 8001470:	4603      	mov	r3, r0
 8001472:	4a0f      	ldr	r2, [pc, #60]	@ (80014b0 <SubSys_Payload_MissionRetryLoop+0x48>)
 8001474:	6013      	str	r3, [r2, #0]
	* (P) = Pressure
	* (G) = G force
	* (V) = Vertical Speed
	* (H) = Vertical Height
	**/
	MS5611_Read_ActVal(&MS5611);
 8001476:	480f      	ldr	r0, [pc, #60]	@ (80014b4 <SubSys_Payload_MissionRetryLoop+0x4c>)
 8001478:	f001 f8ce 	bl	8002618 <MS5611_Read_ActVal>
	//SD_FillVariables();
	/*! The recorded variables are written to the SD card */
	//SD_Write(SdDatasBuf, "SAT_PAY/STM32.TXT");

	/*! Transfer all necessary datas from Carrier to Payload of Satellite*/
	SubSys_WirelessCom_Telemetry_Transfer_From_To(Sat_Payload, GroundStation, &dev_WirelessComApp);
 800147c:	4a0e      	ldr	r2, [pc, #56]	@ (80014b8 <SubSys_Payload_MissionRetryLoop+0x50>)
 800147e:	2103      	movs	r1, #3
 8001480:	2002      	movs	r0, #2
 8001482:	f001 fa61 	bl	8002948 <SubSys_WirelessCom_Telemetry_Transfer_From_To>

	NumberOfTelePacket++;
 8001486:	4b0d      	ldr	r3, [pc, #52]	@ (80014bc <SubSys_Payload_MissionRetryLoop+0x54>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	3301      	adds	r3, #1
 800148c:	4a0b      	ldr	r2, [pc, #44]	@ (80014bc <SubSys_Payload_MissionRetryLoop+0x54>)
 800148e:	6013      	str	r3, [r2, #0]

	/*! The system time is retrieved again and the loop waits until the elapsed time reaches 1000 milliseconds*/
	HAL_Delay(abs(1000 - (HAL_GetTick() - SystemTick)));
 8001490:	4b07      	ldr	r3, [pc, #28]	@ (80014b0 <SubSys_Payload_MissionRetryLoop+0x48>)
 8001492:	681c      	ldr	r4, [r3, #0]
 8001494:	f002 ffce 	bl	8004434 <HAL_GetTick>
 8001498:	4603      	mov	r3, r0
 800149a:	1ae3      	subs	r3, r4, r3
 800149c:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	bfb8      	it	lt
 80014a4:	425b      	neglt	r3, r3
 80014a6:	4618      	mov	r0, r3
 80014a8:	f002 ffd0 	bl	800444c <HAL_Delay>

}
 80014ac:	bf00      	nop
 80014ae:	bd98      	pop	{r3, r4, r7, pc}
 80014b0:	20002c6c 	.word	0x20002c6c
 80014b4:	20002978 	.word	0x20002978
 80014b8:	20002a34 	.word	0x20002a34
 80014bc:	20002c70 	.word	0x20002c70

080014c0 <SD_Mount>:

}


FRESULT SD_Mount (const TCHAR* SD_path, BYTE Mount_Op)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	460b      	mov	r3, r1
 80014ca:	70fb      	strb	r3, [r7, #3]

	SD_result = f_mount(&FATFS_Ob, SD_path, Mount_Op);
 80014cc:	78fb      	ldrb	r3, [r7, #3]
 80014ce:	461a      	mov	r2, r3
 80014d0:	6879      	ldr	r1, [r7, #4]
 80014d2:	4808      	ldr	r0, [pc, #32]	@ (80014f4 <SD_Mount+0x34>)
 80014d4:	f00b fe78 	bl	800d1c8 <f_mount>
 80014d8:	4603      	mov	r3, r0
 80014da:	461a      	mov	r2, r3
 80014dc:	4b06      	ldr	r3, [pc, #24]	@ (80014f8 <SD_Mount+0x38>)
 80014de:	701a      	strb	r2, [r3, #0]

	if(SD_result != FR_OK){
 80014e0:	4b05      	ldr	r3, [pc, #20]	@ (80014f8 <SD_Mount+0x38>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d101      	bne.n	80014ec <SD_Mount+0x2c>
		 */
		//while(1);
	}
	else{

		return FR_OK;
 80014e8:	2300      	movs	r3, #0
 80014ea:	e7ff      	b.n	80014ec <SD_Mount+0x2c>

	}
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	2000020c 	.word	0x2000020c
 80014f8:	20002270 	.word	0x20002270

080014fc <SD_Create_Dir_File>:


FRESULT SD_Create_Dir_File(const TCHAR* SD_Dir,const TCHAR* SD_FileName,char* SD_Buffer){
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]

	SD_result = f_mkdir(SD_Dir);
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	f00c faa7 	bl	800da5c <f_mkdir>
 800150e:	4603      	mov	r3, r0
 8001510:	461a      	mov	r2, r3
 8001512:	4b1c      	ldr	r3, [pc, #112]	@ (8001584 <SD_Create_Dir_File+0x88>)
 8001514:	701a      	strb	r2, [r3, #0]

	if((SD_result != FR_OK)&&(SD_result != FR_EXIST)){
 8001516:	4b1b      	ldr	r3, [pc, #108]	@ (8001584 <SD_Create_Dir_File+0x88>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d005      	beq.n	800152a <SD_Create_Dir_File+0x2e>
 800151e:	4b19      	ldr	r3, [pc, #100]	@ (8001584 <SD_Create_Dir_File+0x88>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b08      	cmp	r3, #8
 8001524:	d001      	beq.n	800152a <SD_Create_Dir_File+0x2e>
		/**
		 * Buzzer will be activated like biiip biip bip
		 */
		while(1);
 8001526:	bf00      	nop
 8001528:	e7fd      	b.n	8001526 <SD_Create_Dir_File+0x2a>
	}
	else{

		SD_result = f_open(&FilePage, SD_FileName, FA_CREATE_ALWAYS | FA_WRITE);
 800152a:	220a      	movs	r2, #10
 800152c:	68b9      	ldr	r1, [r7, #8]
 800152e:	4816      	ldr	r0, [pc, #88]	@ (8001588 <SD_Create_Dir_File+0x8c>)
 8001530:	f00b fe90 	bl	800d254 <f_open>
 8001534:	4603      	mov	r3, r0
 8001536:	461a      	mov	r2, r3
 8001538:	4b12      	ldr	r3, [pc, #72]	@ (8001584 <SD_Create_Dir_File+0x88>)
 800153a:	701a      	strb	r2, [r3, #0]
		SD_result = f_close(&FilePage);
 800153c:	4812      	ldr	r0, [pc, #72]	@ (8001588 <SD_Create_Dir_File+0x8c>)
 800153e:	f00c fa63 	bl	800da08 <f_close>
 8001542:	4603      	mov	r3, r0
 8001544:	461a      	mov	r2, r3
 8001546:	4b0f      	ldr	r3, [pc, #60]	@ (8001584 <SD_Create_Dir_File+0x88>)
 8001548:	701a      	strb	r2, [r3, #0]

		sprintf(SD_Buffer,"%s\n",DataTopFrame);
 800154a:	4b10      	ldr	r3, [pc, #64]	@ (800158c <SD_Create_Dir_File+0x90>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	461a      	mov	r2, r3
 8001550:	490f      	ldr	r1, [pc, #60]	@ (8001590 <SD_Create_Dir_File+0x94>)
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f00e f930 	bl	800f7b8 <siprintf>
		SD_Write(SD_Buffer,"SAT_PAY/STM32.TXT");
 8001558:	490e      	ldr	r1, [pc, #56]	@ (8001594 <SD_Create_Dir_File+0x98>)
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f000 f81c 	bl	8001598 <SD_Write>

		if(SD_result != FR_OK){
 8001560:	4b08      	ldr	r3, [pc, #32]	@ (8001584 <SD_Create_Dir_File+0x88>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <SD_Create_Dir_File+0x70>
				/**
				 * Send to ground station error message
			     */
				while(1);
 8001568:	bf00      	nop
 800156a:	e7fd      	b.n	8001568 <SD_Create_Dir_File+0x6c>
			}
		SD_result = f_close(&FilePage); //invalid object hatası verdi
 800156c:	4806      	ldr	r0, [pc, #24]	@ (8001588 <SD_Create_Dir_File+0x8c>)
 800156e:	f00c fa4b 	bl	800da08 <f_close>
 8001572:	4603      	mov	r3, r0
 8001574:	461a      	mov	r2, r3
 8001576:	4b03      	ldr	r3, [pc, #12]	@ (8001584 <SD_Create_Dir_File+0x88>)
 8001578:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 800157a:	2300      	movs	r3, #0
	}

}
 800157c:	4618      	mov	r0, r3
 800157e:	3710      	adds	r7, #16
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20002270 	.word	0x20002270
 8001588:	20001240 	.word	0x20001240
 800158c:	20000000 	.word	0x20000000
 8001590:	08013d60 	.word	0x08013d60
 8001594:	08013d64 	.word	0x08013d64

08001598 <SD_Write>:


FRESULT SD_Write(char* SD_Buffer,const TCHAR* SD_FileName){
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]

	UINT written;

	SD_result = f_open(&FilePage, SD_FileName, FA_OPEN_APPEND | FA_WRITE);
 80015a2:	2232      	movs	r2, #50	@ 0x32
 80015a4:	6839      	ldr	r1, [r7, #0]
 80015a6:	4810      	ldr	r0, [pc, #64]	@ (80015e8 <SD_Write+0x50>)
 80015a8:	f00b fe54 	bl	800d254 <f_open>
 80015ac:	4603      	mov	r3, r0
 80015ae:	461a      	mov	r2, r3
 80015b0:	4b0e      	ldr	r3, [pc, #56]	@ (80015ec <SD_Write+0x54>)
 80015b2:	701a      	strb	r2, [r3, #0]

	SD_result =  f_write(&FilePage,SD_Buffer,strlen(SD_Buffer),&written);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f7fe fe63 	bl	8000280 <strlen>
 80015ba:	4602      	mov	r2, r0
 80015bc:	f107 030c 	add.w	r3, r7, #12
 80015c0:	6879      	ldr	r1, [r7, #4]
 80015c2:	4809      	ldr	r0, [pc, #36]	@ (80015e8 <SD_Write+0x50>)
 80015c4:	f00c f80e 	bl	800d5e4 <f_write>
 80015c8:	4603      	mov	r3, r0
 80015ca:	461a      	mov	r2, r3
 80015cc:	4b07      	ldr	r3, [pc, #28]	@ (80015ec <SD_Write+0x54>)
 80015ce:	701a      	strb	r2, [r3, #0]

	SD_result = f_close(&FilePage);
 80015d0:	4805      	ldr	r0, [pc, #20]	@ (80015e8 <SD_Write+0x50>)
 80015d2:	f00c fa19 	bl	800da08 <f_close>
 80015d6:	4603      	mov	r3, r0
 80015d8:	461a      	mov	r2, r3
 80015da:	4b04      	ldr	r3, [pc, #16]	@ (80015ec <SD_Write+0x54>)
 80015dc:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80015de:	2300      	movs	r3, #0
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3710      	adds	r7, #16
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20001240 	.word	0x20001240
 80015ec:	20002270 	.word	0x20002270

080015f0 <MeasBattery_Init>:
float maxVoltage;
float CriticalVoltageLimit;
float ConstantOfVoltage;
float MinLimitVoltage;

void  MeasBattery_Init(int NumSerialBat){
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]

	maxVoltage = NumSerialBat * 4.2 ;
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f7fe ff9b 	bl	8000534 <__aeabi_i2d>
 80015fe:	a322      	add	r3, pc, #136	@ (adr r3, 8001688 <MeasBattery_Init+0x98>)
 8001600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001604:	f7ff f800 	bl	8000608 <__aeabi_dmul>
 8001608:	4602      	mov	r2, r0
 800160a:	460b      	mov	r3, r1
 800160c:	4610      	mov	r0, r2
 800160e:	4619      	mov	r1, r3
 8001610:	f7ff faf2 	bl	8000bf8 <__aeabi_d2f>
 8001614:	4603      	mov	r3, r0
 8001616:	4a18      	ldr	r2, [pc, #96]	@ (8001678 <MeasBattery_Init+0x88>)
 8001618:	6013      	str	r3, [r2, #0]

	ConstantOfVoltage = maxVoltage / ConstantOfReferanceVoltage;
 800161a:	4b17      	ldr	r3, [pc, #92]	@ (8001678 <MeasBattery_Init+0x88>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4618      	mov	r0, r3
 8001620:	f7fe ff9a 	bl	8000558 <__aeabi_f2d>
 8001624:	a312      	add	r3, pc, #72	@ (adr r3, 8001670 <MeasBattery_Init+0x80>)
 8001626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162a:	f7ff f917 	bl	800085c <__aeabi_ddiv>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	4610      	mov	r0, r2
 8001634:	4619      	mov	r1, r3
 8001636:	f7ff fadf 	bl	8000bf8 <__aeabi_d2f>
 800163a:	4603      	mov	r3, r0
 800163c:	4a0f      	ldr	r2, [pc, #60]	@ (800167c <MeasBattery_Init+0x8c>)
 800163e:	6013      	str	r3, [r2, #0]

	MinLimitVoltage = 3.5 * NumSerialBat;
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f7fe ff77 	bl	8000534 <__aeabi_i2d>
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	4b0d      	ldr	r3, [pc, #52]	@ (8001680 <MeasBattery_Init+0x90>)
 800164c:	f7fe ffdc 	bl	8000608 <__aeabi_dmul>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	4610      	mov	r0, r2
 8001656:	4619      	mov	r1, r3
 8001658:	f7ff face 	bl	8000bf8 <__aeabi_d2f>
 800165c:	4603      	mov	r3, r0
 800165e:	4a09      	ldr	r2, [pc, #36]	@ (8001684 <MeasBattery_Init+0x94>)
 8001660:	6013      	str	r3, [r2, #0]

}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	f3af 8000 	nop.w
 8001670:	66666666 	.word	0x66666666
 8001674:	400a6666 	.word	0x400a6666
 8001678:	20002454 	.word	0x20002454
 800167c:	20002458 	.word	0x20002458
 8001680:	400c0000 	.word	0x400c0000
 8001684:	2000245c 	.word	0x2000245c
 8001688:	cccccccd 	.word	0xcccccccd
 800168c:	4010cccc 	.word	0x4010cccc

08001690 <GPS_Init>:

extern float GPS_Altitude;				/*! Vertical distance info of satellite beetween */
extern float GPS_Longitude;				/*! Location info of satellite on the earth 	 */
extern float GPS_Latitude;				/*! Location info of satellite on the earth 	 */
void GPS_Init()
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 8001694:	2201      	movs	r2, #1
 8001696:	4903      	ldr	r1, [pc, #12]	@ (80016a4 <GPS_Init+0x14>)
 8001698:	4803      	ldr	r0, [pc, #12]	@ (80016a8 <GPS_Init+0x18>)
 800169a:	f008 f86a 	bl	8009772 <HAL_UART_Receive_IT>
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20002460 	.word	0x20002460
 80016a8:	200028e8 	.word	0x200028e8

080016ac <GPS_UART_CallBack>:


void GPS_UART_CallBack(){
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
	if (rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
 80016b0:	4b16      	ldr	r3, [pc, #88]	@ (800170c <GPS_UART_CallBack+0x60>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b0a      	cmp	r3, #10
 80016b6:	d010      	beq.n	80016da <GPS_UART_CallBack+0x2e>
 80016b8:	4b15      	ldr	r3, [pc, #84]	@ (8001710 <GPS_UART_CallBack+0x64>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	b25b      	sxtb	r3, r3
 80016be:	2b00      	cmp	r3, #0
 80016c0:	db0b      	blt.n	80016da <GPS_UART_CallBack+0x2e>
		rx_buffer[rx_index++] = rx_data;
 80016c2:	4b13      	ldr	r3, [pc, #76]	@ (8001710 <GPS_UART_CallBack+0x64>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	1c5a      	adds	r2, r3, #1
 80016c8:	b2d1      	uxtb	r1, r2
 80016ca:	4a11      	ldr	r2, [pc, #68]	@ (8001710 <GPS_UART_CallBack+0x64>)
 80016cc:	7011      	strb	r1, [r2, #0]
 80016ce:	461a      	mov	r2, r3
 80016d0:	4b0e      	ldr	r3, [pc, #56]	@ (800170c <GPS_UART_CallBack+0x60>)
 80016d2:	7819      	ldrb	r1, [r3, #0]
 80016d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001714 <GPS_UART_CallBack+0x68>)
 80016d6:	5499      	strb	r1, [r3, r2]
 80016d8:	e010      	b.n	80016fc <GPS_UART_CallBack+0x50>
	} else {

		if(GPS_validate((char*) rx_buffer))
 80016da:	480e      	ldr	r0, [pc, #56]	@ (8001714 <GPS_UART_CallBack+0x68>)
 80016dc:	f000 f81e 	bl	800171c <GPS_validate>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d002      	beq.n	80016ec <GPS_UART_CallBack+0x40>
			GPS_parse((char*) rx_buffer);
 80016e6:	480b      	ldr	r0, [pc, #44]	@ (8001714 <GPS_UART_CallBack+0x68>)
 80016e8:	f000 f87a 	bl	80017e0 <GPS_parse>
		rx_index = 0;
 80016ec:	4b08      	ldr	r3, [pc, #32]	@ (8001710 <GPS_UART_CallBack+0x64>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	701a      	strb	r2, [r3, #0]
		memset(rx_buffer, 0, sizeof(rx_buffer));
 80016f2:	2280      	movs	r2, #128	@ 0x80
 80016f4:	2100      	movs	r1, #0
 80016f6:	4807      	ldr	r0, [pc, #28]	@ (8001714 <GPS_UART_CallBack+0x68>)
 80016f8:	f00e f982 	bl	800fa00 <memset>
	}
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 80016fc:	2201      	movs	r2, #1
 80016fe:	4903      	ldr	r1, [pc, #12]	@ (800170c <GPS_UART_CallBack+0x60>)
 8001700:	4805      	ldr	r0, [pc, #20]	@ (8001718 <GPS_UART_CallBack+0x6c>)
 8001702:	f008 f836 	bl	8009772 <HAL_UART_Receive_IT>
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20002460 	.word	0x20002460
 8001710:	200024e4 	.word	0x200024e4
 8001714:	20002464 	.word	0x20002464
 8001718:	200028e8 	.word	0x200028e8

0800171c <GPS_validate>:


int GPS_validate(char *nmeastr){
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 8001728:	2300      	movs	r3, #0
 800172a:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	4413      	add	r3, r2
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	2b24      	cmp	r3, #36	@ 0x24
 8001736:	d103      	bne.n	8001740 <GPS_validate+0x24>
        i++;
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	3301      	adds	r3, #1
 800173c:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 800173e:	e00c      	b.n	800175a <GPS_validate+0x3e>
        return 0;
 8001740:	2300      	movs	r3, #0
 8001742:	e047      	b.n	80017d4 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	4413      	add	r3, r2
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	461a      	mov	r2, r3
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	4053      	eors	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
        i++;
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	3301      	adds	r3, #1
 8001758:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	4413      	add	r3, r2
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d008      	beq.n	8001778 <GPS_validate+0x5c>
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	4413      	add	r3, r2
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001770:	d002      	beq.n	8001778 <GPS_validate+0x5c>
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	2b4a      	cmp	r3, #74	@ 0x4a
 8001776:	dde5      	ble.n	8001744 <GPS_validate+0x28>
    }

    if(i >= 75){
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	2b4a      	cmp	r3, #74	@ 0x4a
 800177c:	dd01      	ble.n	8001782 <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 800177e:	2300      	movs	r3, #0
 8001780:	e028      	b.n	80017d4 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	4413      	add	r3, r2
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	2b2a      	cmp	r3, #42	@ 0x2a
 800178c:	d119      	bne.n	80017c2 <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	3301      	adds	r3, #1
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	4413      	add	r3, r2
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	3302      	adds	r3, #2
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	4413      	add	r3, r2
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 80017a6:	2300      	movs	r3, #0
 80017a8:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 80017aa:	f107 0308 	add.w	r3, r7, #8
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	490a      	ldr	r1, [pc, #40]	@ (80017dc <GPS_validate+0xc0>)
 80017b2:	4618      	mov	r0, r3
 80017b4:	f00e f800 	bl	800f7b8 <siprintf>
    return((checkcalcstr[0] == check[0])
 80017b8:	7a3a      	ldrb	r2, [r7, #8]
 80017ba:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 80017bc:	429a      	cmp	r2, r3
 80017be:	d108      	bne.n	80017d2 <GPS_validate+0xb6>
 80017c0:	e001      	b.n	80017c6 <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 80017c2:	2300      	movs	r3, #0
 80017c4:	e006      	b.n	80017d4 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 80017c6:	7a7a      	ldrb	r2, [r7, #9]
 80017c8:	7b7b      	ldrb	r3, [r7, #13]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d101      	bne.n	80017d2 <GPS_validate+0xb6>
 80017ce:	2301      	movs	r3, #1
 80017d0:	e000      	b.n	80017d4 <GPS_validate+0xb8>
 80017d2:	2300      	movs	r3, #0
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3718      	adds	r7, #24
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	08013d78 	.word	0x08013d78

080017e0 <GPS_parse>:

void GPS_parse(char *GPSstrParse){
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08a      	sub	sp, #40	@ 0x28
 80017e4:	af08      	add	r7, sp, #32
 80017e6:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GPGGA", 6)){
 80017e8:	2206      	movs	r2, #6
 80017ea:	4950      	ldr	r1, [pc, #320]	@ (800192c <GPS_parse+0x14c>)
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f00e f91c 	bl	800fa2a <strncmp>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d143      	bne.n	8001880 <GPS_parse+0xa0>
    	if (sscanf(GPSstrParse, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 80017f8:	4b4d      	ldr	r3, [pc, #308]	@ (8001930 <GPS_parse+0x150>)
 80017fa:	9307      	str	r3, [sp, #28]
 80017fc:	4b4d      	ldr	r3, [pc, #308]	@ (8001934 <GPS_parse+0x154>)
 80017fe:	9306      	str	r3, [sp, #24]
 8001800:	4b4d      	ldr	r3, [pc, #308]	@ (8001938 <GPS_parse+0x158>)
 8001802:	9305      	str	r3, [sp, #20]
 8001804:	4b4d      	ldr	r3, [pc, #308]	@ (800193c <GPS_parse+0x15c>)
 8001806:	9304      	str	r3, [sp, #16]
 8001808:	4b4d      	ldr	r3, [pc, #308]	@ (8001940 <GPS_parse+0x160>)
 800180a:	9303      	str	r3, [sp, #12]
 800180c:	4b4d      	ldr	r3, [pc, #308]	@ (8001944 <GPS_parse+0x164>)
 800180e:	9302      	str	r3, [sp, #8]
 8001810:	4b4d      	ldr	r3, [pc, #308]	@ (8001948 <GPS_parse+0x168>)
 8001812:	9301      	str	r3, [sp, #4]
 8001814:	4b4d      	ldr	r3, [pc, #308]	@ (800194c <GPS_parse+0x16c>)
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	4b4d      	ldr	r3, [pc, #308]	@ (8001950 <GPS_parse+0x170>)
 800181a:	4a4e      	ldr	r2, [pc, #312]	@ (8001954 <GPS_parse+0x174>)
 800181c:	494e      	ldr	r1, [pc, #312]	@ (8001958 <GPS_parse+0x178>)
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f00d ffea 	bl	800f7f8 <siscanf>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	dd7c      	ble.n	8001924 <GPS_parse+0x144>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 800182a:	4b4c      	ldr	r3, [pc, #304]	@ (800195c <GPS_parse+0x17c>)
 800182c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001830:	4b4a      	ldr	r3, [pc, #296]	@ (800195c <GPS_parse+0x17c>)
 8001832:	7e1b      	ldrb	r3, [r3, #24]
 8001834:	4618      	mov	r0, r3
 8001836:	eeb0 0a67 	vmov.f32	s0, s15
 800183a:	f000 f8b9 	bl	80019b0 <GPS_nmea_to_dec>
 800183e:	eef0 7a40 	vmov.f32	s15, s0
 8001842:	4b46      	ldr	r3, [pc, #280]	@ (800195c <GPS_parse+0x17c>)
 8001844:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8001848:	4b44      	ldr	r3, [pc, #272]	@ (800195c <GPS_parse+0x17c>)
 800184a:	edd3 7a03 	vldr	s15, [r3, #12]
 800184e:	4b43      	ldr	r3, [pc, #268]	@ (800195c <GPS_parse+0x17c>)
 8001850:	7e5b      	ldrb	r3, [r3, #25]
 8001852:	4618      	mov	r0, r3
 8001854:	eeb0 0a67 	vmov.f32	s0, s15
 8001858:	f000 f8aa 	bl	80019b0 <GPS_nmea_to_dec>
 800185c:	eef0 7a40 	vmov.f32	s15, s0
 8001860:	4b3e      	ldr	r3, [pc, #248]	@ (800195c <GPS_parse+0x17c>)
 8001862:	edc3 7a00 	vstr	s15, [r3]

    		GPS_Latitude = GPS.dec_latitude;
 8001866:	4b3d      	ldr	r3, [pc, #244]	@ (800195c <GPS_parse+0x17c>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	4a3d      	ldr	r2, [pc, #244]	@ (8001960 <GPS_parse+0x180>)
 800186c:	6013      	str	r3, [r2, #0]
    		GPS_Longitude = GPS.dec_longitude;
 800186e:	4b3b      	ldr	r3, [pc, #236]	@ (800195c <GPS_parse+0x17c>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a3c      	ldr	r2, [pc, #240]	@ (8001964 <GPS_parse+0x184>)
 8001874:	6013      	str	r3, [r2, #0]
			GPS_Altitude = GPS.msl_altitude;
 8001876:	4b39      	ldr	r3, [pc, #228]	@ (800195c <GPS_parse+0x17c>)
 8001878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800187a:	4a3b      	ldr	r2, [pc, #236]	@ (8001968 <GPS_parse+0x188>)
 800187c:	6013      	str	r3, [r2, #0]
    		return;
 800187e:	e051      	b.n	8001924 <GPS_parse+0x144>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GPRMC", 6)){
 8001880:	2206      	movs	r2, #6
 8001882:	493a      	ldr	r1, [pc, #232]	@ (800196c <GPS_parse+0x18c>)
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f00e f8d0 	bl	800fa2a <strncmp>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d114      	bne.n	80018ba <GPS_parse+0xda>
    	if(sscanf(GPSstrParse, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1)
 8001890:	4b37      	ldr	r3, [pc, #220]	@ (8001970 <GPS_parse+0x190>)
 8001892:	9305      	str	r3, [sp, #20]
 8001894:	4b37      	ldr	r3, [pc, #220]	@ (8001974 <GPS_parse+0x194>)
 8001896:	9304      	str	r3, [sp, #16]
 8001898:	4b37      	ldr	r3, [pc, #220]	@ (8001978 <GPS_parse+0x198>)
 800189a:	9303      	str	r3, [sp, #12]
 800189c:	4b29      	ldr	r3, [pc, #164]	@ (8001944 <GPS_parse+0x164>)
 800189e:	9302      	str	r3, [sp, #8]
 80018a0:	4b29      	ldr	r3, [pc, #164]	@ (8001948 <GPS_parse+0x168>)
 80018a2:	9301      	str	r3, [sp, #4]
 80018a4:	4b29      	ldr	r3, [pc, #164]	@ (800194c <GPS_parse+0x16c>)
 80018a6:	9300      	str	r3, [sp, #0]
 80018a8:	4b29      	ldr	r3, [pc, #164]	@ (8001950 <GPS_parse+0x170>)
 80018aa:	4a2a      	ldr	r2, [pc, #168]	@ (8001954 <GPS_parse+0x174>)
 80018ac:	4933      	ldr	r1, [pc, #204]	@ (800197c <GPS_parse+0x19c>)
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f00d ffa2 	bl	800f7f8 <siscanf>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	e034      	b.n	8001924 <GPS_parse+0x144>
    		return;

    }
    else if (!strncmp(GPSstrParse, "$GPGLL", 6)){
 80018ba:	2206      	movs	r2, #6
 80018bc:	4930      	ldr	r1, [pc, #192]	@ (8001980 <GPS_parse+0x1a0>)
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f00e f8b3 	bl	800fa2a <strncmp>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d110      	bne.n	80018ec <GPS_parse+0x10c>
        if(sscanf(GPSstrParse, "$GPGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1)
 80018ca:	4b2e      	ldr	r3, [pc, #184]	@ (8001984 <GPS_parse+0x1a4>)
 80018cc:	9303      	str	r3, [sp, #12]
 80018ce:	4b21      	ldr	r3, [pc, #132]	@ (8001954 <GPS_parse+0x174>)
 80018d0:	9302      	str	r3, [sp, #8]
 80018d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001944 <GPS_parse+0x164>)
 80018d4:	9301      	str	r3, [sp, #4]
 80018d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001948 <GPS_parse+0x168>)
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	4b1c      	ldr	r3, [pc, #112]	@ (800194c <GPS_parse+0x16c>)
 80018dc:	4a1c      	ldr	r2, [pc, #112]	@ (8001950 <GPS_parse+0x170>)
 80018de:	492a      	ldr	r1, [pc, #168]	@ (8001988 <GPS_parse+0x1a8>)
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f00d ff89 	bl	800f7f8 <siscanf>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	e01b      	b.n	8001924 <GPS_parse+0x144>
            return;
    }
    else if (!strncmp(GPSstrParse, "$GPVTG", 6)){
 80018ec:	2206      	movs	r2, #6
 80018ee:	4927      	ldr	r1, [pc, #156]	@ (800198c <GPS_parse+0x1ac>)
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f00e f89a 	bl	800fa2a <strncmp>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d113      	bne.n	8001924 <GPS_parse+0x144>
        if(sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 80018fc:	4b24      	ldr	r3, [pc, #144]	@ (8001990 <GPS_parse+0x1b0>)
 80018fe:	9305      	str	r3, [sp, #20]
 8001900:	4b24      	ldr	r3, [pc, #144]	@ (8001994 <GPS_parse+0x1b4>)
 8001902:	9304      	str	r3, [sp, #16]
 8001904:	4b24      	ldr	r3, [pc, #144]	@ (8001998 <GPS_parse+0x1b8>)
 8001906:	9303      	str	r3, [sp, #12]
 8001908:	4b1b      	ldr	r3, [pc, #108]	@ (8001978 <GPS_parse+0x198>)
 800190a:	9302      	str	r3, [sp, #8]
 800190c:	4b23      	ldr	r3, [pc, #140]	@ (800199c <GPS_parse+0x1bc>)
 800190e:	9301      	str	r3, [sp, #4]
 8001910:	4b23      	ldr	r3, [pc, #140]	@ (80019a0 <GPS_parse+0x1c0>)
 8001912:	9300      	str	r3, [sp, #0]
 8001914:	4b23      	ldr	r3, [pc, #140]	@ (80019a4 <GPS_parse+0x1c4>)
 8001916:	4a24      	ldr	r2, [pc, #144]	@ (80019a8 <GPS_parse+0x1c8>)
 8001918:	4924      	ldr	r1, [pc, #144]	@ (80019ac <GPS_parse+0x1cc>)
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f00d ff6c 	bl	800f7f8 <siscanf>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
            return;
    }
}
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	08013d80 	.word	0x08013d80
 8001930:	20002514 	.word	0x20002514
 8001934:	20002510 	.word	0x20002510
 8001938:	2000250c 	.word	0x2000250c
 800193c:	20002508 	.word	0x20002508
 8001940:	20002504 	.word	0x20002504
 8001944:	20002501 	.word	0x20002501
 8001948:	200024f4 	.word	0x200024f4
 800194c:	20002500 	.word	0x20002500
 8001950:	200024f8 	.word	0x200024f8
 8001954:	200024fc 	.word	0x200024fc
 8001958:	08013d88 	.word	0x08013d88
 800195c:	200024e8 	.word	0x200024e8
 8001960:	20002a0c 	.word	0x20002a0c
 8001964:	20002a08 	.word	0x20002a08
 8001968:	20002a04 	.word	0x20002a04
 800196c:	08013db0 	.word	0x08013db0
 8001970:	20002520 	.word	0x20002520
 8001974:	2000251c 	.word	0x2000251c
 8001978:	20002518 	.word	0x20002518
 800197c:	08013db8 	.word	0x08013db8
 8001980:	08013dd8 	.word	0x08013dd8
 8001984:	20002524 	.word	0x20002524
 8001988:	08013de0 	.word	0x08013de0
 800198c:	08013dfc 	.word	0x08013dfc
 8001990:	2000253c 	.word	0x2000253c
 8001994:	20002538 	.word	0x20002538
 8001998:	20002535 	.word	0x20002535
 800199c:	20002534 	.word	0x20002534
 80019a0:	20002530 	.word	0x20002530
 80019a4:	2000252c 	.word	0x2000252c
 80019a8:	20002528 	.word	0x20002528
 80019ac:	08013e04 	.word	0x08013e04

080019b0 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 80019b0:	b480      	push	{r7}
 80019b2:	b087      	sub	sp, #28
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	ed87 0a01 	vstr	s0, [r7, #4]
 80019ba:	4603      	mov	r3, r0
 80019bc:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 80019be:	ed97 7a01 	vldr	s14, [r7, #4]
 80019c2:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8001a44 <GPS_nmea_to_dec+0x94>
 80019c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019ce:	ee17 3a90 	vmov	r3, s15
 80019d2:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	2264      	movs	r2, #100	@ 0x64
 80019d8:	fb02 f303 	mul.w	r3, r2, r3
 80019dc:	ee07 3a90 	vmov	s15, r3
 80019e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019e4:	ed97 7a01 	vldr	s14, [r7, #4]
 80019e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019ec:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 80019f0:	ed97 7a03 	vldr	s14, [r7, #12]
 80019f4:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8001a48 <GPS_nmea_to_dec+0x98>
 80019f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019fc:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	ee07 3a90 	vmov	s15, r3
 8001a06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a0a:	ed97 7a02 	vldr	s14, [r7, #8]
 8001a0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a12:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 8001a16:	78fb      	ldrb	r3, [r7, #3]
 8001a18:	2b53      	cmp	r3, #83	@ 0x53
 8001a1a:	d002      	beq.n	8001a22 <GPS_nmea_to_dec+0x72>
 8001a1c:	78fb      	ldrb	r3, [r7, #3]
 8001a1e:	2b57      	cmp	r3, #87	@ 0x57
 8001a20:	d105      	bne.n	8001a2e <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 8001a22:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a26:	eef1 7a67 	vneg.f32	s15, s15
 8001a2a:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	ee07 3a90 	vmov	s15, r3
}
 8001a34:	eeb0 0a67 	vmov.f32	s0, s15
 8001a38:	371c      	adds	r7, #28
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	42c80000 	.word	0x42c80000
 8001a48:	42700000 	.word	0x42700000

08001a4c <DS1307_Init>:

/**
 * @brief Initializes the DS1307 module. Sets clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS1307_Init(I2C_HandleTypeDef *hi2c) {
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
	_ds1307_ui2c = hi2c;
 8001a54:	4a04      	ldr	r2, [pc, #16]	@ (8001a68 <DS1307_Init+0x1c>)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6013      	str	r3, [r2, #0]
	DS1307_SetClockHalt(0);
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	f000 f806 	bl	8001a6c <DS1307_SetClockHalt>
}
 8001a60:	bf00      	nop
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	20002540 	.word	0x20002540

08001a6c <DS1307_SetClockHalt>:

/**
 * @brief Sets clock halt bit.
 * @param halt Clock halt bit to set, 0 or 1. 0 to start timing, 0 to stop.
 */
void DS1307_SetClockHalt(uint8_t halt) {
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	71fb      	strb	r3, [r7, #7]
	uint8_t ch = (halt ? 1 << 7 : 0);
 8001a76:	79fb      	ldrb	r3, [r7, #7]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <DS1307_SetClockHalt+0x14>
 8001a7c:	2380      	movs	r3, #128	@ 0x80
 8001a7e:	e000      	b.n	8001a82 <DS1307_SetClockHalt+0x16>
 8001a80:	2300      	movs	r3, #0
 8001a82:	73fb      	strb	r3, [r7, #15]
	DS1307_SetRegByte(DS1307_REG_SECOND, ch | (DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f));
 8001a84:	2000      	movs	r0, #0
 8001a86:	f000 f83d 	bl	8001b04 <DS1307_GetRegByte>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	b25b      	sxtb	r3, r3
 8001a8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001a92:	b25a      	sxtb	r2, r3
 8001a94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	b25b      	sxtb	r3, r3
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	2000      	movs	r0, #0
 8001aa2:	f000 f811 	bl	8001ac8 <DS1307_SetRegByte>
}
 8001aa6:	bf00      	nop
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <DS1307_GetClockHalt>:

/**
 * @brief Gets clock halt bit.
 * @return Clock halt bit, 0 or 1.
 */
uint8_t DS1307_GetClockHalt(void) {
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	af00      	add	r7, sp, #0
	return (DS1307_GetRegByte(DS1307_REG_SECOND) & 0x80) >> 7;
 8001ab2:	2000      	movs	r0, #0
 8001ab4:	f000 f826 	bl	8001b04 <DS1307_GetRegByte>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	11db      	asrs	r3, r3, #7
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	b2db      	uxtb	r3, r3
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <DS1307_SetRegByte>:
/**
 * @brief Sets the byte in the designated DS1307 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS1307_SetRegByte(uint8_t regAddr, uint8_t val) {
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af02      	add	r7, sp, #8
 8001ace:	4603      	mov	r3, r0
 8001ad0:	460a      	mov	r2, r1
 8001ad2:	71fb      	strb	r3, [r7, #7]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 8001ad8:	79fb      	ldrb	r3, [r7, #7]
 8001ada:	733b      	strb	r3, [r7, #12]
 8001adc:	79bb      	ldrb	r3, [r7, #6]
 8001ade:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, bytes, 2, DS1307_TIMEOUT);
 8001ae0:	4b07      	ldr	r3, [pc, #28]	@ (8001b00 <DS1307_SetRegByte+0x38>)
 8001ae2:	6818      	ldr	r0, [r3, #0]
 8001ae4:	f107 020c 	add.w	r2, r7, #12
 8001ae8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001aec:	9300      	str	r3, [sp, #0]
 8001aee:	2302      	movs	r3, #2
 8001af0:	21d0      	movs	r1, #208	@ 0xd0
 8001af2:	f003 ff43 	bl	800597c <HAL_I2C_Master_Transmit>
}
 8001af6:	bf00      	nop
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20002540 	.word	0x20002540

08001b04 <DS1307_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS1307 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS1307_GetRegByte(uint8_t regAddr) {
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af02      	add	r7, sp, #8
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &regAddr, 1, DS1307_TIMEOUT);
 8001b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b44 <DS1307_GetRegByte+0x40>)
 8001b10:	6818      	ldr	r0, [r3, #0]
 8001b12:	1dfa      	adds	r2, r7, #7
 8001b14:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b18:	9300      	str	r3, [sp, #0]
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	21d0      	movs	r1, #208	@ 0xd0
 8001b1e:	f003 ff2d 	bl	800597c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &val, 1, DS1307_TIMEOUT);
 8001b22:	4b08      	ldr	r3, [pc, #32]	@ (8001b44 <DS1307_GetRegByte+0x40>)
 8001b24:	6818      	ldr	r0, [r3, #0]
 8001b26:	f107 020f 	add.w	r2, r7, #15
 8001b2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b2e:	9300      	str	r3, [sp, #0]
 8001b30:	2301      	movs	r3, #1
 8001b32:	21d0      	movs	r1, #208	@ 0xd0
 8001b34:	f004 f820 	bl	8005b78 <HAL_I2C_Master_Receive>
	return val;
 8001b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3710      	adds	r7, #16
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20002540 	.word	0x20002540

08001b48 <DS1307_SetDate>:

/**
 * @brief Sets the current day of month.
 * @param date Day of month, 1 to 31.
 */
void DS1307_SetDate(uint8_t date) {
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_DATE, DS1307_EncodeBCD(date));
 8001b52:	79fb      	ldrb	r3, [r7, #7]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f000 f89b 	bl	8001c90 <DS1307_EncodeBCD>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	2004      	movs	r0, #4
 8001b60:	f7ff ffb2 	bl	8001ac8 <DS1307_SetRegByte>
}
 8001b64:	bf00      	nop
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <DS1307_SetMonth>:

/**
 * @brief Sets the current month.
 * @param month Month, 1 to 12.
 */
void DS1307_SetMonth(uint8_t month) {
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_MONTH, DS1307_EncodeBCD(month));
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f000 f889 	bl	8001c90 <DS1307_EncodeBCD>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	4619      	mov	r1, r3
 8001b82:	2005      	movs	r0, #5
 8001b84:	f7ff ffa0 	bl	8001ac8 <DS1307_SetRegByte>
}
 8001b88:	bf00      	nop
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <DS1307_SetYear>:

/**
 * @brief Sets the current year.
 * @param year Year, 2000 to 2099.
 */
void DS1307_SetYear(uint16_t year) {
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	80fb      	strh	r3, [r7, #6]
	DS1307_SetRegByte(DS1307_REG_CENT, year / 100);
 8001b9a:	88fb      	ldrh	r3, [r7, #6]
 8001b9c:	4a10      	ldr	r2, [pc, #64]	@ (8001be0 <DS1307_SetYear+0x50>)
 8001b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba2:	095b      	lsrs	r3, r3, #5
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	4619      	mov	r1, r3
 8001baa:	2010      	movs	r0, #16
 8001bac:	f7ff ff8c 	bl	8001ac8 <DS1307_SetRegByte>
	DS1307_SetRegByte(DS1307_REG_YEAR, DS1307_EncodeBCD(year % 100));
 8001bb0:	88fb      	ldrh	r3, [r7, #6]
 8001bb2:	4a0b      	ldr	r2, [pc, #44]	@ (8001be0 <DS1307_SetYear+0x50>)
 8001bb4:	fba2 1203 	umull	r1, r2, r2, r3
 8001bb8:	0952      	lsrs	r2, r2, #5
 8001bba:	2164      	movs	r1, #100	@ 0x64
 8001bbc:	fb01 f202 	mul.w	r2, r1, r2
 8001bc0:	1a9b      	subs	r3, r3, r2
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f000 f862 	bl	8001c90 <DS1307_EncodeBCD>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	4619      	mov	r1, r3
 8001bd0:	2006      	movs	r0, #6
 8001bd2:	f7ff ff79 	bl	8001ac8 <DS1307_SetRegByte>
}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	51eb851f 	.word	0x51eb851f

08001be4 <DS1307_SetHour>:

/**
 * @brief Sets the current hour, in 24h format.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 */
void DS1307_SetHour(uint8_t hour_24mode) {
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4603      	mov	r3, r0
 8001bec:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_HOUR, DS1307_EncodeBCD(hour_24mode & 0x3f));
 8001bee:	79fb      	ldrb	r3, [r7, #7]
 8001bf0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f000 f84a 	bl	8001c90 <DS1307_EncodeBCD>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	4619      	mov	r1, r3
 8001c00:	2002      	movs	r0, #2
 8001c02:	f7ff ff61 	bl	8001ac8 <DS1307_SetRegByte>
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <DS1307_SetMinute>:

/**
 * @brief Sets the current minute.
 * @param minute Minute, 0 to 59.
 */
void DS1307_SetMinute(uint8_t minute) {
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b082      	sub	sp, #8
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	4603      	mov	r3, r0
 8001c16:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_MINUTE, DS1307_EncodeBCD(minute));
 8001c18:	79fb      	ldrb	r3, [r7, #7]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f000 f838 	bl	8001c90 <DS1307_EncodeBCD>
 8001c20:	4603      	mov	r3, r0
 8001c22:	4619      	mov	r1, r3
 8001c24:	2001      	movs	r0, #1
 8001c26:	f7ff ff4f 	bl	8001ac8 <DS1307_SetRegByte>
}
 8001c2a:	bf00      	nop
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <DS1307_SetSecond>:

/**
 * @brief Sets the current second.
 * @param second Second, 0 to 59.
 */
void DS1307_SetSecond(uint8_t second) {
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b084      	sub	sp, #16
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	4603      	mov	r3, r0
 8001c3a:	71fb      	strb	r3, [r7, #7]
	uint8_t ch = DS1307_GetClockHalt();
 8001c3c:	f7ff ff37 	bl	8001aae <DS1307_GetClockHalt>
 8001c40:	4603      	mov	r3, r0
 8001c42:	73fb      	strb	r3, [r7, #15]
	DS1307_SetRegByte(DS1307_REG_SECOND, DS1307_EncodeBCD(second | ch));
 8001c44:	79fa      	ldrb	r2, [r7, #7]
 8001c46:	7bfb      	ldrb	r3, [r7, #15]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f000 f81f 	bl	8001c90 <DS1307_EncodeBCD>
 8001c52:	4603      	mov	r3, r0
 8001c54:	4619      	mov	r1, r3
 8001c56:	2000      	movs	r0, #0
 8001c58:	f7ff ff36 	bl	8001ac8 <DS1307_SetRegByte>
}
 8001c5c:	bf00      	nop
 8001c5e:	3710      	adds	r7, #16
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <DS1307_SetTimeZone>:
 * @brief Sets UTC offset.
 * @note  UTC offset is not updated automatically.
 * @param hr UTC hour offset, -12 to 12.
 * @param min UTC minute offset, 0 to 59.
 */
void DS1307_SetTimeZone(int8_t hr, uint8_t min) {
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	460a      	mov	r2, r1
 8001c6e:	71fb      	strb	r3, [r7, #7]
 8001c70:	4613      	mov	r3, r2
 8001c72:	71bb      	strb	r3, [r7, #6]
	DS1307_SetRegByte(DS1307_REG_UTC_HR, hr);
 8001c74:	79fb      	ldrb	r3, [r7, #7]
 8001c76:	4619      	mov	r1, r3
 8001c78:	2008      	movs	r0, #8
 8001c7a:	f7ff ff25 	bl	8001ac8 <DS1307_SetRegByte>
	DS1307_SetRegByte(DS1307_REG_UTC_MIN, min);
 8001c7e:	79bb      	ldrb	r3, [r7, #6]
 8001c80:	4619      	mov	r1, r3
 8001c82:	2009      	movs	r0, #9
 8001c84:	f7ff ff20 	bl	8001ac8 <DS1307_SetRegByte>
}
 8001c88:	bf00      	nop
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <DS1307_EncodeBCD>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t DS1307_EncodeBCD(uint8_t dec) {
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	71fb      	strb	r3, [r7, #7]
	return (dec % 10 + ((dec / 10) << 4));
 8001c9a:	79fa      	ldrb	r2, [r7, #7]
 8001c9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd0 <DS1307_EncodeBCD+0x40>)
 8001c9e:	fba3 1302 	umull	r1, r3, r3, r2
 8001ca2:	08d9      	lsrs	r1, r3, #3
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	440b      	add	r3, r1
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	b2da      	uxtb	r2, r3
 8001cb0:	79fb      	ldrb	r3, [r7, #7]
 8001cb2:	4907      	ldr	r1, [pc, #28]	@ (8001cd0 <DS1307_EncodeBCD+0x40>)
 8001cb4:	fba1 1303 	umull	r1, r3, r1, r3
 8001cb8:	08db      	lsrs	r3, r3, #3
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	011b      	lsls	r3, r3, #4
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	4413      	add	r3, r2
 8001cc2:	b2db      	uxtb	r3, r3
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	cccccccd 	.word	0xcccccccd

08001cd4 <MS5611_Init>:


/******************************************************************************
         			#### MS5611 FUNCTIONS ####
******************************************************************************/
MS5611_StatusTypeDef MS5611_Init(MS5611_HandleTypeDef *dev){
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]

	 MS5611_Reset(dev);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f000 f86d 	bl	8001dbc <MS5611_Reset>

	 if(HAL_I2C_IsDeviceReady(dev->i2c, dev->I2C_ADDRESS, 1, 1000) != HAL_OK){
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6818      	ldr	r0, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	8899      	ldrh	r1, [r3, #4]
 8001cea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f004 fa6e 	bl	80061d0 <HAL_I2C_IsDeviceReady>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d000      	beq.n	8001cfc <MS5611_Init+0x28>

			__NOP();
 8001cfa:	bf00      	nop

	 }

	MS5611_Get_CalibCoeff(dev);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f000 f877 	bl	8001df0 <MS5611_Get_CalibCoeff>

	/**
	 * It is calculated average vertical altitude for set to zero our actual altitude
	 */
	if(dev->Ref_Alt_Sel == 'm'){
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8001d08:	2b6d      	cmp	r3, #109	@ 0x6d
 8001d0a:	d10c      	bne.n	8001d26 <MS5611_Init+0x52>

		dev->FixedAltitude = 0.0; //We set zero at the first time because gets the real place altitude value
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f04f 0200 	mov.w	r2, #0
 8001d12:	661a      	str	r2, [r3, #96]	@ 0x60

		dev->FixedAltitude = MS5611_Calc_TemporaryAltitude(dev);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f000 f817 	bl	8001d48 <MS5611_Calc_TemporaryAltitude>
 8001d1a:	eef0 7a40 	vmov.f32	s15, s0
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
 8001d24:	e008      	b.n	8001d38 <MS5611_Init+0x64>

		 }
		 else if(dev->Ref_Alt_Sel == 'M'){
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8001d2c:	2b4d      	cmp	r3, #77	@ 0x4d
 8001d2e:	d103      	bne.n	8001d38 <MS5611_Init+0x64>

			 dev->FixedAltitude = 0.0;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f04f 0200 	mov.w	r2, #0
 8001d36:	661a      	str	r2, [r3, #96]	@ 0x60

		 }
	/**
	 * In the beginning, variables that record the amounts of change are reset for security measures
	 */
	MS5611_ResetRef_DeltaVal(dev);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f000 fcd7 	bl	80026ec <MS5611_ResetRef_DeltaVal>

	return MS5611_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <MS5611_Calc_TemporaryAltitude>:

float MS5611_Calc_TemporaryAltitude(MS5611_HandleTypeDef *dev){
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]

	 float tempAltitude = 0;
 8001d50:	f04f 0300 	mov.w	r3, #0
 8001d54:	60fb      	str	r3, [r7, #12]

	 for(int cnt = 0 ; cnt < 20 ; cnt++){
 8001d56:	2300      	movs	r3, #0
 8001d58:	60bb      	str	r3, [r7, #8]
 8001d5a:	e01d      	b.n	8001d98 <MS5611_Calc_TemporaryAltitude+0x50>

		 MS5611_Read_ActVal(dev);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 fc5b 	bl	8002618 <MS5611_Read_ActVal>
		 tempAltitude = (float)(tempAltitude + (float)(MS5611_Altitude * 0.05));
 8001d62:	4b15      	ldr	r3, [pc, #84]	@ (8001db8 <MS5611_Calc_TemporaryAltitude+0x70>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe fbf6 	bl	8000558 <__aeabi_f2d>
 8001d6c:	a310      	add	r3, pc, #64	@ (adr r3, 8001db0 <MS5611_Calc_TemporaryAltitude+0x68>)
 8001d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d72:	f7fe fc49 	bl	8000608 <__aeabi_dmul>
 8001d76:	4602      	mov	r2, r0
 8001d78:	460b      	mov	r3, r1
 8001d7a:	4610      	mov	r0, r2
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	f7fe ff3b 	bl	8000bf8 <__aeabi_d2f>
 8001d82:	ee07 0a10 	vmov	s14, r0
 8001d86:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d8e:	edc7 7a03 	vstr	s15, [r7, #12]
	 for(int cnt = 0 ; cnt < 20 ; cnt++){
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	3301      	adds	r3, #1
 8001d96:	60bb      	str	r3, [r7, #8]
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	2b13      	cmp	r3, #19
 8001d9c:	ddde      	ble.n	8001d5c <MS5611_Calc_TemporaryAltitude+0x14>

	  }

	 return tempAltitude;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	ee07 3a90 	vmov	s15, r3

}
 8001da4:	eeb0 0a67 	vmov.f32	s0, s15
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	9999999a 	.word	0x9999999a
 8001db4:	3fa99999 	.word	0x3fa99999
 8001db8:	200029e8 	.word	0x200029e8

08001dbc <MS5611_Reset>:
void MS5611_Reset(MS5611_HandleTypeDef *dev){
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af04      	add	r7, sp, #16
 8001dc2:	6078      	str	r0, [r7, #4]

	HAL_I2C_Mem_Write(dev->i2c, dev->I2C_ADDRESS, dev->I2C_ADDRESS, 1, &ResetCom, 1, 1000);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6818      	ldr	r0, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	8899      	ldrh	r1, [r3, #4]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	889a      	ldrh	r2, [r3, #4]
 8001dd0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dd4:	9302      	str	r3, [sp, #8]
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	9301      	str	r3, [sp, #4]
 8001dda:	4b04      	ldr	r3, [pc, #16]	@ (8001dec <MS5611_Reset+0x30>)
 8001ddc:	9300      	str	r3, [sp, #0]
 8001dde:	2301      	movs	r3, #1
 8001de0:	f004 f8fc 	bl	8005fdc <HAL_I2C_Mem_Write>

}
 8001de4:	bf00      	nop
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	20000006 	.word	0x20000006

08001df0 <MS5611_Get_CalibCoeff>:


void MS5611_Get_CalibCoeff(MS5611_HandleTypeDef *dev){
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b08e      	sub	sp, #56	@ 0x38
 8001df4:	af02      	add	r7, sp, #8
 8001df6:	6078      	str	r0, [r7, #4]

	uint8_t CalibCoefAddrss[7] = {0xA2, //C1
 8001df8:	4a8c      	ldr	r2, [pc, #560]	@ (800202c <MS5611_Get_CalibCoeff+0x23c>)
 8001dfa:	f107 0320 	add.w	r3, r7, #32
 8001dfe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e02:	6018      	str	r0, [r3, #0]
 8001e04:	3304      	adds	r3, #4
 8001e06:	8019      	strh	r1, [r3, #0]
 8001e08:	3302      	adds	r3, #2
 8001e0a:	0c0a      	lsrs	r2, r1, #16
 8001e0c:	701a      	strb	r2, [r3, #0]
								  0xA8, //C4
								  0xAA, //C5
								  0xAC, //C6
								  0xAE}; /*! The last address is for CRC*/

	uint8_t TempryCalibCoefVal[2] = {0};	/*! Temporary buffer that gets two complement of each calibration coefficient*/
 8001e0e:	2300      	movs	r3, #0
 8001e10:	83bb      	strh	r3, [r7, #28]
	uint8_t CalibCoefVal[14] = {0};			/*! Stable buffer that collects all complements of calibration coefficients*/
 8001e12:	2300      	movs	r3, #0
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	f107 0310 	add.w	r3, r7, #16
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	601a      	str	r2, [r3, #0]
 8001e1e:	605a      	str	r2, [r3, #4]
 8001e20:	811a      	strh	r2, [r3, #8]
	uint8_t cnt = 0;
 8001e22:	2300      	movs	r3, #0
 8001e24:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f



	for(cnt = 0; cnt <= 6 ; cnt++){
 8001e28:	2300      	movs	r3, #0
 8001e2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001e2e:	e03b      	b.n	8001ea8 <MS5611_Get_CalibCoeff+0xb8>

		HAL_I2C_Master_Transmit(dev->i2c, dev->I2C_ADDRESS, &CalibCoefAddrss[cnt], 1, 1000);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6818      	ldr	r0, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	8899      	ldrh	r1, [r3, #4]
 8001e38:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e3c:	f107 0220 	add.w	r2, r7, #32
 8001e40:	441a      	add	r2, r3
 8001e42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e46:	9300      	str	r3, [sp, #0]
 8001e48:	2301      	movs	r3, #1
 8001e4a:	f003 fd97 	bl	800597c <HAL_I2C_Master_Transmit>


				for(int cnt_2 = 0; cnt_2 <= 1 ; cnt_2++){
 8001e4e:	2300      	movs	r3, #0
 8001e50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e52:	e010      	b.n	8001e76 <MS5611_Get_CalibCoeff+0x86>

					HAL_I2C_Master_Receive(dev->i2c, dev->I2C_ADDRESS, &TempryCalibCoefVal[cnt_2], 2, 1000);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6818      	ldr	r0, [r3, #0]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	8899      	ldrh	r1, [r3, #4]
 8001e5c:	f107 021c 	add.w	r2, r7, #28
 8001e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e62:	441a      	add	r2, r3
 8001e64:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e68:	9300      	str	r3, [sp, #0]
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	f003 fe84 	bl	8005b78 <HAL_I2C_Master_Receive>
				for(int cnt_2 = 0; cnt_2 <= 1 ; cnt_2++){
 8001e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e72:	3301      	adds	r3, #1
 8001e74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	ddeb      	ble.n	8001e54 <MS5611_Get_CalibCoeff+0x64>

				}

		CalibCoefVal[(cnt*2)]   = TempryCalibCoefVal[0];
 8001e7c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	7f3a      	ldrb	r2, [r7, #28]
 8001e84:	3330      	adds	r3, #48	@ 0x30
 8001e86:	443b      	add	r3, r7
 8001e88:	f803 2c24 	strb.w	r2, [r3, #-36]
		CalibCoefVal[(cnt*2+1)] = TempryCalibCoefVal[1];
 8001e8c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	3301      	adds	r3, #1
 8001e94:	7f7a      	ldrb	r2, [r7, #29]
 8001e96:	3330      	adds	r3, #48	@ 0x30
 8001e98:	443b      	add	r3, r7
 8001e9a:	f803 2c24 	strb.w	r2, [r3, #-36]
	for(cnt = 0; cnt <= 6 ; cnt++){
 8001e9e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001ea8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001eac:	2b06      	cmp	r3, #6
 8001eae:	d9bf      	bls.n	8001e30 <MS5611_Get_CalibCoeff+0x40>

	}

	cnt = 0;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	/*! Complements of each calibration coefficient consists MSB and LSB bits*/
	dev->Clb_Cf.C1  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2; // uint16_t <== |MSB_C1|LSB_C1|
 8001eb6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001eba:	3330      	adds	r3, #48	@ 0x30
 8001ebc:	443b      	add	r3, r7
 8001ebe:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001ec2:	021b      	lsls	r3, r3, #8
 8001ec4:	b21a      	sxth	r2, r3
 8001ec6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001eca:	3301      	adds	r3, #1
 8001ecc:	3330      	adds	r3, #48	@ 0x30
 8001ece:	443b      	add	r3, r7
 8001ed0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001ed4:	b21b      	sxth	r3, r3
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	b21b      	sxth	r3, r3
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	80da      	strh	r2, [r3, #6]
 8001ee0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001ee4:	3302      	adds	r3, #2
 8001ee6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	dev->Clb_Cf.C2  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 8001eea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001eee:	3330      	adds	r3, #48	@ 0x30
 8001ef0:	443b      	add	r3, r7
 8001ef2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001ef6:	021b      	lsls	r3, r3, #8
 8001ef8:	b21a      	sxth	r2, r3
 8001efa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001efe:	3301      	adds	r3, #1
 8001f00:	3330      	adds	r3, #48	@ 0x30
 8001f02:	443b      	add	r3, r7
 8001f04:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f08:	b21b      	sxth	r3, r3
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	b21b      	sxth	r3, r3
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	811a      	strh	r2, [r3, #8]
 8001f14:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f18:	3302      	adds	r3, #2
 8001f1a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	dev->Clb_Cf.C3  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 8001f1e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f22:	3330      	adds	r3, #48	@ 0x30
 8001f24:	443b      	add	r3, r7
 8001f26:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f2a:	021b      	lsls	r3, r3, #8
 8001f2c:	b21a      	sxth	r2, r3
 8001f2e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f32:	3301      	adds	r3, #1
 8001f34:	3330      	adds	r3, #48	@ 0x30
 8001f36:	443b      	add	r3, r7
 8001f38:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f3c:	b21b      	sxth	r3, r3
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	b21b      	sxth	r3, r3
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	815a      	strh	r2, [r3, #10]
 8001f48:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f4c:	3302      	adds	r3, #2
 8001f4e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	dev->Clb_Cf.C4  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 8001f52:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f56:	3330      	adds	r3, #48	@ 0x30
 8001f58:	443b      	add	r3, r7
 8001f5a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f5e:	021b      	lsls	r3, r3, #8
 8001f60:	b21a      	sxth	r2, r3
 8001f62:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f66:	3301      	adds	r3, #1
 8001f68:	3330      	adds	r3, #48	@ 0x30
 8001f6a:	443b      	add	r3, r7
 8001f6c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f70:	b21b      	sxth	r3, r3
 8001f72:	4313      	orrs	r3, r2
 8001f74:	b21b      	sxth	r3, r3
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	819a      	strh	r2, [r3, #12]
 8001f7c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f80:	3302      	adds	r3, #2
 8001f82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	dev->Clb_Cf.C5  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 8001f86:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f8a:	3330      	adds	r3, #48	@ 0x30
 8001f8c:	443b      	add	r3, r7
 8001f8e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f92:	021b      	lsls	r3, r3, #8
 8001f94:	b21a      	sxth	r2, r3
 8001f96:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	3330      	adds	r3, #48	@ 0x30
 8001f9e:	443b      	add	r3, r7
 8001fa0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001fa4:	b21b      	sxth	r3, r3
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	b21b      	sxth	r3, r3
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	81da      	strh	r2, [r3, #14]
 8001fb0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001fb4:	3302      	adds	r3, #2
 8001fb6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	dev->Clb_Cf.C6  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 8001fba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001fbe:	3330      	adds	r3, #48	@ 0x30
 8001fc0:	443b      	add	r3, r7
 8001fc2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001fc6:	021b      	lsls	r3, r3, #8
 8001fc8:	b21a      	sxth	r2, r3
 8001fca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001fce:	3301      	adds	r3, #1
 8001fd0:	3330      	adds	r3, #48	@ 0x30
 8001fd2:	443b      	add	r3, r7
 8001fd4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001fd8:	b21b      	sxth	r3, r3
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	b21b      	sxth	r3, r3
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	821a      	strh	r2, [r3, #16]
 8001fe4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001fe8:	3302      	adds	r3, #2
 8001fea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	dev->Clb_Cf.crc = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 8001fee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001ff2:	3330      	adds	r3, #48	@ 0x30
 8001ff4:	443b      	add	r3, r7
 8001ff6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001ffa:	021b      	lsls	r3, r3, #8
 8001ffc:	b21a      	sxth	r2, r3
 8001ffe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002002:	3301      	adds	r3, #1
 8002004:	3330      	adds	r3, #48	@ 0x30
 8002006:	443b      	add	r3, r7
 8002008:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800200c:	b21b      	sxth	r3, r3
 800200e:	4313      	orrs	r3, r2
 8002010:	b21b      	sxth	r3, r3
 8002012:	b29a      	uxth	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	825a      	strh	r2, [r3, #18]
 8002018:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800201c:	3302      	adds	r3, #2
 800201e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

}
 8002022:	bf00      	nop
 8002024:	3730      	adds	r7, #48	@ 0x30
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	08013e24 	.word	0x08013e24

08002030 <MS5611_ReadRaw_Press_Temp>:


void MS5611_ReadRaw_Press_Temp(MS5611_HandleTypeDef *dev){
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af02      	add	r7, sp, #8
 8002036:	6078      	str	r0, [r7, #4]

	uint8_t RawDataD1[3]  = {0}; /*! D1 = Raw pressure value that will be compensated at other functions*/
 8002038:	4b38      	ldr	r3, [pc, #224]	@ (800211c <MS5611_ReadRaw_Press_Temp+0xec>)
 800203a:	881b      	ldrh	r3, [r3, #0]
 800203c:	81bb      	strh	r3, [r7, #12]
 800203e:	2300      	movs	r3, #0
 8002040:	73bb      	strb	r3, [r7, #14]
	uint8_t RawDataD2[3]  = {0}; /*! D2 = Raw temperature value that will be compensated at other functions*/
 8002042:	4b36      	ldr	r3, [pc, #216]	@ (800211c <MS5611_ReadRaw_Press_Temp+0xec>)
 8002044:	881b      	ldrh	r3, [r3, #0]
 8002046:	813b      	strh	r3, [r7, #8]
 8002048:	2300      	movs	r3, #0
 800204a:	72bb      	strb	r3, [r7, #10]
	 *
	 * @Attention! you must wait minimum 15 milisecond after each i2c command because of clock line and calculation times.
	 */

	/*! Gets D1(Raw Pressure)*/
	HAL_I2C_Master_Transmit(dev->i2c, dev->I2C_ADDRESS, &osrs_4096_D1, 1, 1000); //(1)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6818      	ldr	r0, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	8899      	ldrh	r1, [r3, #4]
 8002054:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002058:	9300      	str	r3, [sp, #0]
 800205a:	2301      	movs	r3, #1
 800205c:	4a30      	ldr	r2, [pc, #192]	@ (8002120 <MS5611_ReadRaw_Press_Temp+0xf0>)
 800205e:	f003 fc8d 	bl	800597c <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8002062:	2014      	movs	r0, #20
 8002064:	f002 f9f2 	bl	800444c <HAL_Delay>
	HAL_I2C_Master_Transmit(dev->i2c, dev->I2C_ADDRESS, &adcReadCom , 1, 1000);	 //(2)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6818      	ldr	r0, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	8899      	ldrh	r1, [r3, #4]
 8002070:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002074:	9300      	str	r3, [sp, #0]
 8002076:	2301      	movs	r3, #1
 8002078:	4a2a      	ldr	r2, [pc, #168]	@ (8002124 <MS5611_ReadRaw_Press_Temp+0xf4>)
 800207a:	f003 fc7f 	bl	800597c <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 800207e:	2014      	movs	r0, #20
 8002080:	f002 f9e4 	bl	800444c <HAL_Delay>
	HAL_I2C_Master_Receive(dev->i2c, dev->I2C_ADDRESS, &RawDataD1[0], 3, 10000);	 //(3)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6818      	ldr	r0, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	8899      	ldrh	r1, [r3, #4]
 800208c:	f107 020c 	add.w	r2, r7, #12
 8002090:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002094:	9300      	str	r3, [sp, #0]
 8002096:	2303      	movs	r3, #3
 8002098:	f003 fd6e 	bl	8005b78 <HAL_I2C_Master_Receive>
	dev->ClcPrms.D1 = (uint32_t)((RawDataD1[0]<<16) | (RawDataD1[1]<<8) | (RawDataD1[2]<<0)); // MSB|LSB|XLSB
 800209c:	7b3b      	ldrb	r3, [r7, #12]
 800209e:	041a      	lsls	r2, r3, #16
 80020a0:	7b7b      	ldrb	r3, [r7, #13]
 80020a2:	021b      	lsls	r3, r3, #8
 80020a4:	4313      	orrs	r3, r2
 80020a6:	7bba      	ldrb	r2, [r7, #14]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	461a      	mov	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	615a      	str	r2, [r3, #20]

	/*! Gets D2(Raw Temperature)*/
	HAL_I2C_Master_Transmit(dev->i2c, dev->I2C_ADDRESS, &osrs_4096_D2, 1, 1000); //(1)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6818      	ldr	r0, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	8899      	ldrh	r1, [r3, #4]
 80020b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	2301      	movs	r3, #1
 80020c0:	4a19      	ldr	r2, [pc, #100]	@ (8002128 <MS5611_ReadRaw_Press_Temp+0xf8>)
 80020c2:	f003 fc5b 	bl	800597c <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 80020c6:	2014      	movs	r0, #20
 80020c8:	f002 f9c0 	bl	800444c <HAL_Delay>
	HAL_I2C_Master_Transmit(dev->i2c, dev->I2C_ADDRESS, &adcReadCom , 1, 1000);  	 //(2)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6818      	ldr	r0, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	8899      	ldrh	r1, [r3, #4]
 80020d4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	2301      	movs	r3, #1
 80020dc:	4a11      	ldr	r2, [pc, #68]	@ (8002124 <MS5611_ReadRaw_Press_Temp+0xf4>)
 80020de:	f003 fc4d 	bl	800597c <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 80020e2:	2014      	movs	r0, #20
 80020e4:	f002 f9b2 	bl	800444c <HAL_Delay>
	HAL_I2C_Master_Receive(dev->i2c, dev->I2C_ADDRESS, &RawDataD2[0], 3, 1000);  //(3)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6818      	ldr	r0, [r3, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	8899      	ldrh	r1, [r3, #4]
 80020f0:	f107 0208 	add.w	r2, r7, #8
 80020f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	2303      	movs	r3, #3
 80020fc:	f003 fd3c 	bl	8005b78 <HAL_I2C_Master_Receive>
	dev->ClcPrms.D2 = (uint32_t)((RawDataD2[0]<<16) | (RawDataD2[1]<<8) | (RawDataD2[2]<<0)); // MSB|LSB|XLSB
 8002100:	7a3b      	ldrb	r3, [r7, #8]
 8002102:	041a      	lsls	r2, r3, #16
 8002104:	7a7b      	ldrb	r3, [r7, #9]
 8002106:	021b      	lsls	r3, r3, #8
 8002108:	4313      	orrs	r3, r2
 800210a:	7aba      	ldrb	r2, [r7, #10]
 800210c:	4313      	orrs	r3, r2
 800210e:	461a      	mov	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	619a      	str	r2, [r3, #24]

}
 8002114:	bf00      	nop
 8002116:	3710      	adds	r7, #16
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	08013e2c 	.word	0x08013e2c
 8002120:	20000004 	.word	0x20000004
 8002124:	20002544 	.word	0x20002544
 8002128:	20000005 	.word	0x20000005

0800212c <MS5611_FirstCalculateDatas>:


void MS5611_FirstCalculateDatas(MS5611_HandleTypeDef *dev){
 800212c:	b5b0      	push	{r4, r5, r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]

	/*! Calculate 1st order temperature and pressure  according to MS5611 1st order algorithm */
	dev->ClcPrms.dT   = dev->ClcPrms.D2 - dev->Clb_Cf.C5 * pow(2,8);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	4618      	mov	r0, r3
 800213a:	f7fe f9eb 	bl	8000514 <__aeabi_ui2d>
 800213e:	4604      	mov	r4, r0
 8002140:	460d      	mov	r5, r1
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	89db      	ldrh	r3, [r3, #14]
 8002146:	4618      	mov	r0, r3
 8002148:	f7fe f9f4 	bl	8000534 <__aeabi_i2d>
 800214c:	f04f 0200 	mov.w	r2, #0
 8002150:	4b69      	ldr	r3, [pc, #420]	@ (80022f8 <MS5611_FirstCalculateDatas+0x1cc>)
 8002152:	f7fe fa59 	bl	8000608 <__aeabi_dmul>
 8002156:	4602      	mov	r2, r0
 8002158:	460b      	mov	r3, r1
 800215a:	4620      	mov	r0, r4
 800215c:	4629      	mov	r1, r5
 800215e:	f7fe f89b 	bl	8000298 <__aeabi_dsub>
 8002162:	4602      	mov	r2, r0
 8002164:	460b      	mov	r3, r1
 8002166:	4610      	mov	r0, r2
 8002168:	4619      	mov	r1, r3
 800216a:	f7fe fd45 	bl	8000bf8 <__aeabi_d2f>
 800216e:	4602      	mov	r2, r0
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	61da      	str	r2, [r3, #28]
	dev->ClcPrms.OFF  = dev->Clb_Cf.C2 * pow(2,17) + (dev->Clb_Cf.C4 * dev->ClcPrms.dT) / pow(2,6);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	891b      	ldrh	r3, [r3, #8]
 8002178:	4618      	mov	r0, r3
 800217a:	f7fe f9db 	bl	8000534 <__aeabi_i2d>
 800217e:	f04f 0200 	mov.w	r2, #0
 8002182:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8002186:	f7fe fa3f 	bl	8000608 <__aeabi_dmul>
 800218a:	4602      	mov	r2, r0
 800218c:	460b      	mov	r3, r1
 800218e:	4614      	mov	r4, r2
 8002190:	461d      	mov	r5, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	899b      	ldrh	r3, [r3, #12]
 8002196:	ee07 3a90 	vmov	s15, r3
 800219a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	edd3 7a07 	vldr	s15, [r3, #28]
 80021a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021a8:	ee17 0a90 	vmov	r0, s15
 80021ac:	f7fe f9d4 	bl	8000558 <__aeabi_f2d>
 80021b0:	f04f 0200 	mov.w	r2, #0
 80021b4:	4b51      	ldr	r3, [pc, #324]	@ (80022fc <MS5611_FirstCalculateDatas+0x1d0>)
 80021b6:	f7fe fb51 	bl	800085c <__aeabi_ddiv>
 80021ba:	4602      	mov	r2, r0
 80021bc:	460b      	mov	r3, r1
 80021be:	4620      	mov	r0, r4
 80021c0:	4629      	mov	r1, r5
 80021c2:	f7fe f86b 	bl	800029c <__adddf3>
 80021c6:	4602      	mov	r2, r0
 80021c8:	460b      	mov	r3, r1
 80021ca:	4610      	mov	r0, r2
 80021cc:	4619      	mov	r1, r3
 80021ce:	f7fe fd13 	bl	8000bf8 <__aeabi_d2f>
 80021d2:	4602      	mov	r2, r0
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	629a      	str	r2, [r3, #40]	@ 0x28
	dev->ClcPrms.SENS = dev->Clb_Cf.C1 * pow(2,16) + (dev->Clb_Cf.C3 * dev->ClcPrms.dT) / pow(2,7);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	88db      	ldrh	r3, [r3, #6]
 80021dc:	4618      	mov	r0, r3
 80021de:	f7fe f9a9 	bl	8000534 <__aeabi_i2d>
 80021e2:	f04f 0200 	mov.w	r2, #0
 80021e6:	4b46      	ldr	r3, [pc, #280]	@ (8002300 <MS5611_FirstCalculateDatas+0x1d4>)
 80021e8:	f7fe fa0e 	bl	8000608 <__aeabi_dmul>
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	4614      	mov	r4, r2
 80021f2:	461d      	mov	r5, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	895b      	ldrh	r3, [r3, #10]
 80021f8:	ee07 3a90 	vmov	s15, r3
 80021fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	edd3 7a07 	vldr	s15, [r3, #28]
 8002206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800220a:	ee17 0a90 	vmov	r0, s15
 800220e:	f7fe f9a3 	bl	8000558 <__aeabi_f2d>
 8002212:	f04f 0200 	mov.w	r2, #0
 8002216:	4b3b      	ldr	r3, [pc, #236]	@ (8002304 <MS5611_FirstCalculateDatas+0x1d8>)
 8002218:	f7fe fb20 	bl	800085c <__aeabi_ddiv>
 800221c:	4602      	mov	r2, r0
 800221e:	460b      	mov	r3, r1
 8002220:	4620      	mov	r0, r4
 8002222:	4629      	mov	r1, r5
 8002224:	f7fe f83a 	bl	800029c <__adddf3>
 8002228:	4602      	mov	r2, r0
 800222a:	460b      	mov	r3, r1
 800222c:	4610      	mov	r0, r2
 800222e:	4619      	mov	r1, r3
 8002230:	f7fe fce2 	bl	8000bf8 <__aeabi_d2f>
 8002234:	4602      	mov	r2, r0
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	62da      	str	r2, [r3, #44]	@ 0x2c

	dev->ClcPrms.TEMP = 2000 + dev->ClcPrms.dT * dev->Clb_Cf.C6 / pow(2,23);								//Actual temperature data
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	ed93 7a07 	vldr	s14, [r3, #28]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	8a1b      	ldrh	r3, [r3, #16]
 8002244:	ee07 3a90 	vmov	s15, r3
 8002248:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800224c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002250:	ee17 0a90 	vmov	r0, s15
 8002254:	f7fe f980 	bl	8000558 <__aeabi_f2d>
 8002258:	f04f 0200 	mov.w	r2, #0
 800225c:	4b2a      	ldr	r3, [pc, #168]	@ (8002308 <MS5611_FirstCalculateDatas+0x1dc>)
 800225e:	f7fe fafd 	bl	800085c <__aeabi_ddiv>
 8002262:	4602      	mov	r2, r0
 8002264:	460b      	mov	r3, r1
 8002266:	4610      	mov	r0, r2
 8002268:	4619      	mov	r1, r3
 800226a:	f04f 0200 	mov.w	r2, #0
 800226e:	4b27      	ldr	r3, [pc, #156]	@ (800230c <MS5611_FirstCalculateDatas+0x1e0>)
 8002270:	f7fe f814 	bl	800029c <__adddf3>
 8002274:	4602      	mov	r2, r0
 8002276:	460b      	mov	r3, r1
 8002278:	4610      	mov	r0, r2
 800227a:	4619      	mov	r1, r3
 800227c:	f7fe fcbc 	bl	8000bf8 <__aeabi_d2f>
 8002280:	4602      	mov	r2, r0
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	621a      	str	r2, [r3, #32]
	dev->ClcPrms.P	  = ((dev->ClcPrms.D1 * dev->ClcPrms.SENS / pow(2,21) - dev->ClcPrms.OFF))/pow(2,15);	//Actual pressure data
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	ee07 3a90 	vmov	s15, r3
 800228e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002298:	ee67 7a27 	vmul.f32	s15, s14, s15
 800229c:	ee17 0a90 	vmov	r0, s15
 80022a0:	f7fe f95a 	bl	8000558 <__aeabi_f2d>
 80022a4:	f04f 0200 	mov.w	r2, #0
 80022a8:	4b19      	ldr	r3, [pc, #100]	@ (8002310 <MS5611_FirstCalculateDatas+0x1e4>)
 80022aa:	f7fe fad7 	bl	800085c <__aeabi_ddiv>
 80022ae:	4602      	mov	r2, r0
 80022b0:	460b      	mov	r3, r1
 80022b2:	4614      	mov	r4, r2
 80022b4:	461d      	mov	r5, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7fe f94c 	bl	8000558 <__aeabi_f2d>
 80022c0:	4602      	mov	r2, r0
 80022c2:	460b      	mov	r3, r1
 80022c4:	4620      	mov	r0, r4
 80022c6:	4629      	mov	r1, r5
 80022c8:	f7fd ffe6 	bl	8000298 <__aeabi_dsub>
 80022cc:	4602      	mov	r2, r0
 80022ce:	460b      	mov	r3, r1
 80022d0:	4610      	mov	r0, r2
 80022d2:	4619      	mov	r1, r3
 80022d4:	f04f 0200 	mov.w	r2, #0
 80022d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002314 <MS5611_FirstCalculateDatas+0x1e8>)
 80022da:	f7fe fabf 	bl	800085c <__aeabi_ddiv>
 80022de:	4602      	mov	r2, r0
 80022e0:	460b      	mov	r3, r1
 80022e2:	4610      	mov	r0, r2
 80022e4:	4619      	mov	r1, r3
 80022e6:	f7fe fc87 	bl	8000bf8 <__aeabi_d2f>
 80022ea:	4602      	mov	r2, r0
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	625a      	str	r2, [r3, #36]	@ 0x24

}
 80022f0:	bf00      	nop
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bdb0      	pop	{r4, r5, r7, pc}
 80022f8:	40700000 	.word	0x40700000
 80022fc:	40500000 	.word	0x40500000
 8002300:	40f00000 	.word	0x40f00000
 8002304:	40600000 	.word	0x40600000
 8002308:	41600000 	.word	0x41600000
 800230c:	409f4000 	.word	0x409f4000
 8002310:	41400000 	.word	0x41400000
 8002314:	40e00000 	.word	0x40e00000

08002318 <MS5611_SecondCalculateDatas>:


void MS5611_SecondCalculateDatas(MS5611_HandleTypeDef *dev){
 8002318:	b5b0      	push	{r4, r5, r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]

	if(dev->ClcPrms.TEMP < 2000){
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	edd3 7a08 	vldr	s15, [r3, #32]
 8002326:	ed9f 7a8e 	vldr	s14, [pc, #568]	@ 8002560 <MS5611_SecondCalculateDatas+0x248>
 800232a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800232e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002332:	f140 80e3 	bpl.w	80024fc <MS5611_SecondCalculateDatas+0x1e4>

			/*! Low Temperature */
			dev->ClcPrms.TEMP2 = (dev->ClcPrms.dT * dev->ClcPrms.dT) / pow(2,31);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	ed93 7a07 	vldr	s14, [r3, #28]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	edd3 7a07 	vldr	s15, [r3, #28]
 8002342:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002346:	eddf 6a87 	vldr	s13, [pc, #540]	@ 8002564 <MS5611_SecondCalculateDatas+0x24c>
 800234a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
			dev->ClcPrms.OFF2  = 5 * ((dev->ClcPrms.TEMP - 2000) * (dev->ClcPrms.TEMP - 2000)) / pow(2,1);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	edd3 7a08 	vldr	s15, [r3, #32]
 800235a:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 8002560 <MS5611_SecondCalculateDatas+0x248>
 800235e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	edd3 7a08 	vldr	s15, [r3, #32]
 8002368:	eddf 6a7d 	vldr	s13, [pc, #500]	@ 8002560 <MS5611_SecondCalculateDatas+0x248>
 800236c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002370:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002374:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002378:	ee27 7a87 	vmul.f32	s14, s15, s14
 800237c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002380:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
			dev->ClcPrms.SENS2 = 5 * ((dev->ClcPrms.TEMP - 2000) * (dev->ClcPrms.TEMP - 2000)) / pow(2,2);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	edd3 7a08 	vldr	s15, [r3, #32]
 8002390:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 8002560 <MS5611_SecondCalculateDatas+0x248>
 8002394:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	edd3 7a08 	vldr	s15, [r3, #32]
 800239e:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8002560 <MS5611_SecondCalculateDatas+0x248>
 80023a2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80023a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023aa:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80023ae:	ee27 7a87 	vmul.f32	s14, s15, s14
 80023b2:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80023b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

					if(dev->ClcPrms.TEMP < -1500){
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	edd3 7a08 	vldr	s15, [r3, #32]
 80023c6:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8002568 <MS5611_SecondCalculateDatas+0x250>
 80023ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d2:	d571      	bpl.n	80024b8 <MS5611_SecondCalculateDatas+0x1a0>
						/*! Very Low Temperature */
						dev->ClcPrms.OFF2  = dev->ClcPrms.OFF2 + 7 * ((dev->ClcPrms.TEMP + 1500) * (dev->ClcPrms.TEMP + 1500));
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	edd3 7a08 	vldr	s15, [r3, #32]
 80023e0:	eddf 6a62 	vldr	s13, [pc, #392]	@ 800256c <MS5611_SecondCalculateDatas+0x254>
 80023e4:	ee77 6aa6 	vadd.f32	s13, s15, s13
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	edd3 7a08 	vldr	s15, [r3, #32]
 80023ee:	ed9f 6a5f 	vldr	s12, [pc, #380]	@ 800256c <MS5611_SecondCalculateDatas+0x254>
 80023f2:	ee77 7a86 	vadd.f32	s15, s15, s12
 80023f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023fa:	eef1 6a0c 	vmov.f32	s13, #28	@ 0x40e00000  7.0
 80023fe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002402:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
						dev->ClcPrms.SENS2 = dev->ClcPrms.SENS2 + 11 * ((dev->ClcPrms.TEMP + 1500) * (dev->ClcPrms.TEMP + 1500)) / pow(2,1);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002410:	4618      	mov	r0, r3
 8002412:	f7fe f8a1 	bl	8000558 <__aeabi_f2d>
 8002416:	4604      	mov	r4, r0
 8002418:	460d      	mov	r5, r1
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	edd3 7a08 	vldr	s15, [r3, #32]
 8002420:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 800256c <MS5611_SecondCalculateDatas+0x254>
 8002424:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	edd3 7a08 	vldr	s15, [r3, #32]
 800242e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800256c <MS5611_SecondCalculateDatas+0x254>
 8002432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800243a:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 800243e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002442:	ee17 0a90 	vmov	r0, s15
 8002446:	f7fe f887 	bl	8000558 <__aeabi_f2d>
 800244a:	f04f 0200 	mov.w	r2, #0
 800244e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002452:	f7fe fa03 	bl	800085c <__aeabi_ddiv>
 8002456:	4602      	mov	r2, r0
 8002458:	460b      	mov	r3, r1
 800245a:	4620      	mov	r0, r4
 800245c:	4629      	mov	r1, r5
 800245e:	f7fd ff1d 	bl	800029c <__adddf3>
 8002462:	4602      	mov	r2, r0
 8002464:	460b      	mov	r3, r1
 8002466:	4610      	mov	r0, r2
 8002468:	4619      	mov	r1, r3
 800246a:	f7fe fbc5 	bl	8000bf8 <__aeabi_d2f>
 800246e:	4602      	mov	r2, r0
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	635a      	str	r2, [r3, #52]	@ 0x34

						dev->ClcPrms.TEMP = dev->ClcPrms.TEMP - dev->ClcPrms.TEMP2;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	ed93 7a08 	vldr	s14, [r3, #32]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8002480:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	edc3 7a08 	vstr	s15, [r3, #32]
						dev->ClcPrms.OFF  = dev->ClcPrms.OFF - dev->ClcPrms.OFF2;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002496:	ee77 7a67 	vsub.f32	s15, s14, s15
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
						dev->ClcPrms.SENS = dev->ClcPrms.SENS - dev->ClcPrms.SENS2;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80024ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
			dev->ClcPrms.TEMP = dev->ClcPrms.TEMP - dev->ClcPrms.TEMP2;
			dev->ClcPrms.OFF  = dev->ClcPrms.OFF - dev->ClcPrms.OFF2;
			dev->ClcPrms.SENS = dev->ClcPrms.SENS - dev->ClcPrms.SENS2;

		}
}
 80024b6:	e04e      	b.n	8002556 <MS5611_SecondCalculateDatas+0x23e>
						dev->ClcPrms.TEMP = dev->ClcPrms.TEMP - dev->ClcPrms.TEMP2;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	ed93 7a08 	vldr	s14, [r3, #32]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80024c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	edc3 7a08 	vstr	s15, [r3, #32]
						dev->ClcPrms.OFF  = dev->ClcPrms.OFF - dev->ClcPrms.OFF2;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80024da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
						dev->ClcPrms.SENS = dev->ClcPrms.SENS - dev->ClcPrms.SENS2;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80024f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
}
 80024fa:	e02c      	b.n	8002556 <MS5611_SecondCalculateDatas+0x23e>
			dev->ClcPrms.TEMP2 = 0;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f04f 0200 	mov.w	r2, #0
 8002502:	639a      	str	r2, [r3, #56]	@ 0x38
			dev->ClcPrms.OFF2  = 0;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f04f 0200 	mov.w	r2, #0
 800250a:	631a      	str	r2, [r3, #48]	@ 0x30
			dev->ClcPrms.SENS2 = 0;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f04f 0200 	mov.w	r2, #0
 8002512:	635a      	str	r2, [r3, #52]	@ 0x34
			dev->ClcPrms.TEMP = dev->ClcPrms.TEMP - dev->ClcPrms.TEMP2;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	ed93 7a08 	vldr	s14, [r3, #32]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8002520:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	edc3 7a08 	vstr	s15, [r3, #32]
			dev->ClcPrms.OFF  = dev->ClcPrms.OFF - dev->ClcPrms.OFF2;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002536:	ee77 7a67 	vsub.f32	s15, s14, s15
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
			dev->ClcPrms.SENS = dev->ClcPrms.SENS - dev->ClcPrms.SENS2;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800254c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bdb0      	pop	{r4, r5, r7, pc}
 800255e:	bf00      	nop
 8002560:	44fa0000 	.word	0x44fa0000
 8002564:	4f000000 	.word	0x4f000000
 8002568:	c4bb8000 	.word	0xc4bb8000
 800256c:	44bb8000 	.word	0x44bb8000

08002570 <MS5611_Calc_Altitude>:


float MS5611_Calc_Altitude(MS5611_HandleTypeDef *dev){
 8002570:	b5b0      	push	{r4, r5, r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]

	return  ((SeaLevelTemp  / GradientTemp)
			* (1 - pow(((dev->ClcPrms.P/2) / SeaLevelPress),((GasCoefficient * GradientTemp)/GravityAccel)))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800257e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002582:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002586:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8002610 <MS5611_Calc_Altitude+0xa0>
 800258a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800258e:	ee16 0a90 	vmov	r0, s13
 8002592:	f7fd ffe1 	bl	8000558 <__aeabi_f2d>
 8002596:	4602      	mov	r2, r0
 8002598:	460b      	mov	r3, r1
 800259a:	ed9f 1b19 	vldr	d1, [pc, #100]	@ 8002600 <MS5611_Calc_Altitude+0x90>
 800259e:	ec43 2b10 	vmov	d0, r2, r3
 80025a2:	f010 fb87 	bl	8012cb4 <pow>
 80025a6:	ec53 2b10 	vmov	r2, r3, d0
 80025aa:	f04f 0000 	mov.w	r0, #0
 80025ae:	4919      	ldr	r1, [pc, #100]	@ (8002614 <MS5611_Calc_Altitude+0xa4>)
 80025b0:	f7fd fe72 	bl	8000298 <__aeabi_dsub>
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	4610      	mov	r0, r2
 80025ba:	4619      	mov	r1, r3
 80025bc:	a312      	add	r3, pc, #72	@ (adr r3, 8002608 <MS5611_Calc_Altitude+0x98>)
 80025be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c2:	f7fe f821 	bl	8000608 <__aeabi_dmul>
 80025c6:	4602      	mov	r2, r0
 80025c8:	460b      	mov	r3, r1
 80025ca:	4614      	mov	r4, r2
 80025cc:	461d      	mov	r5, r3
			- dev->FixedAltitude) ;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7fd ffc0 	bl	8000558 <__aeabi_f2d>
 80025d8:	4602      	mov	r2, r0
 80025da:	460b      	mov	r3, r1
 80025dc:	4620      	mov	r0, r4
 80025de:	4629      	mov	r1, r5
 80025e0:	f7fd fe5a 	bl	8000298 <__aeabi_dsub>
 80025e4:	4602      	mov	r2, r0
 80025e6:	460b      	mov	r3, r1
 80025e8:	4610      	mov	r0, r2
 80025ea:	4619      	mov	r1, r3
 80025ec:	f7fe fb04 	bl	8000bf8 <__aeabi_d2f>
 80025f0:	4603      	mov	r3, r0
 80025f2:	ee07 3a90 	vmov	s15, r3

}
 80025f6:	eeb0 0a67 	vmov.f32	s0, s15
 80025fa:	3708      	adds	r7, #8
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bdb0      	pop	{r4, r5, r7, pc}
 8002600:	fd017917 	.word	0xfd017917
 8002604:	3fc85ace 	.word	0x3fc85ace
 8002608:	9d89d89d 	.word	0x9d89d89d
 800260c:	40e5a558 	.word	0x40e5a558
 8002610:	47c5e680 	.word	0x47c5e680
 8002614:	3ff00000 	.word	0x3ff00000

08002618 <MS5611_Read_ActVal>:


void MS5611_Read_ActVal(MS5611_HandleTypeDef *dev){
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]

	/*! Read raw pressure and temperature MSB | LSB | XLSB values from the sensor*/
	MS5611_ReadRaw_Press_Temp(dev);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f7ff fd05 	bl	8002030 <MS5611_ReadRaw_Press_Temp>

	/*! Calculate 1st order temperature and pressure  according to MS5611 1st order algorithm */
	MS5611_FirstCalculateDatas(dev);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f7ff fd80 	bl	800212c <MS5611_FirstCalculateDatas>

	/*! If it's needed, Calculate 2st order temperature and pressure  according to MS5611 2st order algorithm */
	MS5611_SecondCalculateDatas(dev);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f7ff fe73 	bl	8002318 <MS5611_SecondCalculateDatas>

	/*! Vertical Altitude is calculated by using pressure and some coefficients */
	MS5611_Altitude = MS5611_Calc_Altitude(dev);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7ff ff9c 	bl	8002570 <MS5611_Calc_Altitude>
 8002638:	eef0 7a40 	vmov.f32	s15, s0
 800263c:	4b24      	ldr	r3, [pc, #144]	@ (80026d0 <MS5611_Read_ActVal+0xb8>)
 800263e:	edc3 7a00 	vstr	s15, [r3]

	/*! Vertical Speed is calculated by using differential of locations */
	MS5611_Calc_VertSpd(dev, MS5611_Altitude, &MS5611_VertSpeed);
 8002642:	4b23      	ldr	r3, [pc, #140]	@ (80026d0 <MS5611_Read_ActVal+0xb8>)
 8002644:	edd3 7a00 	vldr	s15, [r3]
 8002648:	4922      	ldr	r1, [pc, #136]	@ (80026d4 <MS5611_Read_ActVal+0xbc>)
 800264a:	eeb0 0a67 	vmov.f32	s0, s15
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 f87a 	bl	8002748 <MS5611_Calc_VertSpd>

	/*! Vertical acceleration is calculated by using differential of speed */
	MS5611_Calc_VertAcc(dev, MS5611_VertSpeed, &MS5611_VertAcc);
 8002654:	4b1f      	ldr	r3, [pc, #124]	@ (80026d4 <MS5611_Read_ActVal+0xbc>)
 8002656:	edd3 7a00 	vldr	s15, [r3]
 800265a:	491f      	ldr	r1, [pc, #124]	@ (80026d8 <MS5611_Read_ActVal+0xc0>)
 800265c:	eeb0 0a67 	vmov.f32	s0, s15
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f000 f890 	bl	8002786 <MS5611_Calc_VertAcc>

	/*! It's applied force on to the object that is given mass from the user */
	MS5611_Calc_gForce(dev, &MS5611_gForce, SatCar_Mass, MS5611_VertAcc);
 8002666:	4b1d      	ldr	r3, [pc, #116]	@ (80026dc <MS5611_Read_ActVal+0xc4>)
 8002668:	edd3 7a00 	vldr	s15, [r3]
 800266c:	4b1a      	ldr	r3, [pc, #104]	@ (80026d8 <MS5611_Read_ActVal+0xc0>)
 800266e:	ed93 7a00 	vldr	s14, [r3]
 8002672:	eef0 0a47 	vmov.f32	s1, s14
 8002676:	eeb0 0a67 	vmov.f32	s0, s15
 800267a:	4919      	ldr	r1, [pc, #100]	@ (80026e0 <MS5611_Read_ActVal+0xc8>)
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f000 f8a3 	bl	80027c8 <MS5611_Calc_gForce>

	/*! Pressure unit is mBar and Temperature unit is celcius degress*/
	MS5611_Press = dev->ClcPrms.P/2 ;			//@e.g :
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8002688:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800268c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002690:	4b14      	ldr	r3, [pc, #80]	@ (80026e4 <MS5611_Read_ActVal+0xcc>)
 8002692:	edc3 7a00 	vstr	s15, [r3]
	MS5611_Temp  = dev->ClcPrms.TEMP * 0.01; 		//@e.g : 25.57 CelciusDegress
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a1b      	ldr	r3, [r3, #32]
 800269a:	4618      	mov	r0, r3
 800269c:	f7fd ff5c 	bl	8000558 <__aeabi_f2d>
 80026a0:	a309      	add	r3, pc, #36	@ (adr r3, 80026c8 <MS5611_Read_ActVal+0xb0>)
 80026a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a6:	f7fd ffaf 	bl	8000608 <__aeabi_dmul>
 80026aa:	4602      	mov	r2, r0
 80026ac:	460b      	mov	r3, r1
 80026ae:	4610      	mov	r0, r2
 80026b0:	4619      	mov	r1, r3
 80026b2:	f7fe faa1 	bl	8000bf8 <__aeabi_d2f>
 80026b6:	4603      	mov	r3, r0
 80026b8:	4a0b      	ldr	r2, [pc, #44]	@ (80026e8 <MS5611_Read_ActVal+0xd0>)
 80026ba:	6013      	str	r3, [r2, #0]

}
 80026bc:	bf00      	nop
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	f3af 8000 	nop.w
 80026c8:	47ae147b 	.word	0x47ae147b
 80026cc:	3f847ae1 	.word	0x3f847ae1
 80026d0:	200029e8 	.word	0x200029e8
 80026d4:	200029ec 	.word	0x200029ec
 80026d8:	200029f0 	.word	0x200029f0
 80026dc:	200029f8 	.word	0x200029f8
 80026e0:	200029f4 	.word	0x200029f4
 80026e4:	200029e0 	.word	0x200029e0
 80026e8:	200029e4 	.word	0x200029e4

080026ec <MS5611_ResetRef_DeltaVal>:

void MS5611_ResetRef_DeltaVal(MS5611_HandleTypeDef *dev){
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]

	//At the beginning, reset the altitude values for the first and second conditions.
	dev->DeltaData.alt0 = 0.0;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f04f 0200 	mov.w	r2, #0
 80026fa:	63da      	str	r2, [r3, #60]	@ 0x3c
	dev->DeltaData.alt1 = 0.0;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f04f 0200 	mov.w	r2, #0
 8002702:	641a      	str	r2, [r3, #64]	@ 0x40
	dev->DeltaData.holdAlt = 0.0;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f04f 0200 	mov.w	r2, #0
 800270a:	645a      	str	r2, [r3, #68]	@ 0x44

	//At the beginning, reset the speed values for the first and second conditions.
	dev->DeltaData.spd0 = 0.0;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f04f 0200 	mov.w	r2, #0
 8002712:	655a      	str	r2, [r3, #84]	@ 0x54
	dev->DeltaData.spd1 = 0.0;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f04f 0200 	mov.w	r2, #0
 800271a:	659a      	str	r2, [r3, #88]	@ 0x58
	dev->DeltaData.holdSpd = 0.0;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f04f 0200 	mov.w	r2, #0
 8002722:	65da      	str	r2, [r3, #92]	@ 0x5c

	//At the beginning, reset the acceleration values for the first and second conditions.
	dev->DeltaData.acc0 = 0.0;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f04f 0200 	mov.w	r2, #0
 800272a:	649a      	str	r2, [r3, #72]	@ 0x48
	dev->DeltaData.acc1 = 0.0;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f04f 0200 	mov.w	r2, #0
 8002732:	64da      	str	r2, [r3, #76]	@ 0x4c
	dev->DeltaData.holdAcc = 0.0;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f04f 0200 	mov.w	r2, #0
 800273a:	651a      	str	r2, [r3, #80]	@ 0x50

}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <MS5611_Calc_VertSpd>:


/*!Vertical Speed is calculated by using differential of locations "V = (X1 - X0) /1 second" */
void MS5611_Calc_VertSpd(MS5611_HandleTypeDef *dev, float MS5611_Altitude, float *MS5611_VertSpeed){
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	ed87 0a02 	vstr	s0, [r7, #8]
 8002754:	6079      	str	r1, [r7, #4]

	dev->DeltaData.alt1 = (MS5611_Altitude);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	68ba      	ldr	r2, [r7, #8]
 800275a:	641a      	str	r2, [r3, #64]	@ 0x40
	(*MS5611_VertSpeed) = (dev->DeltaData.alt1 - dev->DeltaData.alt0);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8002768:	ee77 7a67 	vsub.f32	s15, s14, s15
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	edc3 7a00 	vstr	s15, [r3]
	dev->DeltaData.alt0 = dev->DeltaData.alt1;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	63da      	str	r2, [r3, #60]	@ 0x3c

}
 800277a:	bf00      	nop
 800277c:	3714      	adds	r7, #20
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr

08002786 <MS5611_Calc_VertAcc>:

/*! Vertical acceleration is calculated by using differential of speed "a = (V1 - V0) / 1 second"  */
void MS5611_Calc_VertAcc(MS5611_HandleTypeDef *dev, float MS5611_VertSpeed,float *MS5611_VertAcc){
 8002786:	b480      	push	{r7}
 8002788:	b085      	sub	sp, #20
 800278a:	af00      	add	r7, sp, #0
 800278c:	60f8      	str	r0, [r7, #12]
 800278e:	ed87 0a02 	vstr	s0, [r7, #8]
 8002792:	6079      	str	r1, [r7, #4]

	dev->DeltaData.spd1 = (MS5611_VertSpeed);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	68ba      	ldr	r2, [r7, #8]
 8002798:	659a      	str	r2, [r3, #88]	@ 0x58
	(*MS5611_VertAcc)	= (dev->DeltaData.spd1 - dev->DeltaData.spd0);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	ed93 7a16 	vldr	s14, [r3, #88]	@ 0x58
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80027a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	edc3 7a00 	vstr	s15, [r3]
	dev->DeltaData.spd0 = dev->DeltaData.spd1;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	655a      	str	r2, [r3, #84]	@ 0x54

}
 80027b8:	bf00      	nop
 80027ba:	3714      	adds	r7, #20
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr
 80027c4:	0000      	movs	r0, r0
	...

080027c8 <MS5611_Calc_gForce>:

/*! It's applied force on to the object that is given mass from the user. =" gForce = ObjectMass * (VerticalAcceleration / 9.80) " */
void MS5611_Calc_gForce(MS5611_HandleTypeDef *dev, float *MS5611_gForce, float SatCar_Mass, float MS5611_VertAcc){
 80027c8:	b5b0      	push	{r4, r5, r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	ed87 0a01 	vstr	s0, [r7, #4]
 80027d6:	edc7 0a00 	vstr	s1, [r7]

	(*MS5611_gForce) = (((MS5611_VertAcc)/GravityAccel)*(SatCar_Mass));
 80027da:	6838      	ldr	r0, [r7, #0]
 80027dc:	f7fd febc 	bl	8000558 <__aeabi_f2d>
 80027e0:	a30f      	add	r3, pc, #60	@ (adr r3, 8002820 <MS5611_Calc_gForce+0x58>)
 80027e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e6:	f7fe f839 	bl	800085c <__aeabi_ddiv>
 80027ea:	4602      	mov	r2, r0
 80027ec:	460b      	mov	r3, r1
 80027ee:	4614      	mov	r4, r2
 80027f0:	461d      	mov	r5, r3
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f7fd feb0 	bl	8000558 <__aeabi_f2d>
 80027f8:	4602      	mov	r2, r0
 80027fa:	460b      	mov	r3, r1
 80027fc:	4620      	mov	r0, r4
 80027fe:	4629      	mov	r1, r5
 8002800:	f7fd ff02 	bl	8000608 <__aeabi_dmul>
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	4610      	mov	r0, r2
 800280a:	4619      	mov	r1, r3
 800280c:	f7fe f9f4 	bl	8000bf8 <__aeabi_d2f>
 8002810:	4602      	mov	r2, r0
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	601a      	str	r2, [r3, #0]

}
 8002816:	bf00      	nop
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bdb0      	pop	{r4, r5, r7, pc}
 800281e:	bf00      	nop
 8002820:	3f141206 	.word	0x3f141206
 8002824:	40239cc6 	.word	0x40239cc6

08002828 <SubSys_SeparationMechanism_Lock_PayloadToCarrier>:
#include "SubSys_SeparationControl_Driver.h"


void SubSys_SeparationMechanism_Lock_PayloadToCarrier(void){
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0

	SubSys_Actuator_Servo_MoveTo(&dev_Servo_Separation,0);
 800282c:	2100      	movs	r1, #0
 800282e:	4802      	ldr	r0, [pc, #8]	@ (8002838 <SubSys_SeparationMechanism_Lock_PayloadToCarrier+0x10>)
 8002830:	f7fe fbf6 	bl	8001020 <SubSys_Actuator_Servo_MoveTo>

}
 8002834:	bf00      	nop
 8002836:	bd80      	pop	{r7, pc}
 8002838:	20002c58 	.word	0x20002c58

0800283c <SubSys_SeparationMechanism_UnLock_PayloadFromCarrier>:
void SubSys_SeparationMechanism_UnLock_PayloadFromCarrier(void){
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0

	SubSys_Actuator_Servo_MoveTo(&dev_Servo_Separation,90);
 8002840:	215a      	movs	r1, #90	@ 0x5a
 8002842:	4802      	ldr	r0, [pc, #8]	@ (800284c <SubSys_SeparationMechanism_UnLock_PayloadFromCarrier+0x10>)
 8002844:	f7fe fbec 	bl	8001020 <SubSys_Actuator_Servo_MoveTo>

}
 8002848:	bf00      	nop
 800284a:	bd80      	pop	{r7, pc}
 800284c:	20002c58 	.word	0x20002c58

08002850 <HAL_UART_RxCpltCallback>:
#include "SubSys_USART_ReceiveIT_CallBacks_Driver.h"

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]


	/*! which UART interface receive data?
	 * UART2 is for Wireless communication
	 */
	if(huart->Instance == USART2){
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a09      	ldr	r2, [pc, #36]	@ (8002884 <HAL_UART_RxCpltCallback+0x34>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d104      	bne.n	800286c <HAL_UART_RxCpltCallback+0x1c>
		SubSys_WirelessCom_Telemetry_Receive_From_To(Sat_Carrier, Sat_Payload, &dev_WirelessComApp);
 8002862:	4a09      	ldr	r2, [pc, #36]	@ (8002888 <HAL_UART_RxCpltCallback+0x38>)
 8002864:	2102      	movs	r1, #2
 8002866:	2001      	movs	r0, #1
 8002868:	f000 fae4 	bl	8002e34 <SubSys_WirelessCom_Telemetry_Receive_From_To>
	}
	if(huart->Instance == USART1){
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a06      	ldr	r2, [pc, #24]	@ (800288c <HAL_UART_RxCpltCallback+0x3c>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d101      	bne.n	800287a <HAL_UART_RxCpltCallback+0x2a>
		GPS_UART_CallBack();
 8002876:	f7fe ff19 	bl	80016ac <GPS_UART_CallBack>
	}




}
 800287a:	bf00      	nop
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40004400 	.word	0x40004400
 8002888:	20002a34 	.word	0x20002a34
 800288c:	40011000 	.word	0x40011000

08002890 <SubSys_WirelessCom_Config_WORK_MODE>:
	}

}


void SubSys_WirelessCom_Config_WORK_MODE(SubSys_WirelesscomConfig_HandleTypeDef    *dev){
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]

	switch(dev->Mode_SW){
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	7ddb      	ldrb	r3, [r3, #23]
 800289c:	2b03      	cmp	r3, #3
 800289e:	d84f      	bhi.n	8002940 <SubSys_WirelessCom_Config_WORK_MODE+0xb0>
 80028a0:	a201      	add	r2, pc, #4	@ (adr r2, 80028a8 <SubSys_WirelessCom_Config_WORK_MODE+0x18>)
 80028a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028a6:	bf00      	nop
 80028a8:	080028b9 	.word	0x080028b9
 80028ac:	080028db 	.word	0x080028db
 80028b0:	080028fd 	.word	0x080028fd
 80028b4:	0800291f 	.word	0x0800291f

		case NormalMode :	/*! UART and wireless channel are open, transparent transmission is on*/
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M1, GPIO_PIN_RESET);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6858      	ldr	r0, [r3, #4]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	8b5b      	ldrh	r3, [r3, #26]
 80028c0:	2200      	movs	r2, #0
 80028c2:	4619      	mov	r1, r3
 80028c4:	f002 fefc 	bl	80056c0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M0, GPIO_PIN_RESET);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6858      	ldr	r0, [r3, #4]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	8b1b      	ldrh	r3, [r3, #24]
 80028d0:	2200      	movs	r2, #0
 80028d2:	4619      	mov	r1, r3
 80028d4:	f002 fef4 	bl	80056c0 <HAL_GPIO_WritePin>
		break;
 80028d8:	e032      	b.n	8002940 <SubSys_WirelessCom_Config_WORK_MODE+0xb0>

		case WORsending :	/*! WOR Transmitter (it sends packet in every period)*/
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M1, GPIO_PIN_RESET);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6858      	ldr	r0, [r3, #4]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	8b5b      	ldrh	r3, [r3, #26]
 80028e2:	2200      	movs	r2, #0
 80028e4:	4619      	mov	r1, r3
 80028e6:	f002 feeb 	bl	80056c0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M0, GPIO_PIN_SET);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6858      	ldr	r0, [r3, #4]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	8b1b      	ldrh	r3, [r3, #24]
 80028f2:	2201      	movs	r2, #1
 80028f4:	4619      	mov	r1, r3
 80028f6:	f002 fee3 	bl	80056c0 <HAL_GPIO_WritePin>
		break;
 80028fa:	e021      	b.n	8002940 <SubSys_WirelessCom_Config_WORK_MODE+0xb0>

		case WORreceiving :	/*! WOR Receiver (it sends packet in every period)*/
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M1, GPIO_PIN_SET);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6858      	ldr	r0, [r3, #4]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	8b5b      	ldrh	r3, [r3, #26]
 8002904:	2201      	movs	r2, #1
 8002906:	4619      	mov	r1, r3
 8002908:	f002 feda 	bl	80056c0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M0, GPIO_PIN_RESET);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6858      	ldr	r0, [r3, #4]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	8b1b      	ldrh	r3, [r3, #24]
 8002914:	2200      	movs	r2, #0
 8002916:	4619      	mov	r1, r3
 8002918:	f002 fed2 	bl	80056c0 <HAL_GPIO_WritePin>
		break;
 800291c:	e010      	b.n	8002940 <SubSys_WirelessCom_Config_WORK_MODE+0xb0>

		case DeepSleep :	/*! Module goes to sleep so provides you to configure settings*/
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M1, GPIO_PIN_SET);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6858      	ldr	r0, [r3, #4]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	8b5b      	ldrh	r3, [r3, #26]
 8002926:	2201      	movs	r2, #1
 8002928:	4619      	mov	r1, r3
 800292a:	f002 fec9 	bl	80056c0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M0, GPIO_PIN_SET);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6858      	ldr	r0, [r3, #4]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	8b1b      	ldrh	r3, [r3, #24]
 8002936:	2201      	movs	r2, #1
 8002938:	4619      	mov	r1, r3
 800293a:	f002 fec1 	bl	80056c0 <HAL_GPIO_WritePin>
		break;
 800293e:	bf00      	nop

	}

}
 8002940:	bf00      	nop
 8002942:	3708      	adds	r7, #8
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <SubSys_WirelessCom_Telemetry_Transfer_From_To>:
  * 																 	  @arg 1 : Sat_Payload
  * 																  	  @arg 2 : Ground_Sation
  * @param SubSys_WirelessCom_APP_HandleTypeDef *dev_WirelessComApp , created object for wireless communication
  * @retval NONE
  */
void SubSys_WirelessCom_Telemetry_Transfer_From_To(MissionUnit From_X, MissionUnit To_Y, SubSys_WirelessCom_APP_HandleTypeDef *dev_WirelessComApp){
 8002948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800294c:	b0d5      	sub	sp, #340	@ 0x154
 800294e:	af2c      	add	r7, sp, #176	@ 0xb0
 8002950:	4603      	mov	r3, r0
 8002952:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8002956:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800295a:	460b      	mov	r3, r1
 800295c:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96

	/*! Use it when working on Sat_Carrier flight software*/
	if(From_X == Sat_Payload && To_Y == GroundStation){
 8002960:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8002964:	2b02      	cmp	r3, #2
 8002966:	f040 8173 	bne.w	8002c50 <SubSys_WirelessCom_Telemetry_Transfer_From_To+0x308>
 800296a:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 800296e:	2b03      	cmp	r3, #3
 8002970:	f040 816e 	bne.w	8002c50 <SubSys_WirelessCom_Telemetry_Transfer_From_To+0x308>

		/*! Create message packet for Carrier for sending to the Payload*/
		SubSys_WirelessCom_Telemetry_Create_Packet_For(Sat_Payload, dev_WirelessComApp);
 8002974:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002978:	2002      	movs	r0, #2
 800297a:	f000 f975 	bl	8002c68 <SubSys_WirelessCom_Telemetry_Create_Packet_For>

				/* 8 pairs of '<>' and y Byte data are x Byte as total budget*/
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Temp,
 800297e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002982:	33c8      	adds	r3, #200	@ 0xc8
 8002984:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002988:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800298c:	f8d3 21e8 	ldr.w	r2, [r3, #488]	@ 0x1e8
 8002990:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
									   "<%u>,<%d>,<%d>,<%d/%d/%d,%d/%d/%d>,<%.2f>,<%.2f>,<%.2f>,<%.2f>,<%.2f>,<%.2f>,<%.2f>,<%.2f>,<%.6f>,<%.6f>,<%.2f>,<%.2f>,<%.2f>,<%.2f>,<%c,%c,%c,%c>,<%.2f>,<%u>\n",
																		 dev_WirelessComApp->Variable.PAY_NumOfPacket,
																		 dev_WirelessComApp->Variable.PAY_SatelliteStatus,
 8002994:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002998:	f893 31ed 	ldrb.w	r3, [r3, #493]	@ 0x1ed
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Temp,
 800299c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
																		 dev_WirelessComApp->Variable.PAY_SatelliteErrorCode,
 80029a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80029a4:	f893 31ec 	ldrb.w	r3, [r3, #492]	@ 0x1ec
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Temp,
 80029a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
																		 dev_WirelessComApp->Variable.PAY_date,
 80029ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80029b0:	f893 31e0 	ldrb.w	r3, [r3, #480]	@ 0x1e0
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Temp,
 80029b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
																		 dev_WirelessComApp->Variable.PAY_month,
 80029b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80029ba:	f893 31e1 	ldrb.w	r3, [r3, #481]	@ 0x1e1
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Temp,
 80029be:	67bb      	str	r3, [r7, #120]	@ 0x78
																		 dev_WirelessComApp->Variable.PAY_year,
 80029c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80029c4:	f8b3 31e2 	ldrh.w	r3, [r3, #482]	@ 0x1e2
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Temp,
 80029c8:	677b      	str	r3, [r7, #116]	@ 0x74
																		 dev_WirelessComApp->Variable.PAY_hour,
 80029ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80029ce:	f893 31e4 	ldrb.w	r3, [r3, #484]	@ 0x1e4
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Temp,
 80029d2:	673b      	str	r3, [r7, #112]	@ 0x70
																		 dev_WirelessComApp->Variable.PAY_minute,
 80029d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80029d8:	f893 31e5 	ldrb.w	r3, [r3, #485]	@ 0x1e5
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Temp,
 80029dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
																		 dev_WirelessComApp->Variable.PAY_second,
 80029de:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80029e2:	f893 31e6 	ldrb.w	r3, [r3, #486]	@ 0x1e6
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Temp,
 80029e6:	66bb      	str	r3, [r7, #104]	@ 0x68
																		 dev_WirelessComApp->Variable.PAY_Pressure,
 80029e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80029ec:	f8d3 31ac 	ldr.w	r3, [r3, #428]	@ 0x1ac
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Temp,
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7fd fdb1 	bl	8000558 <__aeabi_f2d>
 80029f6:	e9c7 0118 	strd	r0, r1, [r7, #96]	@ 0x60
																		 dev_WirelessComApp->Variable.PAY_Pressure2,
 80029fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80029fe:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Temp,
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7fd fda8 	bl	8000558 <__aeabi_f2d>
 8002a08:	e9c7 0116 	strd	r0, r1, [r7, #88]	@ 0x58
																		 dev_WirelessComApp->Variable.PAY_VertHeight,
 8002a0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002a10:	f8d3 31b4 	ldr.w	r3, [r3, #436]	@ 0x1b4
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Temp,
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7fd fd9f 	bl	8000558 <__aeabi_f2d>
 8002a1a:	e9c7 0114 	strd	r0, r1, [r7, #80]	@ 0x50
																		 dev_WirelessComApp->Variable.PAY_VertHeight2,
 8002a1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002a22:	f8d3 31c0 	ldr.w	r3, [r3, #448]	@ 0x1c0
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Temp,
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7fd fd96 	bl	8000558 <__aeabi_f2d>
 8002a2c:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48
																		 dev_WirelessComApp->Variable.PAY_PAY2CAR_DiffHeight,
 8002a30:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002a34:	f8d3 31f0 	ldr.w	r3, [r3, #496]	@ 0x1f0
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Temp,
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7fd fd8d 	bl	8000558 <__aeabi_f2d>
 8002a3e:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
																		 dev_WirelessComApp->Variable.PAY_VertSpeed,
 8002a42:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002a46:	f8d3 31b0 	ldr.w	r3, [r3, #432]	@ 0x1b0
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Temp,
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7fd fd84 	bl	8000558 <__aeabi_f2d>
 8002a50:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
																		 dev_WirelessComApp->Variable.PAY_Temperature,
 8002a54:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002a58:	f8d3 31b8 	ldr.w	r3, [r3, #440]	@ 0x1b8
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Temp,
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7fd fd7b 	bl	8000558 <__aeabi_f2d>
 8002a62:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
																		 dev_WirelessComApp->Variable.PAY_BatteryVoltage,
 8002a66:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002a6a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Temp,
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7fd fd72 	bl	8000558 <__aeabi_f2d>
 8002a74:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
																		 dev_WirelessComApp->Variable.PAY__GPS_Latitude,
 8002a78:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002a7c:	f8d3 31c8 	ldr.w	r3, [r3, #456]	@ 0x1c8
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Temp,
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7fd fd69 	bl	8000558 <__aeabi_f2d>
 8002a86:	e9c7 0108 	strd	r0, r1, [r7, #32]
																		 dev_WirelessComApp->Variable.PAY__GPS_Longitude,
 8002a8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002a8e:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Temp,
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7fd fd60 	bl	8000558 <__aeabi_f2d>
 8002a98:	e9c7 0106 	strd	r0, r1, [r7, #24]
																		 dev_WirelessComApp->Variable.PAY__GPS_Altitude,
 8002a9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002aa0:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Temp,
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7fd fd57 	bl	8000558 <__aeabi_f2d>
 8002aaa:	e9c7 0104 	strd	r0, r1, [r7, #16]
																		 dev_WirelessComApp->Variable.PAY_Pitch,
 8002aae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002ab2:	f8d3 31d8 	ldr.w	r3, [r3, #472]	@ 0x1d8
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Temp,
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7fd fd4e 	bl	8000558 <__aeabi_f2d>
 8002abc:	4682      	mov	sl, r0
 8002abe:	468b      	mov	fp, r1
																		 dev_WirelessComApp->Variable.PAY_Roll,
 8002ac0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002ac4:	f8d3 31d4 	ldr.w	r3, [r3, #468]	@ 0x1d4
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Temp,
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7fd fd45 	bl	8000558 <__aeabi_f2d>
 8002ace:	4680      	mov	r8, r0
 8002ad0:	4689      	mov	r9, r1
																		 dev_WirelessComApp->Variable.PAY_Yaw,
 8002ad2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002ad6:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Temp,
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7fd fd3c 	bl	8000558 <__aeabi_f2d>
 8002ae0:	4604      	mov	r4, r0
 8002ae2:	460d      	mov	r5, r1
																		 dev_WirelessComApp->Variable.PAY_dataRHRH[0],
 8002ae4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002ae8:	f893 31fc 	ldrb.w	r3, [r3, #508]	@ 0x1fc
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Temp,
 8002aec:	60fb      	str	r3, [r7, #12]
																		 dev_WirelessComApp->Variable.PAY_dataRHRH[1],
 8002aee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002af2:	f893 31fd 	ldrb.w	r3, [r3, #509]	@ 0x1fd
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Temp,
 8002af6:	60bb      	str	r3, [r7, #8]
																		 dev_WirelessComApp->Variable.PAY_dataRHRH[2],
 8002af8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002afc:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Temp,
 8002b00:	607b      	str	r3, [r7, #4]
																		 dev_WirelessComApp->Variable.PAY_dataRHRH[3],
 8002b02:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002b06:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Temp,
 8002b0a:	461e      	mov	r6, r3
																		 dev_WirelessComApp->Variable.PAY_IOT_Temperature,
 8002b0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002b10:	f8d3 31f4 	ldr.w	r3, [r3, #500]	@ 0x1f4
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Temp,
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7fd fd1f 	bl	8000558 <__aeabi_f2d>
 8002b1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002b1e:	f8d3 31f8 	ldr.w	r3, [r3, #504]	@ 0x1f8
 8002b22:	932a      	str	r3, [sp, #168]	@ 0xa8
 8002b24:	e9cd 0128 	strd	r0, r1, [sp, #160]	@ 0xa0
 8002b28:	9627      	str	r6, [sp, #156]	@ 0x9c
 8002b2a:	6879      	ldr	r1, [r7, #4]
 8002b2c:	9126      	str	r1, [sp, #152]	@ 0x98
 8002b2e:	68b9      	ldr	r1, [r7, #8]
 8002b30:	9125      	str	r1, [sp, #148]	@ 0x94
 8002b32:	68f9      	ldr	r1, [r7, #12]
 8002b34:	9124      	str	r1, [sp, #144]	@ 0x90
 8002b36:	e9cd 4522 	strd	r4, r5, [sp, #136]	@ 0x88
 8002b3a:	e9cd 8920 	strd	r8, r9, [sp, #128]	@ 0x80
 8002b3e:	e9cd ab1e 	strd	sl, fp, [sp, #120]	@ 0x78
 8002b42:	ed97 7b04 	vldr	d7, [r7, #16]
 8002b46:	ed8d 7b1c 	vstr	d7, [sp, #112]	@ 0x70
 8002b4a:	ed97 7b06 	vldr	d7, [r7, #24]
 8002b4e:	ed8d 7b1a 	vstr	d7, [sp, #104]	@ 0x68
 8002b52:	ed97 7b08 	vldr	d7, [r7, #32]
 8002b56:	ed8d 7b18 	vstr	d7, [sp, #96]	@ 0x60
 8002b5a:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8002b5e:	ed8d 7b16 	vstr	d7, [sp, #88]	@ 0x58
 8002b62:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8002b66:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 8002b6a:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8002b6e:	ed8d 7b12 	vstr	d7, [sp, #72]	@ 0x48
 8002b72:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 8002b76:	ed8d 7b10 	vstr	d7, [sp, #64]	@ 0x40
 8002b7a:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 8002b7e:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8002b82:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8002b86:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8002b8a:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8002b8e:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8002b92:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 8002b96:	ed8d 7b08 	vstr	d7, [sp, #32]
 8002b9a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002b9c:	9106      	str	r1, [sp, #24]
 8002b9e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8002ba0:	9105      	str	r1, [sp, #20]
 8002ba2:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8002ba4:	9104      	str	r1, [sp, #16]
 8002ba6:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8002ba8:	9103      	str	r1, [sp, #12]
 8002baa:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8002bac:	9102      	str	r1, [sp, #8]
 8002bae:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002bb0:	9101      	str	r1, [sp, #4]
 8002bb2:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8002bb6:	9100      	str	r1, [sp, #0]
 8002bb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002bbc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8002bc0:	4926      	ldr	r1, [pc, #152]	@ (8002c5c <SubSys_WirelessCom_Telemetry_Transfer_From_To+0x314>)
 8002bc2:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8002bc6:	f00c fdf7 	bl	800f7b8 <siprintf>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	4b24      	ldr	r3, [pc, #144]	@ (8002c60 <SubSys_WirelessCom_Telemetry_Transfer_From_To+0x318>)
 8002bd0:	801a      	strh	r2, [r3, #0]
																		 dev_WirelessComApp->Variable.PAY_TeamNumber);



				for(cnt = 0 ; cnt  < Written_Bytes ; cnt++){
 8002bd2:	4b24      	ldr	r3, [pc, #144]	@ (8002c64 <SubSys_WirelessCom_Telemetry_Transfer_From_To+0x31c>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	701a      	strb	r2, [r3, #0]
 8002bd8:	e013      	b.n	8002c02 <SubSys_WirelessCom_Telemetry_Transfer_From_To+0x2ba>

					dev_WirelessComApp->Buffer.Tx[cnt+3] = dev_WirelessComApp->Buffer.Temp[cnt];
 8002bda:	4b22      	ldr	r3, [pc, #136]	@ (8002c64 <SubSys_WirelessCom_Telemetry_Transfer_From_To+0x31c>)
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	4619      	mov	r1, r3
 8002be0:	4b20      	ldr	r3, [pc, #128]	@ (8002c64 <SubSys_WirelessCom_Telemetry_Transfer_From_To+0x31c>)
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	3303      	adds	r3, #3
 8002be6:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8002bea:	440a      	add	r2, r1
 8002bec:	f892 10c8 	ldrb.w	r1, [r2, #200]	@ 0xc8
 8002bf0:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8002bf4:	54d1      	strb	r1, [r2, r3]
				for(cnt = 0 ; cnt  < Written_Bytes ; cnt++){
 8002bf6:	4b1b      	ldr	r3, [pc, #108]	@ (8002c64 <SubSys_WirelessCom_Telemetry_Transfer_From_To+0x31c>)
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	4b19      	ldr	r3, [pc, #100]	@ (8002c64 <SubSys_WirelessCom_Telemetry_Transfer_From_To+0x31c>)
 8002c00:	701a      	strb	r2, [r3, #0]
 8002c02:	4b18      	ldr	r3, [pc, #96]	@ (8002c64 <SubSys_WirelessCom_Telemetry_Transfer_From_To+0x31c>)
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	461a      	mov	r2, r3
 8002c08:	4b15      	ldr	r3, [pc, #84]	@ (8002c60 <SubSys_WirelessCom_Telemetry_Transfer_From_To+0x318>)
 8002c0a:	881b      	ldrh	r3, [r3, #0]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d3e4      	bcc.n	8002bda <SubSys_WirelessCom_Telemetry_Transfer_From_To+0x292>

				}

				for (uint8_t j = (cnt + 3); j < SizeOf_Wireless_TX_Buff_PAYLOAD; j++) {
 8002c10:	4b14      	ldr	r3, [pc, #80]	@ (8002c64 <SubSys_WirelessCom_Telemetry_Transfer_From_To+0x31c>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	3303      	adds	r3, #3
 8002c16:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 8002c1a:	e00a      	b.n	8002c32 <SubSys_WirelessCom_Telemetry_Transfer_From_To+0x2ea>

					dev_WirelessComApp->Buffer.Tx[j] = '*';
 8002c1c:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8002c20:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8002c24:	212a      	movs	r1, #42	@ 0x2a
 8002c26:	54d1      	strb	r1, [r2, r3]
				for (uint8_t j = (cnt + 3); j < SizeOf_Wireless_TX_Buff_PAYLOAD; j++) {
 8002c28:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 8002c32:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8002c36:	2bc7      	cmp	r3, #199	@ 0xc7
 8002c38:	d9f0      	bls.n	8002c1c <SubSys_WirelessCom_Telemetry_Transfer_From_To+0x2d4>

				}

				HAL_UART_Transmit(dev_WirelessComApp->huartX, dev_WirelessComApp->Buffer.Tx , SizeOf_Wireless_TX_Buff_PAYLOAD, 1000);
 8002c3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002c3e:	f8d3 0200 	ldr.w	r0, [r3, #512]	@ 0x200
 8002c42:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002c46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c4a:	22c8      	movs	r2, #200	@ 0xc8
 8002c4c:	f006 fd06 	bl	800965c <HAL_UART_Transmit>
	}

}
 8002c50:	bf00      	nop
 8002c52:	37a4      	adds	r7, #164	@ 0xa4
 8002c54:	46bd      	mov	sp, r7
 8002c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c5a:	bf00      	nop
 8002c5c:	08013e30 	.word	0x08013e30
 8002c60:	20002546 	.word	0x20002546
 8002c64:	20002584 	.word	0x20002584

08002c68 <SubSys_WirelessCom_Telemetry_Create_Packet_For>:
 * 																	   @arg 1 : Sat_Payload
 * 																	   @arg 2 : Ground_Sation
 * @param  : SubSys_WirelessCom_APP_HandleTypeDef *dev_WirelessComApp , created object for wireless communication
 * @retval NONE
 */
void SubSys_WirelessCom_Telemetry_Create_Packet_For(MissionUnit x,SubSys_WirelessCom_APP_HandleTypeDef *dev_WirelessComApp){
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	4603      	mov	r3, r0
 8002c70:	6039      	str	r1, [r7, #0]
 8002c72:	71fb      	strb	r3, [r7, #7]

	switch(x){
 8002c74:	79fb      	ldrb	r3, [r7, #7]
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	f040 80a1 	bne.w	8002dbe <SubSys_WirelessCom_Telemetry_Create_Packet_For+0x156>
		case Sat_Payload :  /*! This case create a packet for transmission from payload to the ground station */

			/*-------------TARGET DEVICE ADDRESS AND CHANNEL INFO----------------*/
			/*! Target device will be Satellite's Payload*/
			dev_WirelessComApp->Buffer.Tx[0] = dev_WirelessComApp->Target_ADDH;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	f893 220c 	ldrb.w	r2, [r3, #524]	@ 0x20c
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	701a      	strb	r2, [r3, #0]
			dev_WirelessComApp->Buffer.Tx[1] = dev_WirelessComApp->Target_ADDL;
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	f893 220d 	ldrb.w	r2, [r3, #525]	@ 0x20d
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	705a      	strb	r2, [r3, #1]
			dev_WirelessComApp->Buffer.Tx[2] = dev_WirelessComApp->Target_Ch;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	f893 220e 	ldrb.w	r2, [r3, #526]	@ 0x20e
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	709a      	strb	r2, [r3, #2]

			/*-------------YOUR DEVICE VARIABLE THAT WILL BE SEND----------------*/ /*Note : Will be system variable opposite to variables*/
			/*From MS5611 & WirelessCommunication device*/
			dev_WirelessComApp->Variable.PAY_Pressure    = MS5611_Press;
 8002c9a:	4b4c      	ldr	r3, [pc, #304]	@ (8002dcc <SubSys_WirelessCom_Telemetry_Create_Packet_For+0x164>)
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
			dev_WirelessComApp->Variable.PAY_Pressure2	 = CarrierPressure;
 8002ca4:	4b4a      	ldr	r3, [pc, #296]	@ (8002dd0 <SubSys_WirelessCom_Telemetry_Create_Packet_For+0x168>)
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	f8c3 21bc 	str.w	r2, [r3, #444]	@ 0x1bc
			dev_WirelessComApp->Variable.PAY_Temperature = MS5611_Temp;
 8002cae:	4b49      	ldr	r3, [pc, #292]	@ (8002dd4 <SubSys_WirelessCom_Telemetry_Create_Packet_For+0x16c>)
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	f8c3 21b8 	str.w	r2, [r3, #440]	@ 0x1b8
			dev_WirelessComApp->Variable.PAY_VertHeight  = MS5611_Altitude;
 8002cb8:	4b47      	ldr	r3, [pc, #284]	@ (8002dd8 <SubSys_WirelessCom_Telemetry_Create_Packet_For+0x170>)
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	f8c3 21b4 	str.w	r2, [r3, #436]	@ 0x1b4
			dev_WirelessComApp->Variable.PAY_VertHeight2 = CarrierVertHeight;
 8002cc2:	4b46      	ldr	r3, [pc, #280]	@ (8002ddc <SubSys_WirelessCom_Telemetry_Create_Packet_For+0x174>)
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	f8c3 21c0 	str.w	r2, [r3, #448]	@ 0x1c0
			dev_WirelessComApp->Variable.PAY_VertSpeed   = MS5611_VertSpeed;
 8002ccc:	4b44      	ldr	r3, [pc, #272]	@ (8002de0 <SubSys_WirelessCom_Telemetry_Create_Packet_For+0x178>)
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0
			dev_WirelessComApp->Variable.PAY_PAY2CAR_DiffHeight = PAY2CAR_DiffHeight;
 8002cd6:	4b43      	ldr	r3, [pc, #268]	@ (8002de4 <SubSys_WirelessCom_Telemetry_Create_Packet_For+0x17c>)
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	f8c3 21f0 	str.w	r2, [r3, #496]	@ 0x1f0

			/*From ADC*/
			dev_WirelessComApp->Variable.PAY_BatteryVoltage = BatteryVoltage;
 8002ce0:	4b41      	ldr	r3, [pc, #260]	@ (8002de8 <SubSys_WirelessCom_Telemetry_Create_Packet_For+0x180>)
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	f8c3 21c4 	str.w	r2, [r3, #452]	@ 0x1c4

			/*From L-86GPS*/
			dev_WirelessComApp->Variable.PAY__GPS_Latitude  = GPS_Latitude;
 8002cea:	4b40      	ldr	r3, [pc, #256]	@ (8002dec <SubSys_WirelessCom_Telemetry_Create_Packet_For+0x184>)
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	f8c3 21c8 	str.w	r2, [r3, #456]	@ 0x1c8
			dev_WirelessComApp->Variable.PAY__GPS_Longitude = GPS_Longitude;
 8002cf4:	4b3e      	ldr	r3, [pc, #248]	@ (8002df0 <SubSys_WirelessCom_Telemetry_Create_Packet_For+0x188>)
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	f8c3 21cc 	str.w	r2, [r3, #460]	@ 0x1cc
			dev_WirelessComApp->Variable.PAY__GPS_Altitude  = GPS_Altitude;
 8002cfe:	4b3d      	ldr	r3, [pc, #244]	@ (8002df4 <SubSys_WirelessCom_Telemetry_Create_Packet_For+0x18c>)
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	f8c3 21d0 	str.w	r2, [r3, #464]	@ 0x1d0

			/*! Each time a packet is generated, the count will increase by 1*/
			dev_WirelessComApp->Variable.PAY_NumOfPacket    = NumberOfTelePacket;
 8002d08:	4b3b      	ldr	r3, [pc, #236]	@ (8002df8 <SubSys_WirelessCom_Telemetry_Create_Packet_For+0x190>)
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	f8c3 21e8 	str.w	r2, [r3, #488]	@ 0x1e8

			/*From FlightStatus driver*/
			dev_WirelessComApp->Variable.PAY_SatelliteStatus = SatelliteStatus;
 8002d12:	4b3a      	ldr	r3, [pc, #232]	@ (8002dfc <SubSys_WirelessCom_Telemetry_Create_Packet_For+0x194>)
 8002d14:	781a      	ldrb	r2, [r3, #0]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	f883 21ed 	strb.w	r2, [r3, #493]	@ 0x1ed

			/*From ARAS driver*/
			dev_WirelessComApp->Variable.PAY_SatelliteErrorCode = SatelliteErrorCode;
 8002d1c:	4b38      	ldr	r3, [pc, #224]	@ (8002e00 <SubSys_WirelessCom_Telemetry_Create_Packet_For+0x198>)
 8002d1e:	781a      	ldrb	r2, [r3, #0]
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	f883 21ec 	strb.w	r2, [r3, #492]	@ 0x1ec

			/*From RTC module*/
			dev_WirelessComApp->Variable.PAY_date	= date;
 8002d26:	4b37      	ldr	r3, [pc, #220]	@ (8002e04 <SubSys_WirelessCom_Telemetry_Create_Packet_For+0x19c>)
 8002d28:	781a      	ldrb	r2, [r3, #0]
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	f883 21e0 	strb.w	r2, [r3, #480]	@ 0x1e0
			dev_WirelessComApp->Variable.PAY_month	= month;
 8002d30:	4b35      	ldr	r3, [pc, #212]	@ (8002e08 <SubSys_WirelessCom_Telemetry_Create_Packet_For+0x1a0>)
 8002d32:	781a      	ldrb	r2, [r3, #0]
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	f883 21e1 	strb.w	r2, [r3, #481]	@ 0x1e1
			dev_WirelessComApp->Variable.PAY_year	= year;
 8002d3a:	4b34      	ldr	r3, [pc, #208]	@ (8002e0c <SubSys_WirelessCom_Telemetry_Create_Packet_For+0x1a4>)
 8002d3c:	881a      	ldrh	r2, [r3, #0]
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	f8a3 21e2 	strh.w	r2, [r3, #482]	@ 0x1e2
			dev_WirelessComApp->Variable.PAY_hour	= hour;
 8002d44:	4b32      	ldr	r3, [pc, #200]	@ (8002e10 <SubSys_WirelessCom_Telemetry_Create_Packet_For+0x1a8>)
 8002d46:	781a      	ldrb	r2, [r3, #0]
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
			dev_WirelessComApp->Variable.PAY_minute	= minute;
 8002d4e:	4b31      	ldr	r3, [pc, #196]	@ (8002e14 <SubSys_WirelessCom_Telemetry_Create_Packet_For+0x1ac>)
 8002d50:	781a      	ldrb	r2, [r3, #0]
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	f883 21e5 	strb.w	r2, [r3, #485]	@ 0x1e5
			dev_WirelessComApp->Variable.PAY_second = second;
 8002d58:	4b2f      	ldr	r3, [pc, #188]	@ (8002e18 <SubSys_WirelessCom_Telemetry_Create_Packet_For+0x1b0>)
 8002d5a:	781a      	ldrb	r2, [r3, #0]
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	f883 21e6 	strb.w	r2, [r3, #486]	@ 0x1e6

			/*From IMU*/
			dev_WirelessComApp->Variable.PAY_Pitch	= euler_pitch;
 8002d62:	4b2e      	ldr	r3, [pc, #184]	@ (8002e1c <SubSys_WirelessCom_Telemetry_Create_Packet_For+0x1b4>)
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	f8c3 21d8 	str.w	r2, [r3, #472]	@ 0x1d8
			dev_WirelessComApp->Variable.PAY_Roll	= euler_roll;
 8002d6c:	4b2c      	ldr	r3, [pc, #176]	@ (8002e20 <SubSys_WirelessCom_Telemetry_Create_Packet_For+0x1b8>)
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	f8c3 21d4 	str.w	r2, [r3, #468]	@ 0x1d4
			dev_WirelessComApp->Variable.PAY_Yaw	= euler_yaw;
 8002d76:	4b2b      	ldr	r3, [pc, #172]	@ (8002e24 <SubSys_WirelessCom_Telemetry_Create_Packet_For+0x1bc>)
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	f8c3 21dc 	str.w	r2, [r3, #476]	@ 0x1dc

			/*From GroundStation PC telecommand*/
			dev_WirelessComApp->Variable.PAY_dataRHRH[0] = command_RHRH[0];
 8002d80:	4b29      	ldr	r3, [pc, #164]	@ (8002e28 <SubSys_WirelessCom_Telemetry_Create_Packet_For+0x1c0>)
 8002d82:	781a      	ldrb	r2, [r3, #0]
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	f883 21fc 	strb.w	r2, [r3, #508]	@ 0x1fc
			dev_WirelessComApp->Variable.PAY_dataRHRH[1] = command_RHRH[1];
 8002d8a:	4b27      	ldr	r3, [pc, #156]	@ (8002e28 <SubSys_WirelessCom_Telemetry_Create_Packet_For+0x1c0>)
 8002d8c:	785a      	ldrb	r2, [r3, #1]
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	f883 21fd 	strb.w	r2, [r3, #509]	@ 0x1fd
			dev_WirelessComApp->Variable.PAY_dataRHRH[2] = command_RHRH[2];
 8002d94:	4b24      	ldr	r3, [pc, #144]	@ (8002e28 <SubSys_WirelessCom_Telemetry_Create_Packet_For+0x1c0>)
 8002d96:	789a      	ldrb	r2, [r3, #2]
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	f883 21fe 	strb.w	r2, [r3, #510]	@ 0x1fe
			dev_WirelessComApp->Variable.PAY_dataRHRH[3] = command_RHRH[3];
 8002d9e:	4b22      	ldr	r3, [pc, #136]	@ (8002e28 <SubSys_WirelessCom_Telemetry_Create_Packet_For+0x1c0>)
 8002da0:	78da      	ldrb	r2, [r3, #3]
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff

			/*From Ground Station*/
			dev_WirelessComApp->Variable.PAY_IOT_Temperature = GroundStation_IOTTemparature;
 8002da8:	4b20      	ldr	r3, [pc, #128]	@ (8002e2c <SubSys_WirelessCom_Telemetry_Create_Packet_For+0x1c4>)
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	f8c3 21f4 	str.w	r2, [r3, #500]	@ 0x1f4


			/*From main.c code block*/
			dev_WirelessComApp->Variable.PAY_TeamNumber = Race_TeamNo;
 8002db2:	4b1f      	ldr	r3, [pc, #124]	@ (8002e30 <SubSys_WirelessCom_Telemetry_Create_Packet_For+0x1c8>)
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	f8c3 21f8 	str.w	r2, [r3, #504]	@ 0x1f8

			break;
 8002dbc:	bf00      	nop

		   }

}
 8002dbe:	bf00      	nop
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	200029e0 	.word	0x200029e0
 8002dd0:	20002c78 	.word	0x20002c78
 8002dd4:	200029e4 	.word	0x200029e4
 8002dd8:	200029e8 	.word	0x200029e8
 8002ddc:	20002c7c 	.word	0x20002c7c
 8002de0:	200029ec 	.word	0x200029ec
 8002de4:	20002c74 	.word	0x20002c74
 8002de8:	20002a00 	.word	0x20002a00
 8002dec:	20002a0c 	.word	0x20002a0c
 8002df0:	20002a08 	.word	0x20002a08
 8002df4:	20002a04 	.word	0x20002a04
 8002df8:	20002c70 	.word	0x20002c70
 8002dfc:	20002c68 	.word	0x20002c68
 8002e00:	20002c69 	.word	0x20002c69
 8002e04:	20002c50 	.word	0x20002c50
 8002e08:	20002c51 	.word	0x20002c51
 8002e0c:	20002c52 	.word	0x20002c52
 8002e10:	20002c54 	.word	0x20002c54
 8002e14:	20002c55 	.word	0x20002c55
 8002e18:	20002c56 	.word	0x20002c56
 8002e1c:	20002c48 	.word	0x20002c48
 8002e20:	20002c44 	.word	0x20002c44
 8002e24:	20002c4c 	.word	0x20002c4c
 8002e28:	20002c84 	.word	0x20002c84
 8002e2c:	20002c80 	.word	0x20002c80
 8002e30:	08014140 	.word	0x08014140

08002e34 <SubSys_WirelessCom_Telemetry_Receive_From_To>:
void SubSys_WirelessCom_Telemetry_Receive_From_To(MissionUnit From_X, MissionUnit To_Y, SubSys_WirelessCom_APP_HandleTypeDef *dev_WirelessComApp){
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	603a      	str	r2, [r7, #0]
 8002e3e:	71fb      	strb	r3, [r7, #7]
 8002e40:	460b      	mov	r3, r1
 8002e42:	71bb      	strb	r3, [r7, #6]
					 * We need to parse the incoming array so that we can learn it.
					 * If the message packet contains the 'C' character, then this message belongs to the Carrier
					 * If the message packet contains the 'G' character, then this message belongs to the Ground Station*/

					/* The data sequence in the telemetry packet is as follows: <ADDH><ADDL><CHN><FromWhereCharacter><SatelliteDatas....>"*/
					if(dev_WirelessComApp->Buffer.Rx[0] == 'C')
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	f893 3190 	ldrb.w	r3, [r3, #400]	@ 0x190
 8002e4a:	2b43      	cmp	r3, #67	@ 0x43
 8002e4c:	d11f      	bne.n	8002e8e <SubSys_WirelessCom_Telemetry_Receive_From_To+0x5a>
					{
						extractValues_Carrier(dev_WirelessComApp->Buffer.Rx, value1, value2);
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8002e54:	4a30      	ldr	r2, [pc, #192]	@ (8002f18 <SubSys_WirelessCom_Telemetry_Receive_From_To+0xe4>)
 8002e56:	4931      	ldr	r1, [pc, #196]	@ (8002f1c <SubSys_WirelessCom_Telemetry_Receive_From_To+0xe8>)
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f000 f86d 	bl	8002f38 <extractValues_Carrier>

						CarrierPressure   = atof(value1);
 8002e5e:	482f      	ldr	r0, [pc, #188]	@ (8002f1c <SubSys_WirelessCom_Telemetry_Receive_From_To+0xe8>)
 8002e60:	f00a ff65 	bl	800dd2e <atof>
 8002e64:	ec53 2b10 	vmov	r2, r3, d0
 8002e68:	4610      	mov	r0, r2
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	f7fd fec4 	bl	8000bf8 <__aeabi_d2f>
 8002e70:	4603      	mov	r3, r0
 8002e72:	4a2b      	ldr	r2, [pc, #172]	@ (8002f20 <SubSys_WirelessCom_Telemetry_Receive_From_To+0xec>)
 8002e74:	6013      	str	r3, [r2, #0]
						CarrierVertHeight = atof(value2);
 8002e76:	4828      	ldr	r0, [pc, #160]	@ (8002f18 <SubSys_WirelessCom_Telemetry_Receive_From_To+0xe4>)
 8002e78:	f00a ff59 	bl	800dd2e <atof>
 8002e7c:	ec53 2b10 	vmov	r2, r3, d0
 8002e80:	4610      	mov	r0, r2
 8002e82:	4619      	mov	r1, r3
 8002e84:	f7fd feb8 	bl	8000bf8 <__aeabi_d2f>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	4a26      	ldr	r2, [pc, #152]	@ (8002f24 <SubSys_WirelessCom_Telemetry_Receive_From_To+0xf0>)
 8002e8c:	6013      	str	r3, [r2, #0]

					}

					if(dev_WirelessComApp->Buffer.Rx[0] == 'G')
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	f893 3190 	ldrb.w	r3, [r3, #400]	@ 0x190
 8002e94:	2b47      	cmp	r3, #71	@ 0x47
 8002e96:	d131      	bne.n	8002efc <SubSys_WirelessCom_Telemetry_Receive_From_To+0xc8>
						 *
						 *	"G<RHRH+><IOTdata>" or "G<RHRH-><IOTdata>"
						 */

						/*! RHRH data */
						command_RHRH[0] = dev_WirelessComApp->Buffer.Rx[2];
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	f893 2192 	ldrb.w	r2, [r3, #402]	@ 0x192
 8002e9e:	4b22      	ldr	r3, [pc, #136]	@ (8002f28 <SubSys_WirelessCom_Telemetry_Receive_From_To+0xf4>)
 8002ea0:	701a      	strb	r2, [r3, #0]
						command_RHRH[1] = dev_WirelessComApp->Buffer.Rx[3];
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	f893 2193 	ldrb.w	r2, [r3, #403]	@ 0x193
 8002ea8:	4b1f      	ldr	r3, [pc, #124]	@ (8002f28 <SubSys_WirelessCom_Telemetry_Receive_From_To+0xf4>)
 8002eaa:	705a      	strb	r2, [r3, #1]
						command_RHRH[2] = dev_WirelessComApp->Buffer.Rx[4];
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	f893 2194 	ldrb.w	r2, [r3, #404]	@ 0x194
 8002eb2:	4b1d      	ldr	r3, [pc, #116]	@ (8002f28 <SubSys_WirelessCom_Telemetry_Receive_From_To+0xf4>)
 8002eb4:	709a      	strb	r2, [r3, #2]
						command_RHRH[3] = dev_WirelessComApp->Buffer.Rx[5];
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	f893 2195 	ldrb.w	r2, [r3, #405]	@ 0x195
 8002ebc:	4b1a      	ldr	r3, [pc, #104]	@ (8002f28 <SubSys_WirelessCom_Telemetry_Receive_From_To+0xf4>)
 8002ebe:	70da      	strb	r2, [r3, #3]

						/*! +,- ==> '+' symbol means that manual separation should be performed
						 *      ==> '-' symbol means that manual separation should not be performed
						 */
						ManuelSeparationCommand = dev_WirelessComApp->Buffer.Rx[6];
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	f893 2196 	ldrb.w	r2, [r3, #406]	@ 0x196
 8002ec6:	4b19      	ldr	r3, [pc, #100]	@ (8002f2c <SubSys_WirelessCom_Telemetry_Receive_From_To+0xf8>)
 8002ec8:	701a      	strb	r2, [r3, #0]

						if(ManuelSeparationCommand == '+'){
 8002eca:	4b18      	ldr	r3, [pc, #96]	@ (8002f2c <SubSys_WirelessCom_Telemetry_Receive_From_To+0xf8>)
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	2b2b      	cmp	r3, #43	@ 0x2b
 8002ed0:	d101      	bne.n	8002ed6 <SubSys_WirelessCom_Telemetry_Receive_From_To+0xa2>

							SubSys_SeparationMechanism_UnLock_PayloadFromCarrier();
 8002ed2:	f7ff fcb3 	bl	800283c <SubSys_SeparationMechanism_UnLock_PayloadFromCarrier>

						}

						extractValues_GroundStation(dev_WirelessComApp->Buffer.Rx, value3);
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8002edc:	4914      	ldr	r1, [pc, #80]	@ (8002f30 <SubSys_WirelessCom_Telemetry_Receive_From_To+0xfc>)
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f000 f88e 	bl	8003000 <extractValues_GroundStation>
						GroundStation_IOTTemparature = atof(value3);
 8002ee4:	4812      	ldr	r0, [pc, #72]	@ (8002f30 <SubSys_WirelessCom_Telemetry_Receive_From_To+0xfc>)
 8002ee6:	f00a ff22 	bl	800dd2e <atof>
 8002eea:	ec53 2b10 	vmov	r2, r3, d0
 8002eee:	4610      	mov	r0, r2
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	f7fd fe81 	bl	8000bf8 <__aeabi_d2f>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	4a0e      	ldr	r2, [pc, #56]	@ (8002f34 <SubSys_WirelessCom_Telemetry_Receive_From_To+0x100>)
 8002efa:	6013      	str	r3, [r2, #0]

					/*! Contanie to receive data from carrier unit or ground station.
					 *  Good news and bad news, all of them can be filled but the order of the data can be stuck
					 *  We'll see bro
					 */
					HAL_UART_Receive_IT(dev_WirelessComApp->huartX, (uint8_t *)dev_WirelessComApp->Buffer.Rx, sizeof(dev_WirelessComApp->Buffer.Rx));
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	f8d3 0200 	ldr.w	r0, [r3, #512]	@ 0x200
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8002f08:	221b      	movs	r2, #27
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	f006 fc31 	bl	8009772 <HAL_UART_Receive_IT>

}
 8002f10:	bf00      	nop
 8002f12:	3708      	adds	r7, #8
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	2000255c 	.word	0x2000255c
 8002f1c:	20002548 	.word	0x20002548
 8002f20:	20002c78 	.word	0x20002c78
 8002f24:	20002c7c 	.word	0x20002c7c
 8002f28:	20002c84 	.word	0x20002c84
 8002f2c:	20002c6b 	.word	0x20002c6b
 8002f30:	20002570 	.word	0x20002570
 8002f34:	20002c80 	.word	0x20002c80

08002f38 <extractValues_Carrier>:

#include "SubSys_WirelessCommunication_Telemetry_ExtractValue_Driver.h"

void extractValues_Carrier(const char* input, char* value1, char* value2){
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b088      	sub	sp, #32
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
    const char* start = strchr(input, '<');
 8002f44:	213c      	movs	r1, #60	@ 0x3c
 8002f46:	68f8      	ldr	r0, [r7, #12]
 8002f48:	f00c fd62 	bl	800fa10 <strchr>
 8002f4c:	61f8      	str	r0, [r7, #28]
    if (start != NULL) {
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d04b      	beq.n	8002fec <extractValues_Carrier+0xb4>
        start++;  // '<' karakterinin sonrasına geç
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	3301      	adds	r3, #1
 8002f58:	61fb      	str	r3, [r7, #28]
        const char* end = strchr(start, '>');
 8002f5a:	213e      	movs	r1, #62	@ 0x3e
 8002f5c:	69f8      	ldr	r0, [r7, #28]
 8002f5e:	f00c fd57 	bl	800fa10 <strchr>
 8002f62:	61b8      	str	r0, [r7, #24]
        if (end != NULL) {
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d039      	beq.n	8002fde <extractValues_Carrier+0xa6>
            size_t length = end - start;  // İlk '<' ve '>' arasındaki uzunluk
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	617b      	str	r3, [r7, #20]
            strncpy(value1, start, length);  // İlk değeri kopyala
 8002f72:	697a      	ldr	r2, [r7, #20]
 8002f74:	69f9      	ldr	r1, [r7, #28]
 8002f76:	68b8      	ldr	r0, [r7, #8]
 8002f78:	f00c fd69 	bl	800fa4e <strncpy>
            value1[length] = '\0';  // Null karakter ekle
 8002f7c:	68ba      	ldr	r2, [r7, #8]
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	4413      	add	r3, r2
 8002f82:	2200      	movs	r2, #0
 8002f84:	701a      	strb	r2, [r3, #0]

            start = strchr(end + 1, '<');
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	3301      	adds	r3, #1
 8002f8a:	213c      	movs	r1, #60	@ 0x3c
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f00c fd3f 	bl	800fa10 <strchr>
 8002f92:	61f8      	str	r0, [r7, #28]
            if (start != NULL) {
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d01d      	beq.n	8002fd6 <extractValues_Carrier+0x9e>
                start++;  // İkinci '<' karakterinin sonrasına geç
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	61fb      	str	r3, [r7, #28]
                end = strchr(start, '>');
 8002fa0:	213e      	movs	r1, #62	@ 0x3e
 8002fa2:	69f8      	ldr	r0, [r7, #28]
 8002fa4:	f00c fd34 	bl	800fa10 <strchr>
 8002fa8:	61b8      	str	r0, [r7, #24]
                if (end != NULL) {
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00e      	beq.n	8002fce <extractValues_Carrier+0x96>
                    length = end - start;  // İkinci '<' ve '>' arasındaki uzunluk
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	617b      	str	r3, [r7, #20]
                    strncpy(value2, start, length);  // İkinci değeri kopyala
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	69f9      	ldr	r1, [r7, #28]
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f00c fd46 	bl	800fa4e <strncpy>
                    value2[length] = '\0';  // Null karakter ekle
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	2200      	movs	r2, #0
 8002fca:	701a      	strb	r2, [r3, #0]
    } else {
        value1[0] = '\0';  // İlk '<' bulunamazsa boş string döndür
        value2[0] = '\0';  // İkinci '<' ve '>' arasında veri yoksa boş string döndür
    }

}
 8002fcc:	e014      	b.n	8002ff8 <extractValues_Carrier+0xc0>
                    value2[0] = '\0';  // İkinci değer yoksa boş string döndür
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	701a      	strb	r2, [r3, #0]
}
 8002fd4:	e010      	b.n	8002ff8 <extractValues_Carrier+0xc0>
                value2[0] = '\0';  // İkinci '<' bulunamazsa boş string döndür
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	701a      	strb	r2, [r3, #0]
}
 8002fdc:	e00c      	b.n	8002ff8 <extractValues_Carrier+0xc0>
            value1[0] = '\0';  // İlk '>' bulunamazsa boş string döndür
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	701a      	strb	r2, [r3, #0]
            value2[0] = '\0';  // İkinci '<' ve '>' arasında veri yoksa boş string döndür
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	701a      	strb	r2, [r3, #0]
}
 8002fea:	e005      	b.n	8002ff8 <extractValues_Carrier+0xc0>
        value1[0] = '\0';  // İlk '<' bulunamazsa boş string döndür
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	701a      	strb	r2, [r3, #0]
        value2[0] = '\0';  // İkinci '<' ve '>' arasında veri yoksa boş string döndür
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	701a      	strb	r2, [r3, #0]
}
 8002ff8:	bf00      	nop
 8002ffa:	3720      	adds	r7, #32
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <extractValues_GroundStation>:

void extractValues_GroundStation(const char* input, char* value3){
 8003000:	b580      	push	{r7, lr}
 8003002:	b086      	sub	sp, #24
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
	 const char* start = strchr(input, '<');					/*! input dizisi içinde İlk '<' karakterini bul ve adresini sakla*/
 800300a:	213c      	movs	r1, #60	@ 0x3c
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f00c fcff 	bl	800fa10 <strchr>
 8003012:	6178      	str	r0, [r7, #20]
	 if (start != NULL) {										/*! Eğer başlangıç adresi NULL dan farklıysa bu dizide veri var anlamına geliyor*/
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d018      	beq.n	800304c <extractValues_GroundStation+0x4c>
		 start+=8;  											/*! '<' karakterinin sonrasına geç adresini +1byte arttırmayı sağlıyor  */
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	3308      	adds	r3, #8
 800301e:	617b      	str	r3, [r7, #20]
		 const char* end = strchr(start, '>');					/*! Start adresinden itibaren ilk '>' verisine ulaş ve onun adresini al */
 8003020:	213e      	movs	r1, #62	@ 0x3e
 8003022:	6978      	ldr	r0, [r7, #20]
 8003024:	f00c fcf4 	bl	800fa10 <strchr>
 8003028:	6138      	str	r0, [r7, #16]
		 if (end != NULL) {										/*! Bitiş adresi de NULL karakterden farklıysa burada da veri var		*/
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00d      	beq.n	800304c <extractValues_GroundStation+0x4c>
			 size_t length = end - start;  						/*! İlk '<' ve '>' arasındaki uzunluğu al 1byte*length olmuş olcak 		*/
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	60fb      	str	r3, [r7, #12]
			 strncpy(value3, start, length);  					/*! Start dizisinden Value3 dizisine lenght kadarını kopyala	*/
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	6979      	ldr	r1, [r7, #20]
 800303c:	6838      	ldr	r0, [r7, #0]
 800303e:	f00c fd06 	bl	800fa4e <strncpy>
			 value3[length] = '\0';  							/*! Null karakter ekle dizinin sonuna										*/
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	4413      	add	r3, r2
 8003048:	2200      	movs	r2, #0
 800304a:	701a      	strb	r2, [r3, #0]
		 }

	 }

}
 800304c:	bf00      	nop
 800304e:	3718      	adds	r7, #24
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003058:	f001 f986 	bl	8004368 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800305c:	f000 f8c2 	bl	80031e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003060:	f000 fbda 	bl	8003818 <MX_GPIO_Init>
  MX_DMA_Init();
 8003064:	f000 fbb0 	bl	80037c8 <MX_DMA_Init>
  MX_I2C1_Init();
 8003068:	f000 f976 	bl	8003358 <MX_I2C1_Init>
  MX_ADC1_Init();
 800306c:	f000 f922 	bl	80032b4 <MX_ADC1_Init>
  MX_TIM3_Init();
 8003070:	f000 fafc 	bl	800366c <MX_TIM3_Init>
  MX_SDIO_SD_Init();
 8003074:	f000 f9fa 	bl	800346c <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8003078:	f008 f86a 	bl	800b150 <MX_FATFS_Init>
  MX_USART1_UART_Init();
 800307c:	f000 fb50 	bl	8003720 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8003080:	f000 f998 	bl	80033b4 <MX_I2C2_Init>
  MX_TIM1_Init();
 8003084:	f000 fa14 	bl	80034b0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8003088:	f000 fa96 	bl	80035b8 <MX_TIM2_Init>
  MX_I2C3_Init();
 800308c:	f000 f9c0 	bl	8003410 <MX_I2C3_Init>
  MX_USART2_UART_Init();
 8003090:	f000 fb70 	bl	8003774 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /******>>> SENSOR BATTERY INIT BEGIN >>>******/
  	#ifdef SAT_PAYLOAD_SUBSYS_DRIVERS_SENSOR_BATTERY_H
  	NumSerialBat = 2;	/*! Number of serial connection battery */
 8003094:	4b41      	ldr	r3, [pc, #260]	@ (800319c <main+0x148>)
 8003096:	2202      	movs	r2, #2
 8003098:	701a      	strb	r2, [r3, #0]
  	MeasBattery_Init(NumSerialBat);
 800309a:	4b40      	ldr	r3, [pc, #256]	@ (800319c <main+0x148>)
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	f7fe faa6 	bl	80015f0 <MeasBattery_Init>
  /******<<< SENSOR BATTERY INIT END <<<******/


  /******>>> SENSOR TPGVH INITIALIZATION BEGIN >>>******/
  	#ifdef SAT_PAYLOAD_SUBSYS_DRIVERS_SENSOR_TPGVH_H
  	MS5611.I2C_ADDRESS = MS5611_I2C_ADDRESS_H;
 80030a4:	4b3e      	ldr	r3, [pc, #248]	@ (80031a0 <main+0x14c>)
 80030a6:	22ee      	movs	r2, #238	@ 0xee
 80030a8:	809a      	strh	r2, [r3, #4]
  	MS5611.i2c = &hi2c1;
 80030aa:	4b3d      	ldr	r3, [pc, #244]	@ (80031a0 <main+0x14c>)
 80030ac:	4a3d      	ldr	r2, [pc, #244]	@ (80031a4 <main+0x150>)
 80030ae:	601a      	str	r2, [r3, #0]
  	MS5611.Ref_Alt_Sel = 'm';
 80030b0:	4b3b      	ldr	r3, [pc, #236]	@ (80031a0 <main+0x14c>)
 80030b2:	226d      	movs	r2, #109	@ 0x6d
 80030b4:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
  	MS5611_Init(&MS5611);
 80030b8:	4839      	ldr	r0, [pc, #228]	@ (80031a0 <main+0x14c>)
 80030ba:	f7fe fe0b 	bl	8001cd4 <MS5611_Init>
	 * APB1 Timer Clock = 50MHz
	 * PSC = 183-1
	 * ARR = 100-1
	 * PSC and ARR's parameters for 2.73KHz passive buzzer module
	 */
	PassiveBuzz_Init(&htim3, TIM_CHANNEL_1);
 80030be:	2100      	movs	r1, #0
 80030c0:	4839      	ldr	r0, [pc, #228]	@ (80031a8 <main+0x154>)
 80030c2:	f7fe f8ad 	bl	8001220 <PassiveBuzz_Init>
	#ifdef SAT_PAYLOAD_SUBSYS_DRIVERS_SDCARD_H
	/*! We create a buffer that contains the satellite's variables, and we fill it with variables from SD_Data objects */
	extern char SdDatasBuf[LineSize];

	/*!(@warning)	Don't write "E:" , "e:",  "e\" */
	SD_Mount("E/", 0);
 80030c6:	2100      	movs	r1, #0
 80030c8:	4838      	ldr	r0, [pc, #224]	@ (80031ac <main+0x158>)
 80030ca:	f7fe f9f9 	bl	80014c0 <SD_Mount>
	 * 				Finally put our variable buffer
	 *
	 * @Attention!   : If you use lowercase letters, this function will reverse the name to uppercase letters as given below
	 * 					(e.g)CAR_Raw ==> CAR_RAW
	 */
	SD_Create_Dir_File("SAT_CAR", "SAT_CAR/STM32.TXT", SdDatasBuf);
 80030ce:	4a38      	ldr	r2, [pc, #224]	@ (80031b0 <main+0x15c>)
 80030d0:	4938      	ldr	r1, [pc, #224]	@ (80031b4 <main+0x160>)
 80030d2:	4839      	ldr	r0, [pc, #228]	@ (80031b8 <main+0x164>)
 80030d4:	f7fe fa12 	bl	80014fc <SD_Create_Dir_File>
  /******<<< SD CARD INITIALIZATION END <<<******/


  /******>>> SENSOR GPS INITIALIZATION BEGIN >>>******/
	#ifdef SAT_PAYLOAD_SUBSYS_DRIVERS_SENSOR_GPS_H
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80030d8:	2201      	movs	r2, #1
 80030da:	2101      	movs	r1, #1
 80030dc:	4837      	ldr	r0, [pc, #220]	@ (80031bc <main+0x168>)
 80030de:	f002 faef 	bl	80056c0 <HAL_GPIO_WritePin>
	GPS_Init();
 80030e2:	f7fe fad5 	bl	8001690 <GPS_Init>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80030e6:	2200      	movs	r2, #0
 80030e8:	2101      	movs	r1, #1
 80030ea:	4834      	ldr	r0, [pc, #208]	@ (80031bc <main+0x168>)
 80030ec:	f002 fae8 	bl	80056c0 <HAL_GPIO_WritePin>
	 SubSys_WirelessCom_Config_Init(&dev_WirelessComConfig);
	 #endif

	 #ifdef SAT_PAYLOAD_SUBSYS_DRIVERS_WIRELESSCOMMUNICATION_TELEMETRY_H
	 /*! Will be filled for your dev that use now*/
	 dev_WirelessComApp.huartX = &huart2;
 80030f0:	4b33      	ldr	r3, [pc, #204]	@ (80031c0 <main+0x16c>)
 80030f2:	4a34      	ldr	r2, [pc, #208]	@ (80031c4 <main+0x170>)
 80030f4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
	 dev_WirelessComConfig.Mode_SW = NormalMode; 		/*! UART and wireless channel are open, transparent transmission is on*/
 80030f8:	4b33      	ldr	r3, [pc, #204]	@ (80031c8 <main+0x174>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	75da      	strb	r2, [r3, #23]
	 SubSys_WirelessCom_Config_WORK_MODE(&dev_WirelessComConfig);
 80030fe:	4832      	ldr	r0, [pc, #200]	@ (80031c8 <main+0x174>)
 8003100:	f7ff fbc6 	bl	8002890 <SubSys_WirelessCom_Config_WORK_MODE>

	 /*! Will be filled for the Ground Station(Target) Device */
	 dev_WirelessComApp.Target_ADDH = 0x20;
 8003104:	4b2e      	ldr	r3, [pc, #184]	@ (80031c0 <main+0x16c>)
 8003106:	2220      	movs	r2, #32
 8003108:	f883 220c 	strb.w	r2, [r3, #524]	@ 0x20c
	 dev_WirelessComApp.Target_ADDL = 0x23;
 800310c:	4b2c      	ldr	r3, [pc, #176]	@ (80031c0 <main+0x16c>)
 800310e:	2223      	movs	r2, #35	@ 0x23
 8003110:	f883 220d 	strb.w	r2, [r3, #525]	@ 0x20d
	 dev_WirelessComApp.Target_Ch   = 0x10;
 8003114:	4b2a      	ldr	r3, [pc, #168]	@ (80031c0 <main+0x16c>)
 8003116:	2210      	movs	r2, #16
 8003118:	f883 220e 	strb.w	r2, [r3, #526]	@ 0x20e

	  /*! Interrupt is active for receiving wireless data
	   * You need to cast variable type from char to uint8_t because of the instruction of Uart Receive function*/
	  HAL_UART_Receive_IT(dev_WirelessComApp.huartX, (uint8_t *)dev_WirelessComApp.Buffer.Rx, sizeof(dev_WirelessComApp.Buffer.Rx));
 800311c:	4b28      	ldr	r3, [pc, #160]	@ (80031c0 <main+0x16c>)
 800311e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003122:	221b      	movs	r2, #27
 8003124:	4929      	ldr	r1, [pc, #164]	@ (80031cc <main+0x178>)
 8003126:	4618      	mov	r0, r3
 8003128:	f006 fb23 	bl	8009772 <HAL_UART_Receive_IT>

	/******>>> SERVO SYSTEM INITIALIZATION BEGIN >>>******/
#ifdef SAT_PAYLOAD_SUBSYS_DRIVERS_ACTUATOR_SERVO_H

	/*! Separation system Servo control parameters*/
	dev_Servo_Separation.htim_X 		= &htim1;
 800312c:	4b28      	ldr	r3, [pc, #160]	@ (80031d0 <main+0x17c>)
 800312e:	4a29      	ldr	r2, [pc, #164]	@ (80031d4 <main+0x180>)
 8003130:	601a      	str	r2, [r3, #0]
	dev_Servo_Separation.tim_channel_in = TIM_CHANNEL_2;
 8003132:	4b27      	ldr	r3, [pc, #156]	@ (80031d0 <main+0x17c>)
 8003134:	2204      	movs	r2, #4
 8003136:	605a      	str	r2, [r3, #4]
	SubSys_Actuator_Servo_Init(&dev_Servo_Separation);
 8003138:	4825      	ldr	r0, [pc, #148]	@ (80031d0 <main+0x17c>)
 800313a:	f7fd ff5b 	bl	8000ff4 <SubSys_Actuator_Servo_Init>
		SubSys_Actuator_Servo_MoveTo(&dev_Servo_Separation, 180);
	#endif

	/*! Color Filtering system Servo control parameters*/
	/*! Succes */
	dev_Servo_ColorFilter.htim_X = &htim2;
 800313e:	4b26      	ldr	r3, [pc, #152]	@ (80031d8 <main+0x184>)
 8003140:	4a26      	ldr	r2, [pc, #152]	@ (80031dc <main+0x188>)
 8003142:	601a      	str	r2, [r3, #0]
	dev_Servo_ColorFilter.tim_channel_in = TIM_CHANNEL_1;
 8003144:	4b24      	ldr	r3, [pc, #144]	@ (80031d8 <main+0x184>)
 8003146:	2200      	movs	r2, #0
 8003148:	605a      	str	r2, [r3, #4]
	SubSys_Actuator_Servo_Init(&dev_Servo_ColorFilter);
 800314a:	4823      	ldr	r0, [pc, #140]	@ (80031d8 <main+0x184>)
 800314c:	f7fd ff52 	bl	8000ff4 <SubSys_Actuator_Servo_Init>

	/******>>> RTC SYSTEM INITIALIZATION BEGIN >>>******/
	#ifdef SAT_PAYLOAD_SUBSYS_DRIVERS_SENSOR_RTC_H_

		/*! Config i2c terminal and start the RTC */
		DS1307_Init(&hi2c3);
 8003150:	4823      	ldr	r0, [pc, #140]	@ (80031e0 <main+0x18c>)
 8003152:	f7fe fc7b 	bl	8001a4c <DS1307_Init>

		/*! The code block required to set the date and time.*/
		#ifdef SAT_PAYLOAD_RTC_CONFIG_PERMISSION_HEADERGUARD
		DS1307_SetTimeZone(+3, 00);
 8003156:	2100      	movs	r1, #0
 8003158:	2003      	movs	r0, #3
 800315a:	f7fe fd83 	bl	8001c64 <DS1307_SetTimeZone>
		DS1307_SetDate(5);
 800315e:	2005      	movs	r0, #5
 8003160:	f7fe fcf2 	bl	8001b48 <DS1307_SetDate>
		DS1307_SetMonth(7);
 8003164:	2007      	movs	r0, #7
 8003166:	f7fe fd01 	bl	8001b6c <DS1307_SetMonth>
		DS1307_SetYear(2024);
 800316a:	f44f 60fd 	mov.w	r0, #2024	@ 0x7e8
 800316e:	f7fe fd0f 	bl	8001b90 <DS1307_SetYear>
		DS1307_SetHour(21);
 8003172:	2015      	movs	r0, #21
 8003174:	f7fe fd36 	bl	8001be4 <DS1307_SetHour>
		DS1307_SetMinute(56);
 8003178:	2038      	movs	r0, #56	@ 0x38
 800317a:	f7fe fd48 	bl	8001c0e <DS1307_SetMinute>
		DS1307_SetSecond(48);
 800317e:	2030      	movs	r0, #48	@ 0x30
 8003180:	f7fe fd57 	bl	8001c32 <DS1307_SetSecond>
	/******<<< RTC SYSTEML INITIALIZATION END <<<******/


	/******>>> SEPARATION CONTROL INITIALIZATION BEGIN >>>******/
	#ifdef SAT_PAYLOAD_SUBSYS_DRIVERS_SEPARATION_CONTROL_H
		HAL_Delay(5000);
 8003184:	f241 3088 	movw	r0, #5000	@ 0x1388
 8003188:	f001 f960 	bl	800444c <HAL_Delay>
		SubSys_SeparationMechanism_Lock_PayloadToCarrier();
 800318c:	f7ff fb4c 	bl	8002828 <SubSys_SeparationMechanism_Lock_PayloadToCarrier>


	/******>>> COLOR FILTER CONTROL INITIALIZATION BEGIN >>>******/
	#ifdef SAT_PAYLOAD_SUBSYS_DRIVERS_COLORFILTER_CONTROL_H
		/*! Will be added init code block in here */
		SubSys_ColorFilterMechanism_TurnTo(Filter_None);
 8003190:	2000      	movs	r0, #0
 8003192:	f7fe f893 	bl	80012bc <SubSys_ColorFilterMechanism_TurnTo>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 SubSys_SatelliteMission_Continue();
 8003196:	f7fe f8bf 	bl	8001318 <SubSys_SatelliteMission_Continue>
 800319a:	e7fc      	b.n	8003196 <main+0x142>
 800319c:	200029fc 	.word	0x200029fc
 80031a0:	20002978 	.word	0x20002978
 80031a4:	200025d0 	.word	0x200025d0
 80031a8:	200028a0 	.word	0x200028a0
 80031ac:	080140d0 	.word	0x080140d0
 80031b0:	20002274 	.word	0x20002274
 80031b4:	080140d4 	.word	0x080140d4
 80031b8:	080140e8 	.word	0x080140e8
 80031bc:	40020800 	.word	0x40020800
 80031c0:	20002a34 	.word	0x20002a34
 80031c4:	20002930 	.word	0x20002930
 80031c8:	20002a10 	.word	0x20002a10
 80031cc:	20002bc4 	.word	0x20002bc4
 80031d0:	20002c58 	.word	0x20002c58
 80031d4:	20002810 	.word	0x20002810
 80031d8:	20002c60 	.word	0x20002c60
 80031dc:	20002858 	.word	0x20002858
 80031e0:	20002678 	.word	0x20002678

080031e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b094      	sub	sp, #80	@ 0x50
 80031e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031ea:	f107 0320 	add.w	r3, r7, #32
 80031ee:	2230      	movs	r2, #48	@ 0x30
 80031f0:	2100      	movs	r1, #0
 80031f2:	4618      	mov	r0, r3
 80031f4:	f00c fc04 	bl	800fa00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80031f8:	f107 030c 	add.w	r3, r7, #12
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	605a      	str	r2, [r3, #4]
 8003202:	609a      	str	r2, [r3, #8]
 8003204:	60da      	str	r2, [r3, #12]
 8003206:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003208:	2300      	movs	r3, #0
 800320a:	60bb      	str	r3, [r7, #8]
 800320c:	4b27      	ldr	r3, [pc, #156]	@ (80032ac <SystemClock_Config+0xc8>)
 800320e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003210:	4a26      	ldr	r2, [pc, #152]	@ (80032ac <SystemClock_Config+0xc8>)
 8003212:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003216:	6413      	str	r3, [r2, #64]	@ 0x40
 8003218:	4b24      	ldr	r3, [pc, #144]	@ (80032ac <SystemClock_Config+0xc8>)
 800321a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800321c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003220:	60bb      	str	r3, [r7, #8]
 8003222:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003224:	2300      	movs	r3, #0
 8003226:	607b      	str	r3, [r7, #4]
 8003228:	4b21      	ldr	r3, [pc, #132]	@ (80032b0 <SystemClock_Config+0xcc>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a20      	ldr	r2, [pc, #128]	@ (80032b0 <SystemClock_Config+0xcc>)
 800322e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003232:	6013      	str	r3, [r2, #0]
 8003234:	4b1e      	ldr	r3, [pc, #120]	@ (80032b0 <SystemClock_Config+0xcc>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800323c:	607b      	str	r3, [r7, #4]
 800323e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003240:	2302      	movs	r3, #2
 8003242:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003244:	2301      	movs	r3, #1
 8003246:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003248:	2310      	movs	r3, #16
 800324a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800324c:	2302      	movs	r3, #2
 800324e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003250:	2300      	movs	r3, #0
 8003252:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003254:	2308      	movs	r3, #8
 8003256:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8003258:	2348      	movs	r3, #72	@ 0x48
 800325a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800325c:	2302      	movs	r3, #2
 800325e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8003260:	2303      	movs	r3, #3
 8003262:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003264:	f107 0320 	add.w	r3, r7, #32
 8003268:	4618      	mov	r0, r3
 800326a:	f003 fcfb 	bl	8006c64 <HAL_RCC_OscConfig>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003274:	f000 fb52 	bl	800391c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003278:	230f      	movs	r3, #15
 800327a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800327c:	2302      	movs	r3, #2
 800327e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003280:	2300      	movs	r3, #0
 8003282:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003284:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003288:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800328a:	2300      	movs	r3, #0
 800328c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800328e:	f107 030c 	add.w	r3, r7, #12
 8003292:	2102      	movs	r1, #2
 8003294:	4618      	mov	r0, r3
 8003296:	f003 ff5d 	bl	8007154 <HAL_RCC_ClockConfig>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80032a0:	f000 fb3c 	bl	800391c <Error_Handler>
  }
}
 80032a4:	bf00      	nop
 80032a6:	3750      	adds	r7, #80	@ 0x50
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	40023800 	.word	0x40023800
 80032b0:	40007000 	.word	0x40007000

080032b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80032ba:	463b      	mov	r3, r7
 80032bc:	2200      	movs	r2, #0
 80032be:	601a      	str	r2, [r3, #0]
 80032c0:	605a      	str	r2, [r3, #4]
 80032c2:	609a      	str	r2, [r3, #8]
 80032c4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80032c6:	4b21      	ldr	r3, [pc, #132]	@ (800334c <MX_ADC1_Init+0x98>)
 80032c8:	4a21      	ldr	r2, [pc, #132]	@ (8003350 <MX_ADC1_Init+0x9c>)
 80032ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80032cc:	4b1f      	ldr	r3, [pc, #124]	@ (800334c <MX_ADC1_Init+0x98>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80032d2:	4b1e      	ldr	r3, [pc, #120]	@ (800334c <MX_ADC1_Init+0x98>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80032d8:	4b1c      	ldr	r3, [pc, #112]	@ (800334c <MX_ADC1_Init+0x98>)
 80032da:	2200      	movs	r2, #0
 80032dc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80032de:	4b1b      	ldr	r3, [pc, #108]	@ (800334c <MX_ADC1_Init+0x98>)
 80032e0:	2201      	movs	r2, #1
 80032e2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80032e4:	4b19      	ldr	r3, [pc, #100]	@ (800334c <MX_ADC1_Init+0x98>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80032ec:	4b17      	ldr	r3, [pc, #92]	@ (800334c <MX_ADC1_Init+0x98>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80032f2:	4b16      	ldr	r3, [pc, #88]	@ (800334c <MX_ADC1_Init+0x98>)
 80032f4:	4a17      	ldr	r2, [pc, #92]	@ (8003354 <MX_ADC1_Init+0xa0>)
 80032f6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80032f8:	4b14      	ldr	r3, [pc, #80]	@ (800334c <MX_ADC1_Init+0x98>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80032fe:	4b13      	ldr	r3, [pc, #76]	@ (800334c <MX_ADC1_Init+0x98>)
 8003300:	2201      	movs	r2, #1
 8003302:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003304:	4b11      	ldr	r3, [pc, #68]	@ (800334c <MX_ADC1_Init+0x98>)
 8003306:	2200      	movs	r2, #0
 8003308:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800330c:	4b0f      	ldr	r3, [pc, #60]	@ (800334c <MX_ADC1_Init+0x98>)
 800330e:	2201      	movs	r2, #1
 8003310:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003312:	480e      	ldr	r0, [pc, #56]	@ (800334c <MX_ADC1_Init+0x98>)
 8003314:	f001 f8be 	bl	8004494 <HAL_ADC_Init>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800331e:	f000 fafd 	bl	800391c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003322:	2300      	movs	r3, #0
 8003324:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003326:	2301      	movs	r3, #1
 8003328:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800332a:	2300      	movs	r3, #0
 800332c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800332e:	463b      	mov	r3, r7
 8003330:	4619      	mov	r1, r3
 8003332:	4806      	ldr	r0, [pc, #24]	@ (800334c <MX_ADC1_Init+0x98>)
 8003334:	f001 f8f2 	bl	800451c <HAL_ADC_ConfigChannel>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800333e:	f000 faed 	bl	800391c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003342:	bf00      	nop
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	20002588 	.word	0x20002588
 8003350:	40012000 	.word	0x40012000
 8003354:	0f000001 	.word	0x0f000001

08003358 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800335c:	4b12      	ldr	r3, [pc, #72]	@ (80033a8 <MX_I2C1_Init+0x50>)
 800335e:	4a13      	ldr	r2, [pc, #76]	@ (80033ac <MX_I2C1_Init+0x54>)
 8003360:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003362:	4b11      	ldr	r3, [pc, #68]	@ (80033a8 <MX_I2C1_Init+0x50>)
 8003364:	4a12      	ldr	r2, [pc, #72]	@ (80033b0 <MX_I2C1_Init+0x58>)
 8003366:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003368:	4b0f      	ldr	r3, [pc, #60]	@ (80033a8 <MX_I2C1_Init+0x50>)
 800336a:	2200      	movs	r2, #0
 800336c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800336e:	4b0e      	ldr	r3, [pc, #56]	@ (80033a8 <MX_I2C1_Init+0x50>)
 8003370:	2200      	movs	r2, #0
 8003372:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003374:	4b0c      	ldr	r3, [pc, #48]	@ (80033a8 <MX_I2C1_Init+0x50>)
 8003376:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800337a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800337c:	4b0a      	ldr	r3, [pc, #40]	@ (80033a8 <MX_I2C1_Init+0x50>)
 800337e:	2200      	movs	r2, #0
 8003380:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003382:	4b09      	ldr	r3, [pc, #36]	@ (80033a8 <MX_I2C1_Init+0x50>)
 8003384:	2200      	movs	r2, #0
 8003386:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003388:	4b07      	ldr	r3, [pc, #28]	@ (80033a8 <MX_I2C1_Init+0x50>)
 800338a:	2200      	movs	r2, #0
 800338c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800338e:	4b06      	ldr	r3, [pc, #24]	@ (80033a8 <MX_I2C1_Init+0x50>)
 8003390:	2200      	movs	r2, #0
 8003392:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003394:	4804      	ldr	r0, [pc, #16]	@ (80033a8 <MX_I2C1_Init+0x50>)
 8003396:	f002 f9ad 	bl	80056f4 <HAL_I2C_Init>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d001      	beq.n	80033a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80033a0:	f000 fabc 	bl	800391c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80033a4:	bf00      	nop
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	200025d0 	.word	0x200025d0
 80033ac:	40005400 	.word	0x40005400
 80033b0:	000186a0 	.word	0x000186a0

080033b4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80033b8:	4b12      	ldr	r3, [pc, #72]	@ (8003404 <MX_I2C2_Init+0x50>)
 80033ba:	4a13      	ldr	r2, [pc, #76]	@ (8003408 <MX_I2C2_Init+0x54>)
 80033bc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80033be:	4b11      	ldr	r3, [pc, #68]	@ (8003404 <MX_I2C2_Init+0x50>)
 80033c0:	4a12      	ldr	r2, [pc, #72]	@ (800340c <MX_I2C2_Init+0x58>)
 80033c2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80033c4:	4b0f      	ldr	r3, [pc, #60]	@ (8003404 <MX_I2C2_Init+0x50>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80033ca:	4b0e      	ldr	r3, [pc, #56]	@ (8003404 <MX_I2C2_Init+0x50>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80033d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003404 <MX_I2C2_Init+0x50>)
 80033d2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80033d6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80033d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003404 <MX_I2C2_Init+0x50>)
 80033da:	2200      	movs	r2, #0
 80033dc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80033de:	4b09      	ldr	r3, [pc, #36]	@ (8003404 <MX_I2C2_Init+0x50>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80033e4:	4b07      	ldr	r3, [pc, #28]	@ (8003404 <MX_I2C2_Init+0x50>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80033ea:	4b06      	ldr	r3, [pc, #24]	@ (8003404 <MX_I2C2_Init+0x50>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80033f0:	4804      	ldr	r0, [pc, #16]	@ (8003404 <MX_I2C2_Init+0x50>)
 80033f2:	f002 f97f 	bl	80056f4 <HAL_I2C_Init>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d001      	beq.n	8003400 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80033fc:	f000 fa8e 	bl	800391c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003400:	bf00      	nop
 8003402:	bd80      	pop	{r7, pc}
 8003404:	20002624 	.word	0x20002624
 8003408:	40005800 	.word	0x40005800
 800340c:	000186a0 	.word	0x000186a0

08003410 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003414:	4b12      	ldr	r3, [pc, #72]	@ (8003460 <MX_I2C3_Init+0x50>)
 8003416:	4a13      	ldr	r2, [pc, #76]	@ (8003464 <MX_I2C3_Init+0x54>)
 8003418:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800341a:	4b11      	ldr	r3, [pc, #68]	@ (8003460 <MX_I2C3_Init+0x50>)
 800341c:	4a12      	ldr	r2, [pc, #72]	@ (8003468 <MX_I2C3_Init+0x58>)
 800341e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003420:	4b0f      	ldr	r3, [pc, #60]	@ (8003460 <MX_I2C3_Init+0x50>)
 8003422:	2200      	movs	r2, #0
 8003424:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003426:	4b0e      	ldr	r3, [pc, #56]	@ (8003460 <MX_I2C3_Init+0x50>)
 8003428:	2200      	movs	r2, #0
 800342a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800342c:	4b0c      	ldr	r3, [pc, #48]	@ (8003460 <MX_I2C3_Init+0x50>)
 800342e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003432:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003434:	4b0a      	ldr	r3, [pc, #40]	@ (8003460 <MX_I2C3_Init+0x50>)
 8003436:	2200      	movs	r2, #0
 8003438:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800343a:	4b09      	ldr	r3, [pc, #36]	@ (8003460 <MX_I2C3_Init+0x50>)
 800343c:	2200      	movs	r2, #0
 800343e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003440:	4b07      	ldr	r3, [pc, #28]	@ (8003460 <MX_I2C3_Init+0x50>)
 8003442:	2200      	movs	r2, #0
 8003444:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003446:	4b06      	ldr	r3, [pc, #24]	@ (8003460 <MX_I2C3_Init+0x50>)
 8003448:	2200      	movs	r2, #0
 800344a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800344c:	4804      	ldr	r0, [pc, #16]	@ (8003460 <MX_I2C3_Init+0x50>)
 800344e:	f002 f951 	bl	80056f4 <HAL_I2C_Init>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d001      	beq.n	800345c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003458:	f000 fa60 	bl	800391c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800345c:	bf00      	nop
 800345e:	bd80      	pop	{r7, pc}
 8003460:	20002678 	.word	0x20002678
 8003464:	40005c00 	.word	0x40005c00
 8003468:	000186a0 	.word	0x000186a0

0800346c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8003470:	4b0d      	ldr	r3, [pc, #52]	@ (80034a8 <MX_SDIO_SD_Init+0x3c>)
 8003472:	4a0e      	ldr	r2, [pc, #56]	@ (80034ac <MX_SDIO_SD_Init+0x40>)
 8003474:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8003476:	4b0c      	ldr	r3, [pc, #48]	@ (80034a8 <MX_SDIO_SD_Init+0x3c>)
 8003478:	2200      	movs	r2, #0
 800347a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800347c:	4b0a      	ldr	r3, [pc, #40]	@ (80034a8 <MX_SDIO_SD_Init+0x3c>)
 800347e:	2200      	movs	r2, #0
 8003480:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003482:	4b09      	ldr	r3, [pc, #36]	@ (80034a8 <MX_SDIO_SD_Init+0x3c>)
 8003484:	2200      	movs	r2, #0
 8003486:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 8003488:	4b07      	ldr	r3, [pc, #28]	@ (80034a8 <MX_SDIO_SD_Init+0x3c>)
 800348a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800348e:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003490:	4b05      	ldr	r3, [pc, #20]	@ (80034a8 <MX_SDIO_SD_Init+0x3c>)
 8003492:	2200      	movs	r2, #0
 8003494:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8003496:	4b04      	ldr	r3, [pc, #16]	@ (80034a8 <MX_SDIO_SD_Init+0x3c>)
 8003498:	2200      	movs	r2, #0
 800349a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800349c:	bf00      	nop
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	200026cc 	.word	0x200026cc
 80034ac:	40012c00 	.word	0x40012c00

080034b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b092      	sub	sp, #72	@ 0x48
 80034b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034b6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80034ba:	2200      	movs	r2, #0
 80034bc:	601a      	str	r2, [r3, #0]
 80034be:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80034c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]
 80034c8:	605a      	str	r2, [r3, #4]
 80034ca:	609a      	str	r2, [r3, #8]
 80034cc:	60da      	str	r2, [r3, #12]
 80034ce:	611a      	str	r2, [r3, #16]
 80034d0:	615a      	str	r2, [r3, #20]
 80034d2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80034d4:	1d3b      	adds	r3, r7, #4
 80034d6:	2220      	movs	r2, #32
 80034d8:	2100      	movs	r1, #0
 80034da:	4618      	mov	r0, r3
 80034dc:	f00c fa90 	bl	800fa00 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80034e0:	4b33      	ldr	r3, [pc, #204]	@ (80035b0 <MX_TIM1_Init+0x100>)
 80034e2:	4a34      	ldr	r2, [pc, #208]	@ (80035b4 <MX_TIM1_Init+0x104>)
 80034e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1440-1;
 80034e6:	4b32      	ldr	r3, [pc, #200]	@ (80035b0 <MX_TIM1_Init+0x100>)
 80034e8:	f240 529f 	movw	r2, #1439	@ 0x59f
 80034ec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034ee:	4b30      	ldr	r3, [pc, #192]	@ (80035b0 <MX_TIM1_Init+0x100>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80034f4:	4b2e      	ldr	r3, [pc, #184]	@ (80035b0 <MX_TIM1_Init+0x100>)
 80034f6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80034fa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034fc:	4b2c      	ldr	r3, [pc, #176]	@ (80035b0 <MX_TIM1_Init+0x100>)
 80034fe:	2200      	movs	r2, #0
 8003500:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003502:	4b2b      	ldr	r3, [pc, #172]	@ (80035b0 <MX_TIM1_Init+0x100>)
 8003504:	2200      	movs	r2, #0
 8003506:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003508:	4b29      	ldr	r3, [pc, #164]	@ (80035b0 <MX_TIM1_Init+0x100>)
 800350a:	2200      	movs	r2, #0
 800350c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800350e:	4828      	ldr	r0, [pc, #160]	@ (80035b0 <MX_TIM1_Init+0x100>)
 8003510:	f005 fb94 	bl	8008c3c <HAL_TIM_PWM_Init>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800351a:	f000 f9ff 	bl	800391c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800351e:	2300      	movs	r3, #0
 8003520:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003522:	2300      	movs	r3, #0
 8003524:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003526:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800352a:	4619      	mov	r1, r3
 800352c:	4820      	ldr	r0, [pc, #128]	@ (80035b0 <MX_TIM1_Init+0x100>)
 800352e:	f005 ff85 	bl	800943c <HAL_TIMEx_MasterConfigSynchronization>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d001      	beq.n	800353c <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8003538:	f000 f9f0 	bl	800391c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800353c:	2360      	movs	r3, #96	@ 0x60
 800353e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8003540:	2300      	movs	r3, #0
 8003542:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003544:	2300      	movs	r3, #0
 8003546:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003548:	2300      	movs	r3, #0
 800354a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800354c:	2300      	movs	r3, #0
 800354e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003550:	2300      	movs	r3, #0
 8003552:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003554:	2300      	movs	r3, #0
 8003556:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003558:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800355c:	2204      	movs	r2, #4
 800355e:	4619      	mov	r1, r3
 8003560:	4813      	ldr	r0, [pc, #76]	@ (80035b0 <MX_TIM1_Init+0x100>)
 8003562:	f005 fc6b 	bl	8008e3c <HAL_TIM_PWM_ConfigChannel>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 800356c:	f000 f9d6 	bl	800391c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003570:	2300      	movs	r3, #0
 8003572:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003574:	2300      	movs	r3, #0
 8003576:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003578:	2300      	movs	r3, #0
 800357a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800357c:	2300      	movs	r3, #0
 800357e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003580:	2300      	movs	r3, #0
 8003582:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003584:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003588:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800358a:	2300      	movs	r3, #0
 800358c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800358e:	1d3b      	adds	r3, r7, #4
 8003590:	4619      	mov	r1, r3
 8003592:	4807      	ldr	r0, [pc, #28]	@ (80035b0 <MX_TIM1_Init+0x100>)
 8003594:	f005 ffc0 	bl	8009518 <HAL_TIMEx_ConfigBreakDeadTime>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 800359e:	f000 f9bd 	bl	800391c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80035a2:	4803      	ldr	r0, [pc, #12]	@ (80035b0 <MX_TIM1_Init+0x100>)
 80035a4:	f000 fc6a 	bl	8003e7c <HAL_TIM_MspPostInit>

}
 80035a8:	bf00      	nop
 80035aa:	3748      	adds	r7, #72	@ 0x48
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	20002810 	.word	0x20002810
 80035b4:	40010000 	.word	0x40010000

080035b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b08a      	sub	sp, #40	@ 0x28
 80035bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035be:	f107 0320 	add.w	r3, r7, #32
 80035c2:	2200      	movs	r2, #0
 80035c4:	601a      	str	r2, [r3, #0]
 80035c6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80035c8:	1d3b      	adds	r3, r7, #4
 80035ca:	2200      	movs	r2, #0
 80035cc:	601a      	str	r2, [r3, #0]
 80035ce:	605a      	str	r2, [r3, #4]
 80035d0:	609a      	str	r2, [r3, #8]
 80035d2:	60da      	str	r2, [r3, #12]
 80035d4:	611a      	str	r2, [r3, #16]
 80035d6:	615a      	str	r2, [r3, #20]
 80035d8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80035da:	4b23      	ldr	r3, [pc, #140]	@ (8003668 <MX_TIM2_Init+0xb0>)
 80035dc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80035e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1440-1;
 80035e2:	4b21      	ldr	r3, [pc, #132]	@ (8003668 <MX_TIM2_Init+0xb0>)
 80035e4:	f240 529f 	movw	r2, #1439	@ 0x59f
 80035e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035ea:	4b1f      	ldr	r3, [pc, #124]	@ (8003668 <MX_TIM2_Init+0xb0>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80035f0:	4b1d      	ldr	r3, [pc, #116]	@ (8003668 <MX_TIM2_Init+0xb0>)
 80035f2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80035f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035f8:	4b1b      	ldr	r3, [pc, #108]	@ (8003668 <MX_TIM2_Init+0xb0>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035fe:	4b1a      	ldr	r3, [pc, #104]	@ (8003668 <MX_TIM2_Init+0xb0>)
 8003600:	2200      	movs	r2, #0
 8003602:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003604:	4818      	ldr	r0, [pc, #96]	@ (8003668 <MX_TIM2_Init+0xb0>)
 8003606:	f005 fb19 	bl	8008c3c <HAL_TIM_PWM_Init>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8003610:	f000 f984 	bl	800391c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003614:	2300      	movs	r3, #0
 8003616:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003618:	2300      	movs	r3, #0
 800361a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800361c:	f107 0320 	add.w	r3, r7, #32
 8003620:	4619      	mov	r1, r3
 8003622:	4811      	ldr	r0, [pc, #68]	@ (8003668 <MX_TIM2_Init+0xb0>)
 8003624:	f005 ff0a 	bl	800943c <HAL_TIMEx_MasterConfigSynchronization>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800362e:	f000 f975 	bl	800391c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003632:	2360      	movs	r3, #96	@ 0x60
 8003634:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003636:	2300      	movs	r3, #0
 8003638:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800363a:	2300      	movs	r3, #0
 800363c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800363e:	2300      	movs	r3, #0
 8003640:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003642:	1d3b      	adds	r3, r7, #4
 8003644:	2200      	movs	r2, #0
 8003646:	4619      	mov	r1, r3
 8003648:	4807      	ldr	r0, [pc, #28]	@ (8003668 <MX_TIM2_Init+0xb0>)
 800364a:	f005 fbf7 	bl	8008e3c <HAL_TIM_PWM_ConfigChannel>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d001      	beq.n	8003658 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8003654:	f000 f962 	bl	800391c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003658:	4803      	ldr	r0, [pc, #12]	@ (8003668 <MX_TIM2_Init+0xb0>)
 800365a:	f000 fc0f 	bl	8003e7c <HAL_TIM_MspPostInit>

}
 800365e:	bf00      	nop
 8003660:	3728      	adds	r7, #40	@ 0x28
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	20002858 	.word	0x20002858

0800366c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b08a      	sub	sp, #40	@ 0x28
 8003670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003672:	f107 0320 	add.w	r3, r7, #32
 8003676:	2200      	movs	r2, #0
 8003678:	601a      	str	r2, [r3, #0]
 800367a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800367c:	1d3b      	adds	r3, r7, #4
 800367e:	2200      	movs	r2, #0
 8003680:	601a      	str	r2, [r3, #0]
 8003682:	605a      	str	r2, [r3, #4]
 8003684:	609a      	str	r2, [r3, #8]
 8003686:	60da      	str	r2, [r3, #12]
 8003688:	611a      	str	r2, [r3, #16]
 800368a:	615a      	str	r2, [r3, #20]
 800368c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800368e:	4b22      	ldr	r3, [pc, #136]	@ (8003718 <MX_TIM3_Init+0xac>)
 8003690:	4a22      	ldr	r2, [pc, #136]	@ (800371c <MX_TIM3_Init+0xb0>)
 8003692:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 263-1;
 8003694:	4b20      	ldr	r3, [pc, #128]	@ (8003718 <MX_TIM3_Init+0xac>)
 8003696:	f44f 7283 	mov.w	r2, #262	@ 0x106
 800369a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800369c:	4b1e      	ldr	r3, [pc, #120]	@ (8003718 <MX_TIM3_Init+0xac>)
 800369e:	2200      	movs	r2, #0
 80036a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 80036a2:	4b1d      	ldr	r3, [pc, #116]	@ (8003718 <MX_TIM3_Init+0xac>)
 80036a4:	2263      	movs	r2, #99	@ 0x63
 80036a6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003718 <MX_TIM3_Init+0xac>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036ae:	4b1a      	ldr	r3, [pc, #104]	@ (8003718 <MX_TIM3_Init+0xac>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80036b4:	4818      	ldr	r0, [pc, #96]	@ (8003718 <MX_TIM3_Init+0xac>)
 80036b6:	f005 fac1 	bl	8008c3c <HAL_TIM_PWM_Init>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80036c0:	f000 f92c 	bl	800391c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036c4:	2300      	movs	r3, #0
 80036c6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036c8:	2300      	movs	r3, #0
 80036ca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80036cc:	f107 0320 	add.w	r3, r7, #32
 80036d0:	4619      	mov	r1, r3
 80036d2:	4811      	ldr	r0, [pc, #68]	@ (8003718 <MX_TIM3_Init+0xac>)
 80036d4:	f005 feb2 	bl	800943c <HAL_TIMEx_MasterConfigSynchronization>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80036de:	f000 f91d 	bl	800391c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80036e2:	2360      	movs	r3, #96	@ 0x60
 80036e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80036e6:	2300      	movs	r3, #0
 80036e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80036ea:	2300      	movs	r3, #0
 80036ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80036ee:	2300      	movs	r3, #0
 80036f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80036f2:	1d3b      	adds	r3, r7, #4
 80036f4:	2200      	movs	r2, #0
 80036f6:	4619      	mov	r1, r3
 80036f8:	4807      	ldr	r0, [pc, #28]	@ (8003718 <MX_TIM3_Init+0xac>)
 80036fa:	f005 fb9f 	bl	8008e3c <HAL_TIM_PWM_ConfigChannel>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8003704:	f000 f90a 	bl	800391c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003708:	4803      	ldr	r0, [pc, #12]	@ (8003718 <MX_TIM3_Init+0xac>)
 800370a:	f000 fbb7 	bl	8003e7c <HAL_TIM_MspPostInit>

}
 800370e:	bf00      	nop
 8003710:	3728      	adds	r7, #40	@ 0x28
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	200028a0 	.word	0x200028a0
 800371c:	40000400 	.word	0x40000400

08003720 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003724:	4b11      	ldr	r3, [pc, #68]	@ (800376c <MX_USART1_UART_Init+0x4c>)
 8003726:	4a12      	ldr	r2, [pc, #72]	@ (8003770 <MX_USART1_UART_Init+0x50>)
 8003728:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800372a:	4b10      	ldr	r3, [pc, #64]	@ (800376c <MX_USART1_UART_Init+0x4c>)
 800372c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003730:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003732:	4b0e      	ldr	r3, [pc, #56]	@ (800376c <MX_USART1_UART_Init+0x4c>)
 8003734:	2200      	movs	r2, #0
 8003736:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003738:	4b0c      	ldr	r3, [pc, #48]	@ (800376c <MX_USART1_UART_Init+0x4c>)
 800373a:	2200      	movs	r2, #0
 800373c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800373e:	4b0b      	ldr	r3, [pc, #44]	@ (800376c <MX_USART1_UART_Init+0x4c>)
 8003740:	2200      	movs	r2, #0
 8003742:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003744:	4b09      	ldr	r3, [pc, #36]	@ (800376c <MX_USART1_UART_Init+0x4c>)
 8003746:	220c      	movs	r2, #12
 8003748:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800374a:	4b08      	ldr	r3, [pc, #32]	@ (800376c <MX_USART1_UART_Init+0x4c>)
 800374c:	2200      	movs	r2, #0
 800374e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003750:	4b06      	ldr	r3, [pc, #24]	@ (800376c <MX_USART1_UART_Init+0x4c>)
 8003752:	2200      	movs	r2, #0
 8003754:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003756:	4805      	ldr	r0, [pc, #20]	@ (800376c <MX_USART1_UART_Init+0x4c>)
 8003758:	f005 ff30 	bl	80095bc <HAL_UART_Init>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003762:	f000 f8db 	bl	800391c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003766:	bf00      	nop
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	200028e8 	.word	0x200028e8
 8003770:	40011000 	.word	0x40011000

08003774 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003778:	4b11      	ldr	r3, [pc, #68]	@ (80037c0 <MX_USART2_UART_Init+0x4c>)
 800377a:	4a12      	ldr	r2, [pc, #72]	@ (80037c4 <MX_USART2_UART_Init+0x50>)
 800377c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800377e:	4b10      	ldr	r3, [pc, #64]	@ (80037c0 <MX_USART2_UART_Init+0x4c>)
 8003780:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003784:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003786:	4b0e      	ldr	r3, [pc, #56]	@ (80037c0 <MX_USART2_UART_Init+0x4c>)
 8003788:	2200      	movs	r2, #0
 800378a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800378c:	4b0c      	ldr	r3, [pc, #48]	@ (80037c0 <MX_USART2_UART_Init+0x4c>)
 800378e:	2200      	movs	r2, #0
 8003790:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003792:	4b0b      	ldr	r3, [pc, #44]	@ (80037c0 <MX_USART2_UART_Init+0x4c>)
 8003794:	2200      	movs	r2, #0
 8003796:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003798:	4b09      	ldr	r3, [pc, #36]	@ (80037c0 <MX_USART2_UART_Init+0x4c>)
 800379a:	220c      	movs	r2, #12
 800379c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800379e:	4b08      	ldr	r3, [pc, #32]	@ (80037c0 <MX_USART2_UART_Init+0x4c>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80037a4:	4b06      	ldr	r3, [pc, #24]	@ (80037c0 <MX_USART2_UART_Init+0x4c>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80037aa:	4805      	ldr	r0, [pc, #20]	@ (80037c0 <MX_USART2_UART_Init+0x4c>)
 80037ac:	f005 ff06 	bl	80095bc <HAL_UART_Init>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80037b6:	f000 f8b1 	bl	800391c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80037ba:	bf00      	nop
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	20002930 	.word	0x20002930
 80037c4:	40004400 	.word	0x40004400

080037c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80037ce:	2300      	movs	r3, #0
 80037d0:	607b      	str	r3, [r7, #4]
 80037d2:	4b10      	ldr	r3, [pc, #64]	@ (8003814 <MX_DMA_Init+0x4c>)
 80037d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d6:	4a0f      	ldr	r2, [pc, #60]	@ (8003814 <MX_DMA_Init+0x4c>)
 80037d8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80037dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80037de:	4b0d      	ldr	r3, [pc, #52]	@ (8003814 <MX_DMA_Init+0x4c>)
 80037e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037e6:	607b      	str	r3, [r7, #4]
 80037e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 3, 3);
 80037ea:	2203      	movs	r2, #3
 80037ec:	2103      	movs	r1, #3
 80037ee:	203b      	movs	r0, #59	@ 0x3b
 80037f0:	f001 f99d 	bl	8004b2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80037f4:	203b      	movs	r0, #59	@ 0x3b
 80037f6:	f001 f9b6 	bl	8004b66 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 3, 3);
 80037fa:	2203      	movs	r2, #3
 80037fc:	2103      	movs	r1, #3
 80037fe:	2045      	movs	r0, #69	@ 0x45
 8003800:	f001 f995 	bl	8004b2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8003804:	2045      	movs	r0, #69	@ 0x45
 8003806:	f001 f9ae 	bl	8004b66 <HAL_NVIC_EnableIRQ>

}
 800380a:	bf00      	nop
 800380c:	3708      	adds	r7, #8
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	40023800 	.word	0x40023800

08003818 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b08a      	sub	sp, #40	@ 0x28
 800381c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800381e:	f107 0314 	add.w	r3, r7, #20
 8003822:	2200      	movs	r2, #0
 8003824:	601a      	str	r2, [r3, #0]
 8003826:	605a      	str	r2, [r3, #4]
 8003828:	609a      	str	r2, [r3, #8]
 800382a:	60da      	str	r2, [r3, #12]
 800382c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800382e:	2300      	movs	r3, #0
 8003830:	613b      	str	r3, [r7, #16]
 8003832:	4b37      	ldr	r3, [pc, #220]	@ (8003910 <MX_GPIO_Init+0xf8>)
 8003834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003836:	4a36      	ldr	r2, [pc, #216]	@ (8003910 <MX_GPIO_Init+0xf8>)
 8003838:	f043 0304 	orr.w	r3, r3, #4
 800383c:	6313      	str	r3, [r2, #48]	@ 0x30
 800383e:	4b34      	ldr	r3, [pc, #208]	@ (8003910 <MX_GPIO_Init+0xf8>)
 8003840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003842:	f003 0304 	and.w	r3, r3, #4
 8003846:	613b      	str	r3, [r7, #16]
 8003848:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800384a:	2300      	movs	r3, #0
 800384c:	60fb      	str	r3, [r7, #12]
 800384e:	4b30      	ldr	r3, [pc, #192]	@ (8003910 <MX_GPIO_Init+0xf8>)
 8003850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003852:	4a2f      	ldr	r2, [pc, #188]	@ (8003910 <MX_GPIO_Init+0xf8>)
 8003854:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003858:	6313      	str	r3, [r2, #48]	@ 0x30
 800385a:	4b2d      	ldr	r3, [pc, #180]	@ (8003910 <MX_GPIO_Init+0xf8>)
 800385c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800385e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003862:	60fb      	str	r3, [r7, #12]
 8003864:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003866:	2300      	movs	r3, #0
 8003868:	60bb      	str	r3, [r7, #8]
 800386a:	4b29      	ldr	r3, [pc, #164]	@ (8003910 <MX_GPIO_Init+0xf8>)
 800386c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800386e:	4a28      	ldr	r2, [pc, #160]	@ (8003910 <MX_GPIO_Init+0xf8>)
 8003870:	f043 0301 	orr.w	r3, r3, #1
 8003874:	6313      	str	r3, [r2, #48]	@ 0x30
 8003876:	4b26      	ldr	r3, [pc, #152]	@ (8003910 <MX_GPIO_Init+0xf8>)
 8003878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	60bb      	str	r3, [r7, #8]
 8003880:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003882:	2300      	movs	r3, #0
 8003884:	607b      	str	r3, [r7, #4]
 8003886:	4b22      	ldr	r3, [pc, #136]	@ (8003910 <MX_GPIO_Init+0xf8>)
 8003888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800388a:	4a21      	ldr	r2, [pc, #132]	@ (8003910 <MX_GPIO_Init+0xf8>)
 800388c:	f043 0302 	orr.w	r3, r3, #2
 8003890:	6313      	str	r3, [r2, #48]	@ 0x30
 8003892:	4b1f      	ldr	r3, [pc, #124]	@ (8003910 <MX_GPIO_Init+0xf8>)
 8003894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	607b      	str	r3, [r7, #4]
 800389c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800389e:	2200      	movs	r2, #0
 80038a0:	2133      	movs	r1, #51	@ 0x33
 80038a2:	481c      	ldr	r0, [pc, #112]	@ (8003914 <MX_GPIO_Init+0xfc>)
 80038a4:	f001 ff0c 	bl	80056c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80038a8:	2200      	movs	r2, #0
 80038aa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80038ae:	481a      	ldr	r0, [pc, #104]	@ (8003918 <MX_GPIO_Init+0x100>)
 80038b0:	f001 ff06 	bl	80056c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80038b4:	2333      	movs	r3, #51	@ 0x33
 80038b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038b8:	2301      	movs	r3, #1
 80038ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038bc:	2300      	movs	r3, #0
 80038be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038c0:	2300      	movs	r3, #0
 80038c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038c4:	f107 0314 	add.w	r3, r7, #20
 80038c8:	4619      	mov	r1, r3
 80038ca:	4812      	ldr	r0, [pc, #72]	@ (8003914 <MX_GPIO_Init+0xfc>)
 80038cc:	f001 fd74 	bl	80053b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80038d0:	2304      	movs	r3, #4
 80038d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038d4:	2300      	movs	r3, #0
 80038d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d8:	2300      	movs	r3, #0
 80038da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038dc:	f107 0314 	add.w	r3, r7, #20
 80038e0:	4619      	mov	r1, r3
 80038e2:	480c      	ldr	r0, [pc, #48]	@ (8003914 <MX_GPIO_Init+0xfc>)
 80038e4:	f001 fd68 	bl	80053b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80038e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80038ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038ee:	2301      	movs	r3, #1
 80038f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f2:	2300      	movs	r3, #0
 80038f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038f6:	2300      	movs	r3, #0
 80038f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038fa:	f107 0314 	add.w	r3, r7, #20
 80038fe:	4619      	mov	r1, r3
 8003900:	4805      	ldr	r0, [pc, #20]	@ (8003918 <MX_GPIO_Init+0x100>)
 8003902:	f001 fd59 	bl	80053b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003906:	bf00      	nop
 8003908:	3728      	adds	r7, #40	@ 0x28
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	40023800 	.word	0x40023800
 8003914:	40020800 	.word	0x40020800
 8003918:	40020400 	.word	0x40020400

0800391c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003920:	b672      	cpsid	i
}
 8003922:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003924:	bf00      	nop
 8003926:	e7fd      	b.n	8003924 <Error_Handler+0x8>

08003928 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800392e:	2300      	movs	r3, #0
 8003930:	607b      	str	r3, [r7, #4]
 8003932:	4b10      	ldr	r3, [pc, #64]	@ (8003974 <HAL_MspInit+0x4c>)
 8003934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003936:	4a0f      	ldr	r2, [pc, #60]	@ (8003974 <HAL_MspInit+0x4c>)
 8003938:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800393c:	6453      	str	r3, [r2, #68]	@ 0x44
 800393e:	4b0d      	ldr	r3, [pc, #52]	@ (8003974 <HAL_MspInit+0x4c>)
 8003940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003942:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003946:	607b      	str	r3, [r7, #4]
 8003948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800394a:	2300      	movs	r3, #0
 800394c:	603b      	str	r3, [r7, #0]
 800394e:	4b09      	ldr	r3, [pc, #36]	@ (8003974 <HAL_MspInit+0x4c>)
 8003950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003952:	4a08      	ldr	r2, [pc, #32]	@ (8003974 <HAL_MspInit+0x4c>)
 8003954:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003958:	6413      	str	r3, [r2, #64]	@ 0x40
 800395a:	4b06      	ldr	r3, [pc, #24]	@ (8003974 <HAL_MspInit+0x4c>)
 800395c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003962:	603b      	str	r3, [r7, #0]
 8003964:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8003966:	2005      	movs	r0, #5
 8003968:	f001 f8d6 	bl	8004b18 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800396c:	bf00      	nop
 800396e:	3708      	adds	r7, #8
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	40023800 	.word	0x40023800

08003978 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b08a      	sub	sp, #40	@ 0x28
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003980:	f107 0314 	add.w	r3, r7, #20
 8003984:	2200      	movs	r2, #0
 8003986:	601a      	str	r2, [r3, #0]
 8003988:	605a      	str	r2, [r3, #4]
 800398a:	609a      	str	r2, [r3, #8]
 800398c:	60da      	str	r2, [r3, #12]
 800398e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a17      	ldr	r2, [pc, #92]	@ (80039f4 <HAL_ADC_MspInit+0x7c>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d127      	bne.n	80039ea <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800399a:	2300      	movs	r3, #0
 800399c:	613b      	str	r3, [r7, #16]
 800399e:	4b16      	ldr	r3, [pc, #88]	@ (80039f8 <HAL_ADC_MspInit+0x80>)
 80039a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039a2:	4a15      	ldr	r2, [pc, #84]	@ (80039f8 <HAL_ADC_MspInit+0x80>)
 80039a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80039aa:	4b13      	ldr	r3, [pc, #76]	@ (80039f8 <HAL_ADC_MspInit+0x80>)
 80039ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039b2:	613b      	str	r3, [r7, #16]
 80039b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039b6:	2300      	movs	r3, #0
 80039b8:	60fb      	str	r3, [r7, #12]
 80039ba:	4b0f      	ldr	r3, [pc, #60]	@ (80039f8 <HAL_ADC_MspInit+0x80>)
 80039bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039be:	4a0e      	ldr	r2, [pc, #56]	@ (80039f8 <HAL_ADC_MspInit+0x80>)
 80039c0:	f043 0301 	orr.w	r3, r3, #1
 80039c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80039c6:	4b0c      	ldr	r3, [pc, #48]	@ (80039f8 <HAL_ADC_MspInit+0x80>)
 80039c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	60fb      	str	r3, [r7, #12]
 80039d0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80039d2:	2301      	movs	r3, #1
 80039d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039d6:	2303      	movs	r3, #3
 80039d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039da:	2300      	movs	r3, #0
 80039dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039de:	f107 0314 	add.w	r3, r7, #20
 80039e2:	4619      	mov	r1, r3
 80039e4:	4805      	ldr	r0, [pc, #20]	@ (80039fc <HAL_ADC_MspInit+0x84>)
 80039e6:	f001 fce7 	bl	80053b8 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80039ea:	bf00      	nop
 80039ec:	3728      	adds	r7, #40	@ 0x28
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	40012000 	.word	0x40012000
 80039f8:	40023800 	.word	0x40023800
 80039fc:	40020000 	.word	0x40020000

08003a00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b08e      	sub	sp, #56	@ 0x38
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	601a      	str	r2, [r3, #0]
 8003a10:	605a      	str	r2, [r3, #4]
 8003a12:	609a      	str	r2, [r3, #8]
 8003a14:	60da      	str	r2, [r3, #12]
 8003a16:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a63      	ldr	r2, [pc, #396]	@ (8003bac <HAL_I2C_MspInit+0x1ac>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d12c      	bne.n	8003a7c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a22:	2300      	movs	r3, #0
 8003a24:	623b      	str	r3, [r7, #32]
 8003a26:	4b62      	ldr	r3, [pc, #392]	@ (8003bb0 <HAL_I2C_MspInit+0x1b0>)
 8003a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a2a:	4a61      	ldr	r2, [pc, #388]	@ (8003bb0 <HAL_I2C_MspInit+0x1b0>)
 8003a2c:	f043 0302 	orr.w	r3, r3, #2
 8003a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a32:	4b5f      	ldr	r3, [pc, #380]	@ (8003bb0 <HAL_I2C_MspInit+0x1b0>)
 8003a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	623b      	str	r3, [r7, #32]
 8003a3c:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003a3e:	23c0      	movs	r3, #192	@ 0xc0
 8003a40:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a42:	2312      	movs	r3, #18
 8003a44:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a46:	2300      	movs	r3, #0
 8003a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003a4e:	2304      	movs	r3, #4
 8003a50:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a56:	4619      	mov	r1, r3
 8003a58:	4856      	ldr	r0, [pc, #344]	@ (8003bb4 <HAL_I2C_MspInit+0x1b4>)
 8003a5a:	f001 fcad 	bl	80053b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003a5e:	2300      	movs	r3, #0
 8003a60:	61fb      	str	r3, [r7, #28]
 8003a62:	4b53      	ldr	r3, [pc, #332]	@ (8003bb0 <HAL_I2C_MspInit+0x1b0>)
 8003a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a66:	4a52      	ldr	r2, [pc, #328]	@ (8003bb0 <HAL_I2C_MspInit+0x1b0>)
 8003a68:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003a6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a6e:	4b50      	ldr	r3, [pc, #320]	@ (8003bb0 <HAL_I2C_MspInit+0x1b0>)
 8003a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a72:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a76:	61fb      	str	r3, [r7, #28]
 8003a78:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003a7a:	e092      	b.n	8003ba2 <HAL_I2C_MspInit+0x1a2>
  else if(hi2c->Instance==I2C2)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a4d      	ldr	r2, [pc, #308]	@ (8003bb8 <HAL_I2C_MspInit+0x1b8>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d13d      	bne.n	8003b02 <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a86:	2300      	movs	r3, #0
 8003a88:	61bb      	str	r3, [r7, #24]
 8003a8a:	4b49      	ldr	r3, [pc, #292]	@ (8003bb0 <HAL_I2C_MspInit+0x1b0>)
 8003a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a8e:	4a48      	ldr	r2, [pc, #288]	@ (8003bb0 <HAL_I2C_MspInit+0x1b0>)
 8003a90:	f043 0302 	orr.w	r3, r3, #2
 8003a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a96:	4b46      	ldr	r3, [pc, #280]	@ (8003bb0 <HAL_I2C_MspInit+0x1b0>)
 8003a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	61bb      	str	r3, [r7, #24]
 8003aa0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003aa2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003aa6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003aa8:	2312      	movs	r3, #18
 8003aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aac:	2300      	movs	r3, #0
 8003aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003ab4:	2304      	movs	r3, #4
 8003ab6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ab8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003abc:	4619      	mov	r1, r3
 8003abe:	483d      	ldr	r0, [pc, #244]	@ (8003bb4 <HAL_I2C_MspInit+0x1b4>)
 8003ac0:	f001 fc7a 	bl	80053b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003ac4:	2308      	movs	r3, #8
 8003ac6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ac8:	2312      	movs	r3, #18
 8003aca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003acc:	2300      	movs	r3, #0
 8003ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8003ad4:	2309      	movs	r3, #9
 8003ad6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ad8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003adc:	4619      	mov	r1, r3
 8003ade:	4835      	ldr	r0, [pc, #212]	@ (8003bb4 <HAL_I2C_MspInit+0x1b4>)
 8003ae0:	f001 fc6a 	bl	80053b8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	617b      	str	r3, [r7, #20]
 8003ae8:	4b31      	ldr	r3, [pc, #196]	@ (8003bb0 <HAL_I2C_MspInit+0x1b0>)
 8003aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aec:	4a30      	ldr	r2, [pc, #192]	@ (8003bb0 <HAL_I2C_MspInit+0x1b0>)
 8003aee:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003af2:	6413      	str	r3, [r2, #64]	@ 0x40
 8003af4:	4b2e      	ldr	r3, [pc, #184]	@ (8003bb0 <HAL_I2C_MspInit+0x1b0>)
 8003af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003afc:	617b      	str	r3, [r7, #20]
 8003afe:	697b      	ldr	r3, [r7, #20]
}
 8003b00:	e04f      	b.n	8003ba2 <HAL_I2C_MspInit+0x1a2>
  else if(hi2c->Instance==I2C3)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a2d      	ldr	r2, [pc, #180]	@ (8003bbc <HAL_I2C_MspInit+0x1bc>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d14a      	bne.n	8003ba2 <HAL_I2C_MspInit+0x1a2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	613b      	str	r3, [r7, #16]
 8003b10:	4b27      	ldr	r3, [pc, #156]	@ (8003bb0 <HAL_I2C_MspInit+0x1b0>)
 8003b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b14:	4a26      	ldr	r2, [pc, #152]	@ (8003bb0 <HAL_I2C_MspInit+0x1b0>)
 8003b16:	f043 0301 	orr.w	r3, r3, #1
 8003b1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b1c:	4b24      	ldr	r3, [pc, #144]	@ (8003bb0 <HAL_I2C_MspInit+0x1b0>)
 8003b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	613b      	str	r3, [r7, #16]
 8003b26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b28:	2300      	movs	r3, #0
 8003b2a:	60fb      	str	r3, [r7, #12]
 8003b2c:	4b20      	ldr	r3, [pc, #128]	@ (8003bb0 <HAL_I2C_MspInit+0x1b0>)
 8003b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b30:	4a1f      	ldr	r2, [pc, #124]	@ (8003bb0 <HAL_I2C_MspInit+0x1b0>)
 8003b32:	f043 0302 	orr.w	r3, r3, #2
 8003b36:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b38:	4b1d      	ldr	r3, [pc, #116]	@ (8003bb0 <HAL_I2C_MspInit+0x1b0>)
 8003b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	60fb      	str	r3, [r7, #12]
 8003b42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003b44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003b48:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b4a:	2312      	movs	r3, #18
 8003b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b52:	2303      	movs	r3, #3
 8003b54:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003b56:	2304      	movs	r3, #4
 8003b58:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b5e:	4619      	mov	r1, r3
 8003b60:	4817      	ldr	r0, [pc, #92]	@ (8003bc0 <HAL_I2C_MspInit+0x1c0>)
 8003b62:	f001 fc29 	bl	80053b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003b66:	2310      	movs	r3, #16
 8003b68:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b6a:	2312      	movs	r3, #18
 8003b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b72:	2303      	movs	r3, #3
 8003b74:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8003b76:	2309      	movs	r3, #9
 8003b78:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b7e:	4619      	mov	r1, r3
 8003b80:	480c      	ldr	r0, [pc, #48]	@ (8003bb4 <HAL_I2C_MspInit+0x1b4>)
 8003b82:	f001 fc19 	bl	80053b8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003b86:	2300      	movs	r3, #0
 8003b88:	60bb      	str	r3, [r7, #8]
 8003b8a:	4b09      	ldr	r3, [pc, #36]	@ (8003bb0 <HAL_I2C_MspInit+0x1b0>)
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8e:	4a08      	ldr	r2, [pc, #32]	@ (8003bb0 <HAL_I2C_MspInit+0x1b0>)
 8003b90:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003b94:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b96:	4b06      	ldr	r3, [pc, #24]	@ (8003bb0 <HAL_I2C_MspInit+0x1b0>)
 8003b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b9e:	60bb      	str	r3, [r7, #8]
 8003ba0:	68bb      	ldr	r3, [r7, #8]
}
 8003ba2:	bf00      	nop
 8003ba4:	3738      	adds	r7, #56	@ 0x38
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	40005400 	.word	0x40005400
 8003bb0:	40023800 	.word	0x40023800
 8003bb4:	40020400 	.word	0x40020400
 8003bb8:	40005800 	.word	0x40005800
 8003bbc:	40005c00 	.word	0x40005c00
 8003bc0:	40020000 	.word	0x40020000

08003bc4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b08c      	sub	sp, #48	@ 0x30
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bcc:	f107 031c 	add.w	r3, r7, #28
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	601a      	str	r2, [r3, #0]
 8003bd4:	605a      	str	r2, [r3, #4]
 8003bd6:	609a      	str	r2, [r3, #8]
 8003bd8:	60da      	str	r2, [r3, #12]
 8003bda:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a77      	ldr	r2, [pc, #476]	@ (8003dc0 <HAL_SD_MspInit+0x1fc>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	f040 80e8 	bne.w	8003db8 <HAL_SD_MspInit+0x1f4>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8003be8:	2300      	movs	r3, #0
 8003bea:	61bb      	str	r3, [r7, #24]
 8003bec:	4b75      	ldr	r3, [pc, #468]	@ (8003dc4 <HAL_SD_MspInit+0x200>)
 8003bee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bf0:	4a74      	ldr	r2, [pc, #464]	@ (8003dc4 <HAL_SD_MspInit+0x200>)
 8003bf2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003bf6:	6453      	str	r3, [r2, #68]	@ 0x44
 8003bf8:	4b72      	ldr	r3, [pc, #456]	@ (8003dc4 <HAL_SD_MspInit+0x200>)
 8003bfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c00:	61bb      	str	r3, [r7, #24]
 8003c02:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c04:	2300      	movs	r3, #0
 8003c06:	617b      	str	r3, [r7, #20]
 8003c08:	4b6e      	ldr	r3, [pc, #440]	@ (8003dc4 <HAL_SD_MspInit+0x200>)
 8003c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c0c:	4a6d      	ldr	r2, [pc, #436]	@ (8003dc4 <HAL_SD_MspInit+0x200>)
 8003c0e:	f043 0301 	orr.w	r3, r3, #1
 8003c12:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c14:	4b6b      	ldr	r3, [pc, #428]	@ (8003dc4 <HAL_SD_MspInit+0x200>)
 8003c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c18:	f003 0301 	and.w	r3, r3, #1
 8003c1c:	617b      	str	r3, [r7, #20]
 8003c1e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c20:	2300      	movs	r3, #0
 8003c22:	613b      	str	r3, [r7, #16]
 8003c24:	4b67      	ldr	r3, [pc, #412]	@ (8003dc4 <HAL_SD_MspInit+0x200>)
 8003c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c28:	4a66      	ldr	r2, [pc, #408]	@ (8003dc4 <HAL_SD_MspInit+0x200>)
 8003c2a:	f043 0302 	orr.w	r3, r3, #2
 8003c2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c30:	4b64      	ldr	r3, [pc, #400]	@ (8003dc4 <HAL_SD_MspInit+0x200>)
 8003c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c34:	f003 0302 	and.w	r3, r3, #2
 8003c38:	613b      	str	r3, [r7, #16]
 8003c3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	60fb      	str	r3, [r7, #12]
 8003c40:	4b60      	ldr	r3, [pc, #384]	@ (8003dc4 <HAL_SD_MspInit+0x200>)
 8003c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c44:	4a5f      	ldr	r2, [pc, #380]	@ (8003dc4 <HAL_SD_MspInit+0x200>)
 8003c46:	f043 0304 	orr.w	r3, r3, #4
 8003c4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c4c:	4b5d      	ldr	r3, [pc, #372]	@ (8003dc4 <HAL_SD_MspInit+0x200>)
 8003c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c50:	f003 0304 	and.w	r3, r3, #4
 8003c54:	60fb      	str	r3, [r7, #12]
 8003c56:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> SDIO_D0
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003c58:	2340      	movs	r3, #64	@ 0x40
 8003c5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c60:	2300      	movs	r3, #0
 8003c62:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c64:	2303      	movs	r3, #3
 8003c66:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003c68:	230c      	movs	r3, #12
 8003c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c6c:	f107 031c 	add.w	r3, r7, #28
 8003c70:	4619      	mov	r1, r3
 8003c72:	4855      	ldr	r0, [pc, #340]	@ (8003dc8 <HAL_SD_MspInit+0x204>)
 8003c74:	f001 fba0 	bl	80053b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003c78:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c7e:	2302      	movs	r3, #2
 8003c80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c82:	2300      	movs	r3, #0
 8003c84:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c86:	2303      	movs	r3, #3
 8003c88:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003c8a:	230c      	movs	r3, #12
 8003c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c8e:	f107 031c 	add.w	r3, r7, #28
 8003c92:	4619      	mov	r1, r3
 8003c94:	484d      	ldr	r0, [pc, #308]	@ (8003dcc <HAL_SD_MspInit+0x208>)
 8003c96:	f001 fb8f 	bl	80053b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8003c9a:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8003c9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003cac:	230c      	movs	r3, #12
 8003cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cb0:	f107 031c 	add.w	r3, r7, #28
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	4846      	ldr	r0, [pc, #280]	@ (8003dd0 <HAL_SD_MspInit+0x20c>)
 8003cb8:	f001 fb7e 	bl	80053b8 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8003cbc:	4b45      	ldr	r3, [pc, #276]	@ (8003dd4 <HAL_SD_MspInit+0x210>)
 8003cbe:	4a46      	ldr	r2, [pc, #280]	@ (8003dd8 <HAL_SD_MspInit+0x214>)
 8003cc0:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8003cc2:	4b44      	ldr	r3, [pc, #272]	@ (8003dd4 <HAL_SD_MspInit+0x210>)
 8003cc4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003cc8:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003cca:	4b42      	ldr	r3, [pc, #264]	@ (8003dd4 <HAL_SD_MspInit+0x210>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003cd0:	4b40      	ldr	r3, [pc, #256]	@ (8003dd4 <HAL_SD_MspInit+0x210>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003cd6:	4b3f      	ldr	r3, [pc, #252]	@ (8003dd4 <HAL_SD_MspInit+0x210>)
 8003cd8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003cdc:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003cde:	4b3d      	ldr	r3, [pc, #244]	@ (8003dd4 <HAL_SD_MspInit+0x210>)
 8003ce0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003ce4:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003ce6:	4b3b      	ldr	r3, [pc, #236]	@ (8003dd4 <HAL_SD_MspInit+0x210>)
 8003ce8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003cec:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8003cee:	4b39      	ldr	r3, [pc, #228]	@ (8003dd4 <HAL_SD_MspInit+0x210>)
 8003cf0:	2220      	movs	r2, #32
 8003cf2:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003cf4:	4b37      	ldr	r3, [pc, #220]	@ (8003dd4 <HAL_SD_MspInit+0x210>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003cfa:	4b36      	ldr	r3, [pc, #216]	@ (8003dd4 <HAL_SD_MspInit+0x210>)
 8003cfc:	2204      	movs	r2, #4
 8003cfe:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003d00:	4b34      	ldr	r3, [pc, #208]	@ (8003dd4 <HAL_SD_MspInit+0x210>)
 8003d02:	2203      	movs	r2, #3
 8003d04:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8003d06:	4b33      	ldr	r3, [pc, #204]	@ (8003dd4 <HAL_SD_MspInit+0x210>)
 8003d08:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003d0c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003d0e:	4b31      	ldr	r3, [pc, #196]	@ (8003dd4 <HAL_SD_MspInit+0x210>)
 8003d10:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003d14:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8003d16:	482f      	ldr	r0, [pc, #188]	@ (8003dd4 <HAL_SD_MspInit+0x210>)
 8003d18:	f000 ff40 	bl	8004b9c <HAL_DMA_Init>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d001      	beq.n	8003d26 <HAL_SD_MspInit+0x162>
    {
      Error_Handler();
 8003d22:	f7ff fdfb 	bl	800391c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a2a      	ldr	r2, [pc, #168]	@ (8003dd4 <HAL_SD_MspInit+0x210>)
 8003d2a:	641a      	str	r2, [r3, #64]	@ 0x40
 8003d2c:	4a29      	ldr	r2, [pc, #164]	@ (8003dd4 <HAL_SD_MspInit+0x210>)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8003d32:	4b2a      	ldr	r3, [pc, #168]	@ (8003ddc <HAL_SD_MspInit+0x218>)
 8003d34:	4a2a      	ldr	r2, [pc, #168]	@ (8003de0 <HAL_SD_MspInit+0x21c>)
 8003d36:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8003d38:	4b28      	ldr	r3, [pc, #160]	@ (8003ddc <HAL_SD_MspInit+0x218>)
 8003d3a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003d3e:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003d40:	4b26      	ldr	r3, [pc, #152]	@ (8003ddc <HAL_SD_MspInit+0x218>)
 8003d42:	2240      	movs	r2, #64	@ 0x40
 8003d44:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d46:	4b25      	ldr	r3, [pc, #148]	@ (8003ddc <HAL_SD_MspInit+0x218>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003d4c:	4b23      	ldr	r3, [pc, #140]	@ (8003ddc <HAL_SD_MspInit+0x218>)
 8003d4e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d52:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003d54:	4b21      	ldr	r3, [pc, #132]	@ (8003ddc <HAL_SD_MspInit+0x218>)
 8003d56:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003d5a:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003d5c:	4b1f      	ldr	r3, [pc, #124]	@ (8003ddc <HAL_SD_MspInit+0x218>)
 8003d5e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003d62:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8003d64:	4b1d      	ldr	r3, [pc, #116]	@ (8003ddc <HAL_SD_MspInit+0x218>)
 8003d66:	2220      	movs	r2, #32
 8003d68:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003d6a:	4b1c      	ldr	r3, [pc, #112]	@ (8003ddc <HAL_SD_MspInit+0x218>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003d70:	4b1a      	ldr	r3, [pc, #104]	@ (8003ddc <HAL_SD_MspInit+0x218>)
 8003d72:	2204      	movs	r2, #4
 8003d74:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003d76:	4b19      	ldr	r3, [pc, #100]	@ (8003ddc <HAL_SD_MspInit+0x218>)
 8003d78:	2203      	movs	r2, #3
 8003d7a:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8003d7c:	4b17      	ldr	r3, [pc, #92]	@ (8003ddc <HAL_SD_MspInit+0x218>)
 8003d7e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003d82:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003d84:	4b15      	ldr	r3, [pc, #84]	@ (8003ddc <HAL_SD_MspInit+0x218>)
 8003d86:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003d8a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8003d8c:	4813      	ldr	r0, [pc, #76]	@ (8003ddc <HAL_SD_MspInit+0x218>)
 8003d8e:	f000 ff05 	bl	8004b9c <HAL_DMA_Init>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d001      	beq.n	8003d9c <HAL_SD_MspInit+0x1d8>
    {
      Error_Handler();
 8003d98:	f7ff fdc0 	bl	800391c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a0f      	ldr	r2, [pc, #60]	@ (8003ddc <HAL_SD_MspInit+0x218>)
 8003da0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003da2:	4a0e      	ldr	r2, [pc, #56]	@ (8003ddc <HAL_SD_MspInit+0x218>)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 2, 2);
 8003da8:	2202      	movs	r2, #2
 8003daa:	2102      	movs	r1, #2
 8003dac:	2031      	movs	r0, #49	@ 0x31
 8003dae:	f000 febe 	bl	8004b2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8003db2:	2031      	movs	r0, #49	@ 0x31
 8003db4:	f000 fed7 	bl	8004b66 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDIO_MspInit 1 */

  }

}
 8003db8:	bf00      	nop
 8003dba:	3730      	adds	r7, #48	@ 0x30
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	40012c00 	.word	0x40012c00
 8003dc4:	40023800 	.word	0x40023800
 8003dc8:	40020000 	.word	0x40020000
 8003dcc:	40020400 	.word	0x40020400
 8003dd0:	40020800 	.word	0x40020800
 8003dd4:	20002750 	.word	0x20002750
 8003dd8:	40026458 	.word	0x40026458
 8003ddc:	200027b0 	.word	0x200027b0
 8003de0:	400264a0 	.word	0x400264a0

08003de4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b087      	sub	sp, #28
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a1f      	ldr	r2, [pc, #124]	@ (8003e70 <HAL_TIM_PWM_MspInit+0x8c>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d10e      	bne.n	8003e14 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003df6:	2300      	movs	r3, #0
 8003df8:	617b      	str	r3, [r7, #20]
 8003dfa:	4b1e      	ldr	r3, [pc, #120]	@ (8003e74 <HAL_TIM_PWM_MspInit+0x90>)
 8003dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dfe:	4a1d      	ldr	r2, [pc, #116]	@ (8003e74 <HAL_TIM_PWM_MspInit+0x90>)
 8003e00:	f043 0301 	orr.w	r3, r3, #1
 8003e04:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e06:	4b1b      	ldr	r3, [pc, #108]	@ (8003e74 <HAL_TIM_PWM_MspInit+0x90>)
 8003e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	617b      	str	r3, [r7, #20]
 8003e10:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003e12:	e026      	b.n	8003e62 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM2)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e1c:	d10e      	bne.n	8003e3c <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003e1e:	2300      	movs	r3, #0
 8003e20:	613b      	str	r3, [r7, #16]
 8003e22:	4b14      	ldr	r3, [pc, #80]	@ (8003e74 <HAL_TIM_PWM_MspInit+0x90>)
 8003e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e26:	4a13      	ldr	r2, [pc, #76]	@ (8003e74 <HAL_TIM_PWM_MspInit+0x90>)
 8003e28:	f043 0301 	orr.w	r3, r3, #1
 8003e2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e2e:	4b11      	ldr	r3, [pc, #68]	@ (8003e74 <HAL_TIM_PWM_MspInit+0x90>)
 8003e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	613b      	str	r3, [r7, #16]
 8003e38:	693b      	ldr	r3, [r7, #16]
}
 8003e3a:	e012      	b.n	8003e62 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a0d      	ldr	r2, [pc, #52]	@ (8003e78 <HAL_TIM_PWM_MspInit+0x94>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d10d      	bne.n	8003e62 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003e46:	2300      	movs	r3, #0
 8003e48:	60fb      	str	r3, [r7, #12]
 8003e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8003e74 <HAL_TIM_PWM_MspInit+0x90>)
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4e:	4a09      	ldr	r2, [pc, #36]	@ (8003e74 <HAL_TIM_PWM_MspInit+0x90>)
 8003e50:	f043 0302 	orr.w	r3, r3, #2
 8003e54:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e56:	4b07      	ldr	r3, [pc, #28]	@ (8003e74 <HAL_TIM_PWM_MspInit+0x90>)
 8003e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	60fb      	str	r3, [r7, #12]
 8003e60:	68fb      	ldr	r3, [r7, #12]
}
 8003e62:	bf00      	nop
 8003e64:	371c      	adds	r7, #28
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	40010000 	.word	0x40010000
 8003e74:	40023800 	.word	0x40023800
 8003e78:	40000400 	.word	0x40000400

08003e7c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b08a      	sub	sp, #40	@ 0x28
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e84:	f107 0314 	add.w	r3, r7, #20
 8003e88:	2200      	movs	r2, #0
 8003e8a:	601a      	str	r2, [r3, #0]
 8003e8c:	605a      	str	r2, [r3, #4]
 8003e8e:	609a      	str	r2, [r3, #8]
 8003e90:	60da      	str	r2, [r3, #12]
 8003e92:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a36      	ldr	r2, [pc, #216]	@ (8003f74 <HAL_TIM_MspPostInit+0xf8>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d11f      	bne.n	8003ede <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	613b      	str	r3, [r7, #16]
 8003ea2:	4b35      	ldr	r3, [pc, #212]	@ (8003f78 <HAL_TIM_MspPostInit+0xfc>)
 8003ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ea6:	4a34      	ldr	r2, [pc, #208]	@ (8003f78 <HAL_TIM_MspPostInit+0xfc>)
 8003ea8:	f043 0301 	orr.w	r3, r3, #1
 8003eac:	6313      	str	r3, [r2, #48]	@ 0x30
 8003eae:	4b32      	ldr	r3, [pc, #200]	@ (8003f78 <HAL_TIM_MspPostInit+0xfc>)
 8003eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	613b      	str	r3, [r7, #16]
 8003eb8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003eba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003ebe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ed0:	f107 0314 	add.w	r3, r7, #20
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	4829      	ldr	r0, [pc, #164]	@ (8003f7c <HAL_TIM_MspPostInit+0x100>)
 8003ed8:	f001 fa6e 	bl	80053b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003edc:	e046      	b.n	8003f6c <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM2)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ee6:	d11e      	bne.n	8003f26 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ee8:	2300      	movs	r3, #0
 8003eea:	60fb      	str	r3, [r7, #12]
 8003eec:	4b22      	ldr	r3, [pc, #136]	@ (8003f78 <HAL_TIM_MspPostInit+0xfc>)
 8003eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef0:	4a21      	ldr	r2, [pc, #132]	@ (8003f78 <HAL_TIM_MspPostInit+0xfc>)
 8003ef2:	f043 0301 	orr.w	r3, r3, #1
 8003ef6:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ef8:	4b1f      	ldr	r3, [pc, #124]	@ (8003f78 <HAL_TIM_MspPostInit+0xfc>)
 8003efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	60fb      	str	r3, [r7, #12]
 8003f02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003f04:	2320      	movs	r3, #32
 8003f06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f08:	2302      	movs	r3, #2
 8003f0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f10:	2300      	movs	r3, #0
 8003f12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003f14:	2301      	movs	r3, #1
 8003f16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f18:	f107 0314 	add.w	r3, r7, #20
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	4817      	ldr	r0, [pc, #92]	@ (8003f7c <HAL_TIM_MspPostInit+0x100>)
 8003f20:	f001 fa4a 	bl	80053b8 <HAL_GPIO_Init>
}
 8003f24:	e022      	b.n	8003f6c <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM3)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a15      	ldr	r2, [pc, #84]	@ (8003f80 <HAL_TIM_MspPostInit+0x104>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d11d      	bne.n	8003f6c <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f30:	2300      	movs	r3, #0
 8003f32:	60bb      	str	r3, [r7, #8]
 8003f34:	4b10      	ldr	r3, [pc, #64]	@ (8003f78 <HAL_TIM_MspPostInit+0xfc>)
 8003f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f38:	4a0f      	ldr	r2, [pc, #60]	@ (8003f78 <HAL_TIM_MspPostInit+0xfc>)
 8003f3a:	f043 0304 	orr.w	r3, r3, #4
 8003f3e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f40:	4b0d      	ldr	r3, [pc, #52]	@ (8003f78 <HAL_TIM_MspPostInit+0xfc>)
 8003f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f44:	f003 0304 	and.w	r3, r3, #4
 8003f48:	60bb      	str	r3, [r7, #8]
 8003f4a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003f4c:	2340      	movs	r3, #64	@ 0x40
 8003f4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f50:	2302      	movs	r3, #2
 8003f52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f54:	2300      	movs	r3, #0
 8003f56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f60:	f107 0314 	add.w	r3, r7, #20
 8003f64:	4619      	mov	r1, r3
 8003f66:	4807      	ldr	r0, [pc, #28]	@ (8003f84 <HAL_TIM_MspPostInit+0x108>)
 8003f68:	f001 fa26 	bl	80053b8 <HAL_GPIO_Init>
}
 8003f6c:	bf00      	nop
 8003f6e:	3728      	adds	r7, #40	@ 0x28
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	40010000 	.word	0x40010000
 8003f78:	40023800 	.word	0x40023800
 8003f7c:	40020000 	.word	0x40020000
 8003f80:	40000400 	.word	0x40000400
 8003f84:	40020800 	.word	0x40020800

08003f88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b08c      	sub	sp, #48	@ 0x30
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f90:	f107 031c 	add.w	r3, r7, #28
 8003f94:	2200      	movs	r2, #0
 8003f96:	601a      	str	r2, [r3, #0]
 8003f98:	605a      	str	r2, [r3, #4]
 8003f9a:	609a      	str	r2, [r3, #8]
 8003f9c:	60da      	str	r2, [r3, #12]
 8003f9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a3a      	ldr	r2, [pc, #232]	@ (8004090 <HAL_UART_MspInit+0x108>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d135      	bne.n	8004016 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003faa:	2300      	movs	r3, #0
 8003fac:	61bb      	str	r3, [r7, #24]
 8003fae:	4b39      	ldr	r3, [pc, #228]	@ (8004094 <HAL_UART_MspInit+0x10c>)
 8003fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fb2:	4a38      	ldr	r2, [pc, #224]	@ (8004094 <HAL_UART_MspInit+0x10c>)
 8003fb4:	f043 0310 	orr.w	r3, r3, #16
 8003fb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003fba:	4b36      	ldr	r3, [pc, #216]	@ (8004094 <HAL_UART_MspInit+0x10c>)
 8003fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fbe:	f003 0310 	and.w	r3, r3, #16
 8003fc2:	61bb      	str	r3, [r7, #24]
 8003fc4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	617b      	str	r3, [r7, #20]
 8003fca:	4b32      	ldr	r3, [pc, #200]	@ (8004094 <HAL_UART_MspInit+0x10c>)
 8003fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fce:	4a31      	ldr	r2, [pc, #196]	@ (8004094 <HAL_UART_MspInit+0x10c>)
 8003fd0:	f043 0301 	orr.w	r3, r3, #1
 8003fd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fd6:	4b2f      	ldr	r3, [pc, #188]	@ (8004094 <HAL_UART_MspInit+0x10c>)
 8003fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	617b      	str	r3, [r7, #20]
 8003fe0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8003fe2:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 8003fe6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fe8:	2302      	movs	r3, #2
 8003fea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fec:	2300      	movs	r3, #0
 8003fee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003ff4:	2307      	movs	r3, #7
 8003ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ff8:	f107 031c 	add.w	r3, r7, #28
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	4826      	ldr	r0, [pc, #152]	@ (8004098 <HAL_UART_MspInit+0x110>)
 8004000:	f001 f9da 	bl	80053b8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 1);
 8004004:	2201      	movs	r2, #1
 8004006:	2101      	movs	r1, #1
 8004008:	2025      	movs	r0, #37	@ 0x25
 800400a:	f000 fd90 	bl	8004b2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800400e:	2025      	movs	r0, #37	@ 0x25
 8004010:	f000 fda9 	bl	8004b66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004014:	e038      	b.n	8004088 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a20      	ldr	r2, [pc, #128]	@ (800409c <HAL_UART_MspInit+0x114>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d133      	bne.n	8004088 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004020:	2300      	movs	r3, #0
 8004022:	613b      	str	r3, [r7, #16]
 8004024:	4b1b      	ldr	r3, [pc, #108]	@ (8004094 <HAL_UART_MspInit+0x10c>)
 8004026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004028:	4a1a      	ldr	r2, [pc, #104]	@ (8004094 <HAL_UART_MspInit+0x10c>)
 800402a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800402e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004030:	4b18      	ldr	r3, [pc, #96]	@ (8004094 <HAL_UART_MspInit+0x10c>)
 8004032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004034:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004038:	613b      	str	r3, [r7, #16]
 800403a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800403c:	2300      	movs	r3, #0
 800403e:	60fb      	str	r3, [r7, #12]
 8004040:	4b14      	ldr	r3, [pc, #80]	@ (8004094 <HAL_UART_MspInit+0x10c>)
 8004042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004044:	4a13      	ldr	r2, [pc, #76]	@ (8004094 <HAL_UART_MspInit+0x10c>)
 8004046:	f043 0301 	orr.w	r3, r3, #1
 800404a:	6313      	str	r3, [r2, #48]	@ 0x30
 800404c:	4b11      	ldr	r3, [pc, #68]	@ (8004094 <HAL_UART_MspInit+0x10c>)
 800404e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004050:	f003 0301 	and.w	r3, r3, #1
 8004054:	60fb      	str	r3, [r7, #12]
 8004056:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004058:	230c      	movs	r3, #12
 800405a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800405c:	2302      	movs	r3, #2
 800405e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004060:	2300      	movs	r3, #0
 8004062:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004064:	2303      	movs	r3, #3
 8004066:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004068:	2307      	movs	r3, #7
 800406a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800406c:	f107 031c 	add.w	r3, r7, #28
 8004070:	4619      	mov	r1, r3
 8004072:	4809      	ldr	r0, [pc, #36]	@ (8004098 <HAL_UART_MspInit+0x110>)
 8004074:	f001 f9a0 	bl	80053b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004078:	2200      	movs	r2, #0
 800407a:	2100      	movs	r1, #0
 800407c:	2026      	movs	r0, #38	@ 0x26
 800407e:	f000 fd56 	bl	8004b2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004082:	2026      	movs	r0, #38	@ 0x26
 8004084:	f000 fd6f 	bl	8004b66 <HAL_NVIC_EnableIRQ>
}
 8004088:	bf00      	nop
 800408a:	3730      	adds	r7, #48	@ 0x30
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	40011000 	.word	0x40011000
 8004094:	40023800 	.word	0x40023800
 8004098:	40020000 	.word	0x40020000
 800409c:	40004400 	.word	0x40004400

080040a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040a0:	b480      	push	{r7}
 80040a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80040a4:	bf00      	nop
 80040a6:	e7fd      	b.n	80040a4 <NMI_Handler+0x4>

080040a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040a8:	b480      	push	{r7}
 80040aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040ac:	bf00      	nop
 80040ae:	e7fd      	b.n	80040ac <HardFault_Handler+0x4>

080040b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80040b0:	b480      	push	{r7}
 80040b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040b4:	bf00      	nop
 80040b6:	e7fd      	b.n	80040b4 <MemManage_Handler+0x4>

080040b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040bc:	bf00      	nop
 80040be:	e7fd      	b.n	80040bc <BusFault_Handler+0x4>

080040c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80040c0:	b480      	push	{r7}
 80040c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80040c4:	bf00      	nop
 80040c6:	e7fd      	b.n	80040c4 <UsageFault_Handler+0x4>

080040c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80040c8:	b480      	push	{r7}
 80040ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80040cc:	bf00      	nop
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr

080040d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80040d6:	b480      	push	{r7}
 80040d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80040da:	bf00      	nop
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80040e4:	b480      	push	{r7}
 80040e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80040e8:	bf00      	nop
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr

080040f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80040f6:	f000 f989 	bl	800440c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80040fa:	bf00      	nop
 80040fc:	bd80      	pop	{r7, pc}
	...

08004100 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004104:	4802      	ldr	r0, [pc, #8]	@ (8004110 <USART1_IRQHandler+0x10>)
 8004106:	f005 fb59 	bl	80097bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800410a:	bf00      	nop
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	200028e8 	.word	0x200028e8

08004114 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004118:	4802      	ldr	r0, [pc, #8]	@ (8004124 <USART2_IRQHandler+0x10>)
 800411a:	f005 fb4f 	bl	80097bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800411e:	bf00      	nop
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	20002930 	.word	0x20002930

08004128 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800412c:	4802      	ldr	r0, [pc, #8]	@ (8004138 <SDIO_IRQHandler+0x10>)
 800412e:	f003 fc69 	bl	8007a04 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8004132:	bf00      	nop
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	200026cc 	.word	0x200026cc

0800413c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8004140:	4802      	ldr	r0, [pc, #8]	@ (800414c <DMA2_Stream3_IRQHandler+0x10>)
 8004142:	f000 fec3 	bl	8004ecc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8004146:	bf00      	nop
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	20002750 	.word	0x20002750

08004150 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8004154:	4802      	ldr	r0, [pc, #8]	@ (8004160 <DMA2_Stream6_IRQHandler+0x10>)
 8004156:	f000 feb9 	bl	8004ecc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800415a:	bf00      	nop
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	200027b0 	.word	0x200027b0

08004164 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004164:	b480      	push	{r7}
 8004166:	af00      	add	r7, sp, #0
  return 1;
 8004168:	2301      	movs	r3, #1
}
 800416a:	4618      	mov	r0, r3
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <_kill>:

int _kill(int pid, int sig)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800417e:	f00b fcc3 	bl	800fb08 <__errno>
 8004182:	4603      	mov	r3, r0
 8004184:	2216      	movs	r2, #22
 8004186:	601a      	str	r2, [r3, #0]
  return -1;
 8004188:	f04f 33ff 	mov.w	r3, #4294967295
}
 800418c:	4618      	mov	r0, r3
 800418e:	3708      	adds	r7, #8
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <_exit>:

void _exit (int status)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800419c:	f04f 31ff 	mov.w	r1, #4294967295
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f7ff ffe7 	bl	8004174 <_kill>
  while (1) {}    /* Make sure we hang here */
 80041a6:	bf00      	nop
 80041a8:	e7fd      	b.n	80041a6 <_exit+0x12>

080041aa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b086      	sub	sp, #24
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	60f8      	str	r0, [r7, #12]
 80041b2:	60b9      	str	r1, [r7, #8]
 80041b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041b6:	2300      	movs	r3, #0
 80041b8:	617b      	str	r3, [r7, #20]
 80041ba:	e00a      	b.n	80041d2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80041bc:	f3af 8000 	nop.w
 80041c0:	4601      	mov	r1, r0
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	1c5a      	adds	r2, r3, #1
 80041c6:	60ba      	str	r2, [r7, #8]
 80041c8:	b2ca      	uxtb	r2, r1
 80041ca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	3301      	adds	r3, #1
 80041d0:	617b      	str	r3, [r7, #20]
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	dbf0      	blt.n	80041bc <_read+0x12>
  }

  return len;
 80041da:	687b      	ldr	r3, [r7, #4]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3718      	adds	r7, #24
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041f0:	2300      	movs	r3, #0
 80041f2:	617b      	str	r3, [r7, #20]
 80041f4:	e009      	b.n	800420a <_write+0x26>
  {
    __io_putchar(*ptr++);
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	1c5a      	adds	r2, r3, #1
 80041fa:	60ba      	str	r2, [r7, #8]
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	4618      	mov	r0, r3
 8004200:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	3301      	adds	r3, #1
 8004208:	617b      	str	r3, [r7, #20]
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	429a      	cmp	r2, r3
 8004210:	dbf1      	blt.n	80041f6 <_write+0x12>
  }
  return len;
 8004212:	687b      	ldr	r3, [r7, #4]
}
 8004214:	4618      	mov	r0, r3
 8004216:	3718      	adds	r7, #24
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <_close>:

int _close(int file)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004224:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004228:	4618      	mov	r0, r3
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004244:	605a      	str	r2, [r3, #4]
  return 0;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <_isatty>:

int _isatty(int file)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800425c:	2301      	movs	r3, #1
}
 800425e:	4618      	mov	r0, r3
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr

0800426a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800426a:	b480      	push	{r7}
 800426c:	b085      	sub	sp, #20
 800426e:	af00      	add	r7, sp, #0
 8004270:	60f8      	str	r0, [r7, #12]
 8004272:	60b9      	str	r1, [r7, #8]
 8004274:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004276:	2300      	movs	r3, #0
}
 8004278:	4618      	mov	r0, r3
 800427a:	3714      	adds	r7, #20
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b086      	sub	sp, #24
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800428c:	4a14      	ldr	r2, [pc, #80]	@ (80042e0 <_sbrk+0x5c>)
 800428e:	4b15      	ldr	r3, [pc, #84]	@ (80042e4 <_sbrk+0x60>)
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004298:	4b13      	ldr	r3, [pc, #76]	@ (80042e8 <_sbrk+0x64>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d102      	bne.n	80042a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80042a0:	4b11      	ldr	r3, [pc, #68]	@ (80042e8 <_sbrk+0x64>)
 80042a2:	4a12      	ldr	r2, [pc, #72]	@ (80042ec <_sbrk+0x68>)
 80042a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80042a6:	4b10      	ldr	r3, [pc, #64]	@ (80042e8 <_sbrk+0x64>)
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4413      	add	r3, r2
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d207      	bcs.n	80042c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80042b4:	f00b fc28 	bl	800fb08 <__errno>
 80042b8:	4603      	mov	r3, r0
 80042ba:	220c      	movs	r2, #12
 80042bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80042be:	f04f 33ff 	mov.w	r3, #4294967295
 80042c2:	e009      	b.n	80042d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80042c4:	4b08      	ldr	r3, [pc, #32]	@ (80042e8 <_sbrk+0x64>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80042ca:	4b07      	ldr	r3, [pc, #28]	@ (80042e8 <_sbrk+0x64>)
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4413      	add	r3, r2
 80042d2:	4a05      	ldr	r2, [pc, #20]	@ (80042e8 <_sbrk+0x64>)
 80042d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80042d6:	68fb      	ldr	r3, [r7, #12]
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3718      	adds	r7, #24
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	20020000 	.word	0x20020000
 80042e4:	00000400 	.word	0x00000400
 80042e8:	20002c88 	.word	0x20002c88
 80042ec:	20002e20 	.word	0x20002e20

080042f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80042f0:	b480      	push	{r7}
 80042f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80042f4:	4b06      	ldr	r3, [pc, #24]	@ (8004310 <SystemInit+0x20>)
 80042f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042fa:	4a05      	ldr	r2, [pc, #20]	@ (8004310 <SystemInit+0x20>)
 80042fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004300:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004304:	bf00      	nop
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	e000ed00 	.word	0xe000ed00

08004314 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004314:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800434c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004318:	f7ff ffea 	bl	80042f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800431c:	480c      	ldr	r0, [pc, #48]	@ (8004350 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800431e:	490d      	ldr	r1, [pc, #52]	@ (8004354 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004320:	4a0d      	ldr	r2, [pc, #52]	@ (8004358 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004322:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004324:	e002      	b.n	800432c <LoopCopyDataInit>

08004326 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004326:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004328:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800432a:	3304      	adds	r3, #4

0800432c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800432c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800432e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004330:	d3f9      	bcc.n	8004326 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004332:	4a0a      	ldr	r2, [pc, #40]	@ (800435c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004334:	4c0a      	ldr	r4, [pc, #40]	@ (8004360 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004336:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004338:	e001      	b.n	800433e <LoopFillZerobss>

0800433a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800433a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800433c:	3204      	adds	r2, #4

0800433e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800433e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004340:	d3fb      	bcc.n	800433a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004342:	f00b fbe7 	bl	800fb14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004346:	f7fe fe85 	bl	8003054 <main>
  bx  lr    
 800434a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800434c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004350:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004354:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8004358:	08014688 	.word	0x08014688
  ldr r2, =_sbss
 800435c:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8004360:	20002e20 	.word	0x20002e20

08004364 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004364:	e7fe      	b.n	8004364 <ADC_IRQHandler>
	...

08004368 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800436c:	4b0e      	ldr	r3, [pc, #56]	@ (80043a8 <HAL_Init+0x40>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a0d      	ldr	r2, [pc, #52]	@ (80043a8 <HAL_Init+0x40>)
 8004372:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004376:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004378:	4b0b      	ldr	r3, [pc, #44]	@ (80043a8 <HAL_Init+0x40>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a0a      	ldr	r2, [pc, #40]	@ (80043a8 <HAL_Init+0x40>)
 800437e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004382:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004384:	4b08      	ldr	r3, [pc, #32]	@ (80043a8 <HAL_Init+0x40>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a07      	ldr	r2, [pc, #28]	@ (80043a8 <HAL_Init+0x40>)
 800438a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800438e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004390:	2003      	movs	r0, #3
 8004392:	f000 fbc1 	bl	8004b18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004396:	2000      	movs	r0, #0
 8004398:	f000 f808 	bl	80043ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800439c:	f7ff fac4 	bl	8003928 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	40023c00 	.word	0x40023c00

080043ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80043b4:	4b12      	ldr	r3, [pc, #72]	@ (8004400 <HAL_InitTick+0x54>)
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	4b12      	ldr	r3, [pc, #72]	@ (8004404 <HAL_InitTick+0x58>)
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	4619      	mov	r1, r3
 80043be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80043c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80043c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ca:	4618      	mov	r0, r3
 80043cc:	f000 fbd9 	bl	8004b82 <HAL_SYSTICK_Config>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d001      	beq.n	80043da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e00e      	b.n	80043f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2b0f      	cmp	r3, #15
 80043de:	d80a      	bhi.n	80043f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043e0:	2200      	movs	r2, #0
 80043e2:	6879      	ldr	r1, [r7, #4]
 80043e4:	f04f 30ff 	mov.w	r0, #4294967295
 80043e8:	f000 fba1 	bl	8004b2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80043ec:	4a06      	ldr	r2, [pc, #24]	@ (8004408 <HAL_InitTick+0x5c>)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
 80043f4:	e000      	b.n	80043f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3708      	adds	r7, #8
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	20000008 	.word	0x20000008
 8004404:	20000010 	.word	0x20000010
 8004408:	2000000c 	.word	0x2000000c

0800440c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800440c:	b480      	push	{r7}
 800440e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004410:	4b06      	ldr	r3, [pc, #24]	@ (800442c <HAL_IncTick+0x20>)
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	461a      	mov	r2, r3
 8004416:	4b06      	ldr	r3, [pc, #24]	@ (8004430 <HAL_IncTick+0x24>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4413      	add	r3, r2
 800441c:	4a04      	ldr	r2, [pc, #16]	@ (8004430 <HAL_IncTick+0x24>)
 800441e:	6013      	str	r3, [r2, #0]
}
 8004420:	bf00      	nop
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	20000010 	.word	0x20000010
 8004430:	20002c8c 	.word	0x20002c8c

08004434 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004434:	b480      	push	{r7}
 8004436:	af00      	add	r7, sp, #0
  return uwTick;
 8004438:	4b03      	ldr	r3, [pc, #12]	@ (8004448 <HAL_GetTick+0x14>)
 800443a:	681b      	ldr	r3, [r3, #0]
}
 800443c:	4618      	mov	r0, r3
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	20002c8c 	.word	0x20002c8c

0800444c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004454:	f7ff ffee 	bl	8004434 <HAL_GetTick>
 8004458:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004464:	d005      	beq.n	8004472 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004466:	4b0a      	ldr	r3, [pc, #40]	@ (8004490 <HAL_Delay+0x44>)
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	461a      	mov	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	4413      	add	r3, r2
 8004470:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004472:	bf00      	nop
 8004474:	f7ff ffde 	bl	8004434 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	429a      	cmp	r2, r3
 8004482:	d8f7      	bhi.n	8004474 <HAL_Delay+0x28>
  {
  }
}
 8004484:	bf00      	nop
 8004486:	bf00      	nop
 8004488:	3710      	adds	r7, #16
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	20000010 	.word	0x20000010

08004494 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800449c:	2300      	movs	r3, #0
 800449e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d101      	bne.n	80044aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e033      	b.n	8004512 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d109      	bne.n	80044c6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f7ff fa60 	bl	8003978 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ca:	f003 0310 	and.w	r3, r3, #16
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d118      	bne.n	8004504 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80044da:	f023 0302 	bic.w	r3, r3, #2
 80044de:	f043 0202 	orr.w	r2, r3, #2
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 f94a 	bl	8004780 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f6:	f023 0303 	bic.w	r3, r3, #3
 80044fa:	f043 0201 	orr.w	r2, r3, #1
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	641a      	str	r2, [r3, #64]	@ 0x40
 8004502:	e001      	b.n	8004508 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004510:	7bfb      	ldrb	r3, [r7, #15]
}
 8004512:	4618      	mov	r0, r3
 8004514:	3710      	adds	r7, #16
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
	...

0800451c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004526:	2300      	movs	r3, #0
 8004528:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004530:	2b01      	cmp	r3, #1
 8004532:	d101      	bne.n	8004538 <HAL_ADC_ConfigChannel+0x1c>
 8004534:	2302      	movs	r3, #2
 8004536:	e113      	b.n	8004760 <HAL_ADC_ConfigChannel+0x244>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2b09      	cmp	r3, #9
 8004546:	d925      	bls.n	8004594 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68d9      	ldr	r1, [r3, #12]
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	b29b      	uxth	r3, r3
 8004554:	461a      	mov	r2, r3
 8004556:	4613      	mov	r3, r2
 8004558:	005b      	lsls	r3, r3, #1
 800455a:	4413      	add	r3, r2
 800455c:	3b1e      	subs	r3, #30
 800455e:	2207      	movs	r2, #7
 8004560:	fa02 f303 	lsl.w	r3, r2, r3
 8004564:	43da      	mvns	r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	400a      	ands	r2, r1
 800456c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68d9      	ldr	r1, [r3, #12]
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	689a      	ldr	r2, [r3, #8]
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	b29b      	uxth	r3, r3
 800457e:	4618      	mov	r0, r3
 8004580:	4603      	mov	r3, r0
 8004582:	005b      	lsls	r3, r3, #1
 8004584:	4403      	add	r3, r0
 8004586:	3b1e      	subs	r3, #30
 8004588:	409a      	lsls	r2, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	430a      	orrs	r2, r1
 8004590:	60da      	str	r2, [r3, #12]
 8004592:	e022      	b.n	80045da <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6919      	ldr	r1, [r3, #16]
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	b29b      	uxth	r3, r3
 80045a0:	461a      	mov	r2, r3
 80045a2:	4613      	mov	r3, r2
 80045a4:	005b      	lsls	r3, r3, #1
 80045a6:	4413      	add	r3, r2
 80045a8:	2207      	movs	r2, #7
 80045aa:	fa02 f303 	lsl.w	r3, r2, r3
 80045ae:	43da      	mvns	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	400a      	ands	r2, r1
 80045b6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	6919      	ldr	r1, [r3, #16]
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	689a      	ldr	r2, [r3, #8]
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	4618      	mov	r0, r3
 80045ca:	4603      	mov	r3, r0
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	4403      	add	r3, r0
 80045d0:	409a      	lsls	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	430a      	orrs	r2, r1
 80045d8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	2b06      	cmp	r3, #6
 80045e0:	d824      	bhi.n	800462c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	685a      	ldr	r2, [r3, #4]
 80045ec:	4613      	mov	r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	4413      	add	r3, r2
 80045f2:	3b05      	subs	r3, #5
 80045f4:	221f      	movs	r2, #31
 80045f6:	fa02 f303 	lsl.w	r3, r2, r3
 80045fa:	43da      	mvns	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	400a      	ands	r2, r1
 8004602:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	b29b      	uxth	r3, r3
 8004610:	4618      	mov	r0, r3
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	685a      	ldr	r2, [r3, #4]
 8004616:	4613      	mov	r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	4413      	add	r3, r2
 800461c:	3b05      	subs	r3, #5
 800461e:	fa00 f203 	lsl.w	r2, r0, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	430a      	orrs	r2, r1
 8004628:	635a      	str	r2, [r3, #52]	@ 0x34
 800462a:	e04c      	b.n	80046c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	2b0c      	cmp	r3, #12
 8004632:	d824      	bhi.n	800467e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	685a      	ldr	r2, [r3, #4]
 800463e:	4613      	mov	r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	4413      	add	r3, r2
 8004644:	3b23      	subs	r3, #35	@ 0x23
 8004646:	221f      	movs	r2, #31
 8004648:	fa02 f303 	lsl.w	r3, r2, r3
 800464c:	43da      	mvns	r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	400a      	ands	r2, r1
 8004654:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	b29b      	uxth	r3, r3
 8004662:	4618      	mov	r0, r3
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	685a      	ldr	r2, [r3, #4]
 8004668:	4613      	mov	r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	4413      	add	r3, r2
 800466e:	3b23      	subs	r3, #35	@ 0x23
 8004670:	fa00 f203 	lsl.w	r2, r0, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	430a      	orrs	r2, r1
 800467a:	631a      	str	r2, [r3, #48]	@ 0x30
 800467c:	e023      	b.n	80046c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	685a      	ldr	r2, [r3, #4]
 8004688:	4613      	mov	r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	4413      	add	r3, r2
 800468e:	3b41      	subs	r3, #65	@ 0x41
 8004690:	221f      	movs	r2, #31
 8004692:	fa02 f303 	lsl.w	r3, r2, r3
 8004696:	43da      	mvns	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	400a      	ands	r2, r1
 800469e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	4618      	mov	r0, r3
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	685a      	ldr	r2, [r3, #4]
 80046b2:	4613      	mov	r3, r2
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	4413      	add	r3, r2
 80046b8:	3b41      	subs	r3, #65	@ 0x41
 80046ba:	fa00 f203 	lsl.w	r2, r0, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	430a      	orrs	r2, r1
 80046c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80046c6:	4b29      	ldr	r3, [pc, #164]	@ (800476c <HAL_ADC_ConfigChannel+0x250>)
 80046c8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a28      	ldr	r2, [pc, #160]	@ (8004770 <HAL_ADC_ConfigChannel+0x254>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d10f      	bne.n	80046f4 <HAL_ADC_ConfigChannel+0x1d8>
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2b12      	cmp	r3, #18
 80046da:	d10b      	bne.n	80046f4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a1d      	ldr	r2, [pc, #116]	@ (8004770 <HAL_ADC_ConfigChannel+0x254>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d12b      	bne.n	8004756 <HAL_ADC_ConfigChannel+0x23a>
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a1c      	ldr	r2, [pc, #112]	@ (8004774 <HAL_ADC_ConfigChannel+0x258>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d003      	beq.n	8004710 <HAL_ADC_ConfigChannel+0x1f4>
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2b11      	cmp	r3, #17
 800470e:	d122      	bne.n	8004756 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a11      	ldr	r2, [pc, #68]	@ (8004774 <HAL_ADC_ConfigChannel+0x258>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d111      	bne.n	8004756 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004732:	4b11      	ldr	r3, [pc, #68]	@ (8004778 <HAL_ADC_ConfigChannel+0x25c>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a11      	ldr	r2, [pc, #68]	@ (800477c <HAL_ADC_ConfigChannel+0x260>)
 8004738:	fba2 2303 	umull	r2, r3, r2, r3
 800473c:	0c9a      	lsrs	r2, r3, #18
 800473e:	4613      	mov	r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	4413      	add	r3, r2
 8004744:	005b      	lsls	r3, r3, #1
 8004746:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004748:	e002      	b.n	8004750 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	3b01      	subs	r3, #1
 800474e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1f9      	bne.n	800474a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	3714      	adds	r7, #20
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr
 800476c:	40012300 	.word	0x40012300
 8004770:	40012000 	.word	0x40012000
 8004774:	10000012 	.word	0x10000012
 8004778:	20000008 	.word	0x20000008
 800477c:	431bde83 	.word	0x431bde83

08004780 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004788:	4b79      	ldr	r3, [pc, #484]	@ (8004970 <ADC_Init+0x1f0>)
 800478a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	685a      	ldr	r2, [r3, #4]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	431a      	orrs	r2, r3
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	685a      	ldr	r2, [r3, #4]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80047b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	6859      	ldr	r1, [r3, #4]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	021a      	lsls	r2, r3, #8
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	430a      	orrs	r2, r1
 80047c8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	685a      	ldr	r2, [r3, #4]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80047d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	6859      	ldr	r1, [r3, #4]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689a      	ldr	r2, [r3, #8]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	430a      	orrs	r2, r1
 80047ea:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	689a      	ldr	r2, [r3, #8]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6899      	ldr	r1, [r3, #8]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	68da      	ldr	r2, [r3, #12]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	430a      	orrs	r2, r1
 800480c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004812:	4a58      	ldr	r2, [pc, #352]	@ (8004974 <ADC_Init+0x1f4>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d022      	beq.n	800485e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	689a      	ldr	r2, [r3, #8]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004826:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	6899      	ldr	r1, [r3, #8]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	430a      	orrs	r2, r1
 8004838:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	689a      	ldr	r2, [r3, #8]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004848:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	6899      	ldr	r1, [r3, #8]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	430a      	orrs	r2, r1
 800485a:	609a      	str	r2, [r3, #8]
 800485c:	e00f      	b.n	800487e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	689a      	ldr	r2, [r3, #8]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800486c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	689a      	ldr	r2, [r3, #8]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800487c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	689a      	ldr	r2, [r3, #8]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f022 0202 	bic.w	r2, r2, #2
 800488c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	6899      	ldr	r1, [r3, #8]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	7e1b      	ldrb	r3, [r3, #24]
 8004898:	005a      	lsls	r2, r3, #1
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	430a      	orrs	r2, r1
 80048a0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d01b      	beq.n	80048e4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	685a      	ldr	r2, [r3, #4]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048ba:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	685a      	ldr	r2, [r3, #4]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80048ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6859      	ldr	r1, [r3, #4]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d6:	3b01      	subs	r3, #1
 80048d8:	035a      	lsls	r2, r3, #13
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	430a      	orrs	r2, r1
 80048e0:	605a      	str	r2, [r3, #4]
 80048e2:	e007      	b.n	80048f4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	685a      	ldr	r2, [r3, #4]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048f2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004902:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	69db      	ldr	r3, [r3, #28]
 800490e:	3b01      	subs	r3, #1
 8004910:	051a      	lsls	r2, r3, #20
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	430a      	orrs	r2, r1
 8004918:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	689a      	ldr	r2, [r3, #8]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004928:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	6899      	ldr	r1, [r3, #8]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004936:	025a      	lsls	r2, r3, #9
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	430a      	orrs	r2, r1
 800493e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	689a      	ldr	r2, [r3, #8]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800494e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6899      	ldr	r1, [r3, #8]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	695b      	ldr	r3, [r3, #20]
 800495a:	029a      	lsls	r2, r3, #10
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	430a      	orrs	r2, r1
 8004962:	609a      	str	r2, [r3, #8]
}
 8004964:	bf00      	nop
 8004966:	3714      	adds	r7, #20
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr
 8004970:	40012300 	.word	0x40012300
 8004974:	0f000001 	.word	0x0f000001

08004978 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f003 0307 	and.w	r3, r3, #7
 8004986:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004988:	4b0c      	ldr	r3, [pc, #48]	@ (80049bc <__NVIC_SetPriorityGrouping+0x44>)
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800498e:	68ba      	ldr	r2, [r7, #8]
 8004990:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004994:	4013      	ands	r3, r2
 8004996:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80049a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80049a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049aa:	4a04      	ldr	r2, [pc, #16]	@ (80049bc <__NVIC_SetPriorityGrouping+0x44>)
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	60d3      	str	r3, [r2, #12]
}
 80049b0:	bf00      	nop
 80049b2:	3714      	adds	r7, #20
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr
 80049bc:	e000ed00 	.word	0xe000ed00

080049c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049c0:	b480      	push	{r7}
 80049c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049c4:	4b04      	ldr	r3, [pc, #16]	@ (80049d8 <__NVIC_GetPriorityGrouping+0x18>)
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	0a1b      	lsrs	r3, r3, #8
 80049ca:	f003 0307 	and.w	r3, r3, #7
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr
 80049d8:	e000ed00 	.word	0xe000ed00

080049dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	4603      	mov	r3, r0
 80049e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	db0b      	blt.n	8004a06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049ee:	79fb      	ldrb	r3, [r7, #7]
 80049f0:	f003 021f 	and.w	r2, r3, #31
 80049f4:	4907      	ldr	r1, [pc, #28]	@ (8004a14 <__NVIC_EnableIRQ+0x38>)
 80049f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049fa:	095b      	lsrs	r3, r3, #5
 80049fc:	2001      	movs	r0, #1
 80049fe:	fa00 f202 	lsl.w	r2, r0, r2
 8004a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004a06:	bf00      	nop
 8004a08:	370c      	adds	r7, #12
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	e000e100 	.word	0xe000e100

08004a18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	4603      	mov	r3, r0
 8004a20:	6039      	str	r1, [r7, #0]
 8004a22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	db0a      	blt.n	8004a42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	b2da      	uxtb	r2, r3
 8004a30:	490c      	ldr	r1, [pc, #48]	@ (8004a64 <__NVIC_SetPriority+0x4c>)
 8004a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a36:	0112      	lsls	r2, r2, #4
 8004a38:	b2d2      	uxtb	r2, r2
 8004a3a:	440b      	add	r3, r1
 8004a3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a40:	e00a      	b.n	8004a58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	b2da      	uxtb	r2, r3
 8004a46:	4908      	ldr	r1, [pc, #32]	@ (8004a68 <__NVIC_SetPriority+0x50>)
 8004a48:	79fb      	ldrb	r3, [r7, #7]
 8004a4a:	f003 030f 	and.w	r3, r3, #15
 8004a4e:	3b04      	subs	r3, #4
 8004a50:	0112      	lsls	r2, r2, #4
 8004a52:	b2d2      	uxtb	r2, r2
 8004a54:	440b      	add	r3, r1
 8004a56:	761a      	strb	r2, [r3, #24]
}
 8004a58:	bf00      	nop
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr
 8004a64:	e000e100 	.word	0xe000e100
 8004a68:	e000ed00 	.word	0xe000ed00

08004a6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b089      	sub	sp, #36	@ 0x24
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f003 0307 	and.w	r3, r3, #7
 8004a7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	f1c3 0307 	rsb	r3, r3, #7
 8004a86:	2b04      	cmp	r3, #4
 8004a88:	bf28      	it	cs
 8004a8a:	2304      	movcs	r3, #4
 8004a8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	3304      	adds	r3, #4
 8004a92:	2b06      	cmp	r3, #6
 8004a94:	d902      	bls.n	8004a9c <NVIC_EncodePriority+0x30>
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	3b03      	subs	r3, #3
 8004a9a:	e000      	b.n	8004a9e <NVIC_EncodePriority+0x32>
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aaa:	43da      	mvns	r2, r3
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	401a      	ands	r2, r3
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	fa01 f303 	lsl.w	r3, r1, r3
 8004abe:	43d9      	mvns	r1, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ac4:	4313      	orrs	r3, r2
         );
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3724      	adds	r7, #36	@ 0x24
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
	...

08004ad4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ae4:	d301      	bcc.n	8004aea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e00f      	b.n	8004b0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004aea:	4a0a      	ldr	r2, [pc, #40]	@ (8004b14 <SysTick_Config+0x40>)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	3b01      	subs	r3, #1
 8004af0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004af2:	210f      	movs	r1, #15
 8004af4:	f04f 30ff 	mov.w	r0, #4294967295
 8004af8:	f7ff ff8e 	bl	8004a18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004afc:	4b05      	ldr	r3, [pc, #20]	@ (8004b14 <SysTick_Config+0x40>)
 8004afe:	2200      	movs	r2, #0
 8004b00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b02:	4b04      	ldr	r3, [pc, #16]	@ (8004b14 <SysTick_Config+0x40>)
 8004b04:	2207      	movs	r2, #7
 8004b06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3708      	adds	r7, #8
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	e000e010 	.word	0xe000e010

08004b18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f7ff ff29 	bl	8004978 <__NVIC_SetPriorityGrouping>
}
 8004b26:	bf00      	nop
 8004b28:	3708      	adds	r7, #8
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}

08004b2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004b2e:	b580      	push	{r7, lr}
 8004b30:	b086      	sub	sp, #24
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	4603      	mov	r3, r0
 8004b36:	60b9      	str	r1, [r7, #8]
 8004b38:	607a      	str	r2, [r7, #4]
 8004b3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b40:	f7ff ff3e 	bl	80049c0 <__NVIC_GetPriorityGrouping>
 8004b44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	68b9      	ldr	r1, [r7, #8]
 8004b4a:	6978      	ldr	r0, [r7, #20]
 8004b4c:	f7ff ff8e 	bl	8004a6c <NVIC_EncodePriority>
 8004b50:	4602      	mov	r2, r0
 8004b52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b56:	4611      	mov	r1, r2
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f7ff ff5d 	bl	8004a18 <__NVIC_SetPriority>
}
 8004b5e:	bf00      	nop
 8004b60:	3718      	adds	r7, #24
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b082      	sub	sp, #8
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b74:	4618      	mov	r0, r3
 8004b76:	f7ff ff31 	bl	80049dc <__NVIC_EnableIRQ>
}
 8004b7a:	bf00      	nop
 8004b7c:	3708      	adds	r7, #8
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}

08004b82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b82:	b580      	push	{r7, lr}
 8004b84:	b082      	sub	sp, #8
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f7ff ffa2 	bl	8004ad4 <SysTick_Config>
 8004b90:	4603      	mov	r3, r0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3708      	adds	r7, #8
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
	...

08004b9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b086      	sub	sp, #24
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004ba8:	f7ff fc44 	bl	8004434 <HAL_GetTick>
 8004bac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d101      	bne.n	8004bb8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e099      	b.n	8004cec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2202      	movs	r2, #2
 8004bbc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f022 0201 	bic.w	r2, r2, #1
 8004bd6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004bd8:	e00f      	b.n	8004bfa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004bda:	f7ff fc2b 	bl	8004434 <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	2b05      	cmp	r3, #5
 8004be6:	d908      	bls.n	8004bfa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2220      	movs	r2, #32
 8004bec:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2203      	movs	r2, #3
 8004bf2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e078      	b.n	8004cec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0301 	and.w	r3, r3, #1
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d1e8      	bne.n	8004bda <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004c10:	697a      	ldr	r2, [r7, #20]
 8004c12:	4b38      	ldr	r3, [pc, #224]	@ (8004cf4 <HAL_DMA_Init+0x158>)
 8004c14:	4013      	ands	r3, r2
 8004c16:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685a      	ldr	r2, [r3, #4]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c26:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	699b      	ldr	r3, [r3, #24]
 8004c38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a1b      	ldr	r3, [r3, #32]
 8004c44:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c46:	697a      	ldr	r2, [r7, #20]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c50:	2b04      	cmp	r3, #4
 8004c52:	d107      	bne.n	8004c64 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	697a      	ldr	r2, [r7, #20]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	697a      	ldr	r2, [r7, #20]
 8004c6a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	f023 0307 	bic.w	r3, r3, #7
 8004c7a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8a:	2b04      	cmp	r3, #4
 8004c8c:	d117      	bne.n	8004cbe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c92:	697a      	ldr	r2, [r7, #20]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d00e      	beq.n	8004cbe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 fb0d 	bl	80052c0 <DMA_CheckFifoParam>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d008      	beq.n	8004cbe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2240      	movs	r2, #64	@ 0x40
 8004cb0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e016      	b.n	8004cec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	697a      	ldr	r2, [r7, #20]
 8004cc4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 fac4 	bl	8005254 <DMA_CalcBaseAndBitshift>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cd4:	223f      	movs	r2, #63	@ 0x3f
 8004cd6:	409a      	lsls	r2, r3
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004cea:	2300      	movs	r3, #0
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3718      	adds	r7, #24
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	f010803f 	.word	0xf010803f

08004cf8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b086      	sub	sp, #24
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	607a      	str	r2, [r7, #4]
 8004d04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d06:	2300      	movs	r3, #0
 8004d08:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d0e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d101      	bne.n	8004d1e <HAL_DMA_Start_IT+0x26>
 8004d1a:	2302      	movs	r3, #2
 8004d1c:	e040      	b.n	8004da0 <HAL_DMA_Start_IT+0xa8>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d12f      	bne.n	8004d92 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2202      	movs	r2, #2
 8004d36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	68b9      	ldr	r1, [r7, #8]
 8004d46:	68f8      	ldr	r0, [r7, #12]
 8004d48:	f000 fa56 	bl	80051f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d50:	223f      	movs	r2, #63	@ 0x3f
 8004d52:	409a      	lsls	r2, r3
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f042 0216 	orr.w	r2, r2, #22
 8004d66:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d007      	beq.n	8004d80 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f042 0208 	orr.w	r2, r2, #8
 8004d7e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f042 0201 	orr.w	r2, r2, #1
 8004d8e:	601a      	str	r2, [r3, #0]
 8004d90:	e005      	b.n	8004d9e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004d9a:	2302      	movs	r3, #2
 8004d9c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004d9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3718      	adds	r7, #24
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004db4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004db6:	f7ff fb3d 	bl	8004434 <HAL_GetTick>
 8004dba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d008      	beq.n	8004dda <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2280      	movs	r2, #128	@ 0x80
 8004dcc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e052      	b.n	8004e80 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f022 0216 	bic.w	r2, r2, #22
 8004de8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	695a      	ldr	r2, [r3, #20]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004df8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d103      	bne.n	8004e0a <HAL_DMA_Abort+0x62>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d007      	beq.n	8004e1a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f022 0208 	bic.w	r2, r2, #8
 8004e18:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f022 0201 	bic.w	r2, r2, #1
 8004e28:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e2a:	e013      	b.n	8004e54 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e2c:	f7ff fb02 	bl	8004434 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	2b05      	cmp	r3, #5
 8004e38:	d90c      	bls.n	8004e54 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2220      	movs	r2, #32
 8004e3e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2203      	movs	r2, #3
 8004e44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e015      	b.n	8004e80 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1e4      	bne.n	8004e2c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e66:	223f      	movs	r2, #63	@ 0x3f
 8004e68:	409a      	lsls	r2, r3
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2201      	movs	r2, #1
 8004e72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3710      	adds	r7, #16
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d004      	beq.n	8004ea6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2280      	movs	r2, #128	@ 0x80
 8004ea0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e00c      	b.n	8004ec0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2205      	movs	r2, #5
 8004eaa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f022 0201 	bic.w	r2, r2, #1
 8004ebc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b086      	sub	sp, #24
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004ed8:	4b8e      	ldr	r3, [pc, #568]	@ (8005114 <HAL_DMA_IRQHandler+0x248>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a8e      	ldr	r2, [pc, #568]	@ (8005118 <HAL_DMA_IRQHandler+0x24c>)
 8004ede:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee2:	0a9b      	lsrs	r3, r3, #10
 8004ee4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ef6:	2208      	movs	r2, #8
 8004ef8:	409a      	lsls	r2, r3
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	4013      	ands	r3, r2
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d01a      	beq.n	8004f38 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0304 	and.w	r3, r3, #4
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d013      	beq.n	8004f38 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f022 0204 	bic.w	r2, r2, #4
 8004f1e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f24:	2208      	movs	r2, #8
 8004f26:	409a      	lsls	r2, r3
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f30:	f043 0201 	orr.w	r2, r3, #1
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	409a      	lsls	r2, r3
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	4013      	ands	r3, r2
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d012      	beq.n	8004f6e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	695b      	ldr	r3, [r3, #20]
 8004f4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00b      	beq.n	8004f6e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	409a      	lsls	r2, r3
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f66:	f043 0202 	orr.w	r2, r3, #2
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f72:	2204      	movs	r2, #4
 8004f74:	409a      	lsls	r2, r3
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	4013      	ands	r3, r2
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d012      	beq.n	8004fa4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0302 	and.w	r3, r3, #2
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00b      	beq.n	8004fa4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f90:	2204      	movs	r2, #4
 8004f92:	409a      	lsls	r2, r3
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f9c:	f043 0204 	orr.w	r2, r3, #4
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fa8:	2210      	movs	r2, #16
 8004faa:	409a      	lsls	r2, r3
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	4013      	ands	r3, r2
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d043      	beq.n	800503c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0308 	and.w	r3, r3, #8
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d03c      	beq.n	800503c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fc6:	2210      	movs	r2, #16
 8004fc8:	409a      	lsls	r2, r3
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d018      	beq.n	800500e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d108      	bne.n	8004ffc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d024      	beq.n	800503c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	4798      	blx	r3
 8004ffa:	e01f      	b.n	800503c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005000:	2b00      	cmp	r3, #0
 8005002:	d01b      	beq.n	800503c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	4798      	blx	r3
 800500c:	e016      	b.n	800503c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005018:	2b00      	cmp	r3, #0
 800501a:	d107      	bne.n	800502c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f022 0208 	bic.w	r2, r2, #8
 800502a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005030:	2b00      	cmp	r3, #0
 8005032:	d003      	beq.n	800503c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005040:	2220      	movs	r2, #32
 8005042:	409a      	lsls	r2, r3
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	4013      	ands	r3, r2
 8005048:	2b00      	cmp	r3, #0
 800504a:	f000 808f 	beq.w	800516c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0310 	and.w	r3, r3, #16
 8005058:	2b00      	cmp	r3, #0
 800505a:	f000 8087 	beq.w	800516c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005062:	2220      	movs	r2, #32
 8005064:	409a      	lsls	r2, r3
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005070:	b2db      	uxtb	r3, r3
 8005072:	2b05      	cmp	r3, #5
 8005074:	d136      	bne.n	80050e4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f022 0216 	bic.w	r2, r2, #22
 8005084:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	695a      	ldr	r2, [r3, #20]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005094:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800509a:	2b00      	cmp	r3, #0
 800509c:	d103      	bne.n	80050a6 <HAL_DMA_IRQHandler+0x1da>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d007      	beq.n	80050b6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f022 0208 	bic.w	r2, r2, #8
 80050b4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050ba:	223f      	movs	r2, #63	@ 0x3f
 80050bc:	409a      	lsls	r2, r3
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2201      	movs	r2, #1
 80050c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d07e      	beq.n	80051d8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	4798      	blx	r3
        }
        return;
 80050e2:	e079      	b.n	80051d8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d01d      	beq.n	800512e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d10d      	bne.n	800511c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005104:	2b00      	cmp	r3, #0
 8005106:	d031      	beq.n	800516c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	4798      	blx	r3
 8005110:	e02c      	b.n	800516c <HAL_DMA_IRQHandler+0x2a0>
 8005112:	bf00      	nop
 8005114:	20000008 	.word	0x20000008
 8005118:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005120:	2b00      	cmp	r3, #0
 8005122:	d023      	beq.n	800516c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	4798      	blx	r3
 800512c:	e01e      	b.n	800516c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005138:	2b00      	cmp	r3, #0
 800513a:	d10f      	bne.n	800515c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f022 0210 	bic.w	r2, r2, #16
 800514a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005160:	2b00      	cmp	r3, #0
 8005162:	d003      	beq.n	800516c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005170:	2b00      	cmp	r3, #0
 8005172:	d032      	beq.n	80051da <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005178:	f003 0301 	and.w	r3, r3, #1
 800517c:	2b00      	cmp	r3, #0
 800517e:	d022      	beq.n	80051c6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2205      	movs	r2, #5
 8005184:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f022 0201 	bic.w	r2, r2, #1
 8005196:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	3301      	adds	r3, #1
 800519c:	60bb      	str	r3, [r7, #8]
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d307      	bcc.n	80051b4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0301 	and.w	r3, r3, #1
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1f2      	bne.n	8005198 <HAL_DMA_IRQHandler+0x2cc>
 80051b2:	e000      	b.n	80051b6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80051b4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2201      	movs	r2, #1
 80051ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d005      	beq.n	80051da <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	4798      	blx	r3
 80051d6:	e000      	b.n	80051da <HAL_DMA_IRQHandler+0x30e>
        return;
 80051d8:	bf00      	nop
    }
  }
}
 80051da:	3718      	adds	r7, #24
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	607a      	str	r2, [r7, #4]
 8005204:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005214:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	683a      	ldr	r2, [r7, #0]
 800521c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	2b40      	cmp	r3, #64	@ 0x40
 8005224:	d108      	bne.n	8005238 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68ba      	ldr	r2, [r7, #8]
 8005234:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005236:	e007      	b.n	8005248 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68ba      	ldr	r2, [r7, #8]
 800523e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	60da      	str	r2, [r3, #12]
}
 8005248:	bf00      	nop
 800524a:	3714      	adds	r7, #20
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	b2db      	uxtb	r3, r3
 8005262:	3b10      	subs	r3, #16
 8005264:	4a14      	ldr	r2, [pc, #80]	@ (80052b8 <DMA_CalcBaseAndBitshift+0x64>)
 8005266:	fba2 2303 	umull	r2, r3, r2, r3
 800526a:	091b      	lsrs	r3, r3, #4
 800526c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800526e:	4a13      	ldr	r2, [pc, #76]	@ (80052bc <DMA_CalcBaseAndBitshift+0x68>)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	4413      	add	r3, r2
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	461a      	mov	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2b03      	cmp	r3, #3
 8005280:	d909      	bls.n	8005296 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800528a:	f023 0303 	bic.w	r3, r3, #3
 800528e:	1d1a      	adds	r2, r3, #4
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	659a      	str	r2, [r3, #88]	@ 0x58
 8005294:	e007      	b.n	80052a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800529e:	f023 0303 	bic.w	r3, r3, #3
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3714      	adds	r7, #20
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	aaaaaaab 	.word	0xaaaaaaab
 80052bc:	0801415c 	.word	0x0801415c

080052c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052c8:	2300      	movs	r3, #0
 80052ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	699b      	ldr	r3, [r3, #24]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d11f      	bne.n	800531a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	2b03      	cmp	r3, #3
 80052de:	d856      	bhi.n	800538e <DMA_CheckFifoParam+0xce>
 80052e0:	a201      	add	r2, pc, #4	@ (adr r2, 80052e8 <DMA_CheckFifoParam+0x28>)
 80052e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e6:	bf00      	nop
 80052e8:	080052f9 	.word	0x080052f9
 80052ec:	0800530b 	.word	0x0800530b
 80052f0:	080052f9 	.word	0x080052f9
 80052f4:	0800538f 	.word	0x0800538f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005300:	2b00      	cmp	r3, #0
 8005302:	d046      	beq.n	8005392 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005308:	e043      	b.n	8005392 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800530e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005312:	d140      	bne.n	8005396 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005318:	e03d      	b.n	8005396 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005322:	d121      	bne.n	8005368 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	2b03      	cmp	r3, #3
 8005328:	d837      	bhi.n	800539a <DMA_CheckFifoParam+0xda>
 800532a:	a201      	add	r2, pc, #4	@ (adr r2, 8005330 <DMA_CheckFifoParam+0x70>)
 800532c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005330:	08005341 	.word	0x08005341
 8005334:	08005347 	.word	0x08005347
 8005338:	08005341 	.word	0x08005341
 800533c:	08005359 	.word	0x08005359
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	73fb      	strb	r3, [r7, #15]
      break;
 8005344:	e030      	b.n	80053a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800534a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d025      	beq.n	800539e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005356:	e022      	b.n	800539e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800535c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005360:	d11f      	bne.n	80053a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005366:	e01c      	b.n	80053a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	2b02      	cmp	r3, #2
 800536c:	d903      	bls.n	8005376 <DMA_CheckFifoParam+0xb6>
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	2b03      	cmp	r3, #3
 8005372:	d003      	beq.n	800537c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005374:	e018      	b.n	80053a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	73fb      	strb	r3, [r7, #15]
      break;
 800537a:	e015      	b.n	80053a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005380:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00e      	beq.n	80053a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	73fb      	strb	r3, [r7, #15]
      break;
 800538c:	e00b      	b.n	80053a6 <DMA_CheckFifoParam+0xe6>
      break;
 800538e:	bf00      	nop
 8005390:	e00a      	b.n	80053a8 <DMA_CheckFifoParam+0xe8>
      break;
 8005392:	bf00      	nop
 8005394:	e008      	b.n	80053a8 <DMA_CheckFifoParam+0xe8>
      break;
 8005396:	bf00      	nop
 8005398:	e006      	b.n	80053a8 <DMA_CheckFifoParam+0xe8>
      break;
 800539a:	bf00      	nop
 800539c:	e004      	b.n	80053a8 <DMA_CheckFifoParam+0xe8>
      break;
 800539e:	bf00      	nop
 80053a0:	e002      	b.n	80053a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80053a2:	bf00      	nop
 80053a4:	e000      	b.n	80053a8 <DMA_CheckFifoParam+0xe8>
      break;
 80053a6:	bf00      	nop
    }
  } 
  
  return status; 
 80053a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3714      	adds	r7, #20
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop

080053b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b089      	sub	sp, #36	@ 0x24
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80053c2:	2300      	movs	r3, #0
 80053c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80053c6:	2300      	movs	r3, #0
 80053c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80053ca:	2300      	movs	r3, #0
 80053cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053ce:	2300      	movs	r3, #0
 80053d0:	61fb      	str	r3, [r7, #28]
 80053d2:	e159      	b.n	8005688 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80053d4:	2201      	movs	r2, #1
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	fa02 f303 	lsl.w	r3, r2, r3
 80053dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	697a      	ldr	r2, [r7, #20]
 80053e4:	4013      	ands	r3, r2
 80053e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80053e8:	693a      	ldr	r2, [r7, #16]
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	429a      	cmp	r2, r3
 80053ee:	f040 8148 	bne.w	8005682 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f003 0303 	and.w	r3, r3, #3
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d005      	beq.n	800540a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005406:	2b02      	cmp	r3, #2
 8005408:	d130      	bne.n	800546c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	005b      	lsls	r3, r3, #1
 8005414:	2203      	movs	r2, #3
 8005416:	fa02 f303 	lsl.w	r3, r2, r3
 800541a:	43db      	mvns	r3, r3
 800541c:	69ba      	ldr	r2, [r7, #24]
 800541e:	4013      	ands	r3, r2
 8005420:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	68da      	ldr	r2, [r3, #12]
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	005b      	lsls	r3, r3, #1
 800542a:	fa02 f303 	lsl.w	r3, r2, r3
 800542e:	69ba      	ldr	r2, [r7, #24]
 8005430:	4313      	orrs	r3, r2
 8005432:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	69ba      	ldr	r2, [r7, #24]
 8005438:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005440:	2201      	movs	r2, #1
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	fa02 f303 	lsl.w	r3, r2, r3
 8005448:	43db      	mvns	r3, r3
 800544a:	69ba      	ldr	r2, [r7, #24]
 800544c:	4013      	ands	r3, r2
 800544e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	091b      	lsrs	r3, r3, #4
 8005456:	f003 0201 	and.w	r2, r3, #1
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	fa02 f303 	lsl.w	r3, r2, r3
 8005460:	69ba      	ldr	r2, [r7, #24]
 8005462:	4313      	orrs	r3, r2
 8005464:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	69ba      	ldr	r2, [r7, #24]
 800546a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	f003 0303 	and.w	r3, r3, #3
 8005474:	2b03      	cmp	r3, #3
 8005476:	d017      	beq.n	80054a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	005b      	lsls	r3, r3, #1
 8005482:	2203      	movs	r2, #3
 8005484:	fa02 f303 	lsl.w	r3, r2, r3
 8005488:	43db      	mvns	r3, r3
 800548a:	69ba      	ldr	r2, [r7, #24]
 800548c:	4013      	ands	r3, r2
 800548e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	689a      	ldr	r2, [r3, #8]
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	005b      	lsls	r3, r3, #1
 8005498:	fa02 f303 	lsl.w	r3, r2, r3
 800549c:	69ba      	ldr	r2, [r7, #24]
 800549e:	4313      	orrs	r3, r2
 80054a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	69ba      	ldr	r2, [r7, #24]
 80054a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	f003 0303 	and.w	r3, r3, #3
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d123      	bne.n	80054fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	08da      	lsrs	r2, r3, #3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	3208      	adds	r2, #8
 80054bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	f003 0307 	and.w	r3, r3, #7
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	220f      	movs	r2, #15
 80054cc:	fa02 f303 	lsl.w	r3, r2, r3
 80054d0:	43db      	mvns	r3, r3
 80054d2:	69ba      	ldr	r2, [r7, #24]
 80054d4:	4013      	ands	r3, r2
 80054d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	691a      	ldr	r2, [r3, #16]
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	f003 0307 	and.w	r3, r3, #7
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	fa02 f303 	lsl.w	r3, r2, r3
 80054e8:	69ba      	ldr	r2, [r7, #24]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	08da      	lsrs	r2, r3, #3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	3208      	adds	r2, #8
 80054f6:	69b9      	ldr	r1, [r7, #24]
 80054f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	005b      	lsls	r3, r3, #1
 8005506:	2203      	movs	r2, #3
 8005508:	fa02 f303 	lsl.w	r3, r2, r3
 800550c:	43db      	mvns	r3, r3
 800550e:	69ba      	ldr	r2, [r7, #24]
 8005510:	4013      	ands	r3, r2
 8005512:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	f003 0203 	and.w	r2, r3, #3
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	005b      	lsls	r3, r3, #1
 8005520:	fa02 f303 	lsl.w	r3, r2, r3
 8005524:	69ba      	ldr	r2, [r7, #24]
 8005526:	4313      	orrs	r3, r2
 8005528:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	69ba      	ldr	r2, [r7, #24]
 800552e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005538:	2b00      	cmp	r3, #0
 800553a:	f000 80a2 	beq.w	8005682 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800553e:	2300      	movs	r3, #0
 8005540:	60fb      	str	r3, [r7, #12]
 8005542:	4b57      	ldr	r3, [pc, #348]	@ (80056a0 <HAL_GPIO_Init+0x2e8>)
 8005544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005546:	4a56      	ldr	r2, [pc, #344]	@ (80056a0 <HAL_GPIO_Init+0x2e8>)
 8005548:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800554c:	6453      	str	r3, [r2, #68]	@ 0x44
 800554e:	4b54      	ldr	r3, [pc, #336]	@ (80056a0 <HAL_GPIO_Init+0x2e8>)
 8005550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005552:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005556:	60fb      	str	r3, [r7, #12]
 8005558:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800555a:	4a52      	ldr	r2, [pc, #328]	@ (80056a4 <HAL_GPIO_Init+0x2ec>)
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	089b      	lsrs	r3, r3, #2
 8005560:	3302      	adds	r3, #2
 8005562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005566:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	f003 0303 	and.w	r3, r3, #3
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	220f      	movs	r2, #15
 8005572:	fa02 f303 	lsl.w	r3, r2, r3
 8005576:	43db      	mvns	r3, r3
 8005578:	69ba      	ldr	r2, [r7, #24]
 800557a:	4013      	ands	r3, r2
 800557c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a49      	ldr	r2, [pc, #292]	@ (80056a8 <HAL_GPIO_Init+0x2f0>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d019      	beq.n	80055ba <HAL_GPIO_Init+0x202>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a48      	ldr	r2, [pc, #288]	@ (80056ac <HAL_GPIO_Init+0x2f4>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d013      	beq.n	80055b6 <HAL_GPIO_Init+0x1fe>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a47      	ldr	r2, [pc, #284]	@ (80056b0 <HAL_GPIO_Init+0x2f8>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d00d      	beq.n	80055b2 <HAL_GPIO_Init+0x1fa>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a46      	ldr	r2, [pc, #280]	@ (80056b4 <HAL_GPIO_Init+0x2fc>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d007      	beq.n	80055ae <HAL_GPIO_Init+0x1f6>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a45      	ldr	r2, [pc, #276]	@ (80056b8 <HAL_GPIO_Init+0x300>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d101      	bne.n	80055aa <HAL_GPIO_Init+0x1f2>
 80055a6:	2304      	movs	r3, #4
 80055a8:	e008      	b.n	80055bc <HAL_GPIO_Init+0x204>
 80055aa:	2307      	movs	r3, #7
 80055ac:	e006      	b.n	80055bc <HAL_GPIO_Init+0x204>
 80055ae:	2303      	movs	r3, #3
 80055b0:	e004      	b.n	80055bc <HAL_GPIO_Init+0x204>
 80055b2:	2302      	movs	r3, #2
 80055b4:	e002      	b.n	80055bc <HAL_GPIO_Init+0x204>
 80055b6:	2301      	movs	r3, #1
 80055b8:	e000      	b.n	80055bc <HAL_GPIO_Init+0x204>
 80055ba:	2300      	movs	r3, #0
 80055bc:	69fa      	ldr	r2, [r7, #28]
 80055be:	f002 0203 	and.w	r2, r2, #3
 80055c2:	0092      	lsls	r2, r2, #2
 80055c4:	4093      	lsls	r3, r2
 80055c6:	69ba      	ldr	r2, [r7, #24]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80055cc:	4935      	ldr	r1, [pc, #212]	@ (80056a4 <HAL_GPIO_Init+0x2ec>)
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	089b      	lsrs	r3, r3, #2
 80055d2:	3302      	adds	r3, #2
 80055d4:	69ba      	ldr	r2, [r7, #24]
 80055d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80055da:	4b38      	ldr	r3, [pc, #224]	@ (80056bc <HAL_GPIO_Init+0x304>)
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	43db      	mvns	r3, r3
 80055e4:	69ba      	ldr	r2, [r7, #24]
 80055e6:	4013      	ands	r3, r2
 80055e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d003      	beq.n	80055fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80055f6:	69ba      	ldr	r2, [r7, #24]
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80055fe:	4a2f      	ldr	r2, [pc, #188]	@ (80056bc <HAL_GPIO_Init+0x304>)
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005604:	4b2d      	ldr	r3, [pc, #180]	@ (80056bc <HAL_GPIO_Init+0x304>)
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	43db      	mvns	r3, r3
 800560e:	69ba      	ldr	r2, [r7, #24]
 8005610:	4013      	ands	r3, r2
 8005612:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800561c:	2b00      	cmp	r3, #0
 800561e:	d003      	beq.n	8005628 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005620:	69ba      	ldr	r2, [r7, #24]
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	4313      	orrs	r3, r2
 8005626:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005628:	4a24      	ldr	r2, [pc, #144]	@ (80056bc <HAL_GPIO_Init+0x304>)
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800562e:	4b23      	ldr	r3, [pc, #140]	@ (80056bc <HAL_GPIO_Init+0x304>)
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	43db      	mvns	r3, r3
 8005638:	69ba      	ldr	r2, [r7, #24]
 800563a:	4013      	ands	r3, r2
 800563c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d003      	beq.n	8005652 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800564a:	69ba      	ldr	r2, [r7, #24]
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	4313      	orrs	r3, r2
 8005650:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005652:	4a1a      	ldr	r2, [pc, #104]	@ (80056bc <HAL_GPIO_Init+0x304>)
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005658:	4b18      	ldr	r3, [pc, #96]	@ (80056bc <HAL_GPIO_Init+0x304>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	43db      	mvns	r3, r3
 8005662:	69ba      	ldr	r2, [r7, #24]
 8005664:	4013      	ands	r3, r2
 8005666:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d003      	beq.n	800567c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005674:	69ba      	ldr	r2, [r7, #24]
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	4313      	orrs	r3, r2
 800567a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800567c:	4a0f      	ldr	r2, [pc, #60]	@ (80056bc <HAL_GPIO_Init+0x304>)
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	3301      	adds	r3, #1
 8005686:	61fb      	str	r3, [r7, #28]
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	2b0f      	cmp	r3, #15
 800568c:	f67f aea2 	bls.w	80053d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005690:	bf00      	nop
 8005692:	bf00      	nop
 8005694:	3724      	adds	r7, #36	@ 0x24
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	40023800 	.word	0x40023800
 80056a4:	40013800 	.word	0x40013800
 80056a8:	40020000 	.word	0x40020000
 80056ac:	40020400 	.word	0x40020400
 80056b0:	40020800 	.word	0x40020800
 80056b4:	40020c00 	.word	0x40020c00
 80056b8:	40021000 	.word	0x40021000
 80056bc:	40013c00 	.word	0x40013c00

080056c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	460b      	mov	r3, r1
 80056ca:	807b      	strh	r3, [r7, #2]
 80056cc:	4613      	mov	r3, r2
 80056ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80056d0:	787b      	ldrb	r3, [r7, #1]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d003      	beq.n	80056de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80056d6:	887a      	ldrh	r2, [r7, #2]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80056dc:	e003      	b.n	80056e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80056de:	887b      	ldrh	r3, [r7, #2]
 80056e0:	041a      	lsls	r2, r3, #16
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	619a      	str	r2, [r3, #24]
}
 80056e6:	bf00      	nop
 80056e8:	370c      	adds	r7, #12
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr
	...

080056f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d101      	bne.n	8005706 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e12b      	b.n	800595e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800570c:	b2db      	uxtb	r3, r3
 800570e:	2b00      	cmp	r3, #0
 8005710:	d106      	bne.n	8005720 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f7fe f970 	bl	8003a00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2224      	movs	r2, #36	@ 0x24
 8005724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f022 0201 	bic.w	r2, r2, #1
 8005736:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005746:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005756:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005758:	f001 feb4 	bl	80074c4 <HAL_RCC_GetPCLK1Freq>
 800575c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	4a81      	ldr	r2, [pc, #516]	@ (8005968 <HAL_I2C_Init+0x274>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d807      	bhi.n	8005778 <HAL_I2C_Init+0x84>
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	4a80      	ldr	r2, [pc, #512]	@ (800596c <HAL_I2C_Init+0x278>)
 800576c:	4293      	cmp	r3, r2
 800576e:	bf94      	ite	ls
 8005770:	2301      	movls	r3, #1
 8005772:	2300      	movhi	r3, #0
 8005774:	b2db      	uxtb	r3, r3
 8005776:	e006      	b.n	8005786 <HAL_I2C_Init+0x92>
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	4a7d      	ldr	r2, [pc, #500]	@ (8005970 <HAL_I2C_Init+0x27c>)
 800577c:	4293      	cmp	r3, r2
 800577e:	bf94      	ite	ls
 8005780:	2301      	movls	r3, #1
 8005782:	2300      	movhi	r3, #0
 8005784:	b2db      	uxtb	r3, r3
 8005786:	2b00      	cmp	r3, #0
 8005788:	d001      	beq.n	800578e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e0e7      	b.n	800595e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	4a78      	ldr	r2, [pc, #480]	@ (8005974 <HAL_I2C_Init+0x280>)
 8005792:	fba2 2303 	umull	r2, r3, r2, r3
 8005796:	0c9b      	lsrs	r3, r3, #18
 8005798:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68ba      	ldr	r2, [r7, #8]
 80057aa:	430a      	orrs	r2, r1
 80057ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	6a1b      	ldr	r3, [r3, #32]
 80057b4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	4a6a      	ldr	r2, [pc, #424]	@ (8005968 <HAL_I2C_Init+0x274>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d802      	bhi.n	80057c8 <HAL_I2C_Init+0xd4>
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	3301      	adds	r3, #1
 80057c6:	e009      	b.n	80057dc <HAL_I2C_Init+0xe8>
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80057ce:	fb02 f303 	mul.w	r3, r2, r3
 80057d2:	4a69      	ldr	r2, [pc, #420]	@ (8005978 <HAL_I2C_Init+0x284>)
 80057d4:	fba2 2303 	umull	r2, r3, r2, r3
 80057d8:	099b      	lsrs	r3, r3, #6
 80057da:	3301      	adds	r3, #1
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	6812      	ldr	r2, [r2, #0]
 80057e0:	430b      	orrs	r3, r1
 80057e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	69db      	ldr	r3, [r3, #28]
 80057ea:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80057ee:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	495c      	ldr	r1, [pc, #368]	@ (8005968 <HAL_I2C_Init+0x274>)
 80057f8:	428b      	cmp	r3, r1
 80057fa:	d819      	bhi.n	8005830 <HAL_I2C_Init+0x13c>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	1e59      	subs	r1, r3, #1
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	005b      	lsls	r3, r3, #1
 8005806:	fbb1 f3f3 	udiv	r3, r1, r3
 800580a:	1c59      	adds	r1, r3, #1
 800580c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005810:	400b      	ands	r3, r1
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00a      	beq.n	800582c <HAL_I2C_Init+0x138>
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	1e59      	subs	r1, r3, #1
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	005b      	lsls	r3, r3, #1
 8005820:	fbb1 f3f3 	udiv	r3, r1, r3
 8005824:	3301      	adds	r3, #1
 8005826:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800582a:	e051      	b.n	80058d0 <HAL_I2C_Init+0x1dc>
 800582c:	2304      	movs	r3, #4
 800582e:	e04f      	b.n	80058d0 <HAL_I2C_Init+0x1dc>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d111      	bne.n	800585c <HAL_I2C_Init+0x168>
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	1e58      	subs	r0, r3, #1
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6859      	ldr	r1, [r3, #4]
 8005840:	460b      	mov	r3, r1
 8005842:	005b      	lsls	r3, r3, #1
 8005844:	440b      	add	r3, r1
 8005846:	fbb0 f3f3 	udiv	r3, r0, r3
 800584a:	3301      	adds	r3, #1
 800584c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005850:	2b00      	cmp	r3, #0
 8005852:	bf0c      	ite	eq
 8005854:	2301      	moveq	r3, #1
 8005856:	2300      	movne	r3, #0
 8005858:	b2db      	uxtb	r3, r3
 800585a:	e012      	b.n	8005882 <HAL_I2C_Init+0x18e>
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	1e58      	subs	r0, r3, #1
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6859      	ldr	r1, [r3, #4]
 8005864:	460b      	mov	r3, r1
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	440b      	add	r3, r1
 800586a:	0099      	lsls	r1, r3, #2
 800586c:	440b      	add	r3, r1
 800586e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005872:	3301      	adds	r3, #1
 8005874:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005878:	2b00      	cmp	r3, #0
 800587a:	bf0c      	ite	eq
 800587c:	2301      	moveq	r3, #1
 800587e:	2300      	movne	r3, #0
 8005880:	b2db      	uxtb	r3, r3
 8005882:	2b00      	cmp	r3, #0
 8005884:	d001      	beq.n	800588a <HAL_I2C_Init+0x196>
 8005886:	2301      	movs	r3, #1
 8005888:	e022      	b.n	80058d0 <HAL_I2C_Init+0x1dc>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d10e      	bne.n	80058b0 <HAL_I2C_Init+0x1bc>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	1e58      	subs	r0, r3, #1
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6859      	ldr	r1, [r3, #4]
 800589a:	460b      	mov	r3, r1
 800589c:	005b      	lsls	r3, r3, #1
 800589e:	440b      	add	r3, r1
 80058a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80058a4:	3301      	adds	r3, #1
 80058a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058ae:	e00f      	b.n	80058d0 <HAL_I2C_Init+0x1dc>
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	1e58      	subs	r0, r3, #1
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6859      	ldr	r1, [r3, #4]
 80058b8:	460b      	mov	r3, r1
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	440b      	add	r3, r1
 80058be:	0099      	lsls	r1, r3, #2
 80058c0:	440b      	add	r3, r1
 80058c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80058c6:	3301      	adds	r3, #1
 80058c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80058d0:	6879      	ldr	r1, [r7, #4]
 80058d2:	6809      	ldr	r1, [r1, #0]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	69da      	ldr	r2, [r3, #28]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a1b      	ldr	r3, [r3, #32]
 80058ea:	431a      	orrs	r2, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	430a      	orrs	r2, r1
 80058f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80058fe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	6911      	ldr	r1, [r2, #16]
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	68d2      	ldr	r2, [r2, #12]
 800590a:	4311      	orrs	r1, r2
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	6812      	ldr	r2, [r2, #0]
 8005910:	430b      	orrs	r3, r1
 8005912:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	695a      	ldr	r2, [r3, #20]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	431a      	orrs	r2, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	430a      	orrs	r2, r1
 800592e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f042 0201 	orr.w	r2, r2, #1
 800593e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2220      	movs	r2, #32
 800594a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3710      	adds	r7, #16
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	000186a0 	.word	0x000186a0
 800596c:	001e847f 	.word	0x001e847f
 8005970:	003d08ff 	.word	0x003d08ff
 8005974:	431bde83 	.word	0x431bde83
 8005978:	10624dd3 	.word	0x10624dd3

0800597c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b088      	sub	sp, #32
 8005980:	af02      	add	r7, sp, #8
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	607a      	str	r2, [r7, #4]
 8005986:	461a      	mov	r2, r3
 8005988:	460b      	mov	r3, r1
 800598a:	817b      	strh	r3, [r7, #10]
 800598c:	4613      	mov	r3, r2
 800598e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005990:	f7fe fd50 	bl	8004434 <HAL_GetTick>
 8005994:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b20      	cmp	r3, #32
 80059a0:	f040 80e0 	bne.w	8005b64 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	9300      	str	r3, [sp, #0]
 80059a8:	2319      	movs	r3, #25
 80059aa:	2201      	movs	r2, #1
 80059ac:	4970      	ldr	r1, [pc, #448]	@ (8005b70 <HAL_I2C_Master_Transmit+0x1f4>)
 80059ae:	68f8      	ldr	r0, [r7, #12]
 80059b0:	f000 ff22 	bl	80067f8 <I2C_WaitOnFlagUntilTimeout>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d001      	beq.n	80059be <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80059ba:	2302      	movs	r3, #2
 80059bc:	e0d3      	b.n	8005b66 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d101      	bne.n	80059cc <HAL_I2C_Master_Transmit+0x50>
 80059c8:	2302      	movs	r3, #2
 80059ca:	e0cc      	b.n	8005b66 <HAL_I2C_Master_Transmit+0x1ea>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 0301 	and.w	r3, r3, #1
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d007      	beq.n	80059f2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f042 0201 	orr.w	r2, r2, #1
 80059f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a00:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2221      	movs	r2, #33	@ 0x21
 8005a06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2210      	movs	r2, #16
 8005a0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2200      	movs	r2, #0
 8005a16:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	893a      	ldrh	r2, [r7, #8]
 8005a22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a28:	b29a      	uxth	r2, r3
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	4a50      	ldr	r2, [pc, #320]	@ (8005b74 <HAL_I2C_Master_Transmit+0x1f8>)
 8005a32:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005a34:	8979      	ldrh	r1, [r7, #10]
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	6a3a      	ldr	r2, [r7, #32]
 8005a3a:	68f8      	ldr	r0, [r7, #12]
 8005a3c:	f000 fcf6 	bl	800642c <I2C_MasterRequestWrite>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d001      	beq.n	8005a4a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e08d      	b.n	8005b66 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	613b      	str	r3, [r7, #16]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	695b      	ldr	r3, [r3, #20]
 8005a54:	613b      	str	r3, [r7, #16]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	699b      	ldr	r3, [r3, #24]
 8005a5c:	613b      	str	r3, [r7, #16]
 8005a5e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005a60:	e066      	b.n	8005b30 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a62:	697a      	ldr	r2, [r7, #20]
 8005a64:	6a39      	ldr	r1, [r7, #32]
 8005a66:	68f8      	ldr	r0, [r7, #12]
 8005a68:	f000 ffe0 	bl	8006a2c <I2C_WaitOnTXEFlagUntilTimeout>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00d      	beq.n	8005a8e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a76:	2b04      	cmp	r3, #4
 8005a78:	d107      	bne.n	8005a8a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e06b      	b.n	8005b66 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a92:	781a      	ldrb	r2, [r3, #0]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a9e:	1c5a      	adds	r2, r3, #1
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	b29a      	uxth	r2, r3
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ab6:	3b01      	subs	r3, #1
 8005ab8:	b29a      	uxth	r2, r3
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	695b      	ldr	r3, [r3, #20]
 8005ac4:	f003 0304 	and.w	r3, r3, #4
 8005ac8:	2b04      	cmp	r3, #4
 8005aca:	d11b      	bne.n	8005b04 <HAL_I2C_Master_Transmit+0x188>
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d017      	beq.n	8005b04 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad8:	781a      	ldrb	r2, [r3, #0]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ae4:	1c5a      	adds	r2, r3, #1
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	3b01      	subs	r3, #1
 8005af2:	b29a      	uxth	r2, r3
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005afc:	3b01      	subs	r3, #1
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b04:	697a      	ldr	r2, [r7, #20]
 8005b06:	6a39      	ldr	r1, [r7, #32]
 8005b08:	68f8      	ldr	r0, [r7, #12]
 8005b0a:	f000 ffd7 	bl	8006abc <I2C_WaitOnBTFFlagUntilTimeout>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d00d      	beq.n	8005b30 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b18:	2b04      	cmp	r3, #4
 8005b1a:	d107      	bne.n	8005b2c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b2a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e01a      	b.n	8005b66 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d194      	bne.n	8005a62 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2220      	movs	r2, #32
 8005b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005b60:	2300      	movs	r3, #0
 8005b62:	e000      	b.n	8005b66 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005b64:	2302      	movs	r3, #2
  }
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3718      	adds	r7, #24
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	00100002 	.word	0x00100002
 8005b74:	ffff0000 	.word	0xffff0000

08005b78 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b08c      	sub	sp, #48	@ 0x30
 8005b7c:	af02      	add	r7, sp, #8
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	607a      	str	r2, [r7, #4]
 8005b82:	461a      	mov	r2, r3
 8005b84:	460b      	mov	r3, r1
 8005b86:	817b      	strh	r3, [r7, #10]
 8005b88:	4613      	mov	r3, r2
 8005b8a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005b8c:	f7fe fc52 	bl	8004434 <HAL_GetTick>
 8005b90:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	2b20      	cmp	r3, #32
 8005b9c:	f040 8217 	bne.w	8005fce <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba2:	9300      	str	r3, [sp, #0]
 8005ba4:	2319      	movs	r3, #25
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	497c      	ldr	r1, [pc, #496]	@ (8005d9c <HAL_I2C_Master_Receive+0x224>)
 8005baa:	68f8      	ldr	r0, [r7, #12]
 8005bac:	f000 fe24 	bl	80067f8 <I2C_WaitOnFlagUntilTimeout>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d001      	beq.n	8005bba <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005bb6:	2302      	movs	r3, #2
 8005bb8:	e20a      	b.n	8005fd0 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d101      	bne.n	8005bc8 <HAL_I2C_Master_Receive+0x50>
 8005bc4:	2302      	movs	r3, #2
 8005bc6:	e203      	b.n	8005fd0 <HAL_I2C_Master_Receive+0x458>
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 0301 	and.w	r3, r3, #1
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d007      	beq.n	8005bee <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f042 0201 	orr.w	r2, r2, #1
 8005bec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005bfc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2222      	movs	r2, #34	@ 0x22
 8005c02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2210      	movs	r2, #16
 8005c0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	893a      	ldrh	r2, [r7, #8]
 8005c1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c24:	b29a      	uxth	r2, r3
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	4a5c      	ldr	r2, [pc, #368]	@ (8005da0 <HAL_I2C_Master_Receive+0x228>)
 8005c2e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005c30:	8979      	ldrh	r1, [r7, #10]
 8005c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c36:	68f8      	ldr	r0, [r7, #12]
 8005c38:	f000 fc7a 	bl	8006530 <I2C_MasterRequestRead>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d001      	beq.n	8005c46 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e1c4      	b.n	8005fd0 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d113      	bne.n	8005c76 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c4e:	2300      	movs	r3, #0
 8005c50:	623b      	str	r3, [r7, #32]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	695b      	ldr	r3, [r3, #20]
 8005c58:	623b      	str	r3, [r7, #32]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	699b      	ldr	r3, [r3, #24]
 8005c60:	623b      	str	r3, [r7, #32]
 8005c62:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c72:	601a      	str	r2, [r3, #0]
 8005c74:	e198      	b.n	8005fa8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d11b      	bne.n	8005cb6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c8e:	2300      	movs	r3, #0
 8005c90:	61fb      	str	r3, [r7, #28]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	695b      	ldr	r3, [r3, #20]
 8005c98:	61fb      	str	r3, [r7, #28]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	699b      	ldr	r3, [r3, #24]
 8005ca0:	61fb      	str	r3, [r7, #28]
 8005ca2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005cb2:	601a      	str	r2, [r3, #0]
 8005cb4:	e178      	b.n	8005fa8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cba:	2b02      	cmp	r3, #2
 8005cbc:	d11b      	bne.n	8005cf6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ccc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005cdc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cde:	2300      	movs	r3, #0
 8005ce0:	61bb      	str	r3, [r7, #24]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	695b      	ldr	r3, [r3, #20]
 8005ce8:	61bb      	str	r3, [r7, #24]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	699b      	ldr	r3, [r3, #24]
 8005cf0:	61bb      	str	r3, [r7, #24]
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	e158      	b.n	8005fa8 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005d04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d06:	2300      	movs	r3, #0
 8005d08:	617b      	str	r3, [r7, #20]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	695b      	ldr	r3, [r3, #20]
 8005d10:	617b      	str	r3, [r7, #20]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	699b      	ldr	r3, [r3, #24]
 8005d18:	617b      	str	r3, [r7, #20]
 8005d1a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005d1c:	e144      	b.n	8005fa8 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d22:	2b03      	cmp	r3, #3
 8005d24:	f200 80f1 	bhi.w	8005f0a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d123      	bne.n	8005d78 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d32:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005d34:	68f8      	ldr	r0, [r7, #12]
 8005d36:	f000 ff09 	bl	8006b4c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d001      	beq.n	8005d44 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e145      	b.n	8005fd0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	691a      	ldr	r2, [r3, #16]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d4e:	b2d2      	uxtb	r2, r2
 8005d50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d56:	1c5a      	adds	r2, r3, #1
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d60:	3b01      	subs	r3, #1
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	b29a      	uxth	r2, r3
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005d76:	e117      	b.n	8005fa8 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	d14e      	bne.n	8005e1e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d82:	9300      	str	r3, [sp, #0]
 8005d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d86:	2200      	movs	r2, #0
 8005d88:	4906      	ldr	r1, [pc, #24]	@ (8005da4 <HAL_I2C_Master_Receive+0x22c>)
 8005d8a:	68f8      	ldr	r0, [r7, #12]
 8005d8c:	f000 fd34 	bl	80067f8 <I2C_WaitOnFlagUntilTimeout>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d008      	beq.n	8005da8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e11a      	b.n	8005fd0 <HAL_I2C_Master_Receive+0x458>
 8005d9a:	bf00      	nop
 8005d9c:	00100002 	.word	0x00100002
 8005da0:	ffff0000 	.word	0xffff0000
 8005da4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005db6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	691a      	ldr	r2, [r3, #16]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dc2:	b2d2      	uxtb	r2, r2
 8005dc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dca:	1c5a      	adds	r2, r3, #1
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	b29a      	uxth	r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	3b01      	subs	r3, #1
 8005de4:	b29a      	uxth	r2, r3
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	691a      	ldr	r2, [r3, #16]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005df4:	b2d2      	uxtb	r2, r2
 8005df6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dfc:	1c5a      	adds	r2, r3, #1
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e06:	3b01      	subs	r3, #1
 8005e08:	b29a      	uxth	r2, r3
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	3b01      	subs	r3, #1
 8005e16:	b29a      	uxth	r2, r3
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005e1c:	e0c4      	b.n	8005fa8 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e20:	9300      	str	r3, [sp, #0]
 8005e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e24:	2200      	movs	r2, #0
 8005e26:	496c      	ldr	r1, [pc, #432]	@ (8005fd8 <HAL_I2C_Master_Receive+0x460>)
 8005e28:	68f8      	ldr	r0, [r7, #12]
 8005e2a:	f000 fce5 	bl	80067f8 <I2C_WaitOnFlagUntilTimeout>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d001      	beq.n	8005e38 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e0cb      	b.n	8005fd0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	691a      	ldr	r2, [r3, #16]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e52:	b2d2      	uxtb	r2, r2
 8005e54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e5a:	1c5a      	adds	r2, r3, #1
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e64:	3b01      	subs	r3, #1
 8005e66:	b29a      	uxth	r2, r3
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	3b01      	subs	r3, #1
 8005e74:	b29a      	uxth	r2, r3
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e7c:	9300      	str	r3, [sp, #0]
 8005e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e80:	2200      	movs	r2, #0
 8005e82:	4955      	ldr	r1, [pc, #340]	@ (8005fd8 <HAL_I2C_Master_Receive+0x460>)
 8005e84:	68f8      	ldr	r0, [r7, #12]
 8005e86:	f000 fcb7 	bl	80067f8 <I2C_WaitOnFlagUntilTimeout>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d001      	beq.n	8005e94 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	e09d      	b.n	8005fd0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ea2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	691a      	ldr	r2, [r3, #16]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eae:	b2d2      	uxtb	r2, r2
 8005eb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb6:	1c5a      	adds	r2, r3, #1
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ec0:	3b01      	subs	r3, #1
 8005ec2:	b29a      	uxth	r2, r3
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	b29a      	uxth	r2, r3
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	691a      	ldr	r2, [r3, #16]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee0:	b2d2      	uxtb	r2, r2
 8005ee2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee8:	1c5a      	adds	r2, r3, #1
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ef2:	3b01      	subs	r3, #1
 8005ef4:	b29a      	uxth	r2, r3
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	3b01      	subs	r3, #1
 8005f02:	b29a      	uxth	r2, r3
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005f08:	e04e      	b.n	8005fa8 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f0c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005f0e:	68f8      	ldr	r0, [r7, #12]
 8005f10:	f000 fe1c 	bl	8006b4c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d001      	beq.n	8005f1e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e058      	b.n	8005fd0 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	691a      	ldr	r2, [r3, #16]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f28:	b2d2      	uxtb	r2, r2
 8005f2a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f30:	1c5a      	adds	r2, r3, #1
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f3a:	3b01      	subs	r3, #1
 8005f3c:	b29a      	uxth	r2, r3
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	3b01      	subs	r3, #1
 8005f4a:	b29a      	uxth	r2, r3
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	695b      	ldr	r3, [r3, #20]
 8005f56:	f003 0304 	and.w	r3, r3, #4
 8005f5a:	2b04      	cmp	r3, #4
 8005f5c:	d124      	bne.n	8005fa8 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f62:	2b03      	cmp	r3, #3
 8005f64:	d107      	bne.n	8005f76 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f74:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	691a      	ldr	r2, [r3, #16]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f80:	b2d2      	uxtb	r2, r2
 8005f82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f88:	1c5a      	adds	r2, r3, #1
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f92:	3b01      	subs	r3, #1
 8005f94:	b29a      	uxth	r2, r3
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	b29a      	uxth	r2, r3
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	f47f aeb6 	bne.w	8005d1e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2220      	movs	r2, #32
 8005fb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	e000      	b.n	8005fd0 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005fce:	2302      	movs	r3, #2
  }
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3728      	adds	r7, #40	@ 0x28
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	00010004 	.word	0x00010004

08005fdc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b088      	sub	sp, #32
 8005fe0:	af02      	add	r7, sp, #8
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	4608      	mov	r0, r1
 8005fe6:	4611      	mov	r1, r2
 8005fe8:	461a      	mov	r2, r3
 8005fea:	4603      	mov	r3, r0
 8005fec:	817b      	strh	r3, [r7, #10]
 8005fee:	460b      	mov	r3, r1
 8005ff0:	813b      	strh	r3, [r7, #8]
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005ff6:	f7fe fa1d 	bl	8004434 <HAL_GetTick>
 8005ffa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006002:	b2db      	uxtb	r3, r3
 8006004:	2b20      	cmp	r3, #32
 8006006:	f040 80d9 	bne.w	80061bc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	9300      	str	r3, [sp, #0]
 800600e:	2319      	movs	r3, #25
 8006010:	2201      	movs	r2, #1
 8006012:	496d      	ldr	r1, [pc, #436]	@ (80061c8 <HAL_I2C_Mem_Write+0x1ec>)
 8006014:	68f8      	ldr	r0, [r7, #12]
 8006016:	f000 fbef 	bl	80067f8 <I2C_WaitOnFlagUntilTimeout>
 800601a:	4603      	mov	r3, r0
 800601c:	2b00      	cmp	r3, #0
 800601e:	d001      	beq.n	8006024 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006020:	2302      	movs	r3, #2
 8006022:	e0cc      	b.n	80061be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800602a:	2b01      	cmp	r3, #1
 800602c:	d101      	bne.n	8006032 <HAL_I2C_Mem_Write+0x56>
 800602e:	2302      	movs	r3, #2
 8006030:	e0c5      	b.n	80061be <HAL_I2C_Mem_Write+0x1e2>
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2201      	movs	r2, #1
 8006036:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 0301 	and.w	r3, r3, #1
 8006044:	2b01      	cmp	r3, #1
 8006046:	d007      	beq.n	8006058 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f042 0201 	orr.w	r2, r2, #1
 8006056:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006066:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2221      	movs	r2, #33	@ 0x21
 800606c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2240      	movs	r2, #64	@ 0x40
 8006074:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2200      	movs	r2, #0
 800607c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6a3a      	ldr	r2, [r7, #32]
 8006082:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006088:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800608e:	b29a      	uxth	r2, r3
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	4a4d      	ldr	r2, [pc, #308]	@ (80061cc <HAL_I2C_Mem_Write+0x1f0>)
 8006098:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800609a:	88f8      	ldrh	r0, [r7, #6]
 800609c:	893a      	ldrh	r2, [r7, #8]
 800609e:	8979      	ldrh	r1, [r7, #10]
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	9301      	str	r3, [sp, #4]
 80060a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060a6:	9300      	str	r3, [sp, #0]
 80060a8:	4603      	mov	r3, r0
 80060aa:	68f8      	ldr	r0, [r7, #12]
 80060ac:	f000 fb0e 	bl	80066cc <I2C_RequestMemoryWrite>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d052      	beq.n	800615c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e081      	b.n	80061be <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060ba:	697a      	ldr	r2, [r7, #20]
 80060bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80060be:	68f8      	ldr	r0, [r7, #12]
 80060c0:	f000 fcb4 	bl	8006a2c <I2C_WaitOnTXEFlagUntilTimeout>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00d      	beq.n	80060e6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ce:	2b04      	cmp	r3, #4
 80060d0:	d107      	bne.n	80060e2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e06b      	b.n	80061be <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ea:	781a      	ldrb	r2, [r3, #0]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060f6:	1c5a      	adds	r2, r3, #1
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006100:	3b01      	subs	r3, #1
 8006102:	b29a      	uxth	r2, r3
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800610c:	b29b      	uxth	r3, r3
 800610e:	3b01      	subs	r3, #1
 8006110:	b29a      	uxth	r2, r3
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	695b      	ldr	r3, [r3, #20]
 800611c:	f003 0304 	and.w	r3, r3, #4
 8006120:	2b04      	cmp	r3, #4
 8006122:	d11b      	bne.n	800615c <HAL_I2C_Mem_Write+0x180>
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006128:	2b00      	cmp	r3, #0
 800612a:	d017      	beq.n	800615c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006130:	781a      	ldrb	r2, [r3, #0]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800613c:	1c5a      	adds	r2, r3, #1
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006146:	3b01      	subs	r3, #1
 8006148:	b29a      	uxth	r2, r3
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006152:	b29b      	uxth	r3, r3
 8006154:	3b01      	subs	r3, #1
 8006156:	b29a      	uxth	r2, r3
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006160:	2b00      	cmp	r3, #0
 8006162:	d1aa      	bne.n	80060ba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006164:	697a      	ldr	r2, [r7, #20]
 8006166:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006168:	68f8      	ldr	r0, [r7, #12]
 800616a:	f000 fca7 	bl	8006abc <I2C_WaitOnBTFFlagUntilTimeout>
 800616e:	4603      	mov	r3, r0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d00d      	beq.n	8006190 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006178:	2b04      	cmp	r3, #4
 800617a:	d107      	bne.n	800618c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800618a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e016      	b.n	80061be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800619e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2220      	movs	r2, #32
 80061a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80061b8:	2300      	movs	r3, #0
 80061ba:	e000      	b.n	80061be <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80061bc:	2302      	movs	r3, #2
  }
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3718      	adds	r7, #24
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	00100002 	.word	0x00100002
 80061cc:	ffff0000 	.word	0xffff0000

080061d0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b08a      	sub	sp, #40	@ 0x28
 80061d4:	af02      	add	r7, sp, #8
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	607a      	str	r2, [r7, #4]
 80061da:	603b      	str	r3, [r7, #0]
 80061dc:	460b      	mov	r3, r1
 80061de:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80061e0:	f7fe f928 	bl	8004434 <HAL_GetTick>
 80061e4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80061e6:	2300      	movs	r3, #0
 80061e8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	2b20      	cmp	r3, #32
 80061f4:	f040 8111 	bne.w	800641a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80061f8:	69fb      	ldr	r3, [r7, #28]
 80061fa:	9300      	str	r3, [sp, #0]
 80061fc:	2319      	movs	r3, #25
 80061fe:	2201      	movs	r2, #1
 8006200:	4988      	ldr	r1, [pc, #544]	@ (8006424 <HAL_I2C_IsDeviceReady+0x254>)
 8006202:	68f8      	ldr	r0, [r7, #12]
 8006204:	f000 faf8 	bl	80067f8 <I2C_WaitOnFlagUntilTimeout>
 8006208:	4603      	mov	r3, r0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d001      	beq.n	8006212 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800620e:	2302      	movs	r3, #2
 8006210:	e104      	b.n	800641c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006218:	2b01      	cmp	r3, #1
 800621a:	d101      	bne.n	8006220 <HAL_I2C_IsDeviceReady+0x50>
 800621c:	2302      	movs	r3, #2
 800621e:	e0fd      	b.n	800641c <HAL_I2C_IsDeviceReady+0x24c>
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f003 0301 	and.w	r3, r3, #1
 8006232:	2b01      	cmp	r3, #1
 8006234:	d007      	beq.n	8006246 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f042 0201 	orr.w	r2, r2, #1
 8006244:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006254:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2224      	movs	r2, #36	@ 0x24
 800625a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2200      	movs	r2, #0
 8006262:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	4a70      	ldr	r2, [pc, #448]	@ (8006428 <HAL_I2C_IsDeviceReady+0x258>)
 8006268:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006278:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	9300      	str	r3, [sp, #0]
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	2200      	movs	r2, #0
 8006282:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006286:	68f8      	ldr	r0, [r7, #12]
 8006288:	f000 fab6 	bl	80067f8 <I2C_WaitOnFlagUntilTimeout>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d00d      	beq.n	80062ae <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800629c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062a0:	d103      	bne.n	80062aa <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80062a8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80062aa:	2303      	movs	r3, #3
 80062ac:	e0b6      	b.n	800641c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80062ae:	897b      	ldrh	r3, [r7, #10]
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	461a      	mov	r2, r3
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80062bc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80062be:	f7fe f8b9 	bl	8004434 <HAL_GetTick>
 80062c2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	695b      	ldr	r3, [r3, #20]
 80062ca:	f003 0302 	and.w	r3, r3, #2
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	bf0c      	ite	eq
 80062d2:	2301      	moveq	r3, #1
 80062d4:	2300      	movne	r3, #0
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	695b      	ldr	r3, [r3, #20]
 80062e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062e8:	bf0c      	ite	eq
 80062ea:	2301      	moveq	r3, #1
 80062ec:	2300      	movne	r3, #0
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80062f2:	e025      	b.n	8006340 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80062f4:	f7fe f89e 	bl	8004434 <HAL_GetTick>
 80062f8:	4602      	mov	r2, r0
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	683a      	ldr	r2, [r7, #0]
 8006300:	429a      	cmp	r2, r3
 8006302:	d302      	bcc.n	800630a <HAL_I2C_IsDeviceReady+0x13a>
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d103      	bne.n	8006312 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	22a0      	movs	r2, #160	@ 0xa0
 800630e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	695b      	ldr	r3, [r3, #20]
 8006318:	f003 0302 	and.w	r3, r3, #2
 800631c:	2b02      	cmp	r3, #2
 800631e:	bf0c      	ite	eq
 8006320:	2301      	moveq	r3, #1
 8006322:	2300      	movne	r3, #0
 8006324:	b2db      	uxtb	r3, r3
 8006326:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	695b      	ldr	r3, [r3, #20]
 800632e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006332:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006336:	bf0c      	ite	eq
 8006338:	2301      	moveq	r3, #1
 800633a:	2300      	movne	r3, #0
 800633c:	b2db      	uxtb	r3, r3
 800633e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006346:	b2db      	uxtb	r3, r3
 8006348:	2ba0      	cmp	r3, #160	@ 0xa0
 800634a:	d005      	beq.n	8006358 <HAL_I2C_IsDeviceReady+0x188>
 800634c:	7dfb      	ldrb	r3, [r7, #23]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d102      	bne.n	8006358 <HAL_I2C_IsDeviceReady+0x188>
 8006352:	7dbb      	ldrb	r3, [r7, #22]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d0cd      	beq.n	80062f4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2220      	movs	r2, #32
 800635c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	695b      	ldr	r3, [r3, #20]
 8006366:	f003 0302 	and.w	r3, r3, #2
 800636a:	2b02      	cmp	r3, #2
 800636c:	d129      	bne.n	80063c2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800637c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800637e:	2300      	movs	r3, #0
 8006380:	613b      	str	r3, [r7, #16]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	695b      	ldr	r3, [r3, #20]
 8006388:	613b      	str	r3, [r7, #16]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	699b      	ldr	r3, [r3, #24]
 8006390:	613b      	str	r3, [r7, #16]
 8006392:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	9300      	str	r3, [sp, #0]
 8006398:	2319      	movs	r3, #25
 800639a:	2201      	movs	r2, #1
 800639c:	4921      	ldr	r1, [pc, #132]	@ (8006424 <HAL_I2C_IsDeviceReady+0x254>)
 800639e:	68f8      	ldr	r0, [r7, #12]
 80063a0:	f000 fa2a 	bl	80067f8 <I2C_WaitOnFlagUntilTimeout>
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d001      	beq.n	80063ae <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e036      	b.n	800641c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2220      	movs	r2, #32
 80063b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2200      	movs	r2, #0
 80063ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80063be:	2300      	movs	r3, #0
 80063c0:	e02c      	b.n	800641c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80063d0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80063da:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	9300      	str	r3, [sp, #0]
 80063e0:	2319      	movs	r3, #25
 80063e2:	2201      	movs	r2, #1
 80063e4:	490f      	ldr	r1, [pc, #60]	@ (8006424 <HAL_I2C_IsDeviceReady+0x254>)
 80063e6:	68f8      	ldr	r0, [r7, #12]
 80063e8:	f000 fa06 	bl	80067f8 <I2C_WaitOnFlagUntilTimeout>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d001      	beq.n	80063f6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e012      	b.n	800641c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	3301      	adds	r3, #1
 80063fa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80063fc:	69ba      	ldr	r2, [r7, #24]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	429a      	cmp	r2, r3
 8006402:	f4ff af32 	bcc.w	800626a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2220      	movs	r2, #32
 800640a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2200      	movs	r2, #0
 8006412:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e000      	b.n	800641c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800641a:	2302      	movs	r3, #2
  }
}
 800641c:	4618      	mov	r0, r3
 800641e:	3720      	adds	r7, #32
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}
 8006424:	00100002 	.word	0x00100002
 8006428:	ffff0000 	.word	0xffff0000

0800642c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b088      	sub	sp, #32
 8006430:	af02      	add	r7, sp, #8
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	607a      	str	r2, [r7, #4]
 8006436:	603b      	str	r3, [r7, #0]
 8006438:	460b      	mov	r3, r1
 800643a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006440:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	2b08      	cmp	r3, #8
 8006446:	d006      	beq.n	8006456 <I2C_MasterRequestWrite+0x2a>
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	2b01      	cmp	r3, #1
 800644c:	d003      	beq.n	8006456 <I2C_MasterRequestWrite+0x2a>
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006454:	d108      	bne.n	8006468 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006464:	601a      	str	r2, [r3, #0]
 8006466:	e00b      	b.n	8006480 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800646c:	2b12      	cmp	r3, #18
 800646e:	d107      	bne.n	8006480 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800647e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	9300      	str	r3, [sp, #0]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800648c:	68f8      	ldr	r0, [r7, #12]
 800648e:	f000 f9b3 	bl	80067f8 <I2C_WaitOnFlagUntilTimeout>
 8006492:	4603      	mov	r3, r0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d00d      	beq.n	80064b4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064a6:	d103      	bne.n	80064b0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80064ae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80064b0:	2303      	movs	r3, #3
 80064b2:	e035      	b.n	8006520 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	691b      	ldr	r3, [r3, #16]
 80064b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80064bc:	d108      	bne.n	80064d0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80064be:	897b      	ldrh	r3, [r7, #10]
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	461a      	mov	r2, r3
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80064cc:	611a      	str	r2, [r3, #16]
 80064ce:	e01b      	b.n	8006508 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80064d0:	897b      	ldrh	r3, [r7, #10]
 80064d2:	11db      	asrs	r3, r3, #7
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	f003 0306 	and.w	r3, r3, #6
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	f063 030f 	orn	r3, r3, #15
 80064e0:	b2da      	uxtb	r2, r3
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	490e      	ldr	r1, [pc, #56]	@ (8006528 <I2C_MasterRequestWrite+0xfc>)
 80064ee:	68f8      	ldr	r0, [r7, #12]
 80064f0:	f000 f9fc 	bl	80068ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d001      	beq.n	80064fe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e010      	b.n	8006520 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80064fe:	897b      	ldrh	r3, [r7, #10]
 8006500:	b2da      	uxtb	r2, r3
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	4907      	ldr	r1, [pc, #28]	@ (800652c <I2C_MasterRequestWrite+0x100>)
 800650e:	68f8      	ldr	r0, [r7, #12]
 8006510:	f000 f9ec 	bl	80068ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d001      	beq.n	800651e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e000      	b.n	8006520 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800651e:	2300      	movs	r3, #0
}
 8006520:	4618      	mov	r0, r3
 8006522:	3718      	adds	r7, #24
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}
 8006528:	00010008 	.word	0x00010008
 800652c:	00010002 	.word	0x00010002

08006530 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b088      	sub	sp, #32
 8006534:	af02      	add	r7, sp, #8
 8006536:	60f8      	str	r0, [r7, #12]
 8006538:	607a      	str	r2, [r7, #4]
 800653a:	603b      	str	r3, [r7, #0]
 800653c:	460b      	mov	r3, r1
 800653e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006544:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006554:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	2b08      	cmp	r3, #8
 800655a:	d006      	beq.n	800656a <I2C_MasterRequestRead+0x3a>
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	2b01      	cmp	r3, #1
 8006560:	d003      	beq.n	800656a <I2C_MasterRequestRead+0x3a>
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006568:	d108      	bne.n	800657c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006578:	601a      	str	r2, [r3, #0]
 800657a:	e00b      	b.n	8006594 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006580:	2b11      	cmp	r3, #17
 8006582:	d107      	bne.n	8006594 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006592:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	9300      	str	r3, [sp, #0]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2200      	movs	r2, #0
 800659c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80065a0:	68f8      	ldr	r0, [r7, #12]
 80065a2:	f000 f929 	bl	80067f8 <I2C_WaitOnFlagUntilTimeout>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d00d      	beq.n	80065c8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065ba:	d103      	bne.n	80065c4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80065c2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80065c4:	2303      	movs	r3, #3
 80065c6:	e079      	b.n	80066bc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	691b      	ldr	r3, [r3, #16]
 80065cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80065d0:	d108      	bne.n	80065e4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80065d2:	897b      	ldrh	r3, [r7, #10]
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	f043 0301 	orr.w	r3, r3, #1
 80065da:	b2da      	uxtb	r2, r3
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	611a      	str	r2, [r3, #16]
 80065e2:	e05f      	b.n	80066a4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80065e4:	897b      	ldrh	r3, [r7, #10]
 80065e6:	11db      	asrs	r3, r3, #7
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	f003 0306 	and.w	r3, r3, #6
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	f063 030f 	orn	r3, r3, #15
 80065f4:	b2da      	uxtb	r2, r3
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	4930      	ldr	r1, [pc, #192]	@ (80066c4 <I2C_MasterRequestRead+0x194>)
 8006602:	68f8      	ldr	r0, [r7, #12]
 8006604:	f000 f972 	bl	80068ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d001      	beq.n	8006612 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	e054      	b.n	80066bc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006612:	897b      	ldrh	r3, [r7, #10]
 8006614:	b2da      	uxtb	r2, r3
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	4929      	ldr	r1, [pc, #164]	@ (80066c8 <I2C_MasterRequestRead+0x198>)
 8006622:	68f8      	ldr	r0, [r7, #12]
 8006624:	f000 f962 	bl	80068ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006628:	4603      	mov	r3, r0
 800662a:	2b00      	cmp	r3, #0
 800662c:	d001      	beq.n	8006632 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800662e:	2301      	movs	r3, #1
 8006630:	e044      	b.n	80066bc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006632:	2300      	movs	r3, #0
 8006634:	613b      	str	r3, [r7, #16]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	695b      	ldr	r3, [r3, #20]
 800663c:	613b      	str	r3, [r7, #16]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	699b      	ldr	r3, [r3, #24]
 8006644:	613b      	str	r3, [r7, #16]
 8006646:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006656:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	9300      	str	r3, [sp, #0]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006664:	68f8      	ldr	r0, [r7, #12]
 8006666:	f000 f8c7 	bl	80067f8 <I2C_WaitOnFlagUntilTimeout>
 800666a:	4603      	mov	r3, r0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d00d      	beq.n	800668c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800667a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800667e:	d103      	bne.n	8006688 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006686:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8006688:	2303      	movs	r3, #3
 800668a:	e017      	b.n	80066bc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800668c:	897b      	ldrh	r3, [r7, #10]
 800668e:	11db      	asrs	r3, r3, #7
 8006690:	b2db      	uxtb	r3, r3
 8006692:	f003 0306 	and.w	r3, r3, #6
 8006696:	b2db      	uxtb	r3, r3
 8006698:	f063 030e 	orn	r3, r3, #14
 800669c:	b2da      	uxtb	r2, r3
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	4907      	ldr	r1, [pc, #28]	@ (80066c8 <I2C_MasterRequestRead+0x198>)
 80066aa:	68f8      	ldr	r0, [r7, #12]
 80066ac:	f000 f91e 	bl	80068ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d001      	beq.n	80066ba <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e000      	b.n	80066bc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80066ba:	2300      	movs	r3, #0
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3718      	adds	r7, #24
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	00010008 	.word	0x00010008
 80066c8:	00010002 	.word	0x00010002

080066cc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b088      	sub	sp, #32
 80066d0:	af02      	add	r7, sp, #8
 80066d2:	60f8      	str	r0, [r7, #12]
 80066d4:	4608      	mov	r0, r1
 80066d6:	4611      	mov	r1, r2
 80066d8:	461a      	mov	r2, r3
 80066da:	4603      	mov	r3, r0
 80066dc:	817b      	strh	r3, [r7, #10]
 80066de:	460b      	mov	r3, r1
 80066e0:	813b      	strh	r3, [r7, #8]
 80066e2:	4613      	mov	r3, r2
 80066e4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80066f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80066f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f8:	9300      	str	r3, [sp, #0]
 80066fa:	6a3b      	ldr	r3, [r7, #32]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006702:	68f8      	ldr	r0, [r7, #12]
 8006704:	f000 f878 	bl	80067f8 <I2C_WaitOnFlagUntilTimeout>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d00d      	beq.n	800672a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006718:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800671c:	d103      	bne.n	8006726 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006724:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006726:	2303      	movs	r3, #3
 8006728:	e05f      	b.n	80067ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800672a:	897b      	ldrh	r3, [r7, #10]
 800672c:	b2db      	uxtb	r3, r3
 800672e:	461a      	mov	r2, r3
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006738:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800673a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800673c:	6a3a      	ldr	r2, [r7, #32]
 800673e:	492d      	ldr	r1, [pc, #180]	@ (80067f4 <I2C_RequestMemoryWrite+0x128>)
 8006740:	68f8      	ldr	r0, [r7, #12]
 8006742:	f000 f8d3 	bl	80068ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006746:	4603      	mov	r3, r0
 8006748:	2b00      	cmp	r3, #0
 800674a:	d001      	beq.n	8006750 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	e04c      	b.n	80067ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006750:	2300      	movs	r3, #0
 8006752:	617b      	str	r3, [r7, #20]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	695b      	ldr	r3, [r3, #20]
 800675a:	617b      	str	r3, [r7, #20]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	699b      	ldr	r3, [r3, #24]
 8006762:	617b      	str	r3, [r7, #20]
 8006764:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006766:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006768:	6a39      	ldr	r1, [r7, #32]
 800676a:	68f8      	ldr	r0, [r7, #12]
 800676c:	f000 f95e 	bl	8006a2c <I2C_WaitOnTXEFlagUntilTimeout>
 8006770:	4603      	mov	r3, r0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d00d      	beq.n	8006792 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800677a:	2b04      	cmp	r3, #4
 800677c:	d107      	bne.n	800678e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800678c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e02b      	b.n	80067ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006792:	88fb      	ldrh	r3, [r7, #6]
 8006794:	2b01      	cmp	r3, #1
 8006796:	d105      	bne.n	80067a4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006798:	893b      	ldrh	r3, [r7, #8]
 800679a:	b2da      	uxtb	r2, r3
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	611a      	str	r2, [r3, #16]
 80067a2:	e021      	b.n	80067e8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80067a4:	893b      	ldrh	r3, [r7, #8]
 80067a6:	0a1b      	lsrs	r3, r3, #8
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	b2da      	uxtb	r2, r3
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067b4:	6a39      	ldr	r1, [r7, #32]
 80067b6:	68f8      	ldr	r0, [r7, #12]
 80067b8:	f000 f938 	bl	8006a2c <I2C_WaitOnTXEFlagUntilTimeout>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00d      	beq.n	80067de <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067c6:	2b04      	cmp	r3, #4
 80067c8:	d107      	bne.n	80067da <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	e005      	b.n	80067ea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80067de:	893b      	ldrh	r3, [r7, #8]
 80067e0:	b2da      	uxtb	r2, r3
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80067e8:	2300      	movs	r3, #0
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3718      	adds	r7, #24
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
 80067f2:	bf00      	nop
 80067f4:	00010002 	.word	0x00010002

080067f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	603b      	str	r3, [r7, #0]
 8006804:	4613      	mov	r3, r2
 8006806:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006808:	e048      	b.n	800689c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006810:	d044      	beq.n	800689c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006812:	f7fd fe0f 	bl	8004434 <HAL_GetTick>
 8006816:	4602      	mov	r2, r0
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	1ad3      	subs	r3, r2, r3
 800681c:	683a      	ldr	r2, [r7, #0]
 800681e:	429a      	cmp	r2, r3
 8006820:	d302      	bcc.n	8006828 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d139      	bne.n	800689c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	0c1b      	lsrs	r3, r3, #16
 800682c:	b2db      	uxtb	r3, r3
 800682e:	2b01      	cmp	r3, #1
 8006830:	d10d      	bne.n	800684e <I2C_WaitOnFlagUntilTimeout+0x56>
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	695b      	ldr	r3, [r3, #20]
 8006838:	43da      	mvns	r2, r3
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	4013      	ands	r3, r2
 800683e:	b29b      	uxth	r3, r3
 8006840:	2b00      	cmp	r3, #0
 8006842:	bf0c      	ite	eq
 8006844:	2301      	moveq	r3, #1
 8006846:	2300      	movne	r3, #0
 8006848:	b2db      	uxtb	r3, r3
 800684a:	461a      	mov	r2, r3
 800684c:	e00c      	b.n	8006868 <I2C_WaitOnFlagUntilTimeout+0x70>
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	699b      	ldr	r3, [r3, #24]
 8006854:	43da      	mvns	r2, r3
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	4013      	ands	r3, r2
 800685a:	b29b      	uxth	r3, r3
 800685c:	2b00      	cmp	r3, #0
 800685e:	bf0c      	ite	eq
 8006860:	2301      	moveq	r3, #1
 8006862:	2300      	movne	r3, #0
 8006864:	b2db      	uxtb	r3, r3
 8006866:	461a      	mov	r2, r3
 8006868:	79fb      	ldrb	r3, [r7, #7]
 800686a:	429a      	cmp	r2, r3
 800686c:	d116      	bne.n	800689c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2200      	movs	r2, #0
 8006872:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2220      	movs	r2, #32
 8006878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2200      	movs	r2, #0
 8006880:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006888:	f043 0220 	orr.w	r2, r3, #32
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2200      	movs	r2, #0
 8006894:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	e023      	b.n	80068e4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	0c1b      	lsrs	r3, r3, #16
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d10d      	bne.n	80068c2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	695b      	ldr	r3, [r3, #20]
 80068ac:	43da      	mvns	r2, r3
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	4013      	ands	r3, r2
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	bf0c      	ite	eq
 80068b8:	2301      	moveq	r3, #1
 80068ba:	2300      	movne	r3, #0
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	461a      	mov	r2, r3
 80068c0:	e00c      	b.n	80068dc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	699b      	ldr	r3, [r3, #24]
 80068c8:	43da      	mvns	r2, r3
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	4013      	ands	r3, r2
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	bf0c      	ite	eq
 80068d4:	2301      	moveq	r3, #1
 80068d6:	2300      	movne	r3, #0
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	461a      	mov	r2, r3
 80068dc:	79fb      	ldrb	r3, [r7, #7]
 80068de:	429a      	cmp	r2, r3
 80068e0:	d093      	beq.n	800680a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068e2:	2300      	movs	r3, #0
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3710      	adds	r7, #16
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	607a      	str	r2, [r7, #4]
 80068f8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80068fa:	e071      	b.n	80069e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	695b      	ldr	r3, [r3, #20]
 8006902:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006906:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800690a:	d123      	bne.n	8006954 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800691a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006924:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2200      	movs	r2, #0
 800692a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2220      	movs	r2, #32
 8006930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2200      	movs	r2, #0
 8006938:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006940:	f043 0204 	orr.w	r2, r3, #4
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2200      	movs	r2, #0
 800694c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	e067      	b.n	8006a24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800695a:	d041      	beq.n	80069e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800695c:	f7fd fd6a 	bl	8004434 <HAL_GetTick>
 8006960:	4602      	mov	r2, r0
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	1ad3      	subs	r3, r2, r3
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	429a      	cmp	r2, r3
 800696a:	d302      	bcc.n	8006972 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d136      	bne.n	80069e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	0c1b      	lsrs	r3, r3, #16
 8006976:	b2db      	uxtb	r3, r3
 8006978:	2b01      	cmp	r3, #1
 800697a:	d10c      	bne.n	8006996 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	695b      	ldr	r3, [r3, #20]
 8006982:	43da      	mvns	r2, r3
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	4013      	ands	r3, r2
 8006988:	b29b      	uxth	r3, r3
 800698a:	2b00      	cmp	r3, #0
 800698c:	bf14      	ite	ne
 800698e:	2301      	movne	r3, #1
 8006990:	2300      	moveq	r3, #0
 8006992:	b2db      	uxtb	r3, r3
 8006994:	e00b      	b.n	80069ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	699b      	ldr	r3, [r3, #24]
 800699c:	43da      	mvns	r2, r3
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	4013      	ands	r3, r2
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	bf14      	ite	ne
 80069a8:	2301      	movne	r3, #1
 80069aa:	2300      	moveq	r3, #0
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d016      	beq.n	80069e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2200      	movs	r2, #0
 80069b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2220      	movs	r2, #32
 80069bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069cc:	f043 0220 	orr.w	r2, r3, #32
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	e021      	b.n	8006a24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	0c1b      	lsrs	r3, r3, #16
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d10c      	bne.n	8006a04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	695b      	ldr	r3, [r3, #20]
 80069f0:	43da      	mvns	r2, r3
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	4013      	ands	r3, r2
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	bf14      	ite	ne
 80069fc:	2301      	movne	r3, #1
 80069fe:	2300      	moveq	r3, #0
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	e00b      	b.n	8006a1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	699b      	ldr	r3, [r3, #24]
 8006a0a:	43da      	mvns	r2, r3
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	4013      	ands	r3, r2
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	bf14      	ite	ne
 8006a16:	2301      	movne	r3, #1
 8006a18:	2300      	moveq	r3, #0
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	f47f af6d 	bne.w	80068fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3710      	adds	r7, #16
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	60b9      	str	r1, [r7, #8]
 8006a36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a38:	e034      	b.n	8006aa4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006a3a:	68f8      	ldr	r0, [r7, #12]
 8006a3c:	f000 f8e3 	bl	8006c06 <I2C_IsAcknowledgeFailed>
 8006a40:	4603      	mov	r3, r0
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d001      	beq.n	8006a4a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	e034      	b.n	8006ab4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a50:	d028      	beq.n	8006aa4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a52:	f7fd fcef 	bl	8004434 <HAL_GetTick>
 8006a56:	4602      	mov	r2, r0
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	1ad3      	subs	r3, r2, r3
 8006a5c:	68ba      	ldr	r2, [r7, #8]
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d302      	bcc.n	8006a68 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d11d      	bne.n	8006aa4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	695b      	ldr	r3, [r3, #20]
 8006a6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a72:	2b80      	cmp	r3, #128	@ 0x80
 8006a74:	d016      	beq.n	8006aa4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2220      	movs	r2, #32
 8006a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a90:	f043 0220 	orr.w	r2, r3, #32
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e007      	b.n	8006ab4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	695b      	ldr	r3, [r3, #20]
 8006aaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006aae:	2b80      	cmp	r3, #128	@ 0x80
 8006ab0:	d1c3      	bne.n	8006a3a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006ab2:	2300      	movs	r3, #0
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3710      	adds	r7, #16
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}

08006abc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006ac8:	e034      	b.n	8006b34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006aca:	68f8      	ldr	r0, [r7, #12]
 8006acc:	f000 f89b 	bl	8006c06 <I2C_IsAcknowledgeFailed>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d001      	beq.n	8006ada <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e034      	b.n	8006b44 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ae0:	d028      	beq.n	8006b34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ae2:	f7fd fca7 	bl	8004434 <HAL_GetTick>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	1ad3      	subs	r3, r2, r3
 8006aec:	68ba      	ldr	r2, [r7, #8]
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d302      	bcc.n	8006af8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d11d      	bne.n	8006b34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	695b      	ldr	r3, [r3, #20]
 8006afe:	f003 0304 	and.w	r3, r3, #4
 8006b02:	2b04      	cmp	r3, #4
 8006b04:	d016      	beq.n	8006b34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2220      	movs	r2, #32
 8006b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2200      	movs	r2, #0
 8006b18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b20:	f043 0220 	orr.w	r2, r3, #32
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	e007      	b.n	8006b44 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	695b      	ldr	r3, [r3, #20]
 8006b3a:	f003 0304 	and.w	r3, r3, #4
 8006b3e:	2b04      	cmp	r3, #4
 8006b40:	d1c3      	bne.n	8006aca <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006b42:	2300      	movs	r3, #0
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3710      	adds	r7, #16
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b084      	sub	sp, #16
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006b58:	e049      	b.n	8006bee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	695b      	ldr	r3, [r3, #20]
 8006b60:	f003 0310 	and.w	r3, r3, #16
 8006b64:	2b10      	cmp	r3, #16
 8006b66:	d119      	bne.n	8006b9c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f06f 0210 	mvn.w	r2, #16
 8006b70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2200      	movs	r2, #0
 8006b76:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2220      	movs	r2, #32
 8006b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e030      	b.n	8006bfe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b9c:	f7fd fc4a 	bl	8004434 <HAL_GetTick>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	1ad3      	subs	r3, r2, r3
 8006ba6:	68ba      	ldr	r2, [r7, #8]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d302      	bcc.n	8006bb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d11d      	bne.n	8006bee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	695b      	ldr	r3, [r3, #20]
 8006bb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bbc:	2b40      	cmp	r3, #64	@ 0x40
 8006bbe:	d016      	beq.n	8006bee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2220      	movs	r2, #32
 8006bca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bda:	f043 0220 	orr.w	r2, r3, #32
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	e007      	b.n	8006bfe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	695b      	ldr	r3, [r3, #20]
 8006bf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bf8:	2b40      	cmp	r3, #64	@ 0x40
 8006bfa:	d1ae      	bne.n	8006b5a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3710      	adds	r7, #16
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}

08006c06 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006c06:	b480      	push	{r7}
 8006c08:	b083      	sub	sp, #12
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	695b      	ldr	r3, [r3, #20]
 8006c14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c1c:	d11b      	bne.n	8006c56 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006c26:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2220      	movs	r2, #32
 8006c32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c42:	f043 0204 	orr.w	r2, r3, #4
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	e000      	b.n	8006c58 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b086      	sub	sp, #24
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d101      	bne.n	8006c76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	e267      	b.n	8007146 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f003 0301 	and.w	r3, r3, #1
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d075      	beq.n	8006d6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006c82:	4b88      	ldr	r3, [pc, #544]	@ (8006ea4 <HAL_RCC_OscConfig+0x240>)
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	f003 030c 	and.w	r3, r3, #12
 8006c8a:	2b04      	cmp	r3, #4
 8006c8c:	d00c      	beq.n	8006ca8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c8e:	4b85      	ldr	r3, [pc, #532]	@ (8006ea4 <HAL_RCC_OscConfig+0x240>)
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006c96:	2b08      	cmp	r3, #8
 8006c98:	d112      	bne.n	8006cc0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c9a:	4b82      	ldr	r3, [pc, #520]	@ (8006ea4 <HAL_RCC_OscConfig+0x240>)
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ca2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006ca6:	d10b      	bne.n	8006cc0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ca8:	4b7e      	ldr	r3, [pc, #504]	@ (8006ea4 <HAL_RCC_OscConfig+0x240>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d05b      	beq.n	8006d6c <HAL_RCC_OscConfig+0x108>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d157      	bne.n	8006d6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e242      	b.n	8007146 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006cc8:	d106      	bne.n	8006cd8 <HAL_RCC_OscConfig+0x74>
 8006cca:	4b76      	ldr	r3, [pc, #472]	@ (8006ea4 <HAL_RCC_OscConfig+0x240>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a75      	ldr	r2, [pc, #468]	@ (8006ea4 <HAL_RCC_OscConfig+0x240>)
 8006cd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006cd4:	6013      	str	r3, [r2, #0]
 8006cd6:	e01d      	b.n	8006d14 <HAL_RCC_OscConfig+0xb0>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006ce0:	d10c      	bne.n	8006cfc <HAL_RCC_OscConfig+0x98>
 8006ce2:	4b70      	ldr	r3, [pc, #448]	@ (8006ea4 <HAL_RCC_OscConfig+0x240>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a6f      	ldr	r2, [pc, #444]	@ (8006ea4 <HAL_RCC_OscConfig+0x240>)
 8006ce8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006cec:	6013      	str	r3, [r2, #0]
 8006cee:	4b6d      	ldr	r3, [pc, #436]	@ (8006ea4 <HAL_RCC_OscConfig+0x240>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a6c      	ldr	r2, [pc, #432]	@ (8006ea4 <HAL_RCC_OscConfig+0x240>)
 8006cf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006cf8:	6013      	str	r3, [r2, #0]
 8006cfa:	e00b      	b.n	8006d14 <HAL_RCC_OscConfig+0xb0>
 8006cfc:	4b69      	ldr	r3, [pc, #420]	@ (8006ea4 <HAL_RCC_OscConfig+0x240>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a68      	ldr	r2, [pc, #416]	@ (8006ea4 <HAL_RCC_OscConfig+0x240>)
 8006d02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d06:	6013      	str	r3, [r2, #0]
 8006d08:	4b66      	ldr	r3, [pc, #408]	@ (8006ea4 <HAL_RCC_OscConfig+0x240>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a65      	ldr	r2, [pc, #404]	@ (8006ea4 <HAL_RCC_OscConfig+0x240>)
 8006d0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006d12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d013      	beq.n	8006d44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d1c:	f7fd fb8a 	bl	8004434 <HAL_GetTick>
 8006d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d22:	e008      	b.n	8006d36 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d24:	f7fd fb86 	bl	8004434 <HAL_GetTick>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	1ad3      	subs	r3, r2, r3
 8006d2e:	2b64      	cmp	r3, #100	@ 0x64
 8006d30:	d901      	bls.n	8006d36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006d32:	2303      	movs	r3, #3
 8006d34:	e207      	b.n	8007146 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d36:	4b5b      	ldr	r3, [pc, #364]	@ (8006ea4 <HAL_RCC_OscConfig+0x240>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d0f0      	beq.n	8006d24 <HAL_RCC_OscConfig+0xc0>
 8006d42:	e014      	b.n	8006d6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d44:	f7fd fb76 	bl	8004434 <HAL_GetTick>
 8006d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d4a:	e008      	b.n	8006d5e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d4c:	f7fd fb72 	bl	8004434 <HAL_GetTick>
 8006d50:	4602      	mov	r2, r0
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	1ad3      	subs	r3, r2, r3
 8006d56:	2b64      	cmp	r3, #100	@ 0x64
 8006d58:	d901      	bls.n	8006d5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006d5a:	2303      	movs	r3, #3
 8006d5c:	e1f3      	b.n	8007146 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d5e:	4b51      	ldr	r3, [pc, #324]	@ (8006ea4 <HAL_RCC_OscConfig+0x240>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1f0      	bne.n	8006d4c <HAL_RCC_OscConfig+0xe8>
 8006d6a:	e000      	b.n	8006d6e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f003 0302 	and.w	r3, r3, #2
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d063      	beq.n	8006e42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006d7a:	4b4a      	ldr	r3, [pc, #296]	@ (8006ea4 <HAL_RCC_OscConfig+0x240>)
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	f003 030c 	and.w	r3, r3, #12
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d00b      	beq.n	8006d9e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d86:	4b47      	ldr	r3, [pc, #284]	@ (8006ea4 <HAL_RCC_OscConfig+0x240>)
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006d8e:	2b08      	cmp	r3, #8
 8006d90:	d11c      	bne.n	8006dcc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d92:	4b44      	ldr	r3, [pc, #272]	@ (8006ea4 <HAL_RCC_OscConfig+0x240>)
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d116      	bne.n	8006dcc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d9e:	4b41      	ldr	r3, [pc, #260]	@ (8006ea4 <HAL_RCC_OscConfig+0x240>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f003 0302 	and.w	r3, r3, #2
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d005      	beq.n	8006db6 <HAL_RCC_OscConfig+0x152>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d001      	beq.n	8006db6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	e1c7      	b.n	8007146 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006db6:	4b3b      	ldr	r3, [pc, #236]	@ (8006ea4 <HAL_RCC_OscConfig+0x240>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	00db      	lsls	r3, r3, #3
 8006dc4:	4937      	ldr	r1, [pc, #220]	@ (8006ea4 <HAL_RCC_OscConfig+0x240>)
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006dca:	e03a      	b.n	8006e42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d020      	beq.n	8006e16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006dd4:	4b34      	ldr	r3, [pc, #208]	@ (8006ea8 <HAL_RCC_OscConfig+0x244>)
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dda:	f7fd fb2b 	bl	8004434 <HAL_GetTick>
 8006dde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006de0:	e008      	b.n	8006df4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006de2:	f7fd fb27 	bl	8004434 <HAL_GetTick>
 8006de6:	4602      	mov	r2, r0
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	1ad3      	subs	r3, r2, r3
 8006dec:	2b02      	cmp	r3, #2
 8006dee:	d901      	bls.n	8006df4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006df0:	2303      	movs	r3, #3
 8006df2:	e1a8      	b.n	8007146 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006df4:	4b2b      	ldr	r3, [pc, #172]	@ (8006ea4 <HAL_RCC_OscConfig+0x240>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f003 0302 	and.w	r3, r3, #2
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d0f0      	beq.n	8006de2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e00:	4b28      	ldr	r3, [pc, #160]	@ (8006ea4 <HAL_RCC_OscConfig+0x240>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	691b      	ldr	r3, [r3, #16]
 8006e0c:	00db      	lsls	r3, r3, #3
 8006e0e:	4925      	ldr	r1, [pc, #148]	@ (8006ea4 <HAL_RCC_OscConfig+0x240>)
 8006e10:	4313      	orrs	r3, r2
 8006e12:	600b      	str	r3, [r1, #0]
 8006e14:	e015      	b.n	8006e42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e16:	4b24      	ldr	r3, [pc, #144]	@ (8006ea8 <HAL_RCC_OscConfig+0x244>)
 8006e18:	2200      	movs	r2, #0
 8006e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e1c:	f7fd fb0a 	bl	8004434 <HAL_GetTick>
 8006e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e22:	e008      	b.n	8006e36 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e24:	f7fd fb06 	bl	8004434 <HAL_GetTick>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	1ad3      	subs	r3, r2, r3
 8006e2e:	2b02      	cmp	r3, #2
 8006e30:	d901      	bls.n	8006e36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006e32:	2303      	movs	r3, #3
 8006e34:	e187      	b.n	8007146 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e36:	4b1b      	ldr	r3, [pc, #108]	@ (8006ea4 <HAL_RCC_OscConfig+0x240>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f003 0302 	and.w	r3, r3, #2
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d1f0      	bne.n	8006e24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f003 0308 	and.w	r3, r3, #8
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d036      	beq.n	8006ebc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	695b      	ldr	r3, [r3, #20]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d016      	beq.n	8006e84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e56:	4b15      	ldr	r3, [pc, #84]	@ (8006eac <HAL_RCC_OscConfig+0x248>)
 8006e58:	2201      	movs	r2, #1
 8006e5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e5c:	f7fd faea 	bl	8004434 <HAL_GetTick>
 8006e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e62:	e008      	b.n	8006e76 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e64:	f7fd fae6 	bl	8004434 <HAL_GetTick>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	1ad3      	subs	r3, r2, r3
 8006e6e:	2b02      	cmp	r3, #2
 8006e70:	d901      	bls.n	8006e76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006e72:	2303      	movs	r3, #3
 8006e74:	e167      	b.n	8007146 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e76:	4b0b      	ldr	r3, [pc, #44]	@ (8006ea4 <HAL_RCC_OscConfig+0x240>)
 8006e78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e7a:	f003 0302 	and.w	r3, r3, #2
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d0f0      	beq.n	8006e64 <HAL_RCC_OscConfig+0x200>
 8006e82:	e01b      	b.n	8006ebc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e84:	4b09      	ldr	r3, [pc, #36]	@ (8006eac <HAL_RCC_OscConfig+0x248>)
 8006e86:	2200      	movs	r2, #0
 8006e88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e8a:	f7fd fad3 	bl	8004434 <HAL_GetTick>
 8006e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e90:	e00e      	b.n	8006eb0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e92:	f7fd facf 	bl	8004434 <HAL_GetTick>
 8006e96:	4602      	mov	r2, r0
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	1ad3      	subs	r3, r2, r3
 8006e9c:	2b02      	cmp	r3, #2
 8006e9e:	d907      	bls.n	8006eb0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006ea0:	2303      	movs	r3, #3
 8006ea2:	e150      	b.n	8007146 <HAL_RCC_OscConfig+0x4e2>
 8006ea4:	40023800 	.word	0x40023800
 8006ea8:	42470000 	.word	0x42470000
 8006eac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006eb0:	4b88      	ldr	r3, [pc, #544]	@ (80070d4 <HAL_RCC_OscConfig+0x470>)
 8006eb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006eb4:	f003 0302 	and.w	r3, r3, #2
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d1ea      	bne.n	8006e92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f003 0304 	and.w	r3, r3, #4
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	f000 8097 	beq.w	8006ff8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ece:	4b81      	ldr	r3, [pc, #516]	@ (80070d4 <HAL_RCC_OscConfig+0x470>)
 8006ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ed2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d10f      	bne.n	8006efa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006eda:	2300      	movs	r3, #0
 8006edc:	60bb      	str	r3, [r7, #8]
 8006ede:	4b7d      	ldr	r3, [pc, #500]	@ (80070d4 <HAL_RCC_OscConfig+0x470>)
 8006ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ee2:	4a7c      	ldr	r2, [pc, #496]	@ (80070d4 <HAL_RCC_OscConfig+0x470>)
 8006ee4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ee8:	6413      	str	r3, [r2, #64]	@ 0x40
 8006eea:	4b7a      	ldr	r3, [pc, #488]	@ (80070d4 <HAL_RCC_OscConfig+0x470>)
 8006eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ef2:	60bb      	str	r3, [r7, #8]
 8006ef4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006efa:	4b77      	ldr	r3, [pc, #476]	@ (80070d8 <HAL_RCC_OscConfig+0x474>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d118      	bne.n	8006f38 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f06:	4b74      	ldr	r3, [pc, #464]	@ (80070d8 <HAL_RCC_OscConfig+0x474>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a73      	ldr	r2, [pc, #460]	@ (80070d8 <HAL_RCC_OscConfig+0x474>)
 8006f0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f12:	f7fd fa8f 	bl	8004434 <HAL_GetTick>
 8006f16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f18:	e008      	b.n	8006f2c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f1a:	f7fd fa8b 	bl	8004434 <HAL_GetTick>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	1ad3      	subs	r3, r2, r3
 8006f24:	2b02      	cmp	r3, #2
 8006f26:	d901      	bls.n	8006f2c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006f28:	2303      	movs	r3, #3
 8006f2a:	e10c      	b.n	8007146 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f2c:	4b6a      	ldr	r3, [pc, #424]	@ (80070d8 <HAL_RCC_OscConfig+0x474>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d0f0      	beq.n	8006f1a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d106      	bne.n	8006f4e <HAL_RCC_OscConfig+0x2ea>
 8006f40:	4b64      	ldr	r3, [pc, #400]	@ (80070d4 <HAL_RCC_OscConfig+0x470>)
 8006f42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f44:	4a63      	ldr	r2, [pc, #396]	@ (80070d4 <HAL_RCC_OscConfig+0x470>)
 8006f46:	f043 0301 	orr.w	r3, r3, #1
 8006f4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f4c:	e01c      	b.n	8006f88 <HAL_RCC_OscConfig+0x324>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	2b05      	cmp	r3, #5
 8006f54:	d10c      	bne.n	8006f70 <HAL_RCC_OscConfig+0x30c>
 8006f56:	4b5f      	ldr	r3, [pc, #380]	@ (80070d4 <HAL_RCC_OscConfig+0x470>)
 8006f58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f5a:	4a5e      	ldr	r2, [pc, #376]	@ (80070d4 <HAL_RCC_OscConfig+0x470>)
 8006f5c:	f043 0304 	orr.w	r3, r3, #4
 8006f60:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f62:	4b5c      	ldr	r3, [pc, #368]	@ (80070d4 <HAL_RCC_OscConfig+0x470>)
 8006f64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f66:	4a5b      	ldr	r2, [pc, #364]	@ (80070d4 <HAL_RCC_OscConfig+0x470>)
 8006f68:	f043 0301 	orr.w	r3, r3, #1
 8006f6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f6e:	e00b      	b.n	8006f88 <HAL_RCC_OscConfig+0x324>
 8006f70:	4b58      	ldr	r3, [pc, #352]	@ (80070d4 <HAL_RCC_OscConfig+0x470>)
 8006f72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f74:	4a57      	ldr	r2, [pc, #348]	@ (80070d4 <HAL_RCC_OscConfig+0x470>)
 8006f76:	f023 0301 	bic.w	r3, r3, #1
 8006f7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f7c:	4b55      	ldr	r3, [pc, #340]	@ (80070d4 <HAL_RCC_OscConfig+0x470>)
 8006f7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f80:	4a54      	ldr	r2, [pc, #336]	@ (80070d4 <HAL_RCC_OscConfig+0x470>)
 8006f82:	f023 0304 	bic.w	r3, r3, #4
 8006f86:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d015      	beq.n	8006fbc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f90:	f7fd fa50 	bl	8004434 <HAL_GetTick>
 8006f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f96:	e00a      	b.n	8006fae <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f98:	f7fd fa4c 	bl	8004434 <HAL_GetTick>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	1ad3      	subs	r3, r2, r3
 8006fa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d901      	bls.n	8006fae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006faa:	2303      	movs	r3, #3
 8006fac:	e0cb      	b.n	8007146 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fae:	4b49      	ldr	r3, [pc, #292]	@ (80070d4 <HAL_RCC_OscConfig+0x470>)
 8006fb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fb2:	f003 0302 	and.w	r3, r3, #2
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d0ee      	beq.n	8006f98 <HAL_RCC_OscConfig+0x334>
 8006fba:	e014      	b.n	8006fe6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006fbc:	f7fd fa3a 	bl	8004434 <HAL_GetTick>
 8006fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006fc2:	e00a      	b.n	8006fda <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fc4:	f7fd fa36 	bl	8004434 <HAL_GetTick>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	1ad3      	subs	r3, r2, r3
 8006fce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d901      	bls.n	8006fda <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006fd6:	2303      	movs	r3, #3
 8006fd8:	e0b5      	b.n	8007146 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006fda:	4b3e      	ldr	r3, [pc, #248]	@ (80070d4 <HAL_RCC_OscConfig+0x470>)
 8006fdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fde:	f003 0302 	and.w	r3, r3, #2
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d1ee      	bne.n	8006fc4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006fe6:	7dfb      	ldrb	r3, [r7, #23]
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d105      	bne.n	8006ff8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006fec:	4b39      	ldr	r3, [pc, #228]	@ (80070d4 <HAL_RCC_OscConfig+0x470>)
 8006fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ff0:	4a38      	ldr	r2, [pc, #224]	@ (80070d4 <HAL_RCC_OscConfig+0x470>)
 8006ff2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ff6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	699b      	ldr	r3, [r3, #24]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	f000 80a1 	beq.w	8007144 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007002:	4b34      	ldr	r3, [pc, #208]	@ (80070d4 <HAL_RCC_OscConfig+0x470>)
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	f003 030c 	and.w	r3, r3, #12
 800700a:	2b08      	cmp	r3, #8
 800700c:	d05c      	beq.n	80070c8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	699b      	ldr	r3, [r3, #24]
 8007012:	2b02      	cmp	r3, #2
 8007014:	d141      	bne.n	800709a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007016:	4b31      	ldr	r3, [pc, #196]	@ (80070dc <HAL_RCC_OscConfig+0x478>)
 8007018:	2200      	movs	r2, #0
 800701a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800701c:	f7fd fa0a 	bl	8004434 <HAL_GetTick>
 8007020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007022:	e008      	b.n	8007036 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007024:	f7fd fa06 	bl	8004434 <HAL_GetTick>
 8007028:	4602      	mov	r2, r0
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	1ad3      	subs	r3, r2, r3
 800702e:	2b02      	cmp	r3, #2
 8007030:	d901      	bls.n	8007036 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007032:	2303      	movs	r3, #3
 8007034:	e087      	b.n	8007146 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007036:	4b27      	ldr	r3, [pc, #156]	@ (80070d4 <HAL_RCC_OscConfig+0x470>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800703e:	2b00      	cmp	r3, #0
 8007040:	d1f0      	bne.n	8007024 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	69da      	ldr	r2, [r3, #28]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6a1b      	ldr	r3, [r3, #32]
 800704a:	431a      	orrs	r2, r3
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007050:	019b      	lsls	r3, r3, #6
 8007052:	431a      	orrs	r2, r3
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007058:	085b      	lsrs	r3, r3, #1
 800705a:	3b01      	subs	r3, #1
 800705c:	041b      	lsls	r3, r3, #16
 800705e:	431a      	orrs	r2, r3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007064:	061b      	lsls	r3, r3, #24
 8007066:	491b      	ldr	r1, [pc, #108]	@ (80070d4 <HAL_RCC_OscConfig+0x470>)
 8007068:	4313      	orrs	r3, r2
 800706a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800706c:	4b1b      	ldr	r3, [pc, #108]	@ (80070dc <HAL_RCC_OscConfig+0x478>)
 800706e:	2201      	movs	r2, #1
 8007070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007072:	f7fd f9df 	bl	8004434 <HAL_GetTick>
 8007076:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007078:	e008      	b.n	800708c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800707a:	f7fd f9db 	bl	8004434 <HAL_GetTick>
 800707e:	4602      	mov	r2, r0
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	1ad3      	subs	r3, r2, r3
 8007084:	2b02      	cmp	r3, #2
 8007086:	d901      	bls.n	800708c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007088:	2303      	movs	r3, #3
 800708a:	e05c      	b.n	8007146 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800708c:	4b11      	ldr	r3, [pc, #68]	@ (80070d4 <HAL_RCC_OscConfig+0x470>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007094:	2b00      	cmp	r3, #0
 8007096:	d0f0      	beq.n	800707a <HAL_RCC_OscConfig+0x416>
 8007098:	e054      	b.n	8007144 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800709a:	4b10      	ldr	r3, [pc, #64]	@ (80070dc <HAL_RCC_OscConfig+0x478>)
 800709c:	2200      	movs	r2, #0
 800709e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070a0:	f7fd f9c8 	bl	8004434 <HAL_GetTick>
 80070a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070a6:	e008      	b.n	80070ba <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070a8:	f7fd f9c4 	bl	8004434 <HAL_GetTick>
 80070ac:	4602      	mov	r2, r0
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	1ad3      	subs	r3, r2, r3
 80070b2:	2b02      	cmp	r3, #2
 80070b4:	d901      	bls.n	80070ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e045      	b.n	8007146 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070ba:	4b06      	ldr	r3, [pc, #24]	@ (80070d4 <HAL_RCC_OscConfig+0x470>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d1f0      	bne.n	80070a8 <HAL_RCC_OscConfig+0x444>
 80070c6:	e03d      	b.n	8007144 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	699b      	ldr	r3, [r3, #24]
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d107      	bne.n	80070e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	e038      	b.n	8007146 <HAL_RCC_OscConfig+0x4e2>
 80070d4:	40023800 	.word	0x40023800
 80070d8:	40007000 	.word	0x40007000
 80070dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80070e0:	4b1b      	ldr	r3, [pc, #108]	@ (8007150 <HAL_RCC_OscConfig+0x4ec>)
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	699b      	ldr	r3, [r3, #24]
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d028      	beq.n	8007140 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d121      	bne.n	8007140 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007106:	429a      	cmp	r2, r3
 8007108:	d11a      	bne.n	8007140 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800710a:	68fa      	ldr	r2, [r7, #12]
 800710c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007110:	4013      	ands	r3, r2
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007116:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007118:	4293      	cmp	r3, r2
 800711a:	d111      	bne.n	8007140 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007126:	085b      	lsrs	r3, r3, #1
 8007128:	3b01      	subs	r3, #1
 800712a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800712c:	429a      	cmp	r2, r3
 800712e:	d107      	bne.n	8007140 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800713a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800713c:	429a      	cmp	r2, r3
 800713e:	d001      	beq.n	8007144 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007140:	2301      	movs	r3, #1
 8007142:	e000      	b.n	8007146 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007144:	2300      	movs	r3, #0
}
 8007146:	4618      	mov	r0, r3
 8007148:	3718      	adds	r7, #24
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop
 8007150:	40023800 	.word	0x40023800

08007154 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d101      	bne.n	8007168 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007164:	2301      	movs	r3, #1
 8007166:	e0cc      	b.n	8007302 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007168:	4b68      	ldr	r3, [pc, #416]	@ (800730c <HAL_RCC_ClockConfig+0x1b8>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f003 0307 	and.w	r3, r3, #7
 8007170:	683a      	ldr	r2, [r7, #0]
 8007172:	429a      	cmp	r2, r3
 8007174:	d90c      	bls.n	8007190 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007176:	4b65      	ldr	r3, [pc, #404]	@ (800730c <HAL_RCC_ClockConfig+0x1b8>)
 8007178:	683a      	ldr	r2, [r7, #0]
 800717a:	b2d2      	uxtb	r2, r2
 800717c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800717e:	4b63      	ldr	r3, [pc, #396]	@ (800730c <HAL_RCC_ClockConfig+0x1b8>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 0307 	and.w	r3, r3, #7
 8007186:	683a      	ldr	r2, [r7, #0]
 8007188:	429a      	cmp	r2, r3
 800718a:	d001      	beq.n	8007190 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	e0b8      	b.n	8007302 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f003 0302 	and.w	r3, r3, #2
 8007198:	2b00      	cmp	r3, #0
 800719a:	d020      	beq.n	80071de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f003 0304 	and.w	r3, r3, #4
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d005      	beq.n	80071b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80071a8:	4b59      	ldr	r3, [pc, #356]	@ (8007310 <HAL_RCC_ClockConfig+0x1bc>)
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	4a58      	ldr	r2, [pc, #352]	@ (8007310 <HAL_RCC_ClockConfig+0x1bc>)
 80071ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80071b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 0308 	and.w	r3, r3, #8
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d005      	beq.n	80071cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80071c0:	4b53      	ldr	r3, [pc, #332]	@ (8007310 <HAL_RCC_ClockConfig+0x1bc>)
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	4a52      	ldr	r2, [pc, #328]	@ (8007310 <HAL_RCC_ClockConfig+0x1bc>)
 80071c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80071ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071cc:	4b50      	ldr	r3, [pc, #320]	@ (8007310 <HAL_RCC_ClockConfig+0x1bc>)
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	494d      	ldr	r1, [pc, #308]	@ (8007310 <HAL_RCC_ClockConfig+0x1bc>)
 80071da:	4313      	orrs	r3, r2
 80071dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f003 0301 	and.w	r3, r3, #1
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d044      	beq.n	8007274 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d107      	bne.n	8007202 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071f2:	4b47      	ldr	r3, [pc, #284]	@ (8007310 <HAL_RCC_ClockConfig+0x1bc>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d119      	bne.n	8007232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071fe:	2301      	movs	r3, #1
 8007200:	e07f      	b.n	8007302 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	2b02      	cmp	r3, #2
 8007208:	d003      	beq.n	8007212 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800720e:	2b03      	cmp	r3, #3
 8007210:	d107      	bne.n	8007222 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007212:	4b3f      	ldr	r3, [pc, #252]	@ (8007310 <HAL_RCC_ClockConfig+0x1bc>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800721a:	2b00      	cmp	r3, #0
 800721c:	d109      	bne.n	8007232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	e06f      	b.n	8007302 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007222:	4b3b      	ldr	r3, [pc, #236]	@ (8007310 <HAL_RCC_ClockConfig+0x1bc>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f003 0302 	and.w	r3, r3, #2
 800722a:	2b00      	cmp	r3, #0
 800722c:	d101      	bne.n	8007232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	e067      	b.n	8007302 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007232:	4b37      	ldr	r3, [pc, #220]	@ (8007310 <HAL_RCC_ClockConfig+0x1bc>)
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	f023 0203 	bic.w	r2, r3, #3
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	4934      	ldr	r1, [pc, #208]	@ (8007310 <HAL_RCC_ClockConfig+0x1bc>)
 8007240:	4313      	orrs	r3, r2
 8007242:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007244:	f7fd f8f6 	bl	8004434 <HAL_GetTick>
 8007248:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800724a:	e00a      	b.n	8007262 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800724c:	f7fd f8f2 	bl	8004434 <HAL_GetTick>
 8007250:	4602      	mov	r2, r0
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	1ad3      	subs	r3, r2, r3
 8007256:	f241 3288 	movw	r2, #5000	@ 0x1388
 800725a:	4293      	cmp	r3, r2
 800725c:	d901      	bls.n	8007262 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800725e:	2303      	movs	r3, #3
 8007260:	e04f      	b.n	8007302 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007262:	4b2b      	ldr	r3, [pc, #172]	@ (8007310 <HAL_RCC_ClockConfig+0x1bc>)
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	f003 020c 	and.w	r2, r3, #12
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	429a      	cmp	r2, r3
 8007272:	d1eb      	bne.n	800724c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007274:	4b25      	ldr	r3, [pc, #148]	@ (800730c <HAL_RCC_ClockConfig+0x1b8>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f003 0307 	and.w	r3, r3, #7
 800727c:	683a      	ldr	r2, [r7, #0]
 800727e:	429a      	cmp	r2, r3
 8007280:	d20c      	bcs.n	800729c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007282:	4b22      	ldr	r3, [pc, #136]	@ (800730c <HAL_RCC_ClockConfig+0x1b8>)
 8007284:	683a      	ldr	r2, [r7, #0]
 8007286:	b2d2      	uxtb	r2, r2
 8007288:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800728a:	4b20      	ldr	r3, [pc, #128]	@ (800730c <HAL_RCC_ClockConfig+0x1b8>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f003 0307 	and.w	r3, r3, #7
 8007292:	683a      	ldr	r2, [r7, #0]
 8007294:	429a      	cmp	r2, r3
 8007296:	d001      	beq.n	800729c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	e032      	b.n	8007302 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f003 0304 	and.w	r3, r3, #4
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d008      	beq.n	80072ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80072a8:	4b19      	ldr	r3, [pc, #100]	@ (8007310 <HAL_RCC_ClockConfig+0x1bc>)
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	4916      	ldr	r1, [pc, #88]	@ (8007310 <HAL_RCC_ClockConfig+0x1bc>)
 80072b6:	4313      	orrs	r3, r2
 80072b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f003 0308 	and.w	r3, r3, #8
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d009      	beq.n	80072da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80072c6:	4b12      	ldr	r3, [pc, #72]	@ (8007310 <HAL_RCC_ClockConfig+0x1bc>)
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	691b      	ldr	r3, [r3, #16]
 80072d2:	00db      	lsls	r3, r3, #3
 80072d4:	490e      	ldr	r1, [pc, #56]	@ (8007310 <HAL_RCC_ClockConfig+0x1bc>)
 80072d6:	4313      	orrs	r3, r2
 80072d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80072da:	f000 f821 	bl	8007320 <HAL_RCC_GetSysClockFreq>
 80072de:	4602      	mov	r2, r0
 80072e0:	4b0b      	ldr	r3, [pc, #44]	@ (8007310 <HAL_RCC_ClockConfig+0x1bc>)
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	091b      	lsrs	r3, r3, #4
 80072e6:	f003 030f 	and.w	r3, r3, #15
 80072ea:	490a      	ldr	r1, [pc, #40]	@ (8007314 <HAL_RCC_ClockConfig+0x1c0>)
 80072ec:	5ccb      	ldrb	r3, [r1, r3]
 80072ee:	fa22 f303 	lsr.w	r3, r2, r3
 80072f2:	4a09      	ldr	r2, [pc, #36]	@ (8007318 <HAL_RCC_ClockConfig+0x1c4>)
 80072f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80072f6:	4b09      	ldr	r3, [pc, #36]	@ (800731c <HAL_RCC_ClockConfig+0x1c8>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4618      	mov	r0, r3
 80072fc:	f7fd f856 	bl	80043ac <HAL_InitTick>

  return HAL_OK;
 8007300:	2300      	movs	r3, #0
}
 8007302:	4618      	mov	r0, r3
 8007304:	3710      	adds	r7, #16
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	40023c00 	.word	0x40023c00
 8007310:	40023800 	.word	0x40023800
 8007314:	08014144 	.word	0x08014144
 8007318:	20000008 	.word	0x20000008
 800731c:	2000000c 	.word	0x2000000c

08007320 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007320:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007324:	b090      	sub	sp, #64	@ 0x40
 8007326:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007328:	2300      	movs	r3, #0
 800732a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800732c:	2300      	movs	r3, #0
 800732e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8007330:	2300      	movs	r3, #0
 8007332:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8007334:	2300      	movs	r3, #0
 8007336:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007338:	4b59      	ldr	r3, [pc, #356]	@ (80074a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	f003 030c 	and.w	r3, r3, #12
 8007340:	2b08      	cmp	r3, #8
 8007342:	d00d      	beq.n	8007360 <HAL_RCC_GetSysClockFreq+0x40>
 8007344:	2b08      	cmp	r3, #8
 8007346:	f200 80a1 	bhi.w	800748c <HAL_RCC_GetSysClockFreq+0x16c>
 800734a:	2b00      	cmp	r3, #0
 800734c:	d002      	beq.n	8007354 <HAL_RCC_GetSysClockFreq+0x34>
 800734e:	2b04      	cmp	r3, #4
 8007350:	d003      	beq.n	800735a <HAL_RCC_GetSysClockFreq+0x3a>
 8007352:	e09b      	b.n	800748c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007354:	4b53      	ldr	r3, [pc, #332]	@ (80074a4 <HAL_RCC_GetSysClockFreq+0x184>)
 8007356:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007358:	e09b      	b.n	8007492 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800735a:	4b53      	ldr	r3, [pc, #332]	@ (80074a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800735c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800735e:	e098      	b.n	8007492 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007360:	4b4f      	ldr	r3, [pc, #316]	@ (80074a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007368:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800736a:	4b4d      	ldr	r3, [pc, #308]	@ (80074a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007372:	2b00      	cmp	r3, #0
 8007374:	d028      	beq.n	80073c8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007376:	4b4a      	ldr	r3, [pc, #296]	@ (80074a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	099b      	lsrs	r3, r3, #6
 800737c:	2200      	movs	r2, #0
 800737e:	623b      	str	r3, [r7, #32]
 8007380:	627a      	str	r2, [r7, #36]	@ 0x24
 8007382:	6a3b      	ldr	r3, [r7, #32]
 8007384:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007388:	2100      	movs	r1, #0
 800738a:	4b47      	ldr	r3, [pc, #284]	@ (80074a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800738c:	fb03 f201 	mul.w	r2, r3, r1
 8007390:	2300      	movs	r3, #0
 8007392:	fb00 f303 	mul.w	r3, r0, r3
 8007396:	4413      	add	r3, r2
 8007398:	4a43      	ldr	r2, [pc, #268]	@ (80074a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800739a:	fba0 1202 	umull	r1, r2, r0, r2
 800739e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80073a0:	460a      	mov	r2, r1
 80073a2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80073a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073a6:	4413      	add	r3, r2
 80073a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80073aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073ac:	2200      	movs	r2, #0
 80073ae:	61bb      	str	r3, [r7, #24]
 80073b0:	61fa      	str	r2, [r7, #28]
 80073b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80073b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80073ba:	f7f9 fc6d 	bl	8000c98 <__aeabi_uldivmod>
 80073be:	4602      	mov	r2, r0
 80073c0:	460b      	mov	r3, r1
 80073c2:	4613      	mov	r3, r2
 80073c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073c6:	e053      	b.n	8007470 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80073c8:	4b35      	ldr	r3, [pc, #212]	@ (80074a0 <HAL_RCC_GetSysClockFreq+0x180>)
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	099b      	lsrs	r3, r3, #6
 80073ce:	2200      	movs	r2, #0
 80073d0:	613b      	str	r3, [r7, #16]
 80073d2:	617a      	str	r2, [r7, #20]
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80073da:	f04f 0b00 	mov.w	fp, #0
 80073de:	4652      	mov	r2, sl
 80073e0:	465b      	mov	r3, fp
 80073e2:	f04f 0000 	mov.w	r0, #0
 80073e6:	f04f 0100 	mov.w	r1, #0
 80073ea:	0159      	lsls	r1, r3, #5
 80073ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80073f0:	0150      	lsls	r0, r2, #5
 80073f2:	4602      	mov	r2, r0
 80073f4:	460b      	mov	r3, r1
 80073f6:	ebb2 080a 	subs.w	r8, r2, sl
 80073fa:	eb63 090b 	sbc.w	r9, r3, fp
 80073fe:	f04f 0200 	mov.w	r2, #0
 8007402:	f04f 0300 	mov.w	r3, #0
 8007406:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800740a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800740e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007412:	ebb2 0408 	subs.w	r4, r2, r8
 8007416:	eb63 0509 	sbc.w	r5, r3, r9
 800741a:	f04f 0200 	mov.w	r2, #0
 800741e:	f04f 0300 	mov.w	r3, #0
 8007422:	00eb      	lsls	r3, r5, #3
 8007424:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007428:	00e2      	lsls	r2, r4, #3
 800742a:	4614      	mov	r4, r2
 800742c:	461d      	mov	r5, r3
 800742e:	eb14 030a 	adds.w	r3, r4, sl
 8007432:	603b      	str	r3, [r7, #0]
 8007434:	eb45 030b 	adc.w	r3, r5, fp
 8007438:	607b      	str	r3, [r7, #4]
 800743a:	f04f 0200 	mov.w	r2, #0
 800743e:	f04f 0300 	mov.w	r3, #0
 8007442:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007446:	4629      	mov	r1, r5
 8007448:	028b      	lsls	r3, r1, #10
 800744a:	4621      	mov	r1, r4
 800744c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007450:	4621      	mov	r1, r4
 8007452:	028a      	lsls	r2, r1, #10
 8007454:	4610      	mov	r0, r2
 8007456:	4619      	mov	r1, r3
 8007458:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800745a:	2200      	movs	r2, #0
 800745c:	60bb      	str	r3, [r7, #8]
 800745e:	60fa      	str	r2, [r7, #12]
 8007460:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007464:	f7f9 fc18 	bl	8000c98 <__aeabi_uldivmod>
 8007468:	4602      	mov	r2, r0
 800746a:	460b      	mov	r3, r1
 800746c:	4613      	mov	r3, r2
 800746e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007470:	4b0b      	ldr	r3, [pc, #44]	@ (80074a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	0c1b      	lsrs	r3, r3, #16
 8007476:	f003 0303 	and.w	r3, r3, #3
 800747a:	3301      	adds	r3, #1
 800747c:	005b      	lsls	r3, r3, #1
 800747e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8007480:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007484:	fbb2 f3f3 	udiv	r3, r2, r3
 8007488:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800748a:	e002      	b.n	8007492 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800748c:	4b05      	ldr	r3, [pc, #20]	@ (80074a4 <HAL_RCC_GetSysClockFreq+0x184>)
 800748e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007490:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007494:	4618      	mov	r0, r3
 8007496:	3740      	adds	r7, #64	@ 0x40
 8007498:	46bd      	mov	sp, r7
 800749a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800749e:	bf00      	nop
 80074a0:	40023800 	.word	0x40023800
 80074a4:	00f42400 	.word	0x00f42400
 80074a8:	017d7840 	.word	0x017d7840

080074ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80074ac:	b480      	push	{r7}
 80074ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80074b0:	4b03      	ldr	r3, [pc, #12]	@ (80074c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80074b2:	681b      	ldr	r3, [r3, #0]
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr
 80074be:	bf00      	nop
 80074c0:	20000008 	.word	0x20000008

080074c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80074c8:	f7ff fff0 	bl	80074ac <HAL_RCC_GetHCLKFreq>
 80074cc:	4602      	mov	r2, r0
 80074ce:	4b05      	ldr	r3, [pc, #20]	@ (80074e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	0a9b      	lsrs	r3, r3, #10
 80074d4:	f003 0307 	and.w	r3, r3, #7
 80074d8:	4903      	ldr	r1, [pc, #12]	@ (80074e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80074da:	5ccb      	ldrb	r3, [r1, r3]
 80074dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	bd80      	pop	{r7, pc}
 80074e4:	40023800 	.word	0x40023800
 80074e8:	08014154 	.word	0x08014154

080074ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80074f0:	f7ff ffdc 	bl	80074ac <HAL_RCC_GetHCLKFreq>
 80074f4:	4602      	mov	r2, r0
 80074f6:	4b05      	ldr	r3, [pc, #20]	@ (800750c <HAL_RCC_GetPCLK2Freq+0x20>)
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	0b5b      	lsrs	r3, r3, #13
 80074fc:	f003 0307 	and.w	r3, r3, #7
 8007500:	4903      	ldr	r1, [pc, #12]	@ (8007510 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007502:	5ccb      	ldrb	r3, [r1, r3]
 8007504:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007508:	4618      	mov	r0, r3
 800750a:	bd80      	pop	{r7, pc}
 800750c:	40023800 	.word	0x40023800
 8007510:	08014154 	.word	0x08014154

08007514 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b082      	sub	sp, #8
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d101      	bne.n	8007526 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	e022      	b.n	800756c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800752c:	b2db      	uxtb	r3, r3
 800752e:	2b00      	cmp	r3, #0
 8007530:	d105      	bne.n	800753e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f7fc fb43 	bl	8003bc4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2203      	movs	r2, #3
 8007542:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 f814 	bl	8007574 <HAL_SD_InitCard>
 800754c:	4603      	mov	r3, r0
 800754e:	2b00      	cmp	r3, #0
 8007550:	d001      	beq.n	8007556 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007552:	2301      	movs	r3, #1
 8007554:	e00a      	b.n	800756c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2201      	movs	r2, #1
 8007566:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800756a:	2300      	movs	r3, #0
}
 800756c:	4618      	mov	r0, r3
 800756e:	3708      	adds	r7, #8
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007574:	b5b0      	push	{r4, r5, r7, lr}
 8007576:	b08e      	sub	sp, #56	@ 0x38
 8007578:	af04      	add	r7, sp, #16
 800757a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800757c:	2300      	movs	r3, #0
 800757e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8007580:	2300      	movs	r3, #0
 8007582:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007584:	2300      	movs	r3, #0
 8007586:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8007588:	2300      	movs	r3, #0
 800758a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800758c:	2300      	movs	r3, #0
 800758e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8007590:	2376      	movs	r3, #118	@ 0x76
 8007592:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681d      	ldr	r5, [r3, #0]
 8007598:	466c      	mov	r4, sp
 800759a:	f107 0314 	add.w	r3, r7, #20
 800759e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80075a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80075a6:	f107 0308 	add.w	r3, r7, #8
 80075aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80075ac:	4628      	mov	r0, r5
 80075ae:	f003 f85b 	bl	800a668 <SDIO_Init>
 80075b2:	4603      	mov	r3, r0
 80075b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 80075b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d001      	beq.n	80075c4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80075c0:	2301      	movs	r3, #1
 80075c2:	e04f      	b.n	8007664 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80075c4:	4b29      	ldr	r3, [pc, #164]	@ (800766c <HAL_SD_InitCard+0xf8>)
 80075c6:	2200      	movs	r2, #0
 80075c8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4618      	mov	r0, r3
 80075d0:	f003 f893 	bl	800a6fa <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80075d4:	4b25      	ldr	r3, [pc, #148]	@ (800766c <HAL_SD_InitCard+0xf8>)
 80075d6:	2201      	movs	r2, #1
 80075d8:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80075da:	2002      	movs	r0, #2
 80075dc:	f7fc ff36 	bl	800444c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f001 f805 	bl	80085f0 <SD_PowerON>
 80075e6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80075e8:	6a3b      	ldr	r3, [r7, #32]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d00b      	beq.n	8007606 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2201      	movs	r2, #1
 80075f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80075fa:	6a3b      	ldr	r3, [r7, #32]
 80075fc:	431a      	orrs	r2, r3
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	e02e      	b.n	8007664 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 ff24 	bl	8008454 <SD_InitCard>
 800760c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800760e:	6a3b      	ldr	r3, [r7, #32]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d00b      	beq.n	800762c <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2201      	movs	r2, #1
 8007618:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007620:	6a3b      	ldr	r3, [r7, #32]
 8007622:	431a      	orrs	r2, r3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007628:	2301      	movs	r3, #1
 800762a:	e01b      	b.n	8007664 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007634:	4618      	mov	r0, r3
 8007636:	f003 f8f2 	bl	800a81e <SDMMC_CmdBlockLength>
 800763a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800763c:	6a3b      	ldr	r3, [r7, #32]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d00f      	beq.n	8007662 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a0a      	ldr	r2, [pc, #40]	@ (8007670 <HAL_SD_InitCard+0xfc>)
 8007648:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800764e:	6a3b      	ldr	r3, [r7, #32]
 8007650:	431a      	orrs	r2, r3
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2201      	movs	r2, #1
 800765a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	e000      	b.n	8007664 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8007662:	2300      	movs	r3, #0
}
 8007664:	4618      	mov	r0, r3
 8007666:	3728      	adds	r7, #40	@ 0x28
 8007668:	46bd      	mov	sp, r7
 800766a:	bdb0      	pop	{r4, r5, r7, pc}
 800766c:	422580a0 	.word	0x422580a0
 8007670:	004005ff 	.word	0x004005ff

08007674 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b08c      	sub	sp, #48	@ 0x30
 8007678:	af00      	add	r7, sp, #0
 800767a:	60f8      	str	r0, [r7, #12]
 800767c:	60b9      	str	r1, [r7, #8]
 800767e:	607a      	str	r2, [r7, #4]
 8007680:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d107      	bne.n	800769c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007690:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007698:	2301      	movs	r3, #1
 800769a:	e0c0      	b.n	800781e <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80076a2:	b2db      	uxtb	r3, r3
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	f040 80b9 	bne.w	800781c <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2200      	movs	r2, #0
 80076ae:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80076b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	441a      	add	r2, r3
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d907      	bls.n	80076ce <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076c2:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80076ca:	2301      	movs	r3, #1
 80076cc:	e0a7      	b.n	800781e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2203      	movs	r2, #3
 80076d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	2200      	movs	r2, #0
 80076dc:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076e4:	68fa      	ldr	r2, [r7, #12]
 80076e6:	6812      	ldr	r2, [r2, #0]
 80076e8:	f443 734a 	orr.w	r3, r3, #808	@ 0x328
 80076ec:	f043 0302 	orr.w	r3, r3, #2
 80076f0:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076f6:	4a4c      	ldr	r2, [pc, #304]	@ (8007828 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 80076f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076fe:	4a4b      	ldr	r2, [pc, #300]	@ (800782c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8007700:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007706:	2200      	movs	r2, #0
 8007708:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800770e:	2200      	movs	r2, #0
 8007710:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007722:	689a      	ldr	r2, [r3, #8]
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	430a      	orrs	r2, r1
 800772c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	3380      	adds	r3, #128	@ 0x80
 8007738:	4619      	mov	r1, r3
 800773a:	68ba      	ldr	r2, [r7, #8]
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	025b      	lsls	r3, r3, #9
 8007740:	089b      	lsrs	r3, r3, #2
 8007742:	f7fd fad9 	bl	8004cf8 <HAL_DMA_Start_IT>
 8007746:	4603      	mov	r3, r0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d017      	beq.n	800777c <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 800775a:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a33      	ldr	r2, [pc, #204]	@ (8007830 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8007762:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007768:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2201      	movs	r2, #1
 8007774:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8007778:	2301      	movs	r3, #1
 800777a:	e050      	b.n	800781e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800777c:	4b2d      	ldr	r3, [pc, #180]	@ (8007834 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800777e:	2201      	movs	r2, #1
 8007780:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007786:	2b01      	cmp	r3, #1
 8007788:	d002      	beq.n	8007790 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 800778a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800778c:	025b      	lsls	r3, r3, #9
 800778e:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007790:	f04f 33ff 	mov.w	r3, #4294967295
 8007794:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	025b      	lsls	r3, r3, #9
 800779a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800779c:	2390      	movs	r3, #144	@ 0x90
 800779e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80077a0:	2302      	movs	r3, #2
 80077a2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80077a4:	2300      	movs	r3, #0
 80077a6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80077a8:	2301      	movs	r3, #1
 80077aa:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f107 0210 	add.w	r2, r7, #16
 80077b4:	4611      	mov	r1, r2
 80077b6:	4618      	mov	r0, r3
 80077b8:	f003 f805 	bl	800a7c6 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d90a      	bls.n	80077d8 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2282      	movs	r2, #130	@ 0x82
 80077c6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80077ce:	4618      	mov	r0, r3
 80077d0:	f003 f869 	bl	800a8a6 <SDMMC_CmdReadMultiBlock>
 80077d4:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80077d6:	e009      	b.n	80077ec <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2281      	movs	r2, #129	@ 0x81
 80077dc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80077e4:	4618      	mov	r0, r3
 80077e6:	f003 f83c 	bl	800a862 <SDMMC_CmdReadSingleBlock>
 80077ea:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80077ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d012      	beq.n	8007818 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a0e      	ldr	r2, [pc, #56]	@ (8007830 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80077f8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80077fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007800:	431a      	orrs	r2, r3
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2201      	movs	r2, #1
 800780a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2200      	movs	r2, #0
 8007812:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8007814:	2301      	movs	r3, #1
 8007816:	e002      	b.n	800781e <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8007818:	2300      	movs	r3, #0
 800781a:	e000      	b.n	800781e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 800781c:	2302      	movs	r3, #2
  }
}
 800781e:	4618      	mov	r0, r3
 8007820:	3730      	adds	r7, #48	@ 0x30
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
 8007826:	bf00      	nop
 8007828:	08008263 	.word	0x08008263
 800782c:	080082d5 	.word	0x080082d5
 8007830:	004005ff 	.word	0x004005ff
 8007834:	4225858c 	.word	0x4225858c

08007838 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b08c      	sub	sp, #48	@ 0x30
 800783c:	af00      	add	r7, sp, #0
 800783e:	60f8      	str	r0, [r7, #12]
 8007840:	60b9      	str	r1, [r7, #8]
 8007842:	607a      	str	r2, [r7, #4]
 8007844:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d107      	bne.n	8007860 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007854:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	e0c5      	b.n	80079ec <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007866:	b2db      	uxtb	r3, r3
 8007868:	2b01      	cmp	r3, #1
 800786a:	f040 80be 	bne.w	80079ea <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2200      	movs	r2, #0
 8007872:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007874:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	441a      	add	r2, r3
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800787e:	429a      	cmp	r2, r3
 8007880:	d907      	bls.n	8007892 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007886:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	e0ac      	b.n	80079ec <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2203      	movs	r2, #3
 8007896:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	2200      	movs	r2, #0
 80078a0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078a8:	68fa      	ldr	r2, [r7, #12]
 80078aa:	6812      	ldr	r2, [r2, #0]
 80078ac:	f443 7306 	orr.w	r3, r3, #536	@ 0x218
 80078b0:	f043 0302 	orr.w	r3, r3, #2
 80078b4:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078ba:	4a4e      	ldr	r2, [pc, #312]	@ (80079f4 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80078bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078c2:	4a4d      	ldr	r2, [pc, #308]	@ (80079f8 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80078c4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078ca:	2200      	movs	r2, #0
 80078cc:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d002      	beq.n	80078dc <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 80078d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078d8:	025b      	lsls	r3, r3, #9
 80078da:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d90a      	bls.n	80078f8 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	22a0      	movs	r2, #160	@ 0xa0
 80078e6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80078ee:	4618      	mov	r0, r3
 80078f0:	f003 f81d 	bl	800a92e <SDMMC_CmdWriteMultiBlock>
 80078f4:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80078f6:	e009      	b.n	800790c <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2290      	movs	r2, #144	@ 0x90
 80078fc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007904:	4618      	mov	r0, r3
 8007906:	f002 fff0 	bl	800a8ea <SDMMC_CmdWriteSingleBlock>
 800790a:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800790c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800790e:	2b00      	cmp	r3, #0
 8007910:	d012      	beq.n	8007938 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a39      	ldr	r2, [pc, #228]	@ (80079fc <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8007918:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800791e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007920:	431a      	orrs	r2, r3
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2201      	movs	r2, #1
 800792a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2200      	movs	r2, #0
 8007932:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007934:	2301      	movs	r3, #1
 8007936:	e059      	b.n	80079ec <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8007938:	4b31      	ldr	r3, [pc, #196]	@ (8007a00 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800793a:	2201      	movs	r2, #1
 800793c:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007942:	2240      	movs	r2, #64	@ 0x40
 8007944:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007956:	689a      	ldr	r2, [r3, #8]
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	430a      	orrs	r2, r1
 8007960:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007966:	68b9      	ldr	r1, [r7, #8]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	3380      	adds	r3, #128	@ 0x80
 800796e:	461a      	mov	r2, r3
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	025b      	lsls	r3, r3, #9
 8007974:	089b      	lsrs	r3, r3, #2
 8007976:	f7fd f9bf 	bl	8004cf8 <HAL_DMA_Start_IT>
 800797a:	4603      	mov	r3, r0
 800797c:	2b00      	cmp	r3, #0
 800797e:	d01c      	beq.n	80079ba <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007986:	68fa      	ldr	r2, [r7, #12]
 8007988:	6812      	ldr	r2, [r2, #0]
 800798a:	f423 7306 	bic.w	r3, r3, #536	@ 0x218
 800798e:	f023 0302 	bic.w	r3, r3, #2
 8007992:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a18      	ldr	r2, [pc, #96]	@ (80079fc <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800799a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079a0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2201      	movs	r2, #1
 80079ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2200      	movs	r2, #0
 80079b4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80079b6:	2301      	movs	r3, #1
 80079b8:	e018      	b.n	80079ec <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80079ba:	f04f 33ff 	mov.w	r3, #4294967295
 80079be:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	025b      	lsls	r3, r3, #9
 80079c4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80079c6:	2390      	movs	r3, #144	@ 0x90
 80079c8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80079ca:	2300      	movs	r3, #0
 80079cc:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80079ce:	2300      	movs	r3, #0
 80079d0:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80079d2:	2301      	movs	r3, #1
 80079d4:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f107 0210 	add.w	r2, r7, #16
 80079de:	4611      	mov	r1, r2
 80079e0:	4618      	mov	r0, r3
 80079e2:	f002 fef0 	bl	800a7c6 <SDIO_ConfigData>

      return HAL_OK;
 80079e6:	2300      	movs	r3, #0
 80079e8:	e000      	b.n	80079ec <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 80079ea:	2302      	movs	r3, #2
  }
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3730      	adds	r7, #48	@ 0x30
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}
 80079f4:	08008239 	.word	0x08008239
 80079f8:	080082d5 	.word	0x080082d5
 80079fc:	004005ff 	.word	0x004005ff
 8007a00:	4225858c 	.word	0x4225858c

08007a04 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b084      	sub	sp, #16
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a10:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d008      	beq.n	8007a32 <HAL_SD_IRQHandler+0x2e>
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f003 0308 	and.w	r3, r3, #8
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d003      	beq.n	8007a32 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f001 f806 	bl	8008a3c <SD_Read_IT>
 8007a30:	e165      	b.n	8007cfe <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	f000 808f 	beq.w	8007b60 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007a4a:	639a      	str	r2, [r3, #56]	@ 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a52:	687a      	ldr	r2, [r7, #4]
 8007a54:	6812      	ldr	r2, [r2, #0]
 8007a56:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 8007a5a:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8007a5e:	63d3      	str	r3, [r2, #60]	@ 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f022 0201 	bic.w	r2, r2, #1
 8007a6e:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f003 0308 	and.w	r3, r3, #8
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d039      	beq.n	8007aee <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	f003 0302 	and.w	r3, r3, #2
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d104      	bne.n	8007a8e <HAL_SD_IRQHandler+0x8a>
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f003 0320 	and.w	r3, r3, #32
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d011      	beq.n	8007ab2 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4618      	mov	r0, r3
 8007a94:	f002 ff6e 	bl	800a974 <SDMMC_CmdStopTransfer>
 8007a98:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d008      	beq.n	8007ab2 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	431a      	orrs	r2, r3
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 f92f 	bl	8007d10 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f240 523a 	movw	r2, #1338	@ 0x53a
 8007aba:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2201      	movs	r2, #1
 8007ac0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	f003 0301 	and.w	r3, r3, #1
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d104      	bne.n	8007ade <HAL_SD_IRQHandler+0xda>
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f003 0302 	and.w	r3, r3, #2
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d003      	beq.n	8007ae6 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f003 fbdc 	bl	800b29c <HAL_SD_RxCpltCallback>
 8007ae4:	e10b      	b.n	8007cfe <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f003 fbce 	bl	800b288 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007aec:	e107      	b.n	8007cfe <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	f000 8102 	beq.w	8007cfe <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	f003 0320 	and.w	r3, r3, #32
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d011      	beq.n	8007b28 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f002 ff33 	bl	800a974 <SDMMC_CmdStopTransfer>
 8007b0e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d008      	beq.n	8007b28 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	431a      	orrs	r2, r3
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 f8f4 	bl	8007d10 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f003 0301 	and.w	r3, r3, #1
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	f040 80e5 	bne.w	8007cfe <HAL_SD_IRQHandler+0x2fa>
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f003 0302 	and.w	r3, r3, #2
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	f040 80df 	bne.w	8007cfe <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f022 0208 	bic.w	r2, r2, #8
 8007b4e:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2201      	movs	r2, #1
 8007b54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f003 fb95 	bl	800b288 <HAL_SD_TxCpltCallback>
}
 8007b5e:	e0ce      	b.n	8007cfe <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d008      	beq.n	8007b80 <HAL_SD_IRQHandler+0x17c>
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f003 0308 	and.w	r3, r3, #8
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d003      	beq.n	8007b80 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 ffb0 	bl	8008ade <SD_Write_IT>
 8007b7e:	e0be      	b.n	8007cfe <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b86:	f240 233a 	movw	r3, #570	@ 0x23a
 8007b8a:	4013      	ands	r3, r2
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	f000 80b6 	beq.w	8007cfe <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b98:	f003 0302 	and.w	r3, r3, #2
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d005      	beq.n	8007bac <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ba4:	f043 0202 	orr.w	r2, r3, #2
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bb2:	f003 0308 	and.w	r3, r3, #8
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d005      	beq.n	8007bc6 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bbe:	f043 0208 	orr.w	r2, r3, #8
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bcc:	f003 0320 	and.w	r3, r3, #32
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d005      	beq.n	8007be0 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bd8:	f043 0220 	orr.w	r2, r3, #32
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007be6:	f003 0310 	and.w	r3, r3, #16
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d005      	beq.n	8007bfa <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bf2:	f043 0210 	orr.w	r2, r3, #16
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d005      	beq.n	8007c14 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c0c:	f043 0208 	orr.w	r2, r3, #8
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f240 723a 	movw	r2, #1850	@ 0x73a
 8007c1c:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	6812      	ldr	r2, [r2, #0]
 8007c28:	f423 734e 	bic.w	r3, r3, #824	@ 0x338
 8007c2c:	f023 0302 	bic.w	r3, r3, #2
 8007c30:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4618      	mov	r0, r3
 8007c38:	f002 fe9c 	bl	800a974 <SDMMC_CmdStopTransfer>
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c42:	431a      	orrs	r2, r3
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f003 0308 	and.w	r3, r3, #8
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d00a      	beq.n	8007c68 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2201      	movs	r2, #1
 8007c56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f000 f855 	bl	8007d10 <HAL_SD_ErrorCallback>
}
 8007c66:	e04a      	b.n	8007cfe <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d045      	beq.n	8007cfe <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	f003 0310 	and.w	r3, r3, #16
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d104      	bne.n	8007c86 <HAL_SD_IRQHandler+0x282>
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f003 0320 	and.w	r3, r3, #32
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d011      	beq.n	8007caa <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c8a:	4a1f      	ldr	r2, [pc, #124]	@ (8007d08 <HAL_SD_IRQHandler+0x304>)
 8007c8c:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c92:	4618      	mov	r0, r3
 8007c94:	f7fd f8f8 	bl	8004e88 <HAL_DMA_Abort_IT>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d02f      	beq.n	8007cfe <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f000 fb68 	bl	8008378 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007ca8:	e029      	b.n	8007cfe <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f003 0301 	and.w	r3, r3, #1
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d104      	bne.n	8007cbe <HAL_SD_IRQHandler+0x2ba>
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f003 0302 	and.w	r3, r3, #2
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d011      	beq.n	8007ce2 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cc2:	4a12      	ldr	r2, [pc, #72]	@ (8007d0c <HAL_SD_IRQHandler+0x308>)
 8007cc4:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f7fd f8dc 	bl	8004e88 <HAL_DMA_Abort_IT>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d013      	beq.n	8007cfe <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f000 fb83 	bl	80083e6 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007ce0:	e00d      	b.n	8007cfe <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2201      	movs	r2, #1
 8007cec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f003 fabc 	bl	800b274 <HAL_SD_AbortCallback>
}
 8007cfc:	e7ff      	b.n	8007cfe <HAL_SD_IRQHandler+0x2fa>
 8007cfe:	bf00      	nop
 8007d00:	3710      	adds	r7, #16
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop
 8007d08:	08008379 	.word	0x08008379
 8007d0c:	080083e7 	.word	0x080083e7

08007d10 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b083      	sub	sp, #12
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007d18:	bf00      	nop
 8007d1a:	370c      	adds	r7, #12
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d22:	4770      	bx	lr

08007d24 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b083      	sub	sp, #12
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d32:	0f9b      	lsrs	r3, r3, #30
 8007d34:	b2da      	uxtb	r2, r3
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d3e:	0e9b      	lsrs	r3, r3, #26
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	f003 030f 	and.w	r3, r3, #15
 8007d46:	b2da      	uxtb	r2, r3
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d50:	0e1b      	lsrs	r3, r3, #24
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	f003 0303 	and.w	r3, r3, #3
 8007d58:	b2da      	uxtb	r2, r3
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d62:	0c1b      	lsrs	r3, r3, #16
 8007d64:	b2da      	uxtb	r2, r3
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d6e:	0a1b      	lsrs	r3, r3, #8
 8007d70:	b2da      	uxtb	r2, r3
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d7a:	b2da      	uxtb	r2, r3
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007d84:	0d1b      	lsrs	r3, r3, #20
 8007d86:	b29a      	uxth	r2, r3
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007d90:	0c1b      	lsrs	r3, r3, #16
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	f003 030f 	and.w	r3, r3, #15
 8007d98:	b2da      	uxtb	r2, r3
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007da2:	0bdb      	lsrs	r3, r3, #15
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	f003 0301 	and.w	r3, r3, #1
 8007daa:	b2da      	uxtb	r2, r3
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007db4:	0b9b      	lsrs	r3, r3, #14
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	f003 0301 	and.w	r3, r3, #1
 8007dbc:	b2da      	uxtb	r2, r3
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007dc6:	0b5b      	lsrs	r3, r3, #13
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	f003 0301 	and.w	r3, r3, #1
 8007dce:	b2da      	uxtb	r2, r3
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007dd8:	0b1b      	lsrs	r3, r3, #12
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	f003 0301 	and.w	r3, r3, #1
 8007de0:	b2da      	uxtb	r2, r3
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	2200      	movs	r2, #0
 8007dea:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d163      	bne.n	8007ebc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007df8:	009a      	lsls	r2, r3, #2
 8007dfa:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007dfe:	4013      	ands	r3, r2
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8007e04:	0f92      	lsrs	r2, r2, #30
 8007e06:	431a      	orrs	r2, r3
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e10:	0edb      	lsrs	r3, r3, #27
 8007e12:	b2db      	uxtb	r3, r3
 8007e14:	f003 0307 	and.w	r3, r3, #7
 8007e18:	b2da      	uxtb	r2, r3
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e22:	0e1b      	lsrs	r3, r3, #24
 8007e24:	b2db      	uxtb	r3, r3
 8007e26:	f003 0307 	and.w	r3, r3, #7
 8007e2a:	b2da      	uxtb	r2, r3
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e34:	0d5b      	lsrs	r3, r3, #21
 8007e36:	b2db      	uxtb	r3, r3
 8007e38:	f003 0307 	and.w	r3, r3, #7
 8007e3c:	b2da      	uxtb	r2, r3
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e46:	0c9b      	lsrs	r3, r3, #18
 8007e48:	b2db      	uxtb	r3, r3
 8007e4a:	f003 0307 	and.w	r3, r3, #7
 8007e4e:	b2da      	uxtb	r2, r3
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e58:	0bdb      	lsrs	r3, r3, #15
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	f003 0307 	and.w	r3, r3, #7
 8007e60:	b2da      	uxtb	r2, r3
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	691b      	ldr	r3, [r3, #16]
 8007e6a:	1c5a      	adds	r2, r3, #1
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	7e1b      	ldrb	r3, [r3, #24]
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	f003 0307 	and.w	r3, r3, #7
 8007e7a:	3302      	adds	r3, #2
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e82:	687a      	ldr	r2, [r7, #4]
 8007e84:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8007e86:	fb03 f202 	mul.w	r2, r3, r2
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	7a1b      	ldrb	r3, [r3, #8]
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	f003 030f 	and.w	r3, r3, #15
 8007e98:	2201      	movs	r2, #1
 8007e9a:	409a      	lsls	r2, r3
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8007ea8:	0a52      	lsrs	r2, r2, #9
 8007eaa:	fb03 f202 	mul.w	r2, r3, r2
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007eb8:	661a      	str	r2, [r3, #96]	@ 0x60
 8007eba:	e031      	b.n	8007f20 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d11d      	bne.n	8007f00 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007ec8:	041b      	lsls	r3, r3, #16
 8007eca:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ed2:	0c1b      	lsrs	r3, r3, #16
 8007ed4:	431a      	orrs	r2, r3
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	691b      	ldr	r3, [r3, #16]
 8007ede:	3301      	adds	r3, #1
 8007ee0:	029a      	lsls	r2, r3, #10
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007ef4:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	661a      	str	r2, [r3, #96]	@ 0x60
 8007efe:	e00f      	b.n	8007f20 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a58      	ldr	r2, [pc, #352]	@ (8008068 <HAL_SD_GetCardCSD+0x344>)
 8007f06:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f0c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2201      	movs	r2, #1
 8007f18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	e09d      	b.n	800805c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f24:	0b9b      	lsrs	r3, r3, #14
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	f003 0301 	and.w	r3, r3, #1
 8007f2c:	b2da      	uxtb	r2, r3
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f36:	09db      	lsrs	r3, r3, #7
 8007f38:	b2db      	uxtb	r3, r3
 8007f3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f3e:	b2da      	uxtb	r2, r3
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f4e:	b2da      	uxtb	r2, r3
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f58:	0fdb      	lsrs	r3, r3, #31
 8007f5a:	b2da      	uxtb	r2, r3
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f64:	0f5b      	lsrs	r3, r3, #29
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	f003 0303 	and.w	r3, r3, #3
 8007f6c:	b2da      	uxtb	r2, r3
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f76:	0e9b      	lsrs	r3, r3, #26
 8007f78:	b2db      	uxtb	r3, r3
 8007f7a:	f003 0307 	and.w	r3, r3, #7
 8007f7e:	b2da      	uxtb	r2, r3
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f88:	0d9b      	lsrs	r3, r3, #22
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	f003 030f 	and.w	r3, r3, #15
 8007f90:	b2da      	uxtb	r2, r3
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f9a:	0d5b      	lsrs	r3, r3, #21
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	f003 0301 	and.w	r3, r3, #1
 8007fa2:	b2da      	uxtb	r2, r3
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	2200      	movs	r2, #0
 8007fae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fb6:	0c1b      	lsrs	r3, r3, #16
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	f003 0301 	and.w	r3, r3, #1
 8007fbe:	b2da      	uxtb	r2, r3
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fca:	0bdb      	lsrs	r3, r3, #15
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	f003 0301 	and.w	r3, r3, #1
 8007fd2:	b2da      	uxtb	r2, r3
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fde:	0b9b      	lsrs	r3, r3, #14
 8007fe0:	b2db      	uxtb	r3, r3
 8007fe2:	f003 0301 	and.w	r3, r3, #1
 8007fe6:	b2da      	uxtb	r2, r3
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ff2:	0b5b      	lsrs	r3, r3, #13
 8007ff4:	b2db      	uxtb	r3, r3
 8007ff6:	f003 0301 	and.w	r3, r3, #1
 8007ffa:	b2da      	uxtb	r2, r3
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008006:	0b1b      	lsrs	r3, r3, #12
 8008008:	b2db      	uxtb	r3, r3
 800800a:	f003 0301 	and.w	r3, r3, #1
 800800e:	b2da      	uxtb	r2, r3
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800801a:	0a9b      	lsrs	r3, r3, #10
 800801c:	b2db      	uxtb	r3, r3
 800801e:	f003 0303 	and.w	r3, r3, #3
 8008022:	b2da      	uxtb	r2, r3
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800802e:	0a1b      	lsrs	r3, r3, #8
 8008030:	b2db      	uxtb	r3, r3
 8008032:	f003 0303 	and.w	r3, r3, #3
 8008036:	b2da      	uxtb	r2, r3
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008042:	085b      	lsrs	r3, r3, #1
 8008044:	b2db      	uxtb	r3, r3
 8008046:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800804a:	b2da      	uxtb	r2, r3
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	2201      	movs	r2, #1
 8008056:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800805a:	2300      	movs	r3, #0
}
 800805c:	4618      	mov	r0, r3
 800805e:	370c      	adds	r7, #12
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr
 8008068:	004005ff 	.word	0x004005ff

0800806c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80080b6:	2300      	movs	r3, #0
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	370c      	adds	r7, #12
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr

080080c4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80080c4:	b5b0      	push	{r4, r5, r7, lr}
 80080c6:	b08e      	sub	sp, #56	@ 0x38
 80080c8:	af04      	add	r7, sp, #16
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80080ce:	2300      	movs	r3, #0
 80080d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2203      	movs	r2, #3
 80080d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080e0:	2b03      	cmp	r3, #3
 80080e2:	d02e      	beq.n	8008142 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080ea:	d106      	bne.n	80080fa <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080f0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	639a      	str	r2, [r3, #56]	@ 0x38
 80080f8:	e029      	b.n	800814e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008100:	d10a      	bne.n	8008118 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 fb2a 	bl	800875c <SD_WideBus_Enable>
 8008108:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800810e:	6a3b      	ldr	r3, [r7, #32]
 8008110:	431a      	orrs	r2, r3
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	639a      	str	r2, [r3, #56]	@ 0x38
 8008116:	e01a      	b.n	800814e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d10a      	bne.n	8008134 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 fb67 	bl	80087f2 <SD_WideBus_Disable>
 8008124:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800812a:	6a3b      	ldr	r3, [r7, #32]
 800812c:	431a      	orrs	r2, r3
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	639a      	str	r2, [r3, #56]	@ 0x38
 8008132:	e00c      	b.n	800814e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008138:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	639a      	str	r2, [r3, #56]	@ 0x38
 8008140:	e005      	b.n	800814e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008146:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008152:	2b00      	cmp	r3, #0
 8008154:	d00b      	beq.n	800816e <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a26      	ldr	r2, [pc, #152]	@ (80081f4 <HAL_SD_ConfigWideBusOperation+0x130>)
 800815c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2201      	movs	r2, #1
 8008162:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8008166:	2301      	movs	r3, #1
 8008168:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800816c:	e01f      	b.n	80081ae <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	689b      	ldr	r3, [r3, #8]
 8008178:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	68db      	ldr	r3, [r3, #12]
 800817e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	695b      	ldr	r3, [r3, #20]
 8008188:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	699b      	ldr	r3, [r3, #24]
 800818e:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681d      	ldr	r5, [r3, #0]
 8008194:	466c      	mov	r4, sp
 8008196:	f107 0314 	add.w	r3, r7, #20
 800819a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800819e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80081a2:	f107 0308 	add.w	r3, r7, #8
 80081a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80081a8:	4628      	mov	r0, r5
 80081aa:	f002 fa5d 	bl	800a668 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80081b6:	4618      	mov	r0, r3
 80081b8:	f002 fb31 	bl	800a81e <SDMMC_CmdBlockLength>
 80081bc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80081be:	6a3b      	ldr	r3, [r7, #32]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d00c      	beq.n	80081de <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a0a      	ldr	r2, [pc, #40]	@ (80081f4 <HAL_SD_ConfigWideBusOperation+0x130>)
 80081ca:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80081d0:	6a3b      	ldr	r3, [r7, #32]
 80081d2:	431a      	orrs	r2, r3
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 80081d8:	2301      	movs	r3, #1
 80081da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2201      	movs	r2, #1
 80081e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 80081e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3728      	adds	r7, #40	@ 0x28
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bdb0      	pop	{r4, r5, r7, pc}
 80081f2:	bf00      	nop
 80081f4:	004005ff 	.word	0x004005ff

080081f8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b086      	sub	sp, #24
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008200:	2300      	movs	r3, #0
 8008202:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008204:	f107 030c 	add.w	r3, r7, #12
 8008208:	4619      	mov	r1, r3
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 fa7e 	bl	800870c <SD_SendStatus>
 8008210:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d005      	beq.n	8008224 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	431a      	orrs	r2, r3
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	0a5b      	lsrs	r3, r3, #9
 8008228:	f003 030f 	and.w	r3, r3, #15
 800822c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800822e:	693b      	ldr	r3, [r7, #16]
}
 8008230:	4618      	mov	r0, r3
 8008232:	3718      	adds	r7, #24
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008238:	b480      	push	{r7}
 800823a:	b085      	sub	sp, #20
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008244:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008254:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8008256:	bf00      	nop
 8008258:	3714      	adds	r7, #20
 800825a:	46bd      	mov	sp, r7
 800825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008260:	4770      	bx	lr

08008262 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008262:	b580      	push	{r7, lr}
 8008264:	b084      	sub	sp, #16
 8008266:	af00      	add	r7, sp, #0
 8008268:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800826e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008274:	2b82      	cmp	r3, #130	@ 0x82
 8008276:	d111      	bne.n	800829c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4618      	mov	r0, r3
 800827e:	f002 fb79 	bl	800a974 <SDMMC_CmdStopTransfer>
 8008282:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d008      	beq.n	800829c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	431a      	orrs	r2, r3
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8008296:	68f8      	ldr	r0, [r7, #12]
 8008298:	f7ff fd3a 	bl	8007d10 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f022 0208 	bic.w	r2, r2, #8
 80082aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f240 523a 	movw	r2, #1338	@ 0x53a
 80082b4:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2201      	movs	r2, #1
 80082ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2200      	movs	r2, #0
 80082c2:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80082c4:	68f8      	ldr	r0, [r7, #12]
 80082c6:	f002 ffe9 	bl	800b29c <HAL_SD_RxCpltCallback>
#endif
}
 80082ca:	bf00      	nop
 80082cc:	3710      	adds	r7, #16
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
	...

080082d4 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b086      	sub	sp, #24
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082e0:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f7fc ff7c 	bl	80051e0 <HAL_DMA_GetError>
 80082e8:	4603      	mov	r3, r0
 80082ea:	2b02      	cmp	r3, #2
 80082ec:	d03e      	beq.n	800836c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082f4:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082fc:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	2b01      	cmp	r3, #1
 8008302:	d002      	beq.n	800830a <SD_DMAError+0x36>
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2b01      	cmp	r3, #1
 8008308:	d12d      	bne.n	8008366 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a19      	ldr	r2, [pc, #100]	@ (8008374 <SD_DMAError+0xa0>)
 8008310:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8008320:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008326:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800832e:	6978      	ldr	r0, [r7, #20]
 8008330:	f7ff ff62 	bl	80081f8 <HAL_SD_GetCardState>
 8008334:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	2b06      	cmp	r3, #6
 800833a:	d002      	beq.n	8008342 <SD_DMAError+0x6e>
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	2b05      	cmp	r3, #5
 8008340:	d10a      	bne.n	8008358 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4618      	mov	r0, r3
 8008348:	f002 fb14 	bl	800a974 <SDMMC_CmdStopTransfer>
 800834c:	4602      	mov	r2, r0
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008352:	431a      	orrs	r2, r3
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	2201      	movs	r2, #1
 800835c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	2200      	movs	r2, #0
 8008364:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8008366:	6978      	ldr	r0, [r7, #20]
 8008368:	f7ff fcd2 	bl	8007d10 <HAL_SD_ErrorCallback>
#endif
  }
}
 800836c:	bf00      	nop
 800836e:	3718      	adds	r7, #24
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}
 8008374:	004005ff 	.word	0x004005ff

08008378 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b084      	sub	sp, #16
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008384:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800838e:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008390:	68f8      	ldr	r0, [r7, #12]
 8008392:	f7ff ff31 	bl	80081f8 <HAL_SD_GetCardState>
 8008396:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2201      	movs	r2, #1
 800839c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2200      	movs	r2, #0
 80083a4:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	2b06      	cmp	r3, #6
 80083aa:	d002      	beq.n	80083b2 <SD_DMATxAbort+0x3a>
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	2b05      	cmp	r3, #5
 80083b0:	d10a      	bne.n	80083c8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4618      	mov	r0, r3
 80083b8:	f002 fadc 	bl	800a974 <SDMMC_CmdStopTransfer>
 80083bc:	4602      	mov	r2, r0
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083c2:	431a      	orrs	r2, r3
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d103      	bne.n	80083d8 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80083d0:	68f8      	ldr	r0, [r7, #12]
 80083d2:	f002 ff4f 	bl	800b274 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80083d6:	e002      	b.n	80083de <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80083d8:	68f8      	ldr	r0, [r7, #12]
 80083da:	f7ff fc99 	bl	8007d10 <HAL_SD_ErrorCallback>
}
 80083de:	bf00      	nop
 80083e0:	3710      	adds	r7, #16
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}

080083e6 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80083e6:	b580      	push	{r7, lr}
 80083e8:	b084      	sub	sp, #16
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083f2:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f240 523a 	movw	r2, #1338	@ 0x53a
 80083fc:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80083fe:	68f8      	ldr	r0, [r7, #12]
 8008400:	f7ff fefa 	bl	80081f8 <HAL_SD_GetCardState>
 8008404:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2201      	movs	r2, #1
 800840a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2200      	movs	r2, #0
 8008412:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	2b06      	cmp	r3, #6
 8008418:	d002      	beq.n	8008420 <SD_DMARxAbort+0x3a>
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	2b05      	cmp	r3, #5
 800841e:	d10a      	bne.n	8008436 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4618      	mov	r0, r3
 8008426:	f002 faa5 	bl	800a974 <SDMMC_CmdStopTransfer>
 800842a:	4602      	mov	r2, r0
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008430:	431a      	orrs	r2, r3
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800843a:	2b00      	cmp	r3, #0
 800843c:	d103      	bne.n	8008446 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800843e:	68f8      	ldr	r0, [r7, #12]
 8008440:	f002 ff18 	bl	800b274 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008444:	e002      	b.n	800844c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008446:	68f8      	ldr	r0, [r7, #12]
 8008448:	f7ff fc62 	bl	8007d10 <HAL_SD_ErrorCallback>
}
 800844c:	bf00      	nop
 800844e:	3710      	adds	r7, #16
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}

08008454 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008454:	b5b0      	push	{r4, r5, r7, lr}
 8008456:	b094      	sub	sp, #80	@ 0x50
 8008458:	af04      	add	r7, sp, #16
 800845a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800845c:	2301      	movs	r3, #1
 800845e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4618      	mov	r0, r3
 8008466:	f002 f956 	bl	800a716 <SDIO_GetPowerState>
 800846a:	4603      	mov	r3, r0
 800846c:	2b00      	cmp	r3, #0
 800846e:	d102      	bne.n	8008476 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008470:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8008474:	e0b8      	b.n	80085e8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800847a:	2b03      	cmp	r3, #3
 800847c:	d02f      	beq.n	80084de <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4618      	mov	r0, r3
 8008484:	f002 fb80 	bl	800ab88 <SDMMC_CmdSendCID>
 8008488:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800848a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800848c:	2b00      	cmp	r3, #0
 800848e:	d001      	beq.n	8008494 <SD_InitCard+0x40>
    {
      return errorstate;
 8008490:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008492:	e0a9      	b.n	80085e8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	2100      	movs	r1, #0
 800849a:	4618      	mov	r0, r3
 800849c:	f002 f980 	bl	800a7a0 <SDIO_GetResponse>
 80084a0:	4602      	mov	r2, r0
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	2104      	movs	r1, #4
 80084ac:	4618      	mov	r0, r3
 80084ae:	f002 f977 	bl	800a7a0 <SDIO_GetResponse>
 80084b2:	4602      	mov	r2, r0
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	2108      	movs	r1, #8
 80084be:	4618      	mov	r0, r3
 80084c0:	f002 f96e 	bl	800a7a0 <SDIO_GetResponse>
 80084c4:	4602      	mov	r2, r0
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	210c      	movs	r1, #12
 80084d0:	4618      	mov	r0, r3
 80084d2:	f002 f965 	bl	800a7a0 <SDIO_GetResponse>
 80084d6:	4602      	mov	r2, r0
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084e2:	2b03      	cmp	r3, #3
 80084e4:	d00d      	beq.n	8008502 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f107 020e 	add.w	r2, r7, #14
 80084ee:	4611      	mov	r1, r2
 80084f0:	4618      	mov	r0, r3
 80084f2:	f002 fb86 	bl	800ac02 <SDMMC_CmdSetRelAdd>
 80084f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80084f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d001      	beq.n	8008502 <SD_InitCard+0xae>
    {
      return errorstate;
 80084fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008500:	e072      	b.n	80085e8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008506:	2b03      	cmp	r3, #3
 8008508:	d036      	beq.n	8008578 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800850a:	89fb      	ldrh	r3, [r7, #14]
 800850c:	461a      	mov	r2, r3
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800851a:	041b      	lsls	r3, r3, #16
 800851c:	4619      	mov	r1, r3
 800851e:	4610      	mov	r0, r2
 8008520:	f002 fb50 	bl	800abc4 <SDMMC_CmdSendCSD>
 8008524:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008526:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008528:	2b00      	cmp	r3, #0
 800852a:	d001      	beq.n	8008530 <SD_InitCard+0xdc>
    {
      return errorstate;
 800852c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800852e:	e05b      	b.n	80085e8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	2100      	movs	r1, #0
 8008536:	4618      	mov	r0, r3
 8008538:	f002 f932 	bl	800a7a0 <SDIO_GetResponse>
 800853c:	4602      	mov	r2, r0
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	2104      	movs	r1, #4
 8008548:	4618      	mov	r0, r3
 800854a:	f002 f929 	bl	800a7a0 <SDIO_GetResponse>
 800854e:	4602      	mov	r2, r0
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	2108      	movs	r1, #8
 800855a:	4618      	mov	r0, r3
 800855c:	f002 f920 	bl	800a7a0 <SDIO_GetResponse>
 8008560:	4602      	mov	r2, r0
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	210c      	movs	r1, #12
 800856c:	4618      	mov	r0, r3
 800856e:	f002 f917 	bl	800a7a0 <SDIO_GetResponse>
 8008572:	4602      	mov	r2, r0
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	2104      	movs	r1, #4
 800857e:	4618      	mov	r0, r3
 8008580:	f002 f90e 	bl	800a7a0 <SDIO_GetResponse>
 8008584:	4603      	mov	r3, r0
 8008586:	0d1a      	lsrs	r2, r3, #20
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800858c:	f107 0310 	add.w	r3, r7, #16
 8008590:	4619      	mov	r1, r3
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f7ff fbc6 	bl	8007d24 <HAL_SD_GetCardCSD>
 8008598:	4603      	mov	r3, r0
 800859a:	2b00      	cmp	r3, #0
 800859c:	d002      	beq.n	80085a4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800859e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80085a2:	e021      	b.n	80085e8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6819      	ldr	r1, [r3, #0]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085ac:	041b      	lsls	r3, r3, #16
 80085ae:	2200      	movs	r2, #0
 80085b0:	461c      	mov	r4, r3
 80085b2:	4615      	mov	r5, r2
 80085b4:	4622      	mov	r2, r4
 80085b6:	462b      	mov	r3, r5
 80085b8:	4608      	mov	r0, r1
 80085ba:	f002 f9fd 	bl	800a9b8 <SDMMC_CmdSelDesel>
 80085be:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80085c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d001      	beq.n	80085ca <SD_InitCard+0x176>
  {
    return errorstate;
 80085c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085c8:	e00e      	b.n	80085e8 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681d      	ldr	r5, [r3, #0]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	466c      	mov	r4, sp
 80085d2:	f103 0210 	add.w	r2, r3, #16
 80085d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80085d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80085dc:	3304      	adds	r3, #4
 80085de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80085e0:	4628      	mov	r0, r5
 80085e2:	f002 f841 	bl	800a668 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80085e6:	2300      	movs	r3, #0
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3740      	adds	r7, #64	@ 0x40
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bdb0      	pop	{r4, r5, r7, pc}

080085f0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b086      	sub	sp, #24
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80085f8:	2300      	movs	r3, #0
 80085fa:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80085fc:	2300      	movs	r3, #0
 80085fe:	617b      	str	r3, [r7, #20]
 8008600:	2300      	movs	r3, #0
 8008602:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4618      	mov	r0, r3
 800860a:	f002 f9f8 	bl	800a9fe <SDMMC_CmdGoIdleState>
 800860e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d001      	beq.n	800861a <SD_PowerON+0x2a>
  {
    return errorstate;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	e072      	b.n	8008700 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4618      	mov	r0, r3
 8008620:	f002 fa0b 	bl	800aa3a <SDMMC_CmdOperCond>
 8008624:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d00d      	beq.n	8008648 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2200      	movs	r2, #0
 8008630:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4618      	mov	r0, r3
 8008638:	f002 f9e1 	bl	800a9fe <SDMMC_CmdGoIdleState>
 800863c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d004      	beq.n	800864e <SD_PowerON+0x5e>
    {
      return errorstate;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	e05b      	b.n	8008700 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2201      	movs	r2, #1
 800864c:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008652:	2b01      	cmp	r3, #1
 8008654:	d137      	bne.n	80086c6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	2100      	movs	r1, #0
 800865c:	4618      	mov	r0, r3
 800865e:	f002 fa0b 	bl	800aa78 <SDMMC_CmdAppCommand>
 8008662:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d02d      	beq.n	80086c6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800866a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800866e:	e047      	b.n	8008700 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	2100      	movs	r1, #0
 8008676:	4618      	mov	r0, r3
 8008678:	f002 f9fe 	bl	800aa78 <SDMMC_CmdAppCommand>
 800867c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d001      	beq.n	8008688 <SD_PowerON+0x98>
    {
      return errorstate;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	e03b      	b.n	8008700 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	491e      	ldr	r1, [pc, #120]	@ (8008708 <SD_PowerON+0x118>)
 800868e:	4618      	mov	r0, r3
 8008690:	f002 fa14 	bl	800aabc <SDMMC_CmdAppOperCommand>
 8008694:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d002      	beq.n	80086a2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800869c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80086a0:	e02e      	b.n	8008700 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	2100      	movs	r1, #0
 80086a8:	4618      	mov	r0, r3
 80086aa:	f002 f879 	bl	800a7a0 <SDIO_GetResponse>
 80086ae:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	0fdb      	lsrs	r3, r3, #31
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d101      	bne.n	80086bc <SD_PowerON+0xcc>
 80086b8:	2301      	movs	r3, #1
 80086ba:	e000      	b.n	80086be <SD_PowerON+0xce>
 80086bc:	2300      	movs	r3, #0
 80086be:	613b      	str	r3, [r7, #16]

    count++;
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	3301      	adds	r3, #1
 80086c4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d802      	bhi.n	80086d6 <SD_PowerON+0xe6>
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d0cc      	beq.n	8008670 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80086dc:	4293      	cmp	r3, r2
 80086de:	d902      	bls.n	80086e6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80086e0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80086e4:	e00c      	b.n	8008700 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d003      	beq.n	80086f8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2201      	movs	r2, #1
 80086f4:	645a      	str	r2, [r3, #68]	@ 0x44
 80086f6:	e002      	b.n	80086fe <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2200      	movs	r2, #0
 80086fc:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 80086fe:	2300      	movs	r3, #0
}
 8008700:	4618      	mov	r0, r3
 8008702:	3718      	adds	r7, #24
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}
 8008708:	c1100000 	.word	0xc1100000

0800870c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b084      	sub	sp, #16
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d102      	bne.n	8008722 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800871c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008720:	e018      	b.n	8008754 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681a      	ldr	r2, [r3, #0]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800872a:	041b      	lsls	r3, r3, #16
 800872c:	4619      	mov	r1, r3
 800872e:	4610      	mov	r0, r2
 8008730:	f002 fa88 	bl	800ac44 <SDMMC_CmdSendStatus>
 8008734:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d001      	beq.n	8008740 <SD_SendStatus+0x34>
  {
    return errorstate;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	e009      	b.n	8008754 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	2100      	movs	r1, #0
 8008746:	4618      	mov	r0, r3
 8008748:	f002 f82a 	bl	800a7a0 <SDIO_GetResponse>
 800874c:	4602      	mov	r2, r0
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008752:	2300      	movs	r3, #0
}
 8008754:	4618      	mov	r0, r3
 8008756:	3710      	adds	r7, #16
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}

0800875c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b086      	sub	sp, #24
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008764:	2300      	movs	r3, #0
 8008766:	60fb      	str	r3, [r7, #12]
 8008768:	2300      	movs	r3, #0
 800876a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	2100      	movs	r1, #0
 8008772:	4618      	mov	r0, r3
 8008774:	f002 f814 	bl	800a7a0 <SDIO_GetResponse>
 8008778:	4603      	mov	r3, r0
 800877a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800877e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008782:	d102      	bne.n	800878a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008784:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008788:	e02f      	b.n	80087ea <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800878a:	f107 030c 	add.w	r3, r7, #12
 800878e:	4619      	mov	r1, r3
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f000 f879 	bl	8008888 <SD_FindSCR>
 8008796:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d001      	beq.n	80087a2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	e023      	b.n	80087ea <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d01c      	beq.n	80087e6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681a      	ldr	r2, [r3, #0]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087b4:	041b      	lsls	r3, r3, #16
 80087b6:	4619      	mov	r1, r3
 80087b8:	4610      	mov	r0, r2
 80087ba:	f002 f95d 	bl	800aa78 <SDMMC_CmdAppCommand>
 80087be:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d001      	beq.n	80087ca <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	e00f      	b.n	80087ea <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	2102      	movs	r1, #2
 80087d0:	4618      	mov	r0, r3
 80087d2:	f002 f996 	bl	800ab02 <SDMMC_CmdBusWidth>
 80087d6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d001      	beq.n	80087e2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	e003      	b.n	80087ea <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80087e2:	2300      	movs	r3, #0
 80087e4:	e001      	b.n	80087ea <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80087e6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3718      	adds	r7, #24
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}

080087f2 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80087f2:	b580      	push	{r7, lr}
 80087f4:	b086      	sub	sp, #24
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80087fa:	2300      	movs	r3, #0
 80087fc:	60fb      	str	r3, [r7, #12]
 80087fe:	2300      	movs	r3, #0
 8008800:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	2100      	movs	r1, #0
 8008808:	4618      	mov	r0, r3
 800880a:	f001 ffc9 	bl	800a7a0 <SDIO_GetResponse>
 800880e:	4603      	mov	r3, r0
 8008810:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008814:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008818:	d102      	bne.n	8008820 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800881a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800881e:	e02f      	b.n	8008880 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008820:	f107 030c 	add.w	r3, r7, #12
 8008824:	4619      	mov	r1, r3
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 f82e 	bl	8008888 <SD_FindSCR>
 800882c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d001      	beq.n	8008838 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	e023      	b.n	8008880 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800883e:	2b00      	cmp	r3, #0
 8008840:	d01c      	beq.n	800887c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681a      	ldr	r2, [r3, #0]
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800884a:	041b      	lsls	r3, r3, #16
 800884c:	4619      	mov	r1, r3
 800884e:	4610      	mov	r0, r2
 8008850:	f002 f912 	bl	800aa78 <SDMMC_CmdAppCommand>
 8008854:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d001      	beq.n	8008860 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	e00f      	b.n	8008880 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	2100      	movs	r1, #0
 8008866:	4618      	mov	r0, r3
 8008868:	f002 f94b 	bl	800ab02 <SDMMC_CmdBusWidth>
 800886c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d001      	beq.n	8008878 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	e003      	b.n	8008880 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008878:	2300      	movs	r3, #0
 800887a:	e001      	b.n	8008880 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800887c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8008880:	4618      	mov	r0, r3
 8008882:	3718      	adds	r7, #24
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008888:	b590      	push	{r4, r7, lr}
 800888a:	b08f      	sub	sp, #60	@ 0x3c
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008892:	f7fb fdcf 	bl	8004434 <HAL_GetTick>
 8008896:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8008898:	2300      	movs	r3, #0
 800889a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800889c:	2300      	movs	r3, #0
 800889e:	60bb      	str	r3, [r7, #8]
 80088a0:	2300      	movs	r3, #0
 80088a2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	2108      	movs	r1, #8
 80088ae:	4618      	mov	r0, r3
 80088b0:	f001 ffb5 	bl	800a81e <SDMMC_CmdBlockLength>
 80088b4:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80088b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d001      	beq.n	80088c0 <SD_FindSCR+0x38>
  {
    return errorstate;
 80088bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088be:	e0b9      	b.n	8008a34 <SD_FindSCR+0x1ac>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681a      	ldr	r2, [r3, #0]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088c8:	041b      	lsls	r3, r3, #16
 80088ca:	4619      	mov	r1, r3
 80088cc:	4610      	mov	r0, r2
 80088ce:	f002 f8d3 	bl	800aa78 <SDMMC_CmdAppCommand>
 80088d2:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80088d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d001      	beq.n	80088de <SD_FindSCR+0x56>
  {
    return errorstate;
 80088da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088dc:	e0aa      	b.n	8008a34 <SD_FindSCR+0x1ac>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80088de:	f04f 33ff 	mov.w	r3, #4294967295
 80088e2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80088e4:	2308      	movs	r3, #8
 80088e6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80088e8:	2330      	movs	r3, #48	@ 0x30
 80088ea:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80088ec:	2302      	movs	r3, #2
 80088ee:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80088f0:	2300      	movs	r3, #0
 80088f2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80088f4:	2301      	movs	r3, #1
 80088f6:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f107 0210 	add.w	r2, r7, #16
 8008900:	4611      	mov	r1, r2
 8008902:	4618      	mov	r0, r3
 8008904:	f001 ff5f 	bl	800a7c6 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4618      	mov	r0, r3
 800890e:	f002 f91a 	bl	800ab46 <SDMMC_CmdSendSCR>
 8008912:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008916:	2b00      	cmp	r3, #0
 8008918:	d02a      	beq.n	8008970 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800891a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800891c:	e08a      	b.n	8008a34 <SD_FindSCR+0x1ac>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008924:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008928:	2b00      	cmp	r3, #0
 800892a:	d00f      	beq.n	800894c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6819      	ldr	r1, [r3, #0]
 8008930:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008932:	009b      	lsls	r3, r3, #2
 8008934:	f107 0208 	add.w	r2, r7, #8
 8008938:	18d4      	adds	r4, r2, r3
 800893a:	4608      	mov	r0, r1
 800893c:	f001 febf 	bl	800a6be <SDIO_ReadFIFO>
 8008940:	4603      	mov	r3, r0
 8008942:	6023      	str	r3, [r4, #0]
      index++;
 8008944:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008946:	3301      	adds	r3, #1
 8008948:	637b      	str	r3, [r7, #52]	@ 0x34
 800894a:	e006      	b.n	800895a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008952:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008956:	2b00      	cmp	r3, #0
 8008958:	d012      	beq.n	8008980 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800895a:	f7fb fd6b 	bl	8004434 <HAL_GetTick>
 800895e:	4602      	mov	r2, r0
 8008960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008962:	1ad3      	subs	r3, r2, r3
 8008964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008968:	d102      	bne.n	8008970 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800896a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800896e:	e061      	b.n	8008a34 <SD_FindSCR+0x1ac>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008976:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 800897a:	2b00      	cmp	r3, #0
 800897c:	d0cf      	beq.n	800891e <SD_FindSCR+0x96>
 800897e:	e000      	b.n	8008982 <SD_FindSCR+0xfa>
      break;
 8008980:	bf00      	nop
    }
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008988:	f003 0308 	and.w	r3, r3, #8
 800898c:	2b00      	cmp	r3, #0
 800898e:	d106      	bne.n	800899e <SD_FindSCR+0x116>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008996:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800899a:	2b00      	cmp	r3, #0
 800899c:	d005      	beq.n	80089aa <SD_FindSCR+0x122>
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	2208      	movs	r2, #8
 80089a4:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80089a6:	2308      	movs	r3, #8
 80089a8:	e044      	b.n	8008a34 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089b0:	f003 0302 	and.w	r3, r3, #2
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d005      	beq.n	80089c4 <SD_FindSCR+0x13c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	2202      	movs	r2, #2
 80089be:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80089c0:	2302      	movs	r3, #2
 80089c2:	e037      	b.n	8008a34 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089ca:	f003 0320 	and.w	r3, r3, #32
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d005      	beq.n	80089de <SD_FindSCR+0x156>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	2220      	movs	r2, #32
 80089d8:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80089da:	2320      	movs	r3, #32
 80089dc:	e02a      	b.n	8008a34 <SD_FindSCR+0x1ac>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f240 523a 	movw	r2, #1338	@ 0x53a
 80089e6:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	061a      	lsls	r2, r3, #24
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	021b      	lsls	r3, r3, #8
 80089f0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80089f4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	0a1b      	lsrs	r3, r3, #8
 80089fa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80089fe:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	0e1b      	lsrs	r3, r3, #24
 8008a04:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008a06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a08:	601a      	str	r2, [r3, #0]
    scr++;
 8008a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a0c:	3304      	adds	r3, #4
 8008a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	061a      	lsls	r2, r3, #24
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	021b      	lsls	r3, r3, #8
 8008a18:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008a1c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	0a1b      	lsrs	r3, r3, #8
 8008a22:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008a26:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	0e1b      	lsrs	r3, r3, #24
 8008a2c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a30:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008a32:	2300      	movs	r3, #0
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	373c      	adds	r7, #60	@ 0x3c
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd90      	pop	{r4, r7, pc}

08008a3c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b086      	sub	sp, #24
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a48:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a4e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d03f      	beq.n	8008ad6 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8008a56:	2300      	movs	r3, #0
 8008a58:	617b      	str	r3, [r7, #20]
 8008a5a:	e033      	b.n	8008ac4 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4618      	mov	r0, r3
 8008a62:	f001 fe2c 	bl	800a6be <SDIO_ReadFIFO>
 8008a66:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	b2da      	uxtb	r2, r3
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	3301      	adds	r3, #1
 8008a74:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	3b01      	subs	r3, #1
 8008a7a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	0a1b      	lsrs	r3, r3, #8
 8008a80:	b2da      	uxtb	r2, r3
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	3301      	adds	r3, #1
 8008a8a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	3b01      	subs	r3, #1
 8008a90:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	0c1b      	lsrs	r3, r3, #16
 8008a96:	b2da      	uxtb	r2, r3
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	3b01      	subs	r3, #1
 8008aa6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	0e1b      	lsrs	r3, r3, #24
 8008aac:	b2da      	uxtb	r2, r3
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	3301      	adds	r3, #1
 8008ab6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	3b01      	subs	r3, #1
 8008abc:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	617b      	str	r3, [r7, #20]
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	2b07      	cmp	r3, #7
 8008ac8:	d9c8      	bls.n	8008a5c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	68fa      	ldr	r2, [r7, #12]
 8008ace:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	693a      	ldr	r2, [r7, #16]
 8008ad4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8008ad6:	bf00      	nop
 8008ad8:	3718      	adds	r7, #24
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}

08008ade <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8008ade:	b580      	push	{r7, lr}
 8008ae0:	b086      	sub	sp, #24
 8008ae2:	af00      	add	r7, sp, #0
 8008ae4:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6a1b      	ldr	r3, [r3, #32]
 8008aea:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008af0:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d043      	beq.n	8008b80 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8008af8:	2300      	movs	r3, #0
 8008afa:	617b      	str	r3, [r7, #20]
 8008afc:	e037      	b.n	8008b6e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	781b      	ldrb	r3, [r3, #0]
 8008b02:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	3301      	adds	r3, #1
 8008b08:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	3b01      	subs	r3, #1
 8008b0e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	021a      	lsls	r2, r3, #8
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	3301      	adds	r3, #1
 8008b20:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	3b01      	subs	r3, #1
 8008b26:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	781b      	ldrb	r3, [r3, #0]
 8008b2c:	041a      	lsls	r2, r3, #16
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	4313      	orrs	r3, r2
 8008b32:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	3301      	adds	r3, #1
 8008b38:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	3b01      	subs	r3, #1
 8008b3e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	781b      	ldrb	r3, [r3, #0]
 8008b44:	061a      	lsls	r2, r3, #24
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	3301      	adds	r3, #1
 8008b50:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	3b01      	subs	r3, #1
 8008b56:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f107 0208 	add.w	r2, r7, #8
 8008b60:	4611      	mov	r1, r2
 8008b62:	4618      	mov	r0, r3
 8008b64:	f001 fdb8 	bl	800a6d8 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	3301      	adds	r3, #1
 8008b6c:	617b      	str	r3, [r7, #20]
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	2b07      	cmp	r3, #7
 8008b72:	d9c4      	bls.n	8008afe <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	68fa      	ldr	r2, [r7, #12]
 8008b78:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	693a      	ldr	r2, [r7, #16]
 8008b7e:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8008b80:	bf00      	nop
 8008b82:	3718      	adds	r7, #24
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b085      	sub	sp, #20
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b96:	b2db      	uxtb	r3, r3
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d001      	beq.n	8008ba0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	e03c      	b.n	8008c1a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2202      	movs	r2, #2
 8008ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4a1e      	ldr	r2, [pc, #120]	@ (8008c28 <HAL_TIM_Base_Start+0xa0>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d018      	beq.n	8008be4 <HAL_TIM_Base_Start+0x5c>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bba:	d013      	beq.n	8008be4 <HAL_TIM_Base_Start+0x5c>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4a1a      	ldr	r2, [pc, #104]	@ (8008c2c <HAL_TIM_Base_Start+0xa4>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d00e      	beq.n	8008be4 <HAL_TIM_Base_Start+0x5c>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a19      	ldr	r2, [pc, #100]	@ (8008c30 <HAL_TIM_Base_Start+0xa8>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d009      	beq.n	8008be4 <HAL_TIM_Base_Start+0x5c>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4a17      	ldr	r2, [pc, #92]	@ (8008c34 <HAL_TIM_Base_Start+0xac>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d004      	beq.n	8008be4 <HAL_TIM_Base_Start+0x5c>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4a16      	ldr	r2, [pc, #88]	@ (8008c38 <HAL_TIM_Base_Start+0xb0>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d111      	bne.n	8008c08 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	689b      	ldr	r3, [r3, #8]
 8008bea:	f003 0307 	and.w	r3, r3, #7
 8008bee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2b06      	cmp	r3, #6
 8008bf4:	d010      	beq.n	8008c18 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	681a      	ldr	r2, [r3, #0]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f042 0201 	orr.w	r2, r2, #1
 8008c04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c06:	e007      	b.n	8008c18 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	681a      	ldr	r2, [r3, #0]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f042 0201 	orr.w	r2, r2, #1
 8008c16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008c18:	2300      	movs	r3, #0
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3714      	adds	r7, #20
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c24:	4770      	bx	lr
 8008c26:	bf00      	nop
 8008c28:	40010000 	.word	0x40010000
 8008c2c:	40000400 	.word	0x40000400
 8008c30:	40000800 	.word	0x40000800
 8008c34:	40000c00 	.word	0x40000c00
 8008c38:	40014000 	.word	0x40014000

08008c3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b082      	sub	sp, #8
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d101      	bne.n	8008c4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	e041      	b.n	8008cd2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c54:	b2db      	uxtb	r3, r3
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d106      	bne.n	8008c68 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f7fb f8be 	bl	8003de4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2202      	movs	r2, #2
 8008c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681a      	ldr	r2, [r3, #0]
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	3304      	adds	r3, #4
 8008c78:	4619      	mov	r1, r3
 8008c7a:	4610      	mov	r0, r2
 8008c7c:	f000 f9a0 	bl	8008fc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2201      	movs	r2, #1
 8008c84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2201      	movs	r2, #1
 8008c94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2201      	movs	r2, #1
 8008cac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2201      	movs	r2, #1
 8008cbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2201      	movs	r2, #1
 8008ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008cd0:	2300      	movs	r3, #0
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3708      	adds	r7, #8
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}
	...

08008cdc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b084      	sub	sp, #16
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d109      	bne.n	8008d00 <HAL_TIM_PWM_Start+0x24>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	bf14      	ite	ne
 8008cf8:	2301      	movne	r3, #1
 8008cfa:	2300      	moveq	r3, #0
 8008cfc:	b2db      	uxtb	r3, r3
 8008cfe:	e022      	b.n	8008d46 <HAL_TIM_PWM_Start+0x6a>
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	2b04      	cmp	r3, #4
 8008d04:	d109      	bne.n	8008d1a <HAL_TIM_PWM_Start+0x3e>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008d0c:	b2db      	uxtb	r3, r3
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	bf14      	ite	ne
 8008d12:	2301      	movne	r3, #1
 8008d14:	2300      	moveq	r3, #0
 8008d16:	b2db      	uxtb	r3, r3
 8008d18:	e015      	b.n	8008d46 <HAL_TIM_PWM_Start+0x6a>
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	2b08      	cmp	r3, #8
 8008d1e:	d109      	bne.n	8008d34 <HAL_TIM_PWM_Start+0x58>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008d26:	b2db      	uxtb	r3, r3
 8008d28:	2b01      	cmp	r3, #1
 8008d2a:	bf14      	ite	ne
 8008d2c:	2301      	movne	r3, #1
 8008d2e:	2300      	moveq	r3, #0
 8008d30:	b2db      	uxtb	r3, r3
 8008d32:	e008      	b.n	8008d46 <HAL_TIM_PWM_Start+0x6a>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d3a:	b2db      	uxtb	r3, r3
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	bf14      	ite	ne
 8008d40:	2301      	movne	r3, #1
 8008d42:	2300      	moveq	r3, #0
 8008d44:	b2db      	uxtb	r3, r3
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d001      	beq.n	8008d4e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	e068      	b.n	8008e20 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d104      	bne.n	8008d5e <HAL_TIM_PWM_Start+0x82>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2202      	movs	r2, #2
 8008d58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008d5c:	e013      	b.n	8008d86 <HAL_TIM_PWM_Start+0xaa>
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	2b04      	cmp	r3, #4
 8008d62:	d104      	bne.n	8008d6e <HAL_TIM_PWM_Start+0x92>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2202      	movs	r2, #2
 8008d68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008d6c:	e00b      	b.n	8008d86 <HAL_TIM_PWM_Start+0xaa>
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	2b08      	cmp	r3, #8
 8008d72:	d104      	bne.n	8008d7e <HAL_TIM_PWM_Start+0xa2>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2202      	movs	r2, #2
 8008d78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008d7c:	e003      	b.n	8008d86 <HAL_TIM_PWM_Start+0xaa>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2202      	movs	r2, #2
 8008d82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	6839      	ldr	r1, [r7, #0]
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f000 fb2e 	bl	80093f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	4a23      	ldr	r2, [pc, #140]	@ (8008e28 <HAL_TIM_PWM_Start+0x14c>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d107      	bne.n	8008dae <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008dac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4a1d      	ldr	r2, [pc, #116]	@ (8008e28 <HAL_TIM_PWM_Start+0x14c>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d018      	beq.n	8008dea <HAL_TIM_PWM_Start+0x10e>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008dc0:	d013      	beq.n	8008dea <HAL_TIM_PWM_Start+0x10e>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4a19      	ldr	r2, [pc, #100]	@ (8008e2c <HAL_TIM_PWM_Start+0x150>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d00e      	beq.n	8008dea <HAL_TIM_PWM_Start+0x10e>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4a17      	ldr	r2, [pc, #92]	@ (8008e30 <HAL_TIM_PWM_Start+0x154>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d009      	beq.n	8008dea <HAL_TIM_PWM_Start+0x10e>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4a16      	ldr	r2, [pc, #88]	@ (8008e34 <HAL_TIM_PWM_Start+0x158>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d004      	beq.n	8008dea <HAL_TIM_PWM_Start+0x10e>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	4a14      	ldr	r2, [pc, #80]	@ (8008e38 <HAL_TIM_PWM_Start+0x15c>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d111      	bne.n	8008e0e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	689b      	ldr	r3, [r3, #8]
 8008df0:	f003 0307 	and.w	r3, r3, #7
 8008df4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2b06      	cmp	r3, #6
 8008dfa:	d010      	beq.n	8008e1e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	681a      	ldr	r2, [r3, #0]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f042 0201 	orr.w	r2, r2, #1
 8008e0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e0c:	e007      	b.n	8008e1e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	681a      	ldr	r2, [r3, #0]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f042 0201 	orr.w	r2, r2, #1
 8008e1c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008e1e:	2300      	movs	r3, #0
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3710      	adds	r7, #16
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}
 8008e28:	40010000 	.word	0x40010000
 8008e2c:	40000400 	.word	0x40000400
 8008e30:	40000800 	.word	0x40000800
 8008e34:	40000c00 	.word	0x40000c00
 8008e38:	40014000 	.word	0x40014000

08008e3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b086      	sub	sp, #24
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	60f8      	str	r0, [r7, #12]
 8008e44:	60b9      	str	r1, [r7, #8]
 8008e46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008e52:	2b01      	cmp	r3, #1
 8008e54:	d101      	bne.n	8008e5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008e56:	2302      	movs	r3, #2
 8008e58:	e0ae      	b.n	8008fb8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2b0c      	cmp	r3, #12
 8008e66:	f200 809f 	bhi.w	8008fa8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008e6a:	a201      	add	r2, pc, #4	@ (adr r2, 8008e70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e70:	08008ea5 	.word	0x08008ea5
 8008e74:	08008fa9 	.word	0x08008fa9
 8008e78:	08008fa9 	.word	0x08008fa9
 8008e7c:	08008fa9 	.word	0x08008fa9
 8008e80:	08008ee5 	.word	0x08008ee5
 8008e84:	08008fa9 	.word	0x08008fa9
 8008e88:	08008fa9 	.word	0x08008fa9
 8008e8c:	08008fa9 	.word	0x08008fa9
 8008e90:	08008f27 	.word	0x08008f27
 8008e94:	08008fa9 	.word	0x08008fa9
 8008e98:	08008fa9 	.word	0x08008fa9
 8008e9c:	08008fa9 	.word	0x08008fa9
 8008ea0:	08008f67 	.word	0x08008f67
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	68b9      	ldr	r1, [r7, #8]
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f000 f914 	bl	80090d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	699a      	ldr	r2, [r3, #24]
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f042 0208 	orr.w	r2, r2, #8
 8008ebe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	699a      	ldr	r2, [r3, #24]
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f022 0204 	bic.w	r2, r2, #4
 8008ece:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	6999      	ldr	r1, [r3, #24]
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	691a      	ldr	r2, [r3, #16]
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	430a      	orrs	r2, r1
 8008ee0:	619a      	str	r2, [r3, #24]
      break;
 8008ee2:	e064      	b.n	8008fae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	68b9      	ldr	r1, [r7, #8]
 8008eea:	4618      	mov	r0, r3
 8008eec:	f000 f95a 	bl	80091a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	699a      	ldr	r2, [r3, #24]
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008efe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	699a      	ldr	r2, [r3, #24]
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008f0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	6999      	ldr	r1, [r3, #24]
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	691b      	ldr	r3, [r3, #16]
 8008f1a:	021a      	lsls	r2, r3, #8
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	430a      	orrs	r2, r1
 8008f22:	619a      	str	r2, [r3, #24]
      break;
 8008f24:	e043      	b.n	8008fae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	68b9      	ldr	r1, [r7, #8]
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f000 f9a5 	bl	800927c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	69da      	ldr	r2, [r3, #28]
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f042 0208 	orr.w	r2, r2, #8
 8008f40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	69da      	ldr	r2, [r3, #28]
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f022 0204 	bic.w	r2, r2, #4
 8008f50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	69d9      	ldr	r1, [r3, #28]
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	691a      	ldr	r2, [r3, #16]
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	430a      	orrs	r2, r1
 8008f62:	61da      	str	r2, [r3, #28]
      break;
 8008f64:	e023      	b.n	8008fae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	68b9      	ldr	r1, [r7, #8]
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f000 f9ef 	bl	8009350 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	69da      	ldr	r2, [r3, #28]
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008f80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	69da      	ldr	r2, [r3, #28]
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008f90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	69d9      	ldr	r1, [r3, #28]
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	691b      	ldr	r3, [r3, #16]
 8008f9c:	021a      	lsls	r2, r3, #8
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	430a      	orrs	r2, r1
 8008fa4:	61da      	str	r2, [r3, #28]
      break;
 8008fa6:	e002      	b.n	8008fae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008fa8:	2301      	movs	r3, #1
 8008faa:	75fb      	strb	r3, [r7, #23]
      break;
 8008fac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008fb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3718      	adds	r7, #24
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b085      	sub	sp, #20
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	4a3a      	ldr	r2, [pc, #232]	@ (80090bc <TIM_Base_SetConfig+0xfc>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d00f      	beq.n	8008ff8 <TIM_Base_SetConfig+0x38>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008fde:	d00b      	beq.n	8008ff8 <TIM_Base_SetConfig+0x38>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	4a37      	ldr	r2, [pc, #220]	@ (80090c0 <TIM_Base_SetConfig+0x100>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d007      	beq.n	8008ff8 <TIM_Base_SetConfig+0x38>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	4a36      	ldr	r2, [pc, #216]	@ (80090c4 <TIM_Base_SetConfig+0x104>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d003      	beq.n	8008ff8 <TIM_Base_SetConfig+0x38>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	4a35      	ldr	r2, [pc, #212]	@ (80090c8 <TIM_Base_SetConfig+0x108>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d108      	bne.n	800900a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ffe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	68fa      	ldr	r2, [r7, #12]
 8009006:	4313      	orrs	r3, r2
 8009008:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	4a2b      	ldr	r2, [pc, #172]	@ (80090bc <TIM_Base_SetConfig+0xfc>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d01b      	beq.n	800904a <TIM_Base_SetConfig+0x8a>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009018:	d017      	beq.n	800904a <TIM_Base_SetConfig+0x8a>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	4a28      	ldr	r2, [pc, #160]	@ (80090c0 <TIM_Base_SetConfig+0x100>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d013      	beq.n	800904a <TIM_Base_SetConfig+0x8a>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	4a27      	ldr	r2, [pc, #156]	@ (80090c4 <TIM_Base_SetConfig+0x104>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d00f      	beq.n	800904a <TIM_Base_SetConfig+0x8a>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	4a26      	ldr	r2, [pc, #152]	@ (80090c8 <TIM_Base_SetConfig+0x108>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d00b      	beq.n	800904a <TIM_Base_SetConfig+0x8a>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	4a25      	ldr	r2, [pc, #148]	@ (80090cc <TIM_Base_SetConfig+0x10c>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d007      	beq.n	800904a <TIM_Base_SetConfig+0x8a>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	4a24      	ldr	r2, [pc, #144]	@ (80090d0 <TIM_Base_SetConfig+0x110>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d003      	beq.n	800904a <TIM_Base_SetConfig+0x8a>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	4a23      	ldr	r2, [pc, #140]	@ (80090d4 <TIM_Base_SetConfig+0x114>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d108      	bne.n	800905c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009050:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	68db      	ldr	r3, [r3, #12]
 8009056:	68fa      	ldr	r2, [r7, #12]
 8009058:	4313      	orrs	r3, r2
 800905a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	695b      	ldr	r3, [r3, #20]
 8009066:	4313      	orrs	r3, r2
 8009068:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	68fa      	ldr	r2, [r7, #12]
 800906e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	689a      	ldr	r2, [r3, #8]
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	681a      	ldr	r2, [r3, #0]
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	4a0e      	ldr	r2, [pc, #56]	@ (80090bc <TIM_Base_SetConfig+0xfc>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d103      	bne.n	8009090 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	691a      	ldr	r2, [r3, #16]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2201      	movs	r2, #1
 8009094:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	691b      	ldr	r3, [r3, #16]
 800909a:	f003 0301 	and.w	r3, r3, #1
 800909e:	2b01      	cmp	r3, #1
 80090a0:	d105      	bne.n	80090ae <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	691b      	ldr	r3, [r3, #16]
 80090a6:	f023 0201 	bic.w	r2, r3, #1
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	611a      	str	r2, [r3, #16]
  }
}
 80090ae:	bf00      	nop
 80090b0:	3714      	adds	r7, #20
 80090b2:	46bd      	mov	sp, r7
 80090b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b8:	4770      	bx	lr
 80090ba:	bf00      	nop
 80090bc:	40010000 	.word	0x40010000
 80090c0:	40000400 	.word	0x40000400
 80090c4:	40000800 	.word	0x40000800
 80090c8:	40000c00 	.word	0x40000c00
 80090cc:	40014000 	.word	0x40014000
 80090d0:	40014400 	.word	0x40014400
 80090d4:	40014800 	.word	0x40014800

080090d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80090d8:	b480      	push	{r7}
 80090da:	b087      	sub	sp, #28
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
 80090e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6a1b      	ldr	r3, [r3, #32]
 80090e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6a1b      	ldr	r3, [r3, #32]
 80090ec:	f023 0201 	bic.w	r2, r3, #1
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	685b      	ldr	r3, [r3, #4]
 80090f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	699b      	ldr	r3, [r3, #24]
 80090fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009106:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f023 0303 	bic.w	r3, r3, #3
 800910e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	68fa      	ldr	r2, [r7, #12]
 8009116:	4313      	orrs	r3, r2
 8009118:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	f023 0302 	bic.w	r3, r3, #2
 8009120:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	689b      	ldr	r3, [r3, #8]
 8009126:	697a      	ldr	r2, [r7, #20]
 8009128:	4313      	orrs	r3, r2
 800912a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	4a1c      	ldr	r2, [pc, #112]	@ (80091a0 <TIM_OC1_SetConfig+0xc8>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d10c      	bne.n	800914e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	f023 0308 	bic.w	r3, r3, #8
 800913a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	68db      	ldr	r3, [r3, #12]
 8009140:	697a      	ldr	r2, [r7, #20]
 8009142:	4313      	orrs	r3, r2
 8009144:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	f023 0304 	bic.w	r3, r3, #4
 800914c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	4a13      	ldr	r2, [pc, #76]	@ (80091a0 <TIM_OC1_SetConfig+0xc8>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d111      	bne.n	800917a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800915c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009164:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	695b      	ldr	r3, [r3, #20]
 800916a:	693a      	ldr	r2, [r7, #16]
 800916c:	4313      	orrs	r3, r2
 800916e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	699b      	ldr	r3, [r3, #24]
 8009174:	693a      	ldr	r2, [r7, #16]
 8009176:	4313      	orrs	r3, r2
 8009178:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	693a      	ldr	r2, [r7, #16]
 800917e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	68fa      	ldr	r2, [r7, #12]
 8009184:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	685a      	ldr	r2, [r3, #4]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	697a      	ldr	r2, [r7, #20]
 8009192:	621a      	str	r2, [r3, #32]
}
 8009194:	bf00      	nop
 8009196:	371c      	adds	r7, #28
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr
 80091a0:	40010000 	.word	0x40010000

080091a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b087      	sub	sp, #28
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6a1b      	ldr	r3, [r3, #32]
 80091b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6a1b      	ldr	r3, [r3, #32]
 80091b8:	f023 0210 	bic.w	r2, r3, #16
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	699b      	ldr	r3, [r3, #24]
 80091ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80091da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	021b      	lsls	r3, r3, #8
 80091e2:	68fa      	ldr	r2, [r7, #12]
 80091e4:	4313      	orrs	r3, r2
 80091e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	f023 0320 	bic.w	r3, r3, #32
 80091ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	011b      	lsls	r3, r3, #4
 80091f6:	697a      	ldr	r2, [r7, #20]
 80091f8:	4313      	orrs	r3, r2
 80091fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	4a1e      	ldr	r2, [pc, #120]	@ (8009278 <TIM_OC2_SetConfig+0xd4>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d10d      	bne.n	8009220 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800920a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	68db      	ldr	r3, [r3, #12]
 8009210:	011b      	lsls	r3, r3, #4
 8009212:	697a      	ldr	r2, [r7, #20]
 8009214:	4313      	orrs	r3, r2
 8009216:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800921e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	4a15      	ldr	r2, [pc, #84]	@ (8009278 <TIM_OC2_SetConfig+0xd4>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d113      	bne.n	8009250 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800922e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009236:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	695b      	ldr	r3, [r3, #20]
 800923c:	009b      	lsls	r3, r3, #2
 800923e:	693a      	ldr	r2, [r7, #16]
 8009240:	4313      	orrs	r3, r2
 8009242:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	699b      	ldr	r3, [r3, #24]
 8009248:	009b      	lsls	r3, r3, #2
 800924a:	693a      	ldr	r2, [r7, #16]
 800924c:	4313      	orrs	r3, r2
 800924e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	693a      	ldr	r2, [r7, #16]
 8009254:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	68fa      	ldr	r2, [r7, #12]
 800925a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	685a      	ldr	r2, [r3, #4]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	697a      	ldr	r2, [r7, #20]
 8009268:	621a      	str	r2, [r3, #32]
}
 800926a:	bf00      	nop
 800926c:	371c      	adds	r7, #28
 800926e:	46bd      	mov	sp, r7
 8009270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009274:	4770      	bx	lr
 8009276:	bf00      	nop
 8009278:	40010000 	.word	0x40010000

0800927c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800927c:	b480      	push	{r7}
 800927e:	b087      	sub	sp, #28
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6a1b      	ldr	r3, [r3, #32]
 800928a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6a1b      	ldr	r3, [r3, #32]
 8009290:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	69db      	ldr	r3, [r3, #28]
 80092a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	f023 0303 	bic.w	r3, r3, #3
 80092b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	68fa      	ldr	r2, [r7, #12]
 80092ba:	4313      	orrs	r3, r2
 80092bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80092c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	689b      	ldr	r3, [r3, #8]
 80092ca:	021b      	lsls	r3, r3, #8
 80092cc:	697a      	ldr	r2, [r7, #20]
 80092ce:	4313      	orrs	r3, r2
 80092d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	4a1d      	ldr	r2, [pc, #116]	@ (800934c <TIM_OC3_SetConfig+0xd0>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d10d      	bne.n	80092f6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80092e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	68db      	ldr	r3, [r3, #12]
 80092e6:	021b      	lsls	r3, r3, #8
 80092e8:	697a      	ldr	r2, [r7, #20]
 80092ea:	4313      	orrs	r3, r2
 80092ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80092f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	4a14      	ldr	r2, [pc, #80]	@ (800934c <TIM_OC3_SetConfig+0xd0>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d113      	bne.n	8009326 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009304:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800930c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	695b      	ldr	r3, [r3, #20]
 8009312:	011b      	lsls	r3, r3, #4
 8009314:	693a      	ldr	r2, [r7, #16]
 8009316:	4313      	orrs	r3, r2
 8009318:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	699b      	ldr	r3, [r3, #24]
 800931e:	011b      	lsls	r3, r3, #4
 8009320:	693a      	ldr	r2, [r7, #16]
 8009322:	4313      	orrs	r3, r2
 8009324:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	693a      	ldr	r2, [r7, #16]
 800932a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	68fa      	ldr	r2, [r7, #12]
 8009330:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	685a      	ldr	r2, [r3, #4]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	697a      	ldr	r2, [r7, #20]
 800933e:	621a      	str	r2, [r3, #32]
}
 8009340:	bf00      	nop
 8009342:	371c      	adds	r7, #28
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr
 800934c:	40010000 	.word	0x40010000

08009350 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009350:	b480      	push	{r7}
 8009352:	b087      	sub	sp, #28
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
 8009358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6a1b      	ldr	r3, [r3, #32]
 800935e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6a1b      	ldr	r3, [r3, #32]
 8009364:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	69db      	ldr	r3, [r3, #28]
 8009376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800937e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009386:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	021b      	lsls	r3, r3, #8
 800938e:	68fa      	ldr	r2, [r7, #12]
 8009390:	4313      	orrs	r3, r2
 8009392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800939a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	689b      	ldr	r3, [r3, #8]
 80093a0:	031b      	lsls	r3, r3, #12
 80093a2:	693a      	ldr	r2, [r7, #16]
 80093a4:	4313      	orrs	r3, r2
 80093a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	4a10      	ldr	r2, [pc, #64]	@ (80093ec <TIM_OC4_SetConfig+0x9c>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d109      	bne.n	80093c4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80093b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	695b      	ldr	r3, [r3, #20]
 80093bc:	019b      	lsls	r3, r3, #6
 80093be:	697a      	ldr	r2, [r7, #20]
 80093c0:	4313      	orrs	r3, r2
 80093c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	697a      	ldr	r2, [r7, #20]
 80093c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	68fa      	ldr	r2, [r7, #12]
 80093ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	685a      	ldr	r2, [r3, #4]
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	693a      	ldr	r2, [r7, #16]
 80093dc:	621a      	str	r2, [r3, #32]
}
 80093de:	bf00      	nop
 80093e0:	371c      	adds	r7, #28
 80093e2:	46bd      	mov	sp, r7
 80093e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e8:	4770      	bx	lr
 80093ea:	bf00      	nop
 80093ec:	40010000 	.word	0x40010000

080093f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80093f0:	b480      	push	{r7}
 80093f2:	b087      	sub	sp, #28
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	60f8      	str	r0, [r7, #12]
 80093f8:	60b9      	str	r1, [r7, #8]
 80093fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	f003 031f 	and.w	r3, r3, #31
 8009402:	2201      	movs	r2, #1
 8009404:	fa02 f303 	lsl.w	r3, r2, r3
 8009408:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	6a1a      	ldr	r2, [r3, #32]
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	43db      	mvns	r3, r3
 8009412:	401a      	ands	r2, r3
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	6a1a      	ldr	r2, [r3, #32]
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	f003 031f 	and.w	r3, r3, #31
 8009422:	6879      	ldr	r1, [r7, #4]
 8009424:	fa01 f303 	lsl.w	r3, r1, r3
 8009428:	431a      	orrs	r2, r3
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	621a      	str	r2, [r3, #32]
}
 800942e:	bf00      	nop
 8009430:	371c      	adds	r7, #28
 8009432:	46bd      	mov	sp, r7
 8009434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009438:	4770      	bx	lr
	...

0800943c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800943c:	b480      	push	{r7}
 800943e:	b085      	sub	sp, #20
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800944c:	2b01      	cmp	r3, #1
 800944e:	d101      	bne.n	8009454 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009450:	2302      	movs	r3, #2
 8009452:	e050      	b.n	80094f6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2201      	movs	r2, #1
 8009458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2202      	movs	r2, #2
 8009460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	685b      	ldr	r3, [r3, #4]
 800946a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	689b      	ldr	r3, [r3, #8]
 8009472:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800947a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	68fa      	ldr	r2, [r7, #12]
 8009482:	4313      	orrs	r3, r2
 8009484:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	68fa      	ldr	r2, [r7, #12]
 800948c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	4a1c      	ldr	r2, [pc, #112]	@ (8009504 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d018      	beq.n	80094ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094a0:	d013      	beq.n	80094ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4a18      	ldr	r2, [pc, #96]	@ (8009508 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d00e      	beq.n	80094ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	4a16      	ldr	r2, [pc, #88]	@ (800950c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d009      	beq.n	80094ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	4a15      	ldr	r2, [pc, #84]	@ (8009510 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80094bc:	4293      	cmp	r3, r2
 80094be:	d004      	beq.n	80094ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	4a13      	ldr	r2, [pc, #76]	@ (8009514 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d10c      	bne.n	80094e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80094d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	68ba      	ldr	r2, [r7, #8]
 80094d8:	4313      	orrs	r3, r2
 80094da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	68ba      	ldr	r2, [r7, #8]
 80094e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2201      	movs	r2, #1
 80094e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2200      	movs	r2, #0
 80094f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80094f4:	2300      	movs	r3, #0
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3714      	adds	r7, #20
 80094fa:	46bd      	mov	sp, r7
 80094fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009500:	4770      	bx	lr
 8009502:	bf00      	nop
 8009504:	40010000 	.word	0x40010000
 8009508:	40000400 	.word	0x40000400
 800950c:	40000800 	.word	0x40000800
 8009510:	40000c00 	.word	0x40000c00
 8009514:	40014000 	.word	0x40014000

08009518 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009518:	b480      	push	{r7}
 800951a:	b085      	sub	sp, #20
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009522:	2300      	movs	r3, #0
 8009524:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800952c:	2b01      	cmp	r3, #1
 800952e:	d101      	bne.n	8009534 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009530:	2302      	movs	r3, #2
 8009532:	e03d      	b.n	80095b0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2201      	movs	r2, #1
 8009538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	68db      	ldr	r3, [r3, #12]
 8009546:	4313      	orrs	r3, r2
 8009548:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	689b      	ldr	r3, [r3, #8]
 8009554:	4313      	orrs	r3, r2
 8009556:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	685b      	ldr	r3, [r3, #4]
 8009562:	4313      	orrs	r3, r2
 8009564:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	4313      	orrs	r3, r2
 8009572:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	691b      	ldr	r3, [r3, #16]
 800957e:	4313      	orrs	r3, r2
 8009580:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	695b      	ldr	r3, [r3, #20]
 800958c:	4313      	orrs	r3, r2
 800958e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	69db      	ldr	r3, [r3, #28]
 800959a:	4313      	orrs	r3, r2
 800959c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	68fa      	ldr	r2, [r7, #12]
 80095a4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2200      	movs	r2, #0
 80095aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80095ae:	2300      	movs	r3, #0
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3714      	adds	r7, #20
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr

080095bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b082      	sub	sp, #8
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d101      	bne.n	80095ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80095ca:	2301      	movs	r3, #1
 80095cc:	e042      	b.n	8009654 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80095d4:	b2db      	uxtb	r3, r3
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d106      	bne.n	80095e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2200      	movs	r2, #0
 80095de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f7fa fcd0 	bl	8003f88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2224      	movs	r2, #36	@ 0x24
 80095ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	68da      	ldr	r2, [r3, #12]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80095fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f000 fdbd 	bl	800a180 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	691a      	ldr	r2, [r3, #16]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009614:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	695a      	ldr	r2, [r3, #20]
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009624:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	68da      	ldr	r2, [r3, #12]
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009634:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2200      	movs	r2, #0
 800963a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2220      	movs	r2, #32
 8009640:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2220      	movs	r2, #32
 8009648:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2200      	movs	r2, #0
 8009650:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009652:	2300      	movs	r3, #0
}
 8009654:	4618      	mov	r0, r3
 8009656:	3708      	adds	r7, #8
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b08a      	sub	sp, #40	@ 0x28
 8009660:	af02      	add	r7, sp, #8
 8009662:	60f8      	str	r0, [r7, #12]
 8009664:	60b9      	str	r1, [r7, #8]
 8009666:	603b      	str	r3, [r7, #0]
 8009668:	4613      	mov	r3, r2
 800966a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800966c:	2300      	movs	r3, #0
 800966e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009676:	b2db      	uxtb	r3, r3
 8009678:	2b20      	cmp	r3, #32
 800967a:	d175      	bne.n	8009768 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d002      	beq.n	8009688 <HAL_UART_Transmit+0x2c>
 8009682:	88fb      	ldrh	r3, [r7, #6]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d101      	bne.n	800968c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009688:	2301      	movs	r3, #1
 800968a:	e06e      	b.n	800976a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	2200      	movs	r2, #0
 8009690:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	2221      	movs	r2, #33	@ 0x21
 8009696:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800969a:	f7fa fecb 	bl	8004434 <HAL_GetTick>
 800969e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	88fa      	ldrh	r2, [r7, #6]
 80096a4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	88fa      	ldrh	r2, [r7, #6]
 80096aa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	689b      	ldr	r3, [r3, #8]
 80096b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096b4:	d108      	bne.n	80096c8 <HAL_UART_Transmit+0x6c>
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	691b      	ldr	r3, [r3, #16]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d104      	bne.n	80096c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80096be:	2300      	movs	r3, #0
 80096c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	61bb      	str	r3, [r7, #24]
 80096c6:	e003      	b.n	80096d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80096cc:	2300      	movs	r3, #0
 80096ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80096d0:	e02e      	b.n	8009730 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	9300      	str	r3, [sp, #0]
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	2200      	movs	r2, #0
 80096da:	2180      	movs	r1, #128	@ 0x80
 80096dc:	68f8      	ldr	r0, [r7, #12]
 80096de:	f000 fb1f 	bl	8009d20 <UART_WaitOnFlagUntilTimeout>
 80096e2:	4603      	mov	r3, r0
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d005      	beq.n	80096f4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	2220      	movs	r2, #32
 80096ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80096f0:	2303      	movs	r3, #3
 80096f2:	e03a      	b.n	800976a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80096f4:	69fb      	ldr	r3, [r7, #28]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d10b      	bne.n	8009712 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80096fa:	69bb      	ldr	r3, [r7, #24]
 80096fc:	881b      	ldrh	r3, [r3, #0]
 80096fe:	461a      	mov	r2, r3
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009708:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800970a:	69bb      	ldr	r3, [r7, #24]
 800970c:	3302      	adds	r3, #2
 800970e:	61bb      	str	r3, [r7, #24]
 8009710:	e007      	b.n	8009722 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009712:	69fb      	ldr	r3, [r7, #28]
 8009714:	781a      	ldrb	r2, [r3, #0]
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800971c:	69fb      	ldr	r3, [r7, #28]
 800971e:	3301      	adds	r3, #1
 8009720:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009726:	b29b      	uxth	r3, r3
 8009728:	3b01      	subs	r3, #1
 800972a:	b29a      	uxth	r2, r3
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009734:	b29b      	uxth	r3, r3
 8009736:	2b00      	cmp	r3, #0
 8009738:	d1cb      	bne.n	80096d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	9300      	str	r3, [sp, #0]
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	2200      	movs	r2, #0
 8009742:	2140      	movs	r1, #64	@ 0x40
 8009744:	68f8      	ldr	r0, [r7, #12]
 8009746:	f000 faeb 	bl	8009d20 <UART_WaitOnFlagUntilTimeout>
 800974a:	4603      	mov	r3, r0
 800974c:	2b00      	cmp	r3, #0
 800974e:	d005      	beq.n	800975c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	2220      	movs	r2, #32
 8009754:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8009758:	2303      	movs	r3, #3
 800975a:	e006      	b.n	800976a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	2220      	movs	r2, #32
 8009760:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8009764:	2300      	movs	r3, #0
 8009766:	e000      	b.n	800976a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009768:	2302      	movs	r3, #2
  }
}
 800976a:	4618      	mov	r0, r3
 800976c:	3720      	adds	r7, #32
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}

08009772 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009772:	b580      	push	{r7, lr}
 8009774:	b084      	sub	sp, #16
 8009776:	af00      	add	r7, sp, #0
 8009778:	60f8      	str	r0, [r7, #12]
 800977a:	60b9      	str	r1, [r7, #8]
 800977c:	4613      	mov	r3, r2
 800977e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009786:	b2db      	uxtb	r3, r3
 8009788:	2b20      	cmp	r3, #32
 800978a:	d112      	bne.n	80097b2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d002      	beq.n	8009798 <HAL_UART_Receive_IT+0x26>
 8009792:	88fb      	ldrh	r3, [r7, #6]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d101      	bne.n	800979c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009798:	2301      	movs	r3, #1
 800979a:	e00b      	b.n	80097b4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	2200      	movs	r2, #0
 80097a0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80097a2:	88fb      	ldrh	r3, [r7, #6]
 80097a4:	461a      	mov	r2, r3
 80097a6:	68b9      	ldr	r1, [r7, #8]
 80097a8:	68f8      	ldr	r0, [r7, #12]
 80097aa:	f000 fb12 	bl	8009dd2 <UART_Start_Receive_IT>
 80097ae:	4603      	mov	r3, r0
 80097b0:	e000      	b.n	80097b4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80097b2:	2302      	movs	r3, #2
  }
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	3710      	adds	r7, #16
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}

080097bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b0ba      	sub	sp, #232	@ 0xe8
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	68db      	ldr	r3, [r3, #12]
 80097d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	695b      	ldr	r3, [r3, #20]
 80097de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80097e2:	2300      	movs	r3, #0
 80097e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80097e8:	2300      	movs	r3, #0
 80097ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80097ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097f2:	f003 030f 	and.w	r3, r3, #15
 80097f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80097fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d10f      	bne.n	8009822 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009806:	f003 0320 	and.w	r3, r3, #32
 800980a:	2b00      	cmp	r3, #0
 800980c:	d009      	beq.n	8009822 <HAL_UART_IRQHandler+0x66>
 800980e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009812:	f003 0320 	and.w	r3, r3, #32
 8009816:	2b00      	cmp	r3, #0
 8009818:	d003      	beq.n	8009822 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f000 fbf2 	bl	800a004 <UART_Receive_IT>
      return;
 8009820:	e25b      	b.n	8009cda <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009822:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009826:	2b00      	cmp	r3, #0
 8009828:	f000 80de 	beq.w	80099e8 <HAL_UART_IRQHandler+0x22c>
 800982c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009830:	f003 0301 	and.w	r3, r3, #1
 8009834:	2b00      	cmp	r3, #0
 8009836:	d106      	bne.n	8009846 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800983c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009840:	2b00      	cmp	r3, #0
 8009842:	f000 80d1 	beq.w	80099e8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800984a:	f003 0301 	and.w	r3, r3, #1
 800984e:	2b00      	cmp	r3, #0
 8009850:	d00b      	beq.n	800986a <HAL_UART_IRQHandler+0xae>
 8009852:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009856:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800985a:	2b00      	cmp	r3, #0
 800985c:	d005      	beq.n	800986a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009862:	f043 0201 	orr.w	r2, r3, #1
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800986a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800986e:	f003 0304 	and.w	r3, r3, #4
 8009872:	2b00      	cmp	r3, #0
 8009874:	d00b      	beq.n	800988e <HAL_UART_IRQHandler+0xd2>
 8009876:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800987a:	f003 0301 	and.w	r3, r3, #1
 800987e:	2b00      	cmp	r3, #0
 8009880:	d005      	beq.n	800988e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009886:	f043 0202 	orr.w	r2, r3, #2
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800988e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009892:	f003 0302 	and.w	r3, r3, #2
 8009896:	2b00      	cmp	r3, #0
 8009898:	d00b      	beq.n	80098b2 <HAL_UART_IRQHandler+0xf6>
 800989a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800989e:	f003 0301 	and.w	r3, r3, #1
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d005      	beq.n	80098b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098aa:	f043 0204 	orr.w	r2, r3, #4
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80098b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098b6:	f003 0308 	and.w	r3, r3, #8
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d011      	beq.n	80098e2 <HAL_UART_IRQHandler+0x126>
 80098be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098c2:	f003 0320 	and.w	r3, r3, #32
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d105      	bne.n	80098d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80098ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80098ce:	f003 0301 	and.w	r3, r3, #1
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d005      	beq.n	80098e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098da:	f043 0208 	orr.w	r2, r3, #8
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	f000 81f2 	beq.w	8009cd0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80098ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098f0:	f003 0320 	and.w	r3, r3, #32
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d008      	beq.n	800990a <HAL_UART_IRQHandler+0x14e>
 80098f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098fc:	f003 0320 	and.w	r3, r3, #32
 8009900:	2b00      	cmp	r3, #0
 8009902:	d002      	beq.n	800990a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f000 fb7d 	bl	800a004 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	695b      	ldr	r3, [r3, #20]
 8009910:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009914:	2b40      	cmp	r3, #64	@ 0x40
 8009916:	bf0c      	ite	eq
 8009918:	2301      	moveq	r3, #1
 800991a:	2300      	movne	r3, #0
 800991c:	b2db      	uxtb	r3, r3
 800991e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009926:	f003 0308 	and.w	r3, r3, #8
 800992a:	2b00      	cmp	r3, #0
 800992c:	d103      	bne.n	8009936 <HAL_UART_IRQHandler+0x17a>
 800992e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009932:	2b00      	cmp	r3, #0
 8009934:	d04f      	beq.n	80099d6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f000 fa85 	bl	8009e46 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	695b      	ldr	r3, [r3, #20]
 8009942:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009946:	2b40      	cmp	r3, #64	@ 0x40
 8009948:	d141      	bne.n	80099ce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	3314      	adds	r3, #20
 8009950:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009954:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009958:	e853 3f00 	ldrex	r3, [r3]
 800995c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009960:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009964:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009968:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	3314      	adds	r3, #20
 8009972:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009976:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800997a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800997e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009982:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009986:	e841 2300 	strex	r3, r2, [r1]
 800998a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800998e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009992:	2b00      	cmp	r3, #0
 8009994:	d1d9      	bne.n	800994a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800999a:	2b00      	cmp	r3, #0
 800999c:	d013      	beq.n	80099c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099a2:	4a7e      	ldr	r2, [pc, #504]	@ (8009b9c <HAL_UART_IRQHandler+0x3e0>)
 80099a4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099aa:	4618      	mov	r0, r3
 80099ac:	f7fb fa6c 	bl	8004e88 <HAL_DMA_Abort_IT>
 80099b0:	4603      	mov	r3, r0
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d016      	beq.n	80099e4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099bc:	687a      	ldr	r2, [r7, #4]
 80099be:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80099c0:	4610      	mov	r0, r2
 80099c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099c4:	e00e      	b.n	80099e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f000 f994 	bl	8009cf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099cc:	e00a      	b.n	80099e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 f990 	bl	8009cf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099d4:	e006      	b.n	80099e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f000 f98c 	bl	8009cf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2200      	movs	r2, #0
 80099e0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80099e2:	e175      	b.n	8009cd0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099e4:	bf00      	nop
    return;
 80099e6:	e173      	b.n	8009cd0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099ec:	2b01      	cmp	r3, #1
 80099ee:	f040 814f 	bne.w	8009c90 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80099f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099f6:	f003 0310 	and.w	r3, r3, #16
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	f000 8148 	beq.w	8009c90 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009a00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a04:	f003 0310 	and.w	r3, r3, #16
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	f000 8141 	beq.w	8009c90 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009a0e:	2300      	movs	r3, #0
 8009a10:	60bb      	str	r3, [r7, #8]
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	60bb      	str	r3, [r7, #8]
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	685b      	ldr	r3, [r3, #4]
 8009a20:	60bb      	str	r3, [r7, #8]
 8009a22:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	695b      	ldr	r3, [r3, #20]
 8009a2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a2e:	2b40      	cmp	r3, #64	@ 0x40
 8009a30:	f040 80b6 	bne.w	8009ba0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	685b      	ldr	r3, [r3, #4]
 8009a3c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009a40:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	f000 8145 	beq.w	8009cd4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009a4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009a52:	429a      	cmp	r2, r3
 8009a54:	f080 813e 	bcs.w	8009cd4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009a5e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a64:	69db      	ldr	r3, [r3, #28]
 8009a66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a6a:	f000 8088 	beq.w	8009b7e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	330c      	adds	r3, #12
 8009a74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a78:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009a7c:	e853 3f00 	ldrex	r3, [r3]
 8009a80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009a84:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009a88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	330c      	adds	r3, #12
 8009a96:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009a9a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009a9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aa2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009aa6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009aaa:	e841 2300 	strex	r3, r2, [r1]
 8009aae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009ab2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d1d9      	bne.n	8009a6e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	3314      	adds	r3, #20
 8009ac0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ac2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009ac4:	e853 3f00 	ldrex	r3, [r3]
 8009ac8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009aca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009acc:	f023 0301 	bic.w	r3, r3, #1
 8009ad0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	3314      	adds	r3, #20
 8009ada:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009ade:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009ae2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ae4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009ae6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009aea:	e841 2300 	strex	r3, r2, [r1]
 8009aee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009af0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d1e1      	bne.n	8009aba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	3314      	adds	r3, #20
 8009afc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009afe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009b00:	e853 3f00 	ldrex	r3, [r3]
 8009b04:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009b06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009b08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	3314      	adds	r3, #20
 8009b16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009b1a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009b1c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b1e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009b20:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009b22:	e841 2300 	strex	r3, r2, [r1]
 8009b26:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009b28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d1e3      	bne.n	8009af6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2220      	movs	r2, #32
 8009b32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	330c      	adds	r3, #12
 8009b42:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b46:	e853 3f00 	ldrex	r3, [r3]
 8009b4a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009b4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009b4e:	f023 0310 	bic.w	r3, r3, #16
 8009b52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	330c      	adds	r3, #12
 8009b5c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009b60:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009b62:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b64:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009b66:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009b68:	e841 2300 	strex	r3, r2, [r1]
 8009b6c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009b6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d1e3      	bne.n	8009b3c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f7fb f915 	bl	8004da8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2202      	movs	r2, #2
 8009b82:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009b8c:	b29b      	uxth	r3, r3
 8009b8e:	1ad3      	subs	r3, r2, r3
 8009b90:	b29b      	uxth	r3, r3
 8009b92:	4619      	mov	r1, r3
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f000 f8b7 	bl	8009d08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009b9a:	e09b      	b.n	8009cd4 <HAL_UART_IRQHandler+0x518>
 8009b9c:	08009f0d 	.word	0x08009f0d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009ba8:	b29b      	uxth	r3, r3
 8009baa:	1ad3      	subs	r3, r2, r3
 8009bac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009bb4:	b29b      	uxth	r3, r3
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	f000 808e 	beq.w	8009cd8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009bbc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	f000 8089 	beq.w	8009cd8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	330c      	adds	r3, #12
 8009bcc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bd0:	e853 3f00 	ldrex	r3, [r3]
 8009bd4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009bd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bd8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009bdc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	330c      	adds	r3, #12
 8009be6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009bea:	647a      	str	r2, [r7, #68]	@ 0x44
 8009bec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009bf0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009bf2:	e841 2300 	strex	r3, r2, [r1]
 8009bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009bf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d1e3      	bne.n	8009bc6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	3314      	adds	r3, #20
 8009c04:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c08:	e853 3f00 	ldrex	r3, [r3]
 8009c0c:	623b      	str	r3, [r7, #32]
   return(result);
 8009c0e:	6a3b      	ldr	r3, [r7, #32]
 8009c10:	f023 0301 	bic.w	r3, r3, #1
 8009c14:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	3314      	adds	r3, #20
 8009c1e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009c22:	633a      	str	r2, [r7, #48]	@ 0x30
 8009c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009c28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c2a:	e841 2300 	strex	r3, r2, [r1]
 8009c2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d1e3      	bne.n	8009bfe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2220      	movs	r2, #32
 8009c3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2200      	movs	r2, #0
 8009c42:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	330c      	adds	r3, #12
 8009c4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	e853 3f00 	ldrex	r3, [r3]
 8009c52:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	f023 0310 	bic.w	r3, r3, #16
 8009c5a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	330c      	adds	r3, #12
 8009c64:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009c68:	61fa      	str	r2, [r7, #28]
 8009c6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c6c:	69b9      	ldr	r1, [r7, #24]
 8009c6e:	69fa      	ldr	r2, [r7, #28]
 8009c70:	e841 2300 	strex	r3, r2, [r1]
 8009c74:	617b      	str	r3, [r7, #20]
   return(result);
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d1e3      	bne.n	8009c44 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2202      	movs	r2, #2
 8009c80:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009c82:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009c86:	4619      	mov	r1, r3
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f000 f83d 	bl	8009d08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009c8e:	e023      	b.n	8009cd8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009c90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d009      	beq.n	8009cb0 <HAL_UART_IRQHandler+0x4f4>
 8009c9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ca0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d003      	beq.n	8009cb0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f000 f943 	bl	8009f34 <UART_Transmit_IT>
    return;
 8009cae:	e014      	b.n	8009cda <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009cb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d00e      	beq.n	8009cda <HAL_UART_IRQHandler+0x51e>
 8009cbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009cc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d008      	beq.n	8009cda <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f000 f983 	bl	8009fd4 <UART_EndTransmit_IT>
    return;
 8009cce:	e004      	b.n	8009cda <HAL_UART_IRQHandler+0x51e>
    return;
 8009cd0:	bf00      	nop
 8009cd2:	e002      	b.n	8009cda <HAL_UART_IRQHandler+0x51e>
      return;
 8009cd4:	bf00      	nop
 8009cd6:	e000      	b.n	8009cda <HAL_UART_IRQHandler+0x51e>
      return;
 8009cd8:	bf00      	nop
  }
}
 8009cda:	37e8      	adds	r7, #232	@ 0xe8
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}

08009ce0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b083      	sub	sp, #12
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009ce8:	bf00      	nop
 8009cea:	370c      	adds	r7, #12
 8009cec:	46bd      	mov	sp, r7
 8009cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf2:	4770      	bx	lr

08009cf4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b083      	sub	sp, #12
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009cfc:	bf00      	nop
 8009cfe:	370c      	adds	r7, #12
 8009d00:	46bd      	mov	sp, r7
 8009d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d06:	4770      	bx	lr

08009d08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009d08:	b480      	push	{r7}
 8009d0a:	b083      	sub	sp, #12
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
 8009d10:	460b      	mov	r3, r1
 8009d12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009d14:	bf00      	nop
 8009d16:	370c      	adds	r7, #12
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1e:	4770      	bx	lr

08009d20 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b086      	sub	sp, #24
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	60f8      	str	r0, [r7, #12]
 8009d28:	60b9      	str	r1, [r7, #8]
 8009d2a:	603b      	str	r3, [r7, #0]
 8009d2c:	4613      	mov	r3, r2
 8009d2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d30:	e03b      	b.n	8009daa <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d32:	6a3b      	ldr	r3, [r7, #32]
 8009d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d38:	d037      	beq.n	8009daa <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d3a:	f7fa fb7b 	bl	8004434 <HAL_GetTick>
 8009d3e:	4602      	mov	r2, r0
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	1ad3      	subs	r3, r2, r3
 8009d44:	6a3a      	ldr	r2, [r7, #32]
 8009d46:	429a      	cmp	r2, r3
 8009d48:	d302      	bcc.n	8009d50 <UART_WaitOnFlagUntilTimeout+0x30>
 8009d4a:	6a3b      	ldr	r3, [r7, #32]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d101      	bne.n	8009d54 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009d50:	2303      	movs	r3, #3
 8009d52:	e03a      	b.n	8009dca <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	68db      	ldr	r3, [r3, #12]
 8009d5a:	f003 0304 	and.w	r3, r3, #4
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d023      	beq.n	8009daa <UART_WaitOnFlagUntilTimeout+0x8a>
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	2b80      	cmp	r3, #128	@ 0x80
 8009d66:	d020      	beq.n	8009daa <UART_WaitOnFlagUntilTimeout+0x8a>
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	2b40      	cmp	r3, #64	@ 0x40
 8009d6c:	d01d      	beq.n	8009daa <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f003 0308 	and.w	r3, r3, #8
 8009d78:	2b08      	cmp	r3, #8
 8009d7a:	d116      	bne.n	8009daa <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	617b      	str	r3, [r7, #20]
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	617b      	str	r3, [r7, #20]
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	685b      	ldr	r3, [r3, #4]
 8009d8e:	617b      	str	r3, [r7, #20]
 8009d90:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009d92:	68f8      	ldr	r0, [r7, #12]
 8009d94:	f000 f857 	bl	8009e46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	2208      	movs	r2, #8
 8009d9c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	2200      	movs	r2, #0
 8009da2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009da6:	2301      	movs	r3, #1
 8009da8:	e00f      	b.n	8009dca <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	681a      	ldr	r2, [r3, #0]
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	4013      	ands	r3, r2
 8009db4:	68ba      	ldr	r2, [r7, #8]
 8009db6:	429a      	cmp	r2, r3
 8009db8:	bf0c      	ite	eq
 8009dba:	2301      	moveq	r3, #1
 8009dbc:	2300      	movne	r3, #0
 8009dbe:	b2db      	uxtb	r3, r3
 8009dc0:	461a      	mov	r2, r3
 8009dc2:	79fb      	ldrb	r3, [r7, #7]
 8009dc4:	429a      	cmp	r2, r3
 8009dc6:	d0b4      	beq.n	8009d32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009dc8:	2300      	movs	r3, #0
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	3718      	adds	r7, #24
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}

08009dd2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009dd2:	b480      	push	{r7}
 8009dd4:	b085      	sub	sp, #20
 8009dd6:	af00      	add	r7, sp, #0
 8009dd8:	60f8      	str	r0, [r7, #12]
 8009dda:	60b9      	str	r1, [r7, #8]
 8009ddc:	4613      	mov	r3, r2
 8009dde:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	68ba      	ldr	r2, [r7, #8]
 8009de4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	88fa      	ldrh	r2, [r7, #6]
 8009dea:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	88fa      	ldrh	r2, [r7, #6]
 8009df0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	2200      	movs	r2, #0
 8009df6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	2222      	movs	r2, #34	@ 0x22
 8009dfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	691b      	ldr	r3, [r3, #16]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d007      	beq.n	8009e18 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	68da      	ldr	r2, [r3, #12]
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009e16:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	695a      	ldr	r2, [r3, #20]
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f042 0201 	orr.w	r2, r2, #1
 8009e26:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	68da      	ldr	r2, [r3, #12]
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f042 0220 	orr.w	r2, r2, #32
 8009e36:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009e38:	2300      	movs	r3, #0
}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3714      	adds	r7, #20
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e44:	4770      	bx	lr

08009e46 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009e46:	b480      	push	{r7}
 8009e48:	b095      	sub	sp, #84	@ 0x54
 8009e4a:	af00      	add	r7, sp, #0
 8009e4c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	330c      	adds	r3, #12
 8009e54:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e58:	e853 3f00 	ldrex	r3, [r3]
 8009e5c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009e64:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	330c      	adds	r3, #12
 8009e6c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009e6e:	643a      	str	r2, [r7, #64]	@ 0x40
 8009e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e72:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009e74:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009e76:	e841 2300 	strex	r3, r2, [r1]
 8009e7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009e7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d1e5      	bne.n	8009e4e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	3314      	adds	r3, #20
 8009e88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e8a:	6a3b      	ldr	r3, [r7, #32]
 8009e8c:	e853 3f00 	ldrex	r3, [r3]
 8009e90:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e92:	69fb      	ldr	r3, [r7, #28]
 8009e94:	f023 0301 	bic.w	r3, r3, #1
 8009e98:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	3314      	adds	r3, #20
 8009ea0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009ea2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ea6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009ea8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009eaa:	e841 2300 	strex	r3, r2, [r1]
 8009eae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d1e5      	bne.n	8009e82 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009eba:	2b01      	cmp	r3, #1
 8009ebc:	d119      	bne.n	8009ef2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	330c      	adds	r3, #12
 8009ec4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	e853 3f00 	ldrex	r3, [r3]
 8009ecc:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	f023 0310 	bic.w	r3, r3, #16
 8009ed4:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	330c      	adds	r3, #12
 8009edc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009ede:	61ba      	str	r2, [r7, #24]
 8009ee0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ee2:	6979      	ldr	r1, [r7, #20]
 8009ee4:	69ba      	ldr	r2, [r7, #24]
 8009ee6:	e841 2300 	strex	r3, r2, [r1]
 8009eea:	613b      	str	r3, [r7, #16]
   return(result);
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d1e5      	bne.n	8009ebe <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2220      	movs	r2, #32
 8009ef6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2200      	movs	r2, #0
 8009efe:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009f00:	bf00      	nop
 8009f02:	3754      	adds	r7, #84	@ 0x54
 8009f04:	46bd      	mov	sp, r7
 8009f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0a:	4770      	bx	lr

08009f0c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b084      	sub	sp, #16
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f18:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	2200      	movs	r2, #0
 8009f24:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009f26:	68f8      	ldr	r0, [r7, #12]
 8009f28:	f7ff fee4 	bl	8009cf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f2c:	bf00      	nop
 8009f2e:	3710      	adds	r7, #16
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}

08009f34 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b085      	sub	sp, #20
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009f42:	b2db      	uxtb	r3, r3
 8009f44:	2b21      	cmp	r3, #33	@ 0x21
 8009f46:	d13e      	bne.n	8009fc6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	689b      	ldr	r3, [r3, #8]
 8009f4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f50:	d114      	bne.n	8009f7c <UART_Transmit_IT+0x48>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	691b      	ldr	r3, [r3, #16]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d110      	bne.n	8009f7c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6a1b      	ldr	r3, [r3, #32]
 8009f5e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	881b      	ldrh	r3, [r3, #0]
 8009f64:	461a      	mov	r2, r3
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009f6e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6a1b      	ldr	r3, [r3, #32]
 8009f74:	1c9a      	adds	r2, r3, #2
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	621a      	str	r2, [r3, #32]
 8009f7a:	e008      	b.n	8009f8e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6a1b      	ldr	r3, [r3, #32]
 8009f80:	1c59      	adds	r1, r3, #1
 8009f82:	687a      	ldr	r2, [r7, #4]
 8009f84:	6211      	str	r1, [r2, #32]
 8009f86:	781a      	ldrb	r2, [r3, #0]
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009f92:	b29b      	uxth	r3, r3
 8009f94:	3b01      	subs	r3, #1
 8009f96:	b29b      	uxth	r3, r3
 8009f98:	687a      	ldr	r2, [r7, #4]
 8009f9a:	4619      	mov	r1, r3
 8009f9c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d10f      	bne.n	8009fc2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	68da      	ldr	r2, [r3, #12]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009fb0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	68da      	ldr	r2, [r3, #12]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009fc0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	e000      	b.n	8009fc8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009fc6:	2302      	movs	r3, #2
  }
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	3714      	adds	r7, #20
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd2:	4770      	bx	lr

08009fd4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b082      	sub	sp, #8
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	68da      	ldr	r2, [r3, #12]
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009fea:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2220      	movs	r2, #32
 8009ff0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f7ff fe73 	bl	8009ce0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009ffa:	2300      	movs	r3, #0
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	3708      	adds	r7, #8
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}

0800a004 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b08c      	sub	sp, #48	@ 0x30
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a012:	b2db      	uxtb	r3, r3
 800a014:	2b22      	cmp	r3, #34	@ 0x22
 800a016:	f040 80ae 	bne.w	800a176 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	689b      	ldr	r3, [r3, #8]
 800a01e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a022:	d117      	bne.n	800a054 <UART_Receive_IT+0x50>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	691b      	ldr	r3, [r3, #16]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d113      	bne.n	800a054 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a02c:	2300      	movs	r3, #0
 800a02e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a034:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	b29b      	uxth	r3, r3
 800a03e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a042:	b29a      	uxth	r2, r3
 800a044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a046:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a04c:	1c9a      	adds	r2, r3, #2
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	629a      	str	r2, [r3, #40]	@ 0x28
 800a052:	e026      	b.n	800a0a2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a058:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800a05a:	2300      	movs	r3, #0
 800a05c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	689b      	ldr	r3, [r3, #8]
 800a062:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a066:	d007      	beq.n	800a078 <UART_Receive_IT+0x74>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	689b      	ldr	r3, [r3, #8]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d10a      	bne.n	800a086 <UART_Receive_IT+0x82>
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	691b      	ldr	r3, [r3, #16]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d106      	bne.n	800a086 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	685b      	ldr	r3, [r3, #4]
 800a07e:	b2da      	uxtb	r2, r3
 800a080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a082:	701a      	strb	r2, [r3, #0]
 800a084:	e008      	b.n	800a098 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	685b      	ldr	r3, [r3, #4]
 800a08c:	b2db      	uxtb	r3, r3
 800a08e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a092:	b2da      	uxtb	r2, r3
 800a094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a096:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a09c:	1c5a      	adds	r2, r3, #1
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a0a6:	b29b      	uxth	r3, r3
 800a0a8:	3b01      	subs	r3, #1
 800a0aa:	b29b      	uxth	r3, r3
 800a0ac:	687a      	ldr	r2, [r7, #4]
 800a0ae:	4619      	mov	r1, r3
 800a0b0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d15d      	bne.n	800a172 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	68da      	ldr	r2, [r3, #12]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f022 0220 	bic.w	r2, r2, #32
 800a0c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	68da      	ldr	r2, [r3, #12]
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a0d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	695a      	ldr	r2, [r3, #20]
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f022 0201 	bic.w	r2, r2, #1
 800a0e4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2220      	movs	r2, #32
 800a0ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0f8:	2b01      	cmp	r3, #1
 800a0fa:	d135      	bne.n	800a168 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2200      	movs	r2, #0
 800a100:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	330c      	adds	r3, #12
 800a108:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	e853 3f00 	ldrex	r3, [r3]
 800a110:	613b      	str	r3, [r7, #16]
   return(result);
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	f023 0310 	bic.w	r3, r3, #16
 800a118:	627b      	str	r3, [r7, #36]	@ 0x24
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	330c      	adds	r3, #12
 800a120:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a122:	623a      	str	r2, [r7, #32]
 800a124:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a126:	69f9      	ldr	r1, [r7, #28]
 800a128:	6a3a      	ldr	r2, [r7, #32]
 800a12a:	e841 2300 	strex	r3, r2, [r1]
 800a12e:	61bb      	str	r3, [r7, #24]
   return(result);
 800a130:	69bb      	ldr	r3, [r7, #24]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d1e5      	bne.n	800a102 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f003 0310 	and.w	r3, r3, #16
 800a140:	2b10      	cmp	r3, #16
 800a142:	d10a      	bne.n	800a15a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a144:	2300      	movs	r3, #0
 800a146:	60fb      	str	r3, [r7, #12]
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	60fb      	str	r3, [r7, #12]
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	685b      	ldr	r3, [r3, #4]
 800a156:	60fb      	str	r3, [r7, #12]
 800a158:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a15e:	4619      	mov	r1, r3
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f7ff fdd1 	bl	8009d08 <HAL_UARTEx_RxEventCallback>
 800a166:	e002      	b.n	800a16e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f7f8 fb71 	bl	8002850 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a16e:	2300      	movs	r3, #0
 800a170:	e002      	b.n	800a178 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a172:	2300      	movs	r3, #0
 800a174:	e000      	b.n	800a178 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a176:	2302      	movs	r3, #2
  }
}
 800a178:	4618      	mov	r0, r3
 800a17a:	3730      	adds	r7, #48	@ 0x30
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}

0800a180 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a180:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a184:	b0c0      	sub	sp, #256	@ 0x100
 800a186:	af00      	add	r7, sp, #0
 800a188:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a18c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	691b      	ldr	r3, [r3, #16]
 800a194:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a19c:	68d9      	ldr	r1, [r3, #12]
 800a19e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1a2:	681a      	ldr	r2, [r3, #0]
 800a1a4:	ea40 0301 	orr.w	r3, r0, r1
 800a1a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a1aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1ae:	689a      	ldr	r2, [r3, #8]
 800a1b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1b4:	691b      	ldr	r3, [r3, #16]
 800a1b6:	431a      	orrs	r2, r3
 800a1b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1bc:	695b      	ldr	r3, [r3, #20]
 800a1be:	431a      	orrs	r2, r3
 800a1c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1c4:	69db      	ldr	r3, [r3, #28]
 800a1c6:	4313      	orrs	r3, r2
 800a1c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a1cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	68db      	ldr	r3, [r3, #12]
 800a1d4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a1d8:	f021 010c 	bic.w	r1, r1, #12
 800a1dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1e0:	681a      	ldr	r2, [r3, #0]
 800a1e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a1e6:	430b      	orrs	r3, r1
 800a1e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a1ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	695b      	ldr	r3, [r3, #20]
 800a1f2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a1f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1fa:	6999      	ldr	r1, [r3, #24]
 800a1fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a200:	681a      	ldr	r2, [r3, #0]
 800a202:	ea40 0301 	orr.w	r3, r0, r1
 800a206:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a20c:	681a      	ldr	r2, [r3, #0]
 800a20e:	4b8f      	ldr	r3, [pc, #572]	@ (800a44c <UART_SetConfig+0x2cc>)
 800a210:	429a      	cmp	r2, r3
 800a212:	d005      	beq.n	800a220 <UART_SetConfig+0xa0>
 800a214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a218:	681a      	ldr	r2, [r3, #0]
 800a21a:	4b8d      	ldr	r3, [pc, #564]	@ (800a450 <UART_SetConfig+0x2d0>)
 800a21c:	429a      	cmp	r2, r3
 800a21e:	d104      	bne.n	800a22a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a220:	f7fd f964 	bl	80074ec <HAL_RCC_GetPCLK2Freq>
 800a224:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a228:	e003      	b.n	800a232 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a22a:	f7fd f94b 	bl	80074c4 <HAL_RCC_GetPCLK1Freq>
 800a22e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a236:	69db      	ldr	r3, [r3, #28]
 800a238:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a23c:	f040 810c 	bne.w	800a458 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a240:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a244:	2200      	movs	r2, #0
 800a246:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a24a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a24e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a252:	4622      	mov	r2, r4
 800a254:	462b      	mov	r3, r5
 800a256:	1891      	adds	r1, r2, r2
 800a258:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a25a:	415b      	adcs	r3, r3
 800a25c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a25e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a262:	4621      	mov	r1, r4
 800a264:	eb12 0801 	adds.w	r8, r2, r1
 800a268:	4629      	mov	r1, r5
 800a26a:	eb43 0901 	adc.w	r9, r3, r1
 800a26e:	f04f 0200 	mov.w	r2, #0
 800a272:	f04f 0300 	mov.w	r3, #0
 800a276:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a27a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a27e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a282:	4690      	mov	r8, r2
 800a284:	4699      	mov	r9, r3
 800a286:	4623      	mov	r3, r4
 800a288:	eb18 0303 	adds.w	r3, r8, r3
 800a28c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a290:	462b      	mov	r3, r5
 800a292:	eb49 0303 	adc.w	r3, r9, r3
 800a296:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a29a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a29e:	685b      	ldr	r3, [r3, #4]
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a2a6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a2aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a2ae:	460b      	mov	r3, r1
 800a2b0:	18db      	adds	r3, r3, r3
 800a2b2:	653b      	str	r3, [r7, #80]	@ 0x50
 800a2b4:	4613      	mov	r3, r2
 800a2b6:	eb42 0303 	adc.w	r3, r2, r3
 800a2ba:	657b      	str	r3, [r7, #84]	@ 0x54
 800a2bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a2c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a2c4:	f7f6 fce8 	bl	8000c98 <__aeabi_uldivmod>
 800a2c8:	4602      	mov	r2, r0
 800a2ca:	460b      	mov	r3, r1
 800a2cc:	4b61      	ldr	r3, [pc, #388]	@ (800a454 <UART_SetConfig+0x2d4>)
 800a2ce:	fba3 2302 	umull	r2, r3, r3, r2
 800a2d2:	095b      	lsrs	r3, r3, #5
 800a2d4:	011c      	lsls	r4, r3, #4
 800a2d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a2da:	2200      	movs	r2, #0
 800a2dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a2e0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a2e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a2e8:	4642      	mov	r2, r8
 800a2ea:	464b      	mov	r3, r9
 800a2ec:	1891      	adds	r1, r2, r2
 800a2ee:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a2f0:	415b      	adcs	r3, r3
 800a2f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a2f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a2f8:	4641      	mov	r1, r8
 800a2fa:	eb12 0a01 	adds.w	sl, r2, r1
 800a2fe:	4649      	mov	r1, r9
 800a300:	eb43 0b01 	adc.w	fp, r3, r1
 800a304:	f04f 0200 	mov.w	r2, #0
 800a308:	f04f 0300 	mov.w	r3, #0
 800a30c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a310:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a314:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a318:	4692      	mov	sl, r2
 800a31a:	469b      	mov	fp, r3
 800a31c:	4643      	mov	r3, r8
 800a31e:	eb1a 0303 	adds.w	r3, sl, r3
 800a322:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a326:	464b      	mov	r3, r9
 800a328:	eb4b 0303 	adc.w	r3, fp, r3
 800a32c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a334:	685b      	ldr	r3, [r3, #4]
 800a336:	2200      	movs	r2, #0
 800a338:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a33c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a340:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a344:	460b      	mov	r3, r1
 800a346:	18db      	adds	r3, r3, r3
 800a348:	643b      	str	r3, [r7, #64]	@ 0x40
 800a34a:	4613      	mov	r3, r2
 800a34c:	eb42 0303 	adc.w	r3, r2, r3
 800a350:	647b      	str	r3, [r7, #68]	@ 0x44
 800a352:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a356:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a35a:	f7f6 fc9d 	bl	8000c98 <__aeabi_uldivmod>
 800a35e:	4602      	mov	r2, r0
 800a360:	460b      	mov	r3, r1
 800a362:	4611      	mov	r1, r2
 800a364:	4b3b      	ldr	r3, [pc, #236]	@ (800a454 <UART_SetConfig+0x2d4>)
 800a366:	fba3 2301 	umull	r2, r3, r3, r1
 800a36a:	095b      	lsrs	r3, r3, #5
 800a36c:	2264      	movs	r2, #100	@ 0x64
 800a36e:	fb02 f303 	mul.w	r3, r2, r3
 800a372:	1acb      	subs	r3, r1, r3
 800a374:	00db      	lsls	r3, r3, #3
 800a376:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a37a:	4b36      	ldr	r3, [pc, #216]	@ (800a454 <UART_SetConfig+0x2d4>)
 800a37c:	fba3 2302 	umull	r2, r3, r3, r2
 800a380:	095b      	lsrs	r3, r3, #5
 800a382:	005b      	lsls	r3, r3, #1
 800a384:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a388:	441c      	add	r4, r3
 800a38a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a38e:	2200      	movs	r2, #0
 800a390:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a394:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a398:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a39c:	4642      	mov	r2, r8
 800a39e:	464b      	mov	r3, r9
 800a3a0:	1891      	adds	r1, r2, r2
 800a3a2:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a3a4:	415b      	adcs	r3, r3
 800a3a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a3ac:	4641      	mov	r1, r8
 800a3ae:	1851      	adds	r1, r2, r1
 800a3b0:	6339      	str	r1, [r7, #48]	@ 0x30
 800a3b2:	4649      	mov	r1, r9
 800a3b4:	414b      	adcs	r3, r1
 800a3b6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3b8:	f04f 0200 	mov.w	r2, #0
 800a3bc:	f04f 0300 	mov.w	r3, #0
 800a3c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a3c4:	4659      	mov	r1, fp
 800a3c6:	00cb      	lsls	r3, r1, #3
 800a3c8:	4651      	mov	r1, sl
 800a3ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a3ce:	4651      	mov	r1, sl
 800a3d0:	00ca      	lsls	r2, r1, #3
 800a3d2:	4610      	mov	r0, r2
 800a3d4:	4619      	mov	r1, r3
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	4642      	mov	r2, r8
 800a3da:	189b      	adds	r3, r3, r2
 800a3dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a3e0:	464b      	mov	r3, r9
 800a3e2:	460a      	mov	r2, r1
 800a3e4:	eb42 0303 	adc.w	r3, r2, r3
 800a3e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a3ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a3f0:	685b      	ldr	r3, [r3, #4]
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a3f8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a3fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a400:	460b      	mov	r3, r1
 800a402:	18db      	adds	r3, r3, r3
 800a404:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a406:	4613      	mov	r3, r2
 800a408:	eb42 0303 	adc.w	r3, r2, r3
 800a40c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a40e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a412:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a416:	f7f6 fc3f 	bl	8000c98 <__aeabi_uldivmod>
 800a41a:	4602      	mov	r2, r0
 800a41c:	460b      	mov	r3, r1
 800a41e:	4b0d      	ldr	r3, [pc, #52]	@ (800a454 <UART_SetConfig+0x2d4>)
 800a420:	fba3 1302 	umull	r1, r3, r3, r2
 800a424:	095b      	lsrs	r3, r3, #5
 800a426:	2164      	movs	r1, #100	@ 0x64
 800a428:	fb01 f303 	mul.w	r3, r1, r3
 800a42c:	1ad3      	subs	r3, r2, r3
 800a42e:	00db      	lsls	r3, r3, #3
 800a430:	3332      	adds	r3, #50	@ 0x32
 800a432:	4a08      	ldr	r2, [pc, #32]	@ (800a454 <UART_SetConfig+0x2d4>)
 800a434:	fba2 2303 	umull	r2, r3, r2, r3
 800a438:	095b      	lsrs	r3, r3, #5
 800a43a:	f003 0207 	and.w	r2, r3, #7
 800a43e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	4422      	add	r2, r4
 800a446:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a448:	e106      	b.n	800a658 <UART_SetConfig+0x4d8>
 800a44a:	bf00      	nop
 800a44c:	40011000 	.word	0x40011000
 800a450:	40011400 	.word	0x40011400
 800a454:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a458:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a45c:	2200      	movs	r2, #0
 800a45e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a462:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a466:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a46a:	4642      	mov	r2, r8
 800a46c:	464b      	mov	r3, r9
 800a46e:	1891      	adds	r1, r2, r2
 800a470:	6239      	str	r1, [r7, #32]
 800a472:	415b      	adcs	r3, r3
 800a474:	627b      	str	r3, [r7, #36]	@ 0x24
 800a476:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a47a:	4641      	mov	r1, r8
 800a47c:	1854      	adds	r4, r2, r1
 800a47e:	4649      	mov	r1, r9
 800a480:	eb43 0501 	adc.w	r5, r3, r1
 800a484:	f04f 0200 	mov.w	r2, #0
 800a488:	f04f 0300 	mov.w	r3, #0
 800a48c:	00eb      	lsls	r3, r5, #3
 800a48e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a492:	00e2      	lsls	r2, r4, #3
 800a494:	4614      	mov	r4, r2
 800a496:	461d      	mov	r5, r3
 800a498:	4643      	mov	r3, r8
 800a49a:	18e3      	adds	r3, r4, r3
 800a49c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a4a0:	464b      	mov	r3, r9
 800a4a2:	eb45 0303 	adc.w	r3, r5, r3
 800a4a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a4aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a4ae:	685b      	ldr	r3, [r3, #4]
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a4b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a4ba:	f04f 0200 	mov.w	r2, #0
 800a4be:	f04f 0300 	mov.w	r3, #0
 800a4c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a4c6:	4629      	mov	r1, r5
 800a4c8:	008b      	lsls	r3, r1, #2
 800a4ca:	4621      	mov	r1, r4
 800a4cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a4d0:	4621      	mov	r1, r4
 800a4d2:	008a      	lsls	r2, r1, #2
 800a4d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a4d8:	f7f6 fbde 	bl	8000c98 <__aeabi_uldivmod>
 800a4dc:	4602      	mov	r2, r0
 800a4de:	460b      	mov	r3, r1
 800a4e0:	4b60      	ldr	r3, [pc, #384]	@ (800a664 <UART_SetConfig+0x4e4>)
 800a4e2:	fba3 2302 	umull	r2, r3, r3, r2
 800a4e6:	095b      	lsrs	r3, r3, #5
 800a4e8:	011c      	lsls	r4, r3, #4
 800a4ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a4f4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a4f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a4fc:	4642      	mov	r2, r8
 800a4fe:	464b      	mov	r3, r9
 800a500:	1891      	adds	r1, r2, r2
 800a502:	61b9      	str	r1, [r7, #24]
 800a504:	415b      	adcs	r3, r3
 800a506:	61fb      	str	r3, [r7, #28]
 800a508:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a50c:	4641      	mov	r1, r8
 800a50e:	1851      	adds	r1, r2, r1
 800a510:	6139      	str	r1, [r7, #16]
 800a512:	4649      	mov	r1, r9
 800a514:	414b      	adcs	r3, r1
 800a516:	617b      	str	r3, [r7, #20]
 800a518:	f04f 0200 	mov.w	r2, #0
 800a51c:	f04f 0300 	mov.w	r3, #0
 800a520:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a524:	4659      	mov	r1, fp
 800a526:	00cb      	lsls	r3, r1, #3
 800a528:	4651      	mov	r1, sl
 800a52a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a52e:	4651      	mov	r1, sl
 800a530:	00ca      	lsls	r2, r1, #3
 800a532:	4610      	mov	r0, r2
 800a534:	4619      	mov	r1, r3
 800a536:	4603      	mov	r3, r0
 800a538:	4642      	mov	r2, r8
 800a53a:	189b      	adds	r3, r3, r2
 800a53c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a540:	464b      	mov	r3, r9
 800a542:	460a      	mov	r2, r1
 800a544:	eb42 0303 	adc.w	r3, r2, r3
 800a548:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a54c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a550:	685b      	ldr	r3, [r3, #4]
 800a552:	2200      	movs	r2, #0
 800a554:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a556:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a558:	f04f 0200 	mov.w	r2, #0
 800a55c:	f04f 0300 	mov.w	r3, #0
 800a560:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a564:	4649      	mov	r1, r9
 800a566:	008b      	lsls	r3, r1, #2
 800a568:	4641      	mov	r1, r8
 800a56a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a56e:	4641      	mov	r1, r8
 800a570:	008a      	lsls	r2, r1, #2
 800a572:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a576:	f7f6 fb8f 	bl	8000c98 <__aeabi_uldivmod>
 800a57a:	4602      	mov	r2, r0
 800a57c:	460b      	mov	r3, r1
 800a57e:	4611      	mov	r1, r2
 800a580:	4b38      	ldr	r3, [pc, #224]	@ (800a664 <UART_SetConfig+0x4e4>)
 800a582:	fba3 2301 	umull	r2, r3, r3, r1
 800a586:	095b      	lsrs	r3, r3, #5
 800a588:	2264      	movs	r2, #100	@ 0x64
 800a58a:	fb02 f303 	mul.w	r3, r2, r3
 800a58e:	1acb      	subs	r3, r1, r3
 800a590:	011b      	lsls	r3, r3, #4
 800a592:	3332      	adds	r3, #50	@ 0x32
 800a594:	4a33      	ldr	r2, [pc, #204]	@ (800a664 <UART_SetConfig+0x4e4>)
 800a596:	fba2 2303 	umull	r2, r3, r2, r3
 800a59a:	095b      	lsrs	r3, r3, #5
 800a59c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a5a0:	441c      	add	r4, r3
 800a5a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	673b      	str	r3, [r7, #112]	@ 0x70
 800a5aa:	677a      	str	r2, [r7, #116]	@ 0x74
 800a5ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a5b0:	4642      	mov	r2, r8
 800a5b2:	464b      	mov	r3, r9
 800a5b4:	1891      	adds	r1, r2, r2
 800a5b6:	60b9      	str	r1, [r7, #8]
 800a5b8:	415b      	adcs	r3, r3
 800a5ba:	60fb      	str	r3, [r7, #12]
 800a5bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a5c0:	4641      	mov	r1, r8
 800a5c2:	1851      	adds	r1, r2, r1
 800a5c4:	6039      	str	r1, [r7, #0]
 800a5c6:	4649      	mov	r1, r9
 800a5c8:	414b      	adcs	r3, r1
 800a5ca:	607b      	str	r3, [r7, #4]
 800a5cc:	f04f 0200 	mov.w	r2, #0
 800a5d0:	f04f 0300 	mov.w	r3, #0
 800a5d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a5d8:	4659      	mov	r1, fp
 800a5da:	00cb      	lsls	r3, r1, #3
 800a5dc:	4651      	mov	r1, sl
 800a5de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a5e2:	4651      	mov	r1, sl
 800a5e4:	00ca      	lsls	r2, r1, #3
 800a5e6:	4610      	mov	r0, r2
 800a5e8:	4619      	mov	r1, r3
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	4642      	mov	r2, r8
 800a5ee:	189b      	adds	r3, r3, r2
 800a5f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a5f2:	464b      	mov	r3, r9
 800a5f4:	460a      	mov	r2, r1
 800a5f6:	eb42 0303 	adc.w	r3, r2, r3
 800a5fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a5fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a600:	685b      	ldr	r3, [r3, #4]
 800a602:	2200      	movs	r2, #0
 800a604:	663b      	str	r3, [r7, #96]	@ 0x60
 800a606:	667a      	str	r2, [r7, #100]	@ 0x64
 800a608:	f04f 0200 	mov.w	r2, #0
 800a60c:	f04f 0300 	mov.w	r3, #0
 800a610:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a614:	4649      	mov	r1, r9
 800a616:	008b      	lsls	r3, r1, #2
 800a618:	4641      	mov	r1, r8
 800a61a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a61e:	4641      	mov	r1, r8
 800a620:	008a      	lsls	r2, r1, #2
 800a622:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a626:	f7f6 fb37 	bl	8000c98 <__aeabi_uldivmod>
 800a62a:	4602      	mov	r2, r0
 800a62c:	460b      	mov	r3, r1
 800a62e:	4b0d      	ldr	r3, [pc, #52]	@ (800a664 <UART_SetConfig+0x4e4>)
 800a630:	fba3 1302 	umull	r1, r3, r3, r2
 800a634:	095b      	lsrs	r3, r3, #5
 800a636:	2164      	movs	r1, #100	@ 0x64
 800a638:	fb01 f303 	mul.w	r3, r1, r3
 800a63c:	1ad3      	subs	r3, r2, r3
 800a63e:	011b      	lsls	r3, r3, #4
 800a640:	3332      	adds	r3, #50	@ 0x32
 800a642:	4a08      	ldr	r2, [pc, #32]	@ (800a664 <UART_SetConfig+0x4e4>)
 800a644:	fba2 2303 	umull	r2, r3, r2, r3
 800a648:	095b      	lsrs	r3, r3, #5
 800a64a:	f003 020f 	and.w	r2, r3, #15
 800a64e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	4422      	add	r2, r4
 800a656:	609a      	str	r2, [r3, #8]
}
 800a658:	bf00      	nop
 800a65a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a65e:	46bd      	mov	sp, r7
 800a660:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a664:	51eb851f 	.word	0x51eb851f

0800a668 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800a668:	b084      	sub	sp, #16
 800a66a:	b480      	push	{r7}
 800a66c:	b085      	sub	sp, #20
 800a66e:	af00      	add	r7, sp, #0
 800a670:	6078      	str	r0, [r7, #4]
 800a672:	f107 001c 	add.w	r0, r7, #28
 800a676:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a67a:	2300      	movs	r3, #0
 800a67c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a67e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a680:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a682:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800a686:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800a68a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a68c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800a68e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800a692:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a694:	68fa      	ldr	r2, [r7, #12]
 800a696:	4313      	orrs	r3, r2
 800a698:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	685b      	ldr	r3, [r3, #4]
 800a69e:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800a6a2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a6a6:	68fa      	ldr	r2, [r7, #12]
 800a6a8:	431a      	orrs	r2, r3
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a6ae:	2300      	movs	r3, #0
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	3714      	adds	r7, #20
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ba:	b004      	add	sp, #16
 800a6bc:	4770      	bx	lr

0800a6be <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800a6be:	b480      	push	{r7}
 800a6c0:	b083      	sub	sp, #12
 800a6c2:	af00      	add	r7, sp, #0
 800a6c4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	370c      	adds	r7, #12
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d6:	4770      	bx	lr

0800a6d8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800a6d8:	b480      	push	{r7}
 800a6da:	b083      	sub	sp, #12
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
 800a6e0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	681a      	ldr	r2, [r3, #0]
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a6ec:	2300      	movs	r3, #0
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	370c      	adds	r7, #12
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f8:	4770      	bx	lr

0800a6fa <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800a6fa:	b480      	push	{r7}
 800a6fc:	b083      	sub	sp, #12
 800a6fe:	af00      	add	r7, sp, #0
 800a700:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2203      	movs	r2, #3
 800a706:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a708:	2300      	movs	r3, #0
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	370c      	adds	r7, #12
 800a70e:	46bd      	mov	sp, r7
 800a710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a714:	4770      	bx	lr

0800a716 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800a716:	b480      	push	{r7}
 800a718:	b083      	sub	sp, #12
 800a71a:	af00      	add	r7, sp, #0
 800a71c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f003 0303 	and.w	r3, r3, #3
}
 800a726:	4618      	mov	r0, r3
 800a728:	370c      	adds	r7, #12
 800a72a:	46bd      	mov	sp, r7
 800a72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a730:	4770      	bx	lr

0800a732 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800a732:	b480      	push	{r7}
 800a734:	b085      	sub	sp, #20
 800a736:	af00      	add	r7, sp, #0
 800a738:	6078      	str	r0, [r7, #4]
 800a73a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a73c:	2300      	movs	r3, #0
 800a73e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	681a      	ldr	r2, [r3, #0]
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a750:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a756:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a75c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a75e:	68fa      	ldr	r2, [r7, #12]
 800a760:	4313      	orrs	r3, r2
 800a762:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	68db      	ldr	r3, [r3, #12]
 800a768:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800a76c:	f023 030f 	bic.w	r3, r3, #15
 800a770:	68fa      	ldr	r2, [r7, #12]
 800a772:	431a      	orrs	r2, r3
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a778:	2300      	movs	r3, #0
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	3714      	adds	r7, #20
 800a77e:	46bd      	mov	sp, r7
 800a780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a784:	4770      	bx	lr

0800a786 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800a786:	b480      	push	{r7}
 800a788:	b083      	sub	sp, #12
 800a78a:	af00      	add	r7, sp, #0
 800a78c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	691b      	ldr	r3, [r3, #16]
 800a792:	b2db      	uxtb	r3, r3
}
 800a794:	4618      	mov	r0, r3
 800a796:	370c      	adds	r7, #12
 800a798:	46bd      	mov	sp, r7
 800a79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79e:	4770      	bx	lr

0800a7a0 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	b085      	sub	sp, #20
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
 800a7a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	3314      	adds	r3, #20
 800a7ae:	461a      	mov	r2, r3
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	4413      	add	r3, r2
 800a7b4:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
}  
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	3714      	adds	r7, #20
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c4:	4770      	bx	lr

0800a7c6 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800a7c6:	b480      	push	{r7}
 800a7c8:	b085      	sub	sp, #20
 800a7ca:	af00      	add	r7, sp, #0
 800a7cc:	6078      	str	r0, [r7, #4]
 800a7ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	681a      	ldr	r2, [r3, #0]
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	685a      	ldr	r2, [r3, #4]
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a7ec:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a7f2:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a7f8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a7fa:	68fa      	ldr	r2, [r7, #12]
 800a7fc:	4313      	orrs	r3, r2
 800a7fe:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a804:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	431a      	orrs	r2, r3
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800a810:	2300      	movs	r3, #0

}
 800a812:	4618      	mov	r0, r3
 800a814:	3714      	adds	r7, #20
 800a816:	46bd      	mov	sp, r7
 800a818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81c:	4770      	bx	lr

0800a81e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800a81e:	b580      	push	{r7, lr}
 800a820:	b088      	sub	sp, #32
 800a822:	af00      	add	r7, sp, #0
 800a824:	6078      	str	r0, [r7, #4]
 800a826:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a82c:	2310      	movs	r3, #16
 800a82e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a830:	2340      	movs	r3, #64	@ 0x40
 800a832:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a834:	2300      	movs	r3, #0
 800a836:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a838:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a83c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a83e:	f107 0308 	add.w	r3, r7, #8
 800a842:	4619      	mov	r1, r3
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f7ff ff74 	bl	800a732 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800a84a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a84e:	2110      	movs	r1, #16
 800a850:	6878      	ldr	r0, [r7, #4]
 800a852:	f000 fa19 	bl	800ac88 <SDMMC_GetCmdResp1>
 800a856:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a858:	69fb      	ldr	r3, [r7, #28]
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3720      	adds	r7, #32
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}

0800a862 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a862:	b580      	push	{r7, lr}
 800a864:	b088      	sub	sp, #32
 800a866:	af00      	add	r7, sp, #0
 800a868:	6078      	str	r0, [r7, #4]
 800a86a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a870:	2311      	movs	r3, #17
 800a872:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a874:	2340      	movs	r3, #64	@ 0x40
 800a876:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a878:	2300      	movs	r3, #0
 800a87a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a87c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a880:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a882:	f107 0308 	add.w	r3, r7, #8
 800a886:	4619      	mov	r1, r3
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f7ff ff52 	bl	800a732 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a88e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a892:	2111      	movs	r1, #17
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f000 f9f7 	bl	800ac88 <SDMMC_GetCmdResp1>
 800a89a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a89c:	69fb      	ldr	r3, [r7, #28]
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3720      	adds	r7, #32
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}

0800a8a6 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a8a6:	b580      	push	{r7, lr}
 800a8a8:	b088      	sub	sp, #32
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	6078      	str	r0, [r7, #4]
 800a8ae:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a8b4:	2312      	movs	r3, #18
 800a8b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a8b8:	2340      	movs	r3, #64	@ 0x40
 800a8ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a8c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a8c4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a8c6:	f107 0308 	add.w	r3, r7, #8
 800a8ca:	4619      	mov	r1, r3
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f7ff ff30 	bl	800a732 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a8d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a8d6:	2112      	movs	r1, #18
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	f000 f9d5 	bl	800ac88 <SDMMC_GetCmdResp1>
 800a8de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a8e0:	69fb      	ldr	r3, [r7, #28]
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	3720      	adds	r7, #32
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}

0800a8ea <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a8ea:	b580      	push	{r7, lr}
 800a8ec:	b088      	sub	sp, #32
 800a8ee:	af00      	add	r7, sp, #0
 800a8f0:	6078      	str	r0, [r7, #4]
 800a8f2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a8f8:	2318      	movs	r3, #24
 800a8fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a8fc:	2340      	movs	r3, #64	@ 0x40
 800a8fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a900:	2300      	movs	r3, #0
 800a902:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a904:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a908:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a90a:	f107 0308 	add.w	r3, r7, #8
 800a90e:	4619      	mov	r1, r3
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f7ff ff0e 	bl	800a732 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a916:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a91a:	2118      	movs	r1, #24
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f000 f9b3 	bl	800ac88 <SDMMC_GetCmdResp1>
 800a922:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a924:	69fb      	ldr	r3, [r7, #28]
}
 800a926:	4618      	mov	r0, r3
 800a928:	3720      	adds	r7, #32
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}

0800a92e <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a92e:	b580      	push	{r7, lr}
 800a930:	b088      	sub	sp, #32
 800a932:	af00      	add	r7, sp, #0
 800a934:	6078      	str	r0, [r7, #4]
 800a936:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a93c:	2319      	movs	r3, #25
 800a93e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a940:	2340      	movs	r3, #64	@ 0x40
 800a942:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a944:	2300      	movs	r3, #0
 800a946:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a948:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a94c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a94e:	f107 0308 	add.w	r3, r7, #8
 800a952:	4619      	mov	r1, r3
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f7ff feec 	bl	800a732 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a95a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a95e:	2119      	movs	r1, #25
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f000 f991 	bl	800ac88 <SDMMC_GetCmdResp1>
 800a966:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a968:	69fb      	ldr	r3, [r7, #28]
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	3720      	adds	r7, #32
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}
	...

0800a974 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b088      	sub	sp, #32
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a97c:	2300      	movs	r3, #0
 800a97e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a980:	230c      	movs	r3, #12
 800a982:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a984:	2340      	movs	r3, #64	@ 0x40
 800a986:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a988:	2300      	movs	r3, #0
 800a98a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a98c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a990:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a992:	f107 0308 	add.w	r3, r7, #8
 800a996:	4619      	mov	r1, r3
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f7ff feca 	bl	800a732 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800a99e:	4a05      	ldr	r2, [pc, #20]	@ (800a9b4 <SDMMC_CmdStopTransfer+0x40>)
 800a9a0:	210c      	movs	r1, #12
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f000 f970 	bl	800ac88 <SDMMC_GetCmdResp1>
 800a9a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a9aa:	69fb      	ldr	r3, [r7, #28]
}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	3720      	adds	r7, #32
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd80      	pop	{r7, pc}
 800a9b4:	05f5e100 	.word	0x05f5e100

0800a9b8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b08a      	sub	sp, #40	@ 0x28
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	60f8      	str	r0, [r7, #12]
 800a9c0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a9c8:	2307      	movs	r3, #7
 800a9ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a9cc:	2340      	movs	r3, #64	@ 0x40
 800a9ce:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a9d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a9d8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a9da:	f107 0310 	add.w	r3, r7, #16
 800a9de:	4619      	mov	r1, r3
 800a9e0:	68f8      	ldr	r0, [r7, #12]
 800a9e2:	f7ff fea6 	bl	800a732 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800a9e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a9ea:	2107      	movs	r1, #7
 800a9ec:	68f8      	ldr	r0, [r7, #12]
 800a9ee:	f000 f94b 	bl	800ac88 <SDMMC_GetCmdResp1>
 800a9f2:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800a9f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	3728      	adds	r7, #40	@ 0x28
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}

0800a9fe <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800a9fe:	b580      	push	{r7, lr}
 800aa00:	b088      	sub	sp, #32
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800aa06:	2300      	movs	r3, #0
 800aa08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aa12:	2300      	movs	r3, #0
 800aa14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aa16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aa1a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aa1c:	f107 0308 	add.w	r3, r7, #8
 800aa20:	4619      	mov	r1, r3
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f7ff fe85 	bl	800a732 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f000 fb65 	bl	800b0f8 <SDMMC_GetCmdError>
 800aa2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa30:	69fb      	ldr	r3, [r7, #28]
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	3720      	adds	r7, #32
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}

0800aa3a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800aa3a:	b580      	push	{r7, lr}
 800aa3c:	b088      	sub	sp, #32
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800aa42:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800aa46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800aa48:	2308      	movs	r3, #8
 800aa4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aa4c:	2340      	movs	r3, #64	@ 0x40
 800aa4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aa50:	2300      	movs	r3, #0
 800aa52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aa54:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aa58:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aa5a:	f107 0308 	add.w	r3, r7, #8
 800aa5e:	4619      	mov	r1, r3
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f7ff fe66 	bl	800a732 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f000 faf8 	bl	800b05c <SDMMC_GetCmdResp7>
 800aa6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa6e:	69fb      	ldr	r3, [r7, #28]
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	3720      	adds	r7, #32
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}

0800aa78 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b088      	sub	sp, #32
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
 800aa80:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800aa86:	2337      	movs	r3, #55	@ 0x37
 800aa88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aa8a:	2340      	movs	r3, #64	@ 0x40
 800aa8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aa92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aa96:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aa98:	f107 0308 	add.w	r3, r7, #8
 800aa9c:	4619      	mov	r1, r3
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f7ff fe47 	bl	800a732 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800aaa4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aaa8:	2137      	movs	r1, #55	@ 0x37
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	f000 f8ec 	bl	800ac88 <SDMMC_GetCmdResp1>
 800aab0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aab2:	69fb      	ldr	r3, [r7, #28]
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	3720      	adds	r7, #32
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bd80      	pop	{r7, pc}

0800aabc <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b088      	sub	sp, #32
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
 800aac4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800aacc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aad0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800aad2:	2329      	movs	r3, #41	@ 0x29
 800aad4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aad6:	2340      	movs	r3, #64	@ 0x40
 800aad8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aada:	2300      	movs	r3, #0
 800aadc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aade:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aae2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aae4:	f107 0308 	add.w	r3, r7, #8
 800aae8:	4619      	mov	r1, r3
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f7ff fe21 	bl	800a732 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f000 f9ff 	bl	800aef4 <SDMMC_GetCmdResp3>
 800aaf6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aaf8:	69fb      	ldr	r3, [r7, #28]
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	3720      	adds	r7, #32
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}

0800ab02 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800ab02:	b580      	push	{r7, lr}
 800ab04:	b088      	sub	sp, #32
 800ab06:	af00      	add	r7, sp, #0
 800ab08:	6078      	str	r0, [r7, #4]
 800ab0a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ab10:	2306      	movs	r3, #6
 800ab12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ab14:	2340      	movs	r3, #64	@ 0x40
 800ab16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ab18:	2300      	movs	r3, #0
 800ab1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ab1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ab20:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ab22:	f107 0308 	add.w	r3, r7, #8
 800ab26:	4619      	mov	r1, r3
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f7ff fe02 	bl	800a732 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800ab2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ab32:	2106      	movs	r1, #6
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f000 f8a7 	bl	800ac88 <SDMMC_GetCmdResp1>
 800ab3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab3c:	69fb      	ldr	r3, [r7, #28]
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	3720      	adds	r7, #32
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}

0800ab46 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800ab46:	b580      	push	{r7, lr}
 800ab48:	b088      	sub	sp, #32
 800ab4a:	af00      	add	r7, sp, #0
 800ab4c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800ab52:	2333      	movs	r3, #51	@ 0x33
 800ab54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ab56:	2340      	movs	r3, #64	@ 0x40
 800ab58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ab5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ab62:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ab64:	f107 0308 	add.w	r3, r7, #8
 800ab68:	4619      	mov	r1, r3
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f7ff fde1 	bl	800a732 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800ab70:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ab74:	2133      	movs	r1, #51	@ 0x33
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f000 f886 	bl	800ac88 <SDMMC_GetCmdResp1>
 800ab7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab7e:	69fb      	ldr	r3, [r7, #28]
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	3720      	adds	r7, #32
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}

0800ab88 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b088      	sub	sp, #32
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800ab90:	2300      	movs	r3, #0
 800ab92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ab94:	2302      	movs	r3, #2
 800ab96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800ab98:	23c0      	movs	r3, #192	@ 0xc0
 800ab9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aba0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aba4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aba6:	f107 0308 	add.w	r3, r7, #8
 800abaa:	4619      	mov	r1, r3
 800abac:	6878      	ldr	r0, [r7, #4]
 800abae:	f7ff fdc0 	bl	800a732 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f000 f956 	bl	800ae64 <SDMMC_GetCmdResp2>
 800abb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800abba:	69fb      	ldr	r3, [r7, #28]
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	3720      	adds	r7, #32
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}

0800abc4 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b088      	sub	sp, #32
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
 800abcc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800abd2:	2309      	movs	r3, #9
 800abd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800abd6:	23c0      	movs	r3, #192	@ 0xc0
 800abd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800abda:	2300      	movs	r3, #0
 800abdc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800abde:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800abe2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800abe4:	f107 0308 	add.w	r3, r7, #8
 800abe8:	4619      	mov	r1, r3
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f7ff fda1 	bl	800a732 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	f000 f937 	bl	800ae64 <SDMMC_GetCmdResp2>
 800abf6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800abf8:	69fb      	ldr	r3, [r7, #28]
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	3720      	adds	r7, #32
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}

0800ac02 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800ac02:	b580      	push	{r7, lr}
 800ac04:	b088      	sub	sp, #32
 800ac06:	af00      	add	r7, sp, #0
 800ac08:	6078      	str	r0, [r7, #4]
 800ac0a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ac10:	2303      	movs	r3, #3
 800ac12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ac14:	2340      	movs	r3, #64	@ 0x40
 800ac16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ac1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ac20:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ac22:	f107 0308 	add.w	r3, r7, #8
 800ac26:	4619      	mov	r1, r3
 800ac28:	6878      	ldr	r0, [r7, #4]
 800ac2a:	f7ff fd82 	bl	800a732 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ac2e:	683a      	ldr	r2, [r7, #0]
 800ac30:	2103      	movs	r1, #3
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	f000 f99c 	bl	800af70 <SDMMC_GetCmdResp6>
 800ac38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac3a:	69fb      	ldr	r3, [r7, #28]
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	3720      	adds	r7, #32
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}

0800ac44 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b088      	sub	sp, #32
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
 800ac4c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ac52:	230d      	movs	r3, #13
 800ac54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ac56:	2340      	movs	r3, #64	@ 0x40
 800ac58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ac5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ac62:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ac64:	f107 0308 	add.w	r3, r7, #8
 800ac68:	4619      	mov	r1, r3
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f7ff fd61 	bl	800a732 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800ac70:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac74:	210d      	movs	r1, #13
 800ac76:	6878      	ldr	r0, [r7, #4]
 800ac78:	f000 f806 	bl	800ac88 <SDMMC_GetCmdResp1>
 800ac7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac7e:	69fb      	ldr	r3, [r7, #28]
}
 800ac80:	4618      	mov	r0, r3
 800ac82:	3720      	adds	r7, #32
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}

0800ac88 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b088      	sub	sp, #32
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	60f8      	str	r0, [r7, #12]
 800ac90:	460b      	mov	r3, r1
 800ac92:	607a      	str	r2, [r7, #4]
 800ac94:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ac96:	4b70      	ldr	r3, [pc, #448]	@ (800ae58 <SDMMC_GetCmdResp1+0x1d0>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	4a70      	ldr	r2, [pc, #448]	@ (800ae5c <SDMMC_GetCmdResp1+0x1d4>)
 800ac9c:	fba2 2303 	umull	r2, r3, r2, r3
 800aca0:	0a5a      	lsrs	r2, r3, #9
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	fb02 f303 	mul.w	r3, r2, r3
 800aca8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800acaa:	69fb      	ldr	r3, [r7, #28]
 800acac:	1e5a      	subs	r2, r3, #1
 800acae:	61fa      	str	r2, [r7, #28]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d102      	bne.n	800acba <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800acb4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800acb8:	e0c9      	b.n	800ae4e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800acbe:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800acc0:	69bb      	ldr	r3, [r7, #24]
 800acc2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d0ef      	beq.n	800acaa <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800acca:	69bb      	ldr	r3, [r7, #24]
 800accc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d1ea      	bne.n	800acaa <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800acd8:	f003 0304 	and.w	r3, r3, #4
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d004      	beq.n	800acea <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	2204      	movs	r2, #4
 800ace4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ace6:	2304      	movs	r3, #4
 800ace8:	e0b1      	b.n	800ae4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800acee:	f003 0301 	and.w	r3, r3, #1
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d004      	beq.n	800ad00 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	2201      	movs	r2, #1
 800acfa:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800acfc:	2301      	movs	r3, #1
 800acfe:	e0a6      	b.n	800ae4e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	22c5      	movs	r2, #197	@ 0xc5
 800ad04:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ad06:	68f8      	ldr	r0, [r7, #12]
 800ad08:	f7ff fd3d 	bl	800a786 <SDIO_GetCommandResponse>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	461a      	mov	r2, r3
 800ad10:	7afb      	ldrb	r3, [r7, #11]
 800ad12:	4293      	cmp	r3, r2
 800ad14:	d001      	beq.n	800ad1a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ad16:	2301      	movs	r3, #1
 800ad18:	e099      	b.n	800ae4e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ad1a:	2100      	movs	r1, #0
 800ad1c:	68f8      	ldr	r0, [r7, #12]
 800ad1e:	f7ff fd3f 	bl	800a7a0 <SDIO_GetResponse>
 800ad22:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ad24:	697a      	ldr	r2, [r7, #20]
 800ad26:	4b4e      	ldr	r3, [pc, #312]	@ (800ae60 <SDMMC_GetCmdResp1+0x1d8>)
 800ad28:	4013      	ands	r3, r2
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d101      	bne.n	800ad32 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	e08d      	b.n	800ae4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ad32:	697b      	ldr	r3, [r7, #20]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	da02      	bge.n	800ad3e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ad38:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ad3c:	e087      	b.n	800ae4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ad3e:	697b      	ldr	r3, [r7, #20]
 800ad40:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d001      	beq.n	800ad4c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ad48:	2340      	movs	r3, #64	@ 0x40
 800ad4a:	e080      	b.n	800ae4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d001      	beq.n	800ad5a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ad56:	2380      	movs	r3, #128	@ 0x80
 800ad58:	e079      	b.n	800ae4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ad5a:	697b      	ldr	r3, [r7, #20]
 800ad5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d002      	beq.n	800ad6a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ad64:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ad68:	e071      	b.n	800ae4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ad6a:	697b      	ldr	r3, [r7, #20]
 800ad6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d002      	beq.n	800ad7a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ad74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ad78:	e069      	b.n	800ae4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d002      	beq.n	800ad8a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ad84:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ad88:	e061      	b.n	800ae4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d002      	beq.n	800ad9a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ad94:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ad98:	e059      	b.n	800ae4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d002      	beq.n	800adaa <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ada4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ada8:	e051      	b.n	800ae4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800adaa:	697b      	ldr	r3, [r7, #20]
 800adac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d002      	beq.n	800adba <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800adb4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800adb8:	e049      	b.n	800ae4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d002      	beq.n	800adca <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800adc4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800adc8:	e041      	b.n	800ae4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800adca:	697b      	ldr	r3, [r7, #20]
 800adcc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800add0:	2b00      	cmp	r3, #0
 800add2:	d002      	beq.n	800adda <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800add4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800add8:	e039      	b.n	800ae4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d002      	beq.n	800adea <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ade4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800ade8:	e031      	b.n	800ae4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d002      	beq.n	800adfa <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800adf4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800adf8:	e029      	b.n	800ae4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d002      	beq.n	800ae0a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ae04:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ae08:	e021      	b.n	800ae4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d002      	beq.n	800ae1a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ae14:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800ae18:	e019      	b.n	800ae4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ae1a:	697b      	ldr	r3, [r7, #20]
 800ae1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d002      	beq.n	800ae2a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ae24:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800ae28:	e011      	b.n	800ae4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d002      	beq.n	800ae3a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800ae34:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800ae38:	e009      	b.n	800ae4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	f003 0308 	and.w	r3, r3, #8
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d002      	beq.n	800ae4a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ae44:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800ae48:	e001      	b.n	800ae4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ae4a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	3720      	adds	r7, #32
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}
 800ae56:	bf00      	nop
 800ae58:	20000008 	.word	0x20000008
 800ae5c:	10624dd3 	.word	0x10624dd3
 800ae60:	fdffe008 	.word	0xfdffe008

0800ae64 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800ae64:	b480      	push	{r7}
 800ae66:	b085      	sub	sp, #20
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ae6c:	4b1f      	ldr	r3, [pc, #124]	@ (800aeec <SDMMC_GetCmdResp2+0x88>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	4a1f      	ldr	r2, [pc, #124]	@ (800aef0 <SDMMC_GetCmdResp2+0x8c>)
 800ae72:	fba2 2303 	umull	r2, r3, r2, r3
 800ae76:	0a5b      	lsrs	r3, r3, #9
 800ae78:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ae7c:	fb02 f303 	mul.w	r3, r2, r3
 800ae80:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	1e5a      	subs	r2, r3, #1
 800ae86:	60fa      	str	r2, [r7, #12]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d102      	bne.n	800ae92 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ae8c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ae90:	e026      	b.n	800aee0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae96:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d0ef      	beq.n	800ae82 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800aea2:	68bb      	ldr	r3, [r7, #8]
 800aea4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d1ea      	bne.n	800ae82 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aeb0:	f003 0304 	and.w	r3, r3, #4
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d004      	beq.n	800aec2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2204      	movs	r2, #4
 800aebc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aebe:	2304      	movs	r3, #4
 800aec0:	e00e      	b.n	800aee0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aec6:	f003 0301 	and.w	r3, r3, #1
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d004      	beq.n	800aed8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2201      	movs	r2, #1
 800aed2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aed4:	2301      	movs	r3, #1
 800aed6:	e003      	b.n	800aee0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	22c5      	movs	r2, #197	@ 0xc5
 800aedc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800aede:	2300      	movs	r3, #0
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3714      	adds	r7, #20
 800aee4:	46bd      	mov	sp, r7
 800aee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeea:	4770      	bx	lr
 800aeec:	20000008 	.word	0x20000008
 800aef0:	10624dd3 	.word	0x10624dd3

0800aef4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800aef4:	b480      	push	{r7}
 800aef6:	b085      	sub	sp, #20
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aefc:	4b1a      	ldr	r3, [pc, #104]	@ (800af68 <SDMMC_GetCmdResp3+0x74>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	4a1a      	ldr	r2, [pc, #104]	@ (800af6c <SDMMC_GetCmdResp3+0x78>)
 800af02:	fba2 2303 	umull	r2, r3, r2, r3
 800af06:	0a5b      	lsrs	r3, r3, #9
 800af08:	f241 3288 	movw	r2, #5000	@ 0x1388
 800af0c:	fb02 f303 	mul.w	r3, r2, r3
 800af10:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	1e5a      	subs	r2, r3, #1
 800af16:	60fa      	str	r2, [r7, #12]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d102      	bne.n	800af22 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800af1c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800af20:	e01b      	b.n	800af5a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af26:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d0ef      	beq.n	800af12 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800af32:	68bb      	ldr	r3, [r7, #8]
 800af34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d1ea      	bne.n	800af12 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af40:	f003 0304 	and.w	r3, r3, #4
 800af44:	2b00      	cmp	r3, #0
 800af46:	d004      	beq.n	800af52 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2204      	movs	r2, #4
 800af4c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800af4e:	2304      	movs	r3, #4
 800af50:	e003      	b.n	800af5a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	22c5      	movs	r2, #197	@ 0xc5
 800af56:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800af58:	2300      	movs	r3, #0
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	3714      	adds	r7, #20
 800af5e:	46bd      	mov	sp, r7
 800af60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af64:	4770      	bx	lr
 800af66:	bf00      	nop
 800af68:	20000008 	.word	0x20000008
 800af6c:	10624dd3 	.word	0x10624dd3

0800af70 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b088      	sub	sp, #32
 800af74:	af00      	add	r7, sp, #0
 800af76:	60f8      	str	r0, [r7, #12]
 800af78:	460b      	mov	r3, r1
 800af7a:	607a      	str	r2, [r7, #4]
 800af7c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800af7e:	4b35      	ldr	r3, [pc, #212]	@ (800b054 <SDMMC_GetCmdResp6+0xe4>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	4a35      	ldr	r2, [pc, #212]	@ (800b058 <SDMMC_GetCmdResp6+0xe8>)
 800af84:	fba2 2303 	umull	r2, r3, r2, r3
 800af88:	0a5b      	lsrs	r3, r3, #9
 800af8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800af8e:	fb02 f303 	mul.w	r3, r2, r3
 800af92:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800af94:	69fb      	ldr	r3, [r7, #28]
 800af96:	1e5a      	subs	r2, r3, #1
 800af98:	61fa      	str	r2, [r7, #28]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d102      	bne.n	800afa4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800af9e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800afa2:	e052      	b.n	800b04a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afa8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800afaa:	69bb      	ldr	r3, [r7, #24]
 800afac:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d0ef      	beq.n	800af94 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800afb4:	69bb      	ldr	r3, [r7, #24]
 800afb6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d1ea      	bne.n	800af94 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afc2:	f003 0304 	and.w	r3, r3, #4
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d004      	beq.n	800afd4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	2204      	movs	r2, #4
 800afce:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800afd0:	2304      	movs	r3, #4
 800afd2:	e03a      	b.n	800b04a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afd8:	f003 0301 	and.w	r3, r3, #1
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d004      	beq.n	800afea <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	2201      	movs	r2, #1
 800afe4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800afe6:	2301      	movs	r3, #1
 800afe8:	e02f      	b.n	800b04a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800afea:	68f8      	ldr	r0, [r7, #12]
 800afec:	f7ff fbcb 	bl	800a786 <SDIO_GetCommandResponse>
 800aff0:	4603      	mov	r3, r0
 800aff2:	461a      	mov	r2, r3
 800aff4:	7afb      	ldrb	r3, [r7, #11]
 800aff6:	4293      	cmp	r3, r2
 800aff8:	d001      	beq.n	800affe <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800affa:	2301      	movs	r3, #1
 800affc:	e025      	b.n	800b04a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	22c5      	movs	r2, #197	@ 0xc5
 800b002:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b004:	2100      	movs	r1, #0
 800b006:	68f8      	ldr	r0, [r7, #12]
 800b008:	f7ff fbca 	bl	800a7a0 <SDIO_GetResponse>
 800b00c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800b014:	2b00      	cmp	r3, #0
 800b016:	d106      	bne.n	800b026 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b018:	697b      	ldr	r3, [r7, #20]
 800b01a:	0c1b      	lsrs	r3, r3, #16
 800b01c:	b29a      	uxth	r2, r3
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b022:	2300      	movs	r3, #0
 800b024:	e011      	b.n	800b04a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b026:	697b      	ldr	r3, [r7, #20]
 800b028:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d002      	beq.n	800b036 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b030:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b034:	e009      	b.n	800b04a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b036:	697b      	ldr	r3, [r7, #20]
 800b038:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d002      	beq.n	800b046 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b040:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b044:	e001      	b.n	800b04a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b046:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	3720      	adds	r7, #32
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}
 800b052:	bf00      	nop
 800b054:	20000008 	.word	0x20000008
 800b058:	10624dd3 	.word	0x10624dd3

0800b05c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800b05c:	b480      	push	{r7}
 800b05e:	b085      	sub	sp, #20
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b064:	4b22      	ldr	r3, [pc, #136]	@ (800b0f0 <SDMMC_GetCmdResp7+0x94>)
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	4a22      	ldr	r2, [pc, #136]	@ (800b0f4 <SDMMC_GetCmdResp7+0x98>)
 800b06a:	fba2 2303 	umull	r2, r3, r2, r3
 800b06e:	0a5b      	lsrs	r3, r3, #9
 800b070:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b074:	fb02 f303 	mul.w	r3, r2, r3
 800b078:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	1e5a      	subs	r2, r3, #1
 800b07e:	60fa      	str	r2, [r7, #12]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d102      	bne.n	800b08a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b084:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b088:	e02c      	b.n	800b0e4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b08e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b096:	2b00      	cmp	r3, #0
 800b098:	d0ef      	beq.n	800b07a <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b09a:	68bb      	ldr	r3, [r7, #8]
 800b09c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d1ea      	bne.n	800b07a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b0a8:	f003 0304 	and.w	r3, r3, #4
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d004      	beq.n	800b0ba <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2204      	movs	r2, #4
 800b0b4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b0b6:	2304      	movs	r3, #4
 800b0b8:	e014      	b.n	800b0e4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b0be:	f003 0301 	and.w	r3, r3, #1
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d004      	beq.n	800b0d0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2201      	movs	r2, #1
 800b0ca:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b0cc:	2301      	movs	r3, #1
 800b0ce:	e009      	b.n	800b0e4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b0d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d002      	beq.n	800b0e2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2240      	movs	r2, #64	@ 0x40
 800b0e0:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b0e2:	2300      	movs	r3, #0
  
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	3714      	adds	r7, #20
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ee:	4770      	bx	lr
 800b0f0:	20000008 	.word	0x20000008
 800b0f4:	10624dd3 	.word	0x10624dd3

0800b0f8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b085      	sub	sp, #20
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b100:	4b11      	ldr	r3, [pc, #68]	@ (800b148 <SDMMC_GetCmdError+0x50>)
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	4a11      	ldr	r2, [pc, #68]	@ (800b14c <SDMMC_GetCmdError+0x54>)
 800b106:	fba2 2303 	umull	r2, r3, r2, r3
 800b10a:	0a5b      	lsrs	r3, r3, #9
 800b10c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b110:	fb02 f303 	mul.w	r3, r2, r3
 800b114:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	1e5a      	subs	r2, r3, #1
 800b11a:	60fa      	str	r2, [r7, #12]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d102      	bne.n	800b126 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b120:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b124:	e009      	b.n	800b13a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b12a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d0f1      	beq.n	800b116 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	22c5      	movs	r2, #197	@ 0xc5
 800b136:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800b138:	2300      	movs	r3, #0
}
 800b13a:	4618      	mov	r0, r3
 800b13c:	3714      	adds	r7, #20
 800b13e:	46bd      	mov	sp, r7
 800b140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b144:	4770      	bx	lr
 800b146:	bf00      	nop
 800b148:	20000008 	.word	0x20000008
 800b14c:	10624dd3 	.word	0x10624dd3

0800b150 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b154:	4904      	ldr	r1, [pc, #16]	@ (800b168 <MX_FATFS_Init+0x18>)
 800b156:	4805      	ldr	r0, [pc, #20]	@ (800b16c <MX_FATFS_Init+0x1c>)
 800b158:	f002 fdda 	bl	800dd10 <FATFS_LinkDriver>
 800b15c:	4603      	mov	r3, r0
 800b15e:	461a      	mov	r2, r3
 800b160:	4b03      	ldr	r3, [pc, #12]	@ (800b170 <MX_FATFS_Init+0x20>)
 800b162:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b164:	bf00      	nop
 800b166:	bd80      	pop	{r7, pc}
 800b168:	20002c94 	.word	0x20002c94
 800b16c:	08014164 	.word	0x08014164
 800b170:	20002c90 	.word	0x20002c90

0800b174 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b174:	b480      	push	{r7}
 800b176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b178:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800b17a:	4618      	mov	r0, r3
 800b17c:	46bd      	mov	sp, r7
 800b17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b182:	4770      	bx	lr

0800b184 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b082      	sub	sp, #8
 800b188:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b18a:	2300      	movs	r3, #0
 800b18c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b18e:	f000 f896 	bl	800b2be <BSP_SD_IsDetected>
 800b192:	4603      	mov	r3, r0
 800b194:	2b01      	cmp	r3, #1
 800b196:	d001      	beq.n	800b19c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800b198:	2301      	movs	r3, #1
 800b19a:	e012      	b.n	800b1c2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800b19c:	480b      	ldr	r0, [pc, #44]	@ (800b1cc <BSP_SD_Init+0x48>)
 800b19e:	f7fc f9b9 	bl	8007514 <HAL_SD_Init>
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800b1a6:	79fb      	ldrb	r3, [r7, #7]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d109      	bne.n	800b1c0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800b1ac:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800b1b0:	4806      	ldr	r0, [pc, #24]	@ (800b1cc <BSP_SD_Init+0x48>)
 800b1b2:	f7fc ff87 	bl	80080c4 <HAL_SD_ConfigWideBusOperation>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d001      	beq.n	800b1c0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800b1bc:	2301      	movs	r3, #1
 800b1be:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800b1c0:	79fb      	ldrb	r3, [r7, #7]
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	3708      	adds	r7, #8
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}
 800b1ca:	bf00      	nop
 800b1cc:	200026cc 	.word	0x200026cc

0800b1d0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b086      	sub	sp, #24
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	60f8      	str	r0, [r7, #12]
 800b1d8:	60b9      	str	r1, [r7, #8]
 800b1da:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	68ba      	ldr	r2, [r7, #8]
 800b1e4:	68f9      	ldr	r1, [r7, #12]
 800b1e6:	4806      	ldr	r0, [pc, #24]	@ (800b200 <BSP_SD_ReadBlocks_DMA+0x30>)
 800b1e8:	f7fc fa44 	bl	8007674 <HAL_SD_ReadBlocks_DMA>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d001      	beq.n	800b1f6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b1f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	3718      	adds	r7, #24
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	bd80      	pop	{r7, pc}
 800b200:	200026cc 	.word	0x200026cc

0800b204 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b086      	sub	sp, #24
 800b208:	af00      	add	r7, sp, #0
 800b20a:	60f8      	str	r0, [r7, #12]
 800b20c:	60b9      	str	r1, [r7, #8]
 800b20e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b210:	2300      	movs	r3, #0
 800b212:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	68ba      	ldr	r2, [r7, #8]
 800b218:	68f9      	ldr	r1, [r7, #12]
 800b21a:	4806      	ldr	r0, [pc, #24]	@ (800b234 <BSP_SD_WriteBlocks_DMA+0x30>)
 800b21c:	f7fc fb0c 	bl	8007838 <HAL_SD_WriteBlocks_DMA>
 800b220:	4603      	mov	r3, r0
 800b222:	2b00      	cmp	r3, #0
 800b224:	d001      	beq.n	800b22a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b226:	2301      	movs	r3, #1
 800b228:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b22a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	3718      	adds	r7, #24
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}
 800b234:	200026cc 	.word	0x200026cc

0800b238 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b23c:	4805      	ldr	r0, [pc, #20]	@ (800b254 <BSP_SD_GetCardState+0x1c>)
 800b23e:	f7fc ffdb 	bl	80081f8 <HAL_SD_GetCardState>
 800b242:	4603      	mov	r3, r0
 800b244:	2b04      	cmp	r3, #4
 800b246:	bf14      	ite	ne
 800b248:	2301      	movne	r3, #1
 800b24a:	2300      	moveq	r3, #0
 800b24c:	b2db      	uxtb	r3, r3
}
 800b24e:	4618      	mov	r0, r3
 800b250:	bd80      	pop	{r7, pc}
 800b252:	bf00      	nop
 800b254:	200026cc 	.word	0x200026cc

0800b258 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b082      	sub	sp, #8
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800b260:	6879      	ldr	r1, [r7, #4]
 800b262:	4803      	ldr	r0, [pc, #12]	@ (800b270 <BSP_SD_GetCardInfo+0x18>)
 800b264:	f7fc ff02 	bl	800806c <HAL_SD_GetCardInfo>
}
 800b268:	bf00      	nop
 800b26a:	3708      	adds	r7, #8
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}
 800b270:	200026cc 	.word	0x200026cc

0800b274 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b082      	sub	sp, #8
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800b27c:	f000 f818 	bl	800b2b0 <BSP_SD_AbortCallback>
}
 800b280:	bf00      	nop
 800b282:	3708      	adds	r7, #8
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}

0800b288 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b082      	sub	sp, #8
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800b290:	f000 f98c 	bl	800b5ac <BSP_SD_WriteCpltCallback>
}
 800b294:	bf00      	nop
 800b296:	3708      	adds	r7, #8
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd80      	pop	{r7, pc}

0800b29c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b082      	sub	sp, #8
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800b2a4:	f000 f98e 	bl	800b5c4 <BSP_SD_ReadCpltCallback>
}
 800b2a8:	bf00      	nop
 800b2aa:	3708      	adds	r7, #8
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bd80      	pop	{r7, pc}

0800b2b0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	af00      	add	r7, sp, #0

}
 800b2b4:	bf00      	nop
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2bc:	4770      	bx	lr

0800b2be <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b2be:	b480      	push	{r7}
 800b2c0:	b083      	sub	sp, #12
 800b2c2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b2c4:	2301      	movs	r3, #1
 800b2c6:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800b2c8:	79fb      	ldrb	r3, [r7, #7]
 800b2ca:	b2db      	uxtb	r3, r3
}
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	370c      	adds	r7, #12
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d6:	4770      	bx	lr

0800b2d8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b084      	sub	sp, #16
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800b2e0:	f7f9 f8a8 	bl	8004434 <HAL_GetTick>
 800b2e4:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800b2e6:	e006      	b.n	800b2f6 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b2e8:	f7ff ffa6 	bl	800b238 <BSP_SD_GetCardState>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d101      	bne.n	800b2f6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	e009      	b.n	800b30a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800b2f6:	f7f9 f89d 	bl	8004434 <HAL_GetTick>
 800b2fa:	4602      	mov	r2, r0
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	1ad3      	subs	r3, r2, r3
 800b300:	687a      	ldr	r2, [r7, #4]
 800b302:	429a      	cmp	r2, r3
 800b304:	d8f0      	bhi.n	800b2e8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800b306:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b30a:	4618      	mov	r0, r3
 800b30c:	3710      	adds	r7, #16
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}
	...

0800b314 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b082      	sub	sp, #8
 800b318:	af00      	add	r7, sp, #0
 800b31a:	4603      	mov	r3, r0
 800b31c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b31e:	4b0b      	ldr	r3, [pc, #44]	@ (800b34c <SD_CheckStatus+0x38>)
 800b320:	2201      	movs	r2, #1
 800b322:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800b324:	f7ff ff88 	bl	800b238 <BSP_SD_GetCardState>
 800b328:	4603      	mov	r3, r0
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d107      	bne.n	800b33e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b32e:	4b07      	ldr	r3, [pc, #28]	@ (800b34c <SD_CheckStatus+0x38>)
 800b330:	781b      	ldrb	r3, [r3, #0]
 800b332:	b2db      	uxtb	r3, r3
 800b334:	f023 0301 	bic.w	r3, r3, #1
 800b338:	b2da      	uxtb	r2, r3
 800b33a:	4b04      	ldr	r3, [pc, #16]	@ (800b34c <SD_CheckStatus+0x38>)
 800b33c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b33e:	4b03      	ldr	r3, [pc, #12]	@ (800b34c <SD_CheckStatus+0x38>)
 800b340:	781b      	ldrb	r3, [r3, #0]
 800b342:	b2db      	uxtb	r3, r3
}
 800b344:	4618      	mov	r0, r3
 800b346:	3708      	adds	r7, #8
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}
 800b34c:	20000011 	.word	0x20000011

0800b350 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b082      	sub	sp, #8
 800b354:	af00      	add	r7, sp, #0
 800b356:	4603      	mov	r3, r0
 800b358:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800b35a:	f7ff ff13 	bl	800b184 <BSP_SD_Init>
 800b35e:	4603      	mov	r3, r0
 800b360:	2b00      	cmp	r3, #0
 800b362:	d107      	bne.n	800b374 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800b364:	79fb      	ldrb	r3, [r7, #7]
 800b366:	4618      	mov	r0, r3
 800b368:	f7ff ffd4 	bl	800b314 <SD_CheckStatus>
 800b36c:	4603      	mov	r3, r0
 800b36e:	461a      	mov	r2, r3
 800b370:	4b04      	ldr	r3, [pc, #16]	@ (800b384 <SD_initialize+0x34>)
 800b372:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800b374:	4b03      	ldr	r3, [pc, #12]	@ (800b384 <SD_initialize+0x34>)
 800b376:	781b      	ldrb	r3, [r3, #0]
 800b378:	b2db      	uxtb	r3, r3
}
 800b37a:	4618      	mov	r0, r3
 800b37c:	3708      	adds	r7, #8
 800b37e:	46bd      	mov	sp, r7
 800b380:	bd80      	pop	{r7, pc}
 800b382:	bf00      	nop
 800b384:	20000011 	.word	0x20000011

0800b388 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b082      	sub	sp, #8
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	4603      	mov	r3, r0
 800b390:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b392:	79fb      	ldrb	r3, [r7, #7]
 800b394:	4618      	mov	r0, r3
 800b396:	f7ff ffbd 	bl	800b314 <SD_CheckStatus>
 800b39a:	4603      	mov	r3, r0
}
 800b39c:	4618      	mov	r0, r3
 800b39e:	3708      	adds	r7, #8
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd80      	pop	{r7, pc}

0800b3a4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b086      	sub	sp, #24
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	60b9      	str	r1, [r7, #8]
 800b3ac:	607a      	str	r2, [r7, #4]
 800b3ae:	603b      	str	r3, [r7, #0]
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b3b8:	f247 5030 	movw	r0, #30000	@ 0x7530
 800b3bc:	f7ff ff8c 	bl	800b2d8 <SD_CheckStatusWithTimeout>
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	da01      	bge.n	800b3ca <SD_read+0x26>
  {
    return res;
 800b3c6:	7dfb      	ldrb	r3, [r7, #23]
 800b3c8:	e03b      	b.n	800b442 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800b3ca:	683a      	ldr	r2, [r7, #0]
 800b3cc:	6879      	ldr	r1, [r7, #4]
 800b3ce:	68b8      	ldr	r0, [r7, #8]
 800b3d0:	f7ff fefe 	bl	800b1d0 <BSP_SD_ReadBlocks_DMA>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d132      	bne.n	800b440 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800b3da:	4b1c      	ldr	r3, [pc, #112]	@ (800b44c <SD_read+0xa8>)
 800b3dc:	2200      	movs	r2, #0
 800b3de:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800b3e0:	f7f9 f828 	bl	8004434 <HAL_GetTick>
 800b3e4:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b3e6:	bf00      	nop
 800b3e8:	4b18      	ldr	r3, [pc, #96]	@ (800b44c <SD_read+0xa8>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d108      	bne.n	800b402 <SD_read+0x5e>
 800b3f0:	f7f9 f820 	bl	8004434 <HAL_GetTick>
 800b3f4:	4602      	mov	r2, r0
 800b3f6:	693b      	ldr	r3, [r7, #16]
 800b3f8:	1ad3      	subs	r3, r2, r3
 800b3fa:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b3fe:	4293      	cmp	r3, r2
 800b400:	d9f2      	bls.n	800b3e8 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800b402:	4b12      	ldr	r3, [pc, #72]	@ (800b44c <SD_read+0xa8>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d102      	bne.n	800b410 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800b40a:	2301      	movs	r3, #1
 800b40c:	75fb      	strb	r3, [r7, #23]
 800b40e:	e017      	b.n	800b440 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800b410:	4b0e      	ldr	r3, [pc, #56]	@ (800b44c <SD_read+0xa8>)
 800b412:	2200      	movs	r2, #0
 800b414:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800b416:	f7f9 f80d 	bl	8004434 <HAL_GetTick>
 800b41a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b41c:	e007      	b.n	800b42e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b41e:	f7ff ff0b 	bl	800b238 <BSP_SD_GetCardState>
 800b422:	4603      	mov	r3, r0
 800b424:	2b00      	cmp	r3, #0
 800b426:	d102      	bne.n	800b42e <SD_read+0x8a>
          {
            res = RES_OK;
 800b428:	2300      	movs	r3, #0
 800b42a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800b42c:	e008      	b.n	800b440 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b42e:	f7f9 f801 	bl	8004434 <HAL_GetTick>
 800b432:	4602      	mov	r2, r0
 800b434:	693b      	ldr	r3, [r7, #16]
 800b436:	1ad3      	subs	r3, r2, r3
 800b438:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b43c:	4293      	cmp	r3, r2
 800b43e:	d9ee      	bls.n	800b41e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800b440:	7dfb      	ldrb	r3, [r7, #23]
}
 800b442:	4618      	mov	r0, r3
 800b444:	3718      	adds	r7, #24
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}
 800b44a:	bf00      	nop
 800b44c:	20002c9c 	.word	0x20002c9c

0800b450 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b086      	sub	sp, #24
 800b454:	af00      	add	r7, sp, #0
 800b456:	60b9      	str	r1, [r7, #8]
 800b458:	607a      	str	r2, [r7, #4]
 800b45a:	603b      	str	r3, [r7, #0]
 800b45c:	4603      	mov	r3, r0
 800b45e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b460:	2301      	movs	r3, #1
 800b462:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800b464:	4b24      	ldr	r3, [pc, #144]	@ (800b4f8 <SD_write+0xa8>)
 800b466:	2200      	movs	r2, #0
 800b468:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b46a:	f247 5030 	movw	r0, #30000	@ 0x7530
 800b46e:	f7ff ff33 	bl	800b2d8 <SD_CheckStatusWithTimeout>
 800b472:	4603      	mov	r3, r0
 800b474:	2b00      	cmp	r3, #0
 800b476:	da01      	bge.n	800b47c <SD_write+0x2c>
  {
    return res;
 800b478:	7dfb      	ldrb	r3, [r7, #23]
 800b47a:	e038      	b.n	800b4ee <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800b47c:	683a      	ldr	r2, [r7, #0]
 800b47e:	6879      	ldr	r1, [r7, #4]
 800b480:	68b8      	ldr	r0, [r7, #8]
 800b482:	f7ff febf 	bl	800b204 <BSP_SD_WriteBlocks_DMA>
 800b486:	4603      	mov	r3, r0
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d12f      	bne.n	800b4ec <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800b48c:	f7f8 ffd2 	bl	8004434 <HAL_GetTick>
 800b490:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b492:	bf00      	nop
 800b494:	4b18      	ldr	r3, [pc, #96]	@ (800b4f8 <SD_write+0xa8>)
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d108      	bne.n	800b4ae <SD_write+0x5e>
 800b49c:	f7f8 ffca 	bl	8004434 <HAL_GetTick>
 800b4a0:	4602      	mov	r2, r0
 800b4a2:	693b      	ldr	r3, [r7, #16]
 800b4a4:	1ad3      	subs	r3, r2, r3
 800b4a6:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b4aa:	4293      	cmp	r3, r2
 800b4ac:	d9f2      	bls.n	800b494 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800b4ae:	4b12      	ldr	r3, [pc, #72]	@ (800b4f8 <SD_write+0xa8>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d102      	bne.n	800b4bc <SD_write+0x6c>
      {
        res = RES_ERROR;
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	75fb      	strb	r3, [r7, #23]
 800b4ba:	e017      	b.n	800b4ec <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800b4bc:	4b0e      	ldr	r3, [pc, #56]	@ (800b4f8 <SD_write+0xa8>)
 800b4be:	2200      	movs	r2, #0
 800b4c0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800b4c2:	f7f8 ffb7 	bl	8004434 <HAL_GetTick>
 800b4c6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b4c8:	e007      	b.n	800b4da <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b4ca:	f7ff feb5 	bl	800b238 <BSP_SD_GetCardState>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d102      	bne.n	800b4da <SD_write+0x8a>
          {
            res = RES_OK;
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	75fb      	strb	r3, [r7, #23]
            break;
 800b4d8:	e008      	b.n	800b4ec <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b4da:	f7f8 ffab 	bl	8004434 <HAL_GetTick>
 800b4de:	4602      	mov	r2, r0
 800b4e0:	693b      	ldr	r3, [r7, #16]
 800b4e2:	1ad3      	subs	r3, r2, r3
 800b4e4:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b4e8:	4293      	cmp	r3, r2
 800b4ea:	d9ee      	bls.n	800b4ca <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800b4ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3718      	adds	r7, #24
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}
 800b4f6:	bf00      	nop
 800b4f8:	20002c98 	.word	0x20002c98

0800b4fc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b08c      	sub	sp, #48	@ 0x30
 800b500:	af00      	add	r7, sp, #0
 800b502:	4603      	mov	r3, r0
 800b504:	603a      	str	r2, [r7, #0]
 800b506:	71fb      	strb	r3, [r7, #7]
 800b508:	460b      	mov	r3, r1
 800b50a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b50c:	2301      	movs	r3, #1
 800b50e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b512:	4b25      	ldr	r3, [pc, #148]	@ (800b5a8 <SD_ioctl+0xac>)
 800b514:	781b      	ldrb	r3, [r3, #0]
 800b516:	b2db      	uxtb	r3, r3
 800b518:	f003 0301 	and.w	r3, r3, #1
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d001      	beq.n	800b524 <SD_ioctl+0x28>
 800b520:	2303      	movs	r3, #3
 800b522:	e03c      	b.n	800b59e <SD_ioctl+0xa2>

  switch (cmd)
 800b524:	79bb      	ldrb	r3, [r7, #6]
 800b526:	2b03      	cmp	r3, #3
 800b528:	d834      	bhi.n	800b594 <SD_ioctl+0x98>
 800b52a:	a201      	add	r2, pc, #4	@ (adr r2, 800b530 <SD_ioctl+0x34>)
 800b52c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b530:	0800b541 	.word	0x0800b541
 800b534:	0800b549 	.word	0x0800b549
 800b538:	0800b561 	.word	0x0800b561
 800b53c:	0800b57b 	.word	0x0800b57b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b540:	2300      	movs	r3, #0
 800b542:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b546:	e028      	b.n	800b59a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b548:	f107 030c 	add.w	r3, r7, #12
 800b54c:	4618      	mov	r0, r3
 800b54e:	f7ff fe83 	bl	800b258 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b552:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b558:	2300      	movs	r3, #0
 800b55a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b55e:	e01c      	b.n	800b59a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b560:	f107 030c 	add.w	r3, r7, #12
 800b564:	4618      	mov	r0, r3
 800b566:	f7ff fe77 	bl	800b258 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b56a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b56c:	b29a      	uxth	r2, r3
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b572:	2300      	movs	r3, #0
 800b574:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b578:	e00f      	b.n	800b59a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b57a:	f107 030c 	add.w	r3, r7, #12
 800b57e:	4618      	mov	r0, r3
 800b580:	f7ff fe6a 	bl	800b258 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b586:	0a5a      	lsrs	r2, r3, #9
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b58c:	2300      	movs	r3, #0
 800b58e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b592:	e002      	b.n	800b59a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b594:	2304      	movs	r3, #4
 800b596:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800b59a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	3730      	adds	r7, #48	@ 0x30
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bd80      	pop	{r7, pc}
 800b5a6:	bf00      	nop
 800b5a8:	20000011 	.word	0x20000011

0800b5ac <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800b5ac:	b480      	push	{r7}
 800b5ae:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800b5b0:	4b03      	ldr	r3, [pc, #12]	@ (800b5c0 <BSP_SD_WriteCpltCallback+0x14>)
 800b5b2:	2201      	movs	r2, #1
 800b5b4:	601a      	str	r2, [r3, #0]
}
 800b5b6:	bf00      	nop
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5be:	4770      	bx	lr
 800b5c0:	20002c98 	.word	0x20002c98

0800b5c4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800b5c4:	b480      	push	{r7}
 800b5c6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800b5c8:	4b03      	ldr	r3, [pc, #12]	@ (800b5d8 <BSP_SD_ReadCpltCallback+0x14>)
 800b5ca:	2201      	movs	r2, #1
 800b5cc:	601a      	str	r2, [r3, #0]
}
 800b5ce:	bf00      	nop
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d6:	4770      	bx	lr
 800b5d8:	20002c9c 	.word	0x20002c9c

0800b5dc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b084      	sub	sp, #16
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b5e6:	79fb      	ldrb	r3, [r7, #7]
 800b5e8:	4a08      	ldr	r2, [pc, #32]	@ (800b60c <disk_status+0x30>)
 800b5ea:	009b      	lsls	r3, r3, #2
 800b5ec:	4413      	add	r3, r2
 800b5ee:	685b      	ldr	r3, [r3, #4]
 800b5f0:	685b      	ldr	r3, [r3, #4]
 800b5f2:	79fa      	ldrb	r2, [r7, #7]
 800b5f4:	4905      	ldr	r1, [pc, #20]	@ (800b60c <disk_status+0x30>)
 800b5f6:	440a      	add	r2, r1
 800b5f8:	7a12      	ldrb	r2, [r2, #8]
 800b5fa:	4610      	mov	r0, r2
 800b5fc:	4798      	blx	r3
 800b5fe:	4603      	mov	r3, r0
 800b600:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b602:	7bfb      	ldrb	r3, [r7, #15]
}
 800b604:	4618      	mov	r0, r3
 800b606:	3710      	adds	r7, #16
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}
 800b60c:	20002cc8 	.word	0x20002cc8

0800b610 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b084      	sub	sp, #16
 800b614:	af00      	add	r7, sp, #0
 800b616:	4603      	mov	r3, r0
 800b618:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b61a:	2300      	movs	r3, #0
 800b61c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b61e:	79fb      	ldrb	r3, [r7, #7]
 800b620:	4a0e      	ldr	r2, [pc, #56]	@ (800b65c <disk_initialize+0x4c>)
 800b622:	5cd3      	ldrb	r3, [r2, r3]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d114      	bne.n	800b652 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b628:	79fb      	ldrb	r3, [r7, #7]
 800b62a:	4a0c      	ldr	r2, [pc, #48]	@ (800b65c <disk_initialize+0x4c>)
 800b62c:	009b      	lsls	r3, r3, #2
 800b62e:	4413      	add	r3, r2
 800b630:	685b      	ldr	r3, [r3, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	79fa      	ldrb	r2, [r7, #7]
 800b636:	4909      	ldr	r1, [pc, #36]	@ (800b65c <disk_initialize+0x4c>)
 800b638:	440a      	add	r2, r1
 800b63a:	7a12      	ldrb	r2, [r2, #8]
 800b63c:	4610      	mov	r0, r2
 800b63e:	4798      	blx	r3
 800b640:	4603      	mov	r3, r0
 800b642:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800b644:	7bfb      	ldrb	r3, [r7, #15]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d103      	bne.n	800b652 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800b64a:	79fb      	ldrb	r3, [r7, #7]
 800b64c:	4a03      	ldr	r2, [pc, #12]	@ (800b65c <disk_initialize+0x4c>)
 800b64e:	2101      	movs	r1, #1
 800b650:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800b652:	7bfb      	ldrb	r3, [r7, #15]
}
 800b654:	4618      	mov	r0, r3
 800b656:	3710      	adds	r7, #16
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}
 800b65c:	20002cc8 	.word	0x20002cc8

0800b660 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b660:	b590      	push	{r4, r7, lr}
 800b662:	b087      	sub	sp, #28
 800b664:	af00      	add	r7, sp, #0
 800b666:	60b9      	str	r1, [r7, #8]
 800b668:	607a      	str	r2, [r7, #4]
 800b66a:	603b      	str	r3, [r7, #0]
 800b66c:	4603      	mov	r3, r0
 800b66e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b670:	7bfb      	ldrb	r3, [r7, #15]
 800b672:	4a0a      	ldr	r2, [pc, #40]	@ (800b69c <disk_read+0x3c>)
 800b674:	009b      	lsls	r3, r3, #2
 800b676:	4413      	add	r3, r2
 800b678:	685b      	ldr	r3, [r3, #4]
 800b67a:	689c      	ldr	r4, [r3, #8]
 800b67c:	7bfb      	ldrb	r3, [r7, #15]
 800b67e:	4a07      	ldr	r2, [pc, #28]	@ (800b69c <disk_read+0x3c>)
 800b680:	4413      	add	r3, r2
 800b682:	7a18      	ldrb	r0, [r3, #8]
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	687a      	ldr	r2, [r7, #4]
 800b688:	68b9      	ldr	r1, [r7, #8]
 800b68a:	47a0      	blx	r4
 800b68c:	4603      	mov	r3, r0
 800b68e:	75fb      	strb	r3, [r7, #23]
  return res;
 800b690:	7dfb      	ldrb	r3, [r7, #23]
}
 800b692:	4618      	mov	r0, r3
 800b694:	371c      	adds	r7, #28
 800b696:	46bd      	mov	sp, r7
 800b698:	bd90      	pop	{r4, r7, pc}
 800b69a:	bf00      	nop
 800b69c:	20002cc8 	.word	0x20002cc8

0800b6a0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b6a0:	b590      	push	{r4, r7, lr}
 800b6a2:	b087      	sub	sp, #28
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	60b9      	str	r1, [r7, #8]
 800b6a8:	607a      	str	r2, [r7, #4]
 800b6aa:	603b      	str	r3, [r7, #0]
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b6b0:	7bfb      	ldrb	r3, [r7, #15]
 800b6b2:	4a0a      	ldr	r2, [pc, #40]	@ (800b6dc <disk_write+0x3c>)
 800b6b4:	009b      	lsls	r3, r3, #2
 800b6b6:	4413      	add	r3, r2
 800b6b8:	685b      	ldr	r3, [r3, #4]
 800b6ba:	68dc      	ldr	r4, [r3, #12]
 800b6bc:	7bfb      	ldrb	r3, [r7, #15]
 800b6be:	4a07      	ldr	r2, [pc, #28]	@ (800b6dc <disk_write+0x3c>)
 800b6c0:	4413      	add	r3, r2
 800b6c2:	7a18      	ldrb	r0, [r3, #8]
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	687a      	ldr	r2, [r7, #4]
 800b6c8:	68b9      	ldr	r1, [r7, #8]
 800b6ca:	47a0      	blx	r4
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	75fb      	strb	r3, [r7, #23]
  return res;
 800b6d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	371c      	adds	r7, #28
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd90      	pop	{r4, r7, pc}
 800b6da:	bf00      	nop
 800b6dc:	20002cc8 	.word	0x20002cc8

0800b6e0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b084      	sub	sp, #16
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	603a      	str	r2, [r7, #0]
 800b6ea:	71fb      	strb	r3, [r7, #7]
 800b6ec:	460b      	mov	r3, r1
 800b6ee:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b6f0:	79fb      	ldrb	r3, [r7, #7]
 800b6f2:	4a09      	ldr	r2, [pc, #36]	@ (800b718 <disk_ioctl+0x38>)
 800b6f4:	009b      	lsls	r3, r3, #2
 800b6f6:	4413      	add	r3, r2
 800b6f8:	685b      	ldr	r3, [r3, #4]
 800b6fa:	691b      	ldr	r3, [r3, #16]
 800b6fc:	79fa      	ldrb	r2, [r7, #7]
 800b6fe:	4906      	ldr	r1, [pc, #24]	@ (800b718 <disk_ioctl+0x38>)
 800b700:	440a      	add	r2, r1
 800b702:	7a10      	ldrb	r0, [r2, #8]
 800b704:	79b9      	ldrb	r1, [r7, #6]
 800b706:	683a      	ldr	r2, [r7, #0]
 800b708:	4798      	blx	r3
 800b70a:	4603      	mov	r3, r0
 800b70c:	73fb      	strb	r3, [r7, #15]
  return res;
 800b70e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b710:	4618      	mov	r0, r3
 800b712:	3710      	adds	r7, #16
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}
 800b718:	20002cc8 	.word	0x20002cc8

0800b71c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b71c:	b480      	push	{r7}
 800b71e:	b085      	sub	sp, #20
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	3301      	adds	r3, #1
 800b728:	781b      	ldrb	r3, [r3, #0]
 800b72a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b72c:	89fb      	ldrh	r3, [r7, #14]
 800b72e:	021b      	lsls	r3, r3, #8
 800b730:	b21a      	sxth	r2, r3
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	781b      	ldrb	r3, [r3, #0]
 800b736:	b21b      	sxth	r3, r3
 800b738:	4313      	orrs	r3, r2
 800b73a:	b21b      	sxth	r3, r3
 800b73c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b73e:	89fb      	ldrh	r3, [r7, #14]
}
 800b740:	4618      	mov	r0, r3
 800b742:	3714      	adds	r7, #20
 800b744:	46bd      	mov	sp, r7
 800b746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74a:	4770      	bx	lr

0800b74c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b74c:	b480      	push	{r7}
 800b74e:	b085      	sub	sp, #20
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	3303      	adds	r3, #3
 800b758:	781b      	ldrb	r3, [r3, #0]
 800b75a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	021b      	lsls	r3, r3, #8
 800b760:	687a      	ldr	r2, [r7, #4]
 800b762:	3202      	adds	r2, #2
 800b764:	7812      	ldrb	r2, [r2, #0]
 800b766:	4313      	orrs	r3, r2
 800b768:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	021b      	lsls	r3, r3, #8
 800b76e:	687a      	ldr	r2, [r7, #4]
 800b770:	3201      	adds	r2, #1
 800b772:	7812      	ldrb	r2, [r2, #0]
 800b774:	4313      	orrs	r3, r2
 800b776:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	021b      	lsls	r3, r3, #8
 800b77c:	687a      	ldr	r2, [r7, #4]
 800b77e:	7812      	ldrb	r2, [r2, #0]
 800b780:	4313      	orrs	r3, r2
 800b782:	60fb      	str	r3, [r7, #12]
	return rv;
 800b784:	68fb      	ldr	r3, [r7, #12]
}
 800b786:	4618      	mov	r0, r3
 800b788:	3714      	adds	r7, #20
 800b78a:	46bd      	mov	sp, r7
 800b78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b790:	4770      	bx	lr

0800b792 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b792:	b480      	push	{r7}
 800b794:	b083      	sub	sp, #12
 800b796:	af00      	add	r7, sp, #0
 800b798:	6078      	str	r0, [r7, #4]
 800b79a:	460b      	mov	r3, r1
 800b79c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	1c5a      	adds	r2, r3, #1
 800b7a2:	607a      	str	r2, [r7, #4]
 800b7a4:	887a      	ldrh	r2, [r7, #2]
 800b7a6:	b2d2      	uxtb	r2, r2
 800b7a8:	701a      	strb	r2, [r3, #0]
 800b7aa:	887b      	ldrh	r3, [r7, #2]
 800b7ac:	0a1b      	lsrs	r3, r3, #8
 800b7ae:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	1c5a      	adds	r2, r3, #1
 800b7b4:	607a      	str	r2, [r7, #4]
 800b7b6:	887a      	ldrh	r2, [r7, #2]
 800b7b8:	b2d2      	uxtb	r2, r2
 800b7ba:	701a      	strb	r2, [r3, #0]
}
 800b7bc:	bf00      	nop
 800b7be:	370c      	adds	r7, #12
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c6:	4770      	bx	lr

0800b7c8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b7c8:	b480      	push	{r7}
 800b7ca:	b083      	sub	sp, #12
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
 800b7d0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	1c5a      	adds	r2, r3, #1
 800b7d6:	607a      	str	r2, [r7, #4]
 800b7d8:	683a      	ldr	r2, [r7, #0]
 800b7da:	b2d2      	uxtb	r2, r2
 800b7dc:	701a      	strb	r2, [r3, #0]
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	0a1b      	lsrs	r3, r3, #8
 800b7e2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	1c5a      	adds	r2, r3, #1
 800b7e8:	607a      	str	r2, [r7, #4]
 800b7ea:	683a      	ldr	r2, [r7, #0]
 800b7ec:	b2d2      	uxtb	r2, r2
 800b7ee:	701a      	strb	r2, [r3, #0]
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	0a1b      	lsrs	r3, r3, #8
 800b7f4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	1c5a      	adds	r2, r3, #1
 800b7fa:	607a      	str	r2, [r7, #4]
 800b7fc:	683a      	ldr	r2, [r7, #0]
 800b7fe:	b2d2      	uxtb	r2, r2
 800b800:	701a      	strb	r2, [r3, #0]
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	0a1b      	lsrs	r3, r3, #8
 800b806:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	1c5a      	adds	r2, r3, #1
 800b80c:	607a      	str	r2, [r7, #4]
 800b80e:	683a      	ldr	r2, [r7, #0]
 800b810:	b2d2      	uxtb	r2, r2
 800b812:	701a      	strb	r2, [r3, #0]
}
 800b814:	bf00      	nop
 800b816:	370c      	adds	r7, #12
 800b818:	46bd      	mov	sp, r7
 800b81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81e:	4770      	bx	lr

0800b820 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b820:	b480      	push	{r7}
 800b822:	b087      	sub	sp, #28
 800b824:	af00      	add	r7, sp, #0
 800b826:	60f8      	str	r0, [r7, #12]
 800b828:	60b9      	str	r1, [r7, #8]
 800b82a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b830:	68bb      	ldr	r3, [r7, #8]
 800b832:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d00d      	beq.n	800b856 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b83a:	693a      	ldr	r2, [r7, #16]
 800b83c:	1c53      	adds	r3, r2, #1
 800b83e:	613b      	str	r3, [r7, #16]
 800b840:	697b      	ldr	r3, [r7, #20]
 800b842:	1c59      	adds	r1, r3, #1
 800b844:	6179      	str	r1, [r7, #20]
 800b846:	7812      	ldrb	r2, [r2, #0]
 800b848:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	3b01      	subs	r3, #1
 800b84e:	607b      	str	r3, [r7, #4]
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d1f1      	bne.n	800b83a <mem_cpy+0x1a>
	}
}
 800b856:	bf00      	nop
 800b858:	371c      	adds	r7, #28
 800b85a:	46bd      	mov	sp, r7
 800b85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b860:	4770      	bx	lr

0800b862 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b862:	b480      	push	{r7}
 800b864:	b087      	sub	sp, #28
 800b866:	af00      	add	r7, sp, #0
 800b868:	60f8      	str	r0, [r7, #12]
 800b86a:	60b9      	str	r1, [r7, #8]
 800b86c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b872:	697b      	ldr	r3, [r7, #20]
 800b874:	1c5a      	adds	r2, r3, #1
 800b876:	617a      	str	r2, [r7, #20]
 800b878:	68ba      	ldr	r2, [r7, #8]
 800b87a:	b2d2      	uxtb	r2, r2
 800b87c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	3b01      	subs	r3, #1
 800b882:	607b      	str	r3, [r7, #4]
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d1f3      	bne.n	800b872 <mem_set+0x10>
}
 800b88a:	bf00      	nop
 800b88c:	bf00      	nop
 800b88e:	371c      	adds	r7, #28
 800b890:	46bd      	mov	sp, r7
 800b892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b896:	4770      	bx	lr

0800b898 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b898:	b480      	push	{r7}
 800b89a:	b089      	sub	sp, #36	@ 0x24
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	60f8      	str	r0, [r7, #12]
 800b8a0:	60b9      	str	r1, [r7, #8]
 800b8a2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	61fb      	str	r3, [r7, #28]
 800b8a8:	68bb      	ldr	r3, [r7, #8]
 800b8aa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b8b0:	69fb      	ldr	r3, [r7, #28]
 800b8b2:	1c5a      	adds	r2, r3, #1
 800b8b4:	61fa      	str	r2, [r7, #28]
 800b8b6:	781b      	ldrb	r3, [r3, #0]
 800b8b8:	4619      	mov	r1, r3
 800b8ba:	69bb      	ldr	r3, [r7, #24]
 800b8bc:	1c5a      	adds	r2, r3, #1
 800b8be:	61ba      	str	r2, [r7, #24]
 800b8c0:	781b      	ldrb	r3, [r3, #0]
 800b8c2:	1acb      	subs	r3, r1, r3
 800b8c4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	3b01      	subs	r3, #1
 800b8ca:	607b      	str	r3, [r7, #4]
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d002      	beq.n	800b8d8 <mem_cmp+0x40>
 800b8d2:	697b      	ldr	r3, [r7, #20]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d0eb      	beq.n	800b8b0 <mem_cmp+0x18>

	return r;
 800b8d8:	697b      	ldr	r3, [r7, #20]
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	3724      	adds	r7, #36	@ 0x24
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e4:	4770      	bx	lr

0800b8e6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b8e6:	b480      	push	{r7}
 800b8e8:	b083      	sub	sp, #12
 800b8ea:	af00      	add	r7, sp, #0
 800b8ec:	6078      	str	r0, [r7, #4]
 800b8ee:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b8f0:	e002      	b.n	800b8f8 <chk_chr+0x12>
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	3301      	adds	r3, #1
 800b8f6:	607b      	str	r3, [r7, #4]
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	781b      	ldrb	r3, [r3, #0]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d005      	beq.n	800b90c <chk_chr+0x26>
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	781b      	ldrb	r3, [r3, #0]
 800b904:	461a      	mov	r2, r3
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	4293      	cmp	r3, r2
 800b90a:	d1f2      	bne.n	800b8f2 <chk_chr+0xc>
	return *str;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	781b      	ldrb	r3, [r3, #0]
}
 800b910:	4618      	mov	r0, r3
 800b912:	370c      	adds	r7, #12
 800b914:	46bd      	mov	sp, r7
 800b916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91a:	4770      	bx	lr

0800b91c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b91c:	b480      	push	{r7}
 800b91e:	b085      	sub	sp, #20
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
 800b924:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b926:	2300      	movs	r3, #0
 800b928:	60bb      	str	r3, [r7, #8]
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	60fb      	str	r3, [r7, #12]
 800b92e:	e029      	b.n	800b984 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b930:	4a27      	ldr	r2, [pc, #156]	@ (800b9d0 <chk_lock+0xb4>)
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	011b      	lsls	r3, r3, #4
 800b936:	4413      	add	r3, r2
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d01d      	beq.n	800b97a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b93e:	4a24      	ldr	r2, [pc, #144]	@ (800b9d0 <chk_lock+0xb4>)
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	011b      	lsls	r3, r3, #4
 800b944:	4413      	add	r3, r2
 800b946:	681a      	ldr	r2, [r3, #0]
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	429a      	cmp	r2, r3
 800b94e:	d116      	bne.n	800b97e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b950:	4a1f      	ldr	r2, [pc, #124]	@ (800b9d0 <chk_lock+0xb4>)
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	011b      	lsls	r3, r3, #4
 800b956:	4413      	add	r3, r2
 800b958:	3304      	adds	r3, #4
 800b95a:	681a      	ldr	r2, [r3, #0]
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b960:	429a      	cmp	r2, r3
 800b962:	d10c      	bne.n	800b97e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b964:	4a1a      	ldr	r2, [pc, #104]	@ (800b9d0 <chk_lock+0xb4>)
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	011b      	lsls	r3, r3, #4
 800b96a:	4413      	add	r3, r2
 800b96c:	3308      	adds	r3, #8
 800b96e:	681a      	ldr	r2, [r3, #0]
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b974:	429a      	cmp	r2, r3
 800b976:	d102      	bne.n	800b97e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b978:	e007      	b.n	800b98a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b97a:	2301      	movs	r3, #1
 800b97c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	3301      	adds	r3, #1
 800b982:	60fb      	str	r3, [r7, #12]
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	2b01      	cmp	r3, #1
 800b988:	d9d2      	bls.n	800b930 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	2b02      	cmp	r3, #2
 800b98e:	d109      	bne.n	800b9a4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d102      	bne.n	800b99c <chk_lock+0x80>
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	2b02      	cmp	r3, #2
 800b99a:	d101      	bne.n	800b9a0 <chk_lock+0x84>
 800b99c:	2300      	movs	r3, #0
 800b99e:	e010      	b.n	800b9c2 <chk_lock+0xa6>
 800b9a0:	2312      	movs	r3, #18
 800b9a2:	e00e      	b.n	800b9c2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d108      	bne.n	800b9bc <chk_lock+0xa0>
 800b9aa:	4a09      	ldr	r2, [pc, #36]	@ (800b9d0 <chk_lock+0xb4>)
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	011b      	lsls	r3, r3, #4
 800b9b0:	4413      	add	r3, r2
 800b9b2:	330c      	adds	r3, #12
 800b9b4:	881b      	ldrh	r3, [r3, #0]
 800b9b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b9ba:	d101      	bne.n	800b9c0 <chk_lock+0xa4>
 800b9bc:	2310      	movs	r3, #16
 800b9be:	e000      	b.n	800b9c2 <chk_lock+0xa6>
 800b9c0:	2300      	movs	r3, #0
}
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	3714      	adds	r7, #20
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9cc:	4770      	bx	lr
 800b9ce:	bf00      	nop
 800b9d0:	20002ca8 	.word	0x20002ca8

0800b9d4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b9d4:	b480      	push	{r7}
 800b9d6:	b083      	sub	sp, #12
 800b9d8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b9da:	2300      	movs	r3, #0
 800b9dc:	607b      	str	r3, [r7, #4]
 800b9de:	e002      	b.n	800b9e6 <enq_lock+0x12>
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	3301      	adds	r3, #1
 800b9e4:	607b      	str	r3, [r7, #4]
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2b01      	cmp	r3, #1
 800b9ea:	d806      	bhi.n	800b9fa <enq_lock+0x26>
 800b9ec:	4a09      	ldr	r2, [pc, #36]	@ (800ba14 <enq_lock+0x40>)
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	011b      	lsls	r3, r3, #4
 800b9f2:	4413      	add	r3, r2
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d1f2      	bne.n	800b9e0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	2b02      	cmp	r3, #2
 800b9fe:	bf14      	ite	ne
 800ba00:	2301      	movne	r3, #1
 800ba02:	2300      	moveq	r3, #0
 800ba04:	b2db      	uxtb	r3, r3
}
 800ba06:	4618      	mov	r0, r3
 800ba08:	370c      	adds	r7, #12
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba10:	4770      	bx	lr
 800ba12:	bf00      	nop
 800ba14:	20002ca8 	.word	0x20002ca8

0800ba18 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ba18:	b480      	push	{r7}
 800ba1a:	b085      	sub	sp, #20
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
 800ba20:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ba22:	2300      	movs	r3, #0
 800ba24:	60fb      	str	r3, [r7, #12]
 800ba26:	e01f      	b.n	800ba68 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ba28:	4a41      	ldr	r2, [pc, #260]	@ (800bb30 <inc_lock+0x118>)
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	011b      	lsls	r3, r3, #4
 800ba2e:	4413      	add	r3, r2
 800ba30:	681a      	ldr	r2, [r3, #0]
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	429a      	cmp	r2, r3
 800ba38:	d113      	bne.n	800ba62 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ba3a:	4a3d      	ldr	r2, [pc, #244]	@ (800bb30 <inc_lock+0x118>)
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	011b      	lsls	r3, r3, #4
 800ba40:	4413      	add	r3, r2
 800ba42:	3304      	adds	r3, #4
 800ba44:	681a      	ldr	r2, [r3, #0]
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ba4a:	429a      	cmp	r2, r3
 800ba4c:	d109      	bne.n	800ba62 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ba4e:	4a38      	ldr	r2, [pc, #224]	@ (800bb30 <inc_lock+0x118>)
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	011b      	lsls	r3, r3, #4
 800ba54:	4413      	add	r3, r2
 800ba56:	3308      	adds	r3, #8
 800ba58:	681a      	ldr	r2, [r3, #0]
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ba5e:	429a      	cmp	r2, r3
 800ba60:	d006      	beq.n	800ba70 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	3301      	adds	r3, #1
 800ba66:	60fb      	str	r3, [r7, #12]
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	2b01      	cmp	r3, #1
 800ba6c:	d9dc      	bls.n	800ba28 <inc_lock+0x10>
 800ba6e:	e000      	b.n	800ba72 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ba70:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	2b02      	cmp	r3, #2
 800ba76:	d132      	bne.n	800bade <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ba78:	2300      	movs	r3, #0
 800ba7a:	60fb      	str	r3, [r7, #12]
 800ba7c:	e002      	b.n	800ba84 <inc_lock+0x6c>
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	3301      	adds	r3, #1
 800ba82:	60fb      	str	r3, [r7, #12]
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	2b01      	cmp	r3, #1
 800ba88:	d806      	bhi.n	800ba98 <inc_lock+0x80>
 800ba8a:	4a29      	ldr	r2, [pc, #164]	@ (800bb30 <inc_lock+0x118>)
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	011b      	lsls	r3, r3, #4
 800ba90:	4413      	add	r3, r2
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d1f2      	bne.n	800ba7e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	2b02      	cmp	r3, #2
 800ba9c:	d101      	bne.n	800baa2 <inc_lock+0x8a>
 800ba9e:	2300      	movs	r3, #0
 800baa0:	e040      	b.n	800bb24 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681a      	ldr	r2, [r3, #0]
 800baa6:	4922      	ldr	r1, [pc, #136]	@ (800bb30 <inc_lock+0x118>)
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	011b      	lsls	r3, r3, #4
 800baac:	440b      	add	r3, r1
 800baae:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	689a      	ldr	r2, [r3, #8]
 800bab4:	491e      	ldr	r1, [pc, #120]	@ (800bb30 <inc_lock+0x118>)
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	011b      	lsls	r3, r3, #4
 800baba:	440b      	add	r3, r1
 800babc:	3304      	adds	r3, #4
 800babe:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	695a      	ldr	r2, [r3, #20]
 800bac4:	491a      	ldr	r1, [pc, #104]	@ (800bb30 <inc_lock+0x118>)
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	011b      	lsls	r3, r3, #4
 800baca:	440b      	add	r3, r1
 800bacc:	3308      	adds	r3, #8
 800bace:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800bad0:	4a17      	ldr	r2, [pc, #92]	@ (800bb30 <inc_lock+0x118>)
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	011b      	lsls	r3, r3, #4
 800bad6:	4413      	add	r3, r2
 800bad8:	330c      	adds	r3, #12
 800bada:	2200      	movs	r2, #0
 800badc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d009      	beq.n	800baf8 <inc_lock+0xe0>
 800bae4:	4a12      	ldr	r2, [pc, #72]	@ (800bb30 <inc_lock+0x118>)
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	011b      	lsls	r3, r3, #4
 800baea:	4413      	add	r3, r2
 800baec:	330c      	adds	r3, #12
 800baee:	881b      	ldrh	r3, [r3, #0]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d001      	beq.n	800baf8 <inc_lock+0xe0>
 800baf4:	2300      	movs	r3, #0
 800baf6:	e015      	b.n	800bb24 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d108      	bne.n	800bb10 <inc_lock+0xf8>
 800bafe:	4a0c      	ldr	r2, [pc, #48]	@ (800bb30 <inc_lock+0x118>)
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	011b      	lsls	r3, r3, #4
 800bb04:	4413      	add	r3, r2
 800bb06:	330c      	adds	r3, #12
 800bb08:	881b      	ldrh	r3, [r3, #0]
 800bb0a:	3301      	adds	r3, #1
 800bb0c:	b29a      	uxth	r2, r3
 800bb0e:	e001      	b.n	800bb14 <inc_lock+0xfc>
 800bb10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bb14:	4906      	ldr	r1, [pc, #24]	@ (800bb30 <inc_lock+0x118>)
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	011b      	lsls	r3, r3, #4
 800bb1a:	440b      	add	r3, r1
 800bb1c:	330c      	adds	r3, #12
 800bb1e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	3301      	adds	r3, #1
}
 800bb24:	4618      	mov	r0, r3
 800bb26:	3714      	adds	r7, #20
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2e:	4770      	bx	lr
 800bb30:	20002ca8 	.word	0x20002ca8

0800bb34 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800bb34:	b480      	push	{r7}
 800bb36:	b085      	sub	sp, #20
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	3b01      	subs	r3, #1
 800bb40:	607b      	str	r3, [r7, #4]
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2b01      	cmp	r3, #1
 800bb46:	d825      	bhi.n	800bb94 <dec_lock+0x60>
		n = Files[i].ctr;
 800bb48:	4a17      	ldr	r2, [pc, #92]	@ (800bba8 <dec_lock+0x74>)
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	011b      	lsls	r3, r3, #4
 800bb4e:	4413      	add	r3, r2
 800bb50:	330c      	adds	r3, #12
 800bb52:	881b      	ldrh	r3, [r3, #0]
 800bb54:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800bb56:	89fb      	ldrh	r3, [r7, #14]
 800bb58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bb5c:	d101      	bne.n	800bb62 <dec_lock+0x2e>
 800bb5e:	2300      	movs	r3, #0
 800bb60:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800bb62:	89fb      	ldrh	r3, [r7, #14]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d002      	beq.n	800bb6e <dec_lock+0x3a>
 800bb68:	89fb      	ldrh	r3, [r7, #14]
 800bb6a:	3b01      	subs	r3, #1
 800bb6c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800bb6e:	4a0e      	ldr	r2, [pc, #56]	@ (800bba8 <dec_lock+0x74>)
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	011b      	lsls	r3, r3, #4
 800bb74:	4413      	add	r3, r2
 800bb76:	330c      	adds	r3, #12
 800bb78:	89fa      	ldrh	r2, [r7, #14]
 800bb7a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800bb7c:	89fb      	ldrh	r3, [r7, #14]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d105      	bne.n	800bb8e <dec_lock+0x5a>
 800bb82:	4a09      	ldr	r2, [pc, #36]	@ (800bba8 <dec_lock+0x74>)
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	011b      	lsls	r3, r3, #4
 800bb88:	4413      	add	r3, r2
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800bb8e:	2300      	movs	r3, #0
 800bb90:	737b      	strb	r3, [r7, #13]
 800bb92:	e001      	b.n	800bb98 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800bb94:	2302      	movs	r3, #2
 800bb96:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800bb98:	7b7b      	ldrb	r3, [r7, #13]
}
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	3714      	adds	r7, #20
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba4:	4770      	bx	lr
 800bba6:	bf00      	nop
 800bba8:	20002ca8 	.word	0x20002ca8

0800bbac <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800bbac:	b480      	push	{r7}
 800bbae:	b085      	sub	sp, #20
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	60fb      	str	r3, [r7, #12]
 800bbb8:	e010      	b.n	800bbdc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800bbba:	4a0d      	ldr	r2, [pc, #52]	@ (800bbf0 <clear_lock+0x44>)
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	011b      	lsls	r3, r3, #4
 800bbc0:	4413      	add	r3, r2
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	687a      	ldr	r2, [r7, #4]
 800bbc6:	429a      	cmp	r2, r3
 800bbc8:	d105      	bne.n	800bbd6 <clear_lock+0x2a>
 800bbca:	4a09      	ldr	r2, [pc, #36]	@ (800bbf0 <clear_lock+0x44>)
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	011b      	lsls	r3, r3, #4
 800bbd0:	4413      	add	r3, r2
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	3301      	adds	r3, #1
 800bbda:	60fb      	str	r3, [r7, #12]
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	2b01      	cmp	r3, #1
 800bbe0:	d9eb      	bls.n	800bbba <clear_lock+0xe>
	}
}
 800bbe2:	bf00      	nop
 800bbe4:	bf00      	nop
 800bbe6:	3714      	adds	r7, #20
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbee:	4770      	bx	lr
 800bbf0:	20002ca8 	.word	0x20002ca8

0800bbf4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b086      	sub	sp, #24
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	78db      	ldrb	r3, [r3, #3]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d034      	beq.n	800bc72 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc0c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	7858      	ldrb	r0, [r3, #1]
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800bc18:	2301      	movs	r3, #1
 800bc1a:	697a      	ldr	r2, [r7, #20]
 800bc1c:	f7ff fd40 	bl	800b6a0 <disk_write>
 800bc20:	4603      	mov	r3, r0
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d002      	beq.n	800bc2c <sync_window+0x38>
			res = FR_DISK_ERR;
 800bc26:	2301      	movs	r3, #1
 800bc28:	73fb      	strb	r3, [r7, #15]
 800bc2a:	e022      	b.n	800bc72 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2200      	movs	r2, #0
 800bc30:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc36:	697a      	ldr	r2, [r7, #20]
 800bc38:	1ad2      	subs	r2, r2, r3
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	69db      	ldr	r3, [r3, #28]
 800bc3e:	429a      	cmp	r2, r3
 800bc40:	d217      	bcs.n	800bc72 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	789b      	ldrb	r3, [r3, #2]
 800bc46:	613b      	str	r3, [r7, #16]
 800bc48:	e010      	b.n	800bc6c <sync_window+0x78>
					wsect += fs->fsize;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	69db      	ldr	r3, [r3, #28]
 800bc4e:	697a      	ldr	r2, [r7, #20]
 800bc50:	4413      	add	r3, r2
 800bc52:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	7858      	ldrb	r0, [r3, #1]
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800bc5e:	2301      	movs	r3, #1
 800bc60:	697a      	ldr	r2, [r7, #20]
 800bc62:	f7ff fd1d 	bl	800b6a0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bc66:	693b      	ldr	r3, [r7, #16]
 800bc68:	3b01      	subs	r3, #1
 800bc6a:	613b      	str	r3, [r7, #16]
 800bc6c:	693b      	ldr	r3, [r7, #16]
 800bc6e:	2b01      	cmp	r3, #1
 800bc70:	d8eb      	bhi.n	800bc4a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800bc72:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc74:	4618      	mov	r0, r3
 800bc76:	3718      	adds	r7, #24
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	bd80      	pop	{r7, pc}

0800bc7c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b084      	sub	sp, #16
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
 800bc84:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800bc86:	2300      	movs	r3, #0
 800bc88:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc8e:	683a      	ldr	r2, [r7, #0]
 800bc90:	429a      	cmp	r2, r3
 800bc92:	d01b      	beq.n	800bccc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	f7ff ffad 	bl	800bbf4 <sync_window>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800bc9e:	7bfb      	ldrb	r3, [r7, #15]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d113      	bne.n	800bccc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	7858      	ldrb	r0, [r3, #1]
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800bcae:	2301      	movs	r3, #1
 800bcb0:	683a      	ldr	r2, [r7, #0]
 800bcb2:	f7ff fcd5 	bl	800b660 <disk_read>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d004      	beq.n	800bcc6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800bcbc:	f04f 33ff 	mov.w	r3, #4294967295
 800bcc0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	683a      	ldr	r2, [r7, #0]
 800bcca:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800bccc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcce:	4618      	mov	r0, r3
 800bcd0:	3710      	adds	r7, #16
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd80      	pop	{r7, pc}
	...

0800bcd8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b084      	sub	sp, #16
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800bce0:	6878      	ldr	r0, [r7, #4]
 800bce2:	f7ff ff87 	bl	800bbf4 <sync_window>
 800bce6:	4603      	mov	r3, r0
 800bce8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800bcea:	7bfb      	ldrb	r3, [r7, #15]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d159      	bne.n	800bda4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	781b      	ldrb	r3, [r3, #0]
 800bcf4:	2b03      	cmp	r3, #3
 800bcf6:	d149      	bne.n	800bd8c <sync_fs+0xb4>
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	791b      	ldrb	r3, [r3, #4]
 800bcfc:	2b01      	cmp	r3, #1
 800bcfe:	d145      	bne.n	800bd8c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	899b      	ldrh	r3, [r3, #12]
 800bd0a:	461a      	mov	r2, r3
 800bd0c:	2100      	movs	r1, #0
 800bd0e:	f7ff fda8 	bl	800b862 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	3334      	adds	r3, #52	@ 0x34
 800bd16:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800bd1a:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800bd1e:	4618      	mov	r0, r3
 800bd20:	f7ff fd37 	bl	800b792 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	3334      	adds	r3, #52	@ 0x34
 800bd28:	4921      	ldr	r1, [pc, #132]	@ (800bdb0 <sync_fs+0xd8>)
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f7ff fd4c 	bl	800b7c8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	3334      	adds	r3, #52	@ 0x34
 800bd34:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800bd38:	491e      	ldr	r1, [pc, #120]	@ (800bdb4 <sync_fs+0xdc>)
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f7ff fd44 	bl	800b7c8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	3334      	adds	r3, #52	@ 0x34
 800bd44:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	695b      	ldr	r3, [r3, #20]
 800bd4c:	4619      	mov	r1, r3
 800bd4e:	4610      	mov	r0, r2
 800bd50:	f7ff fd3a 	bl	800b7c8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	3334      	adds	r3, #52	@ 0x34
 800bd58:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	691b      	ldr	r3, [r3, #16]
 800bd60:	4619      	mov	r1, r3
 800bd62:	4610      	mov	r0, r2
 800bd64:	f7ff fd30 	bl	800b7c8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	6a1b      	ldr	r3, [r3, #32]
 800bd6c:	1c5a      	adds	r2, r3, #1
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	7858      	ldrb	r0, [r3, #1]
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bd80:	2301      	movs	r3, #1
 800bd82:	f7ff fc8d 	bl	800b6a0 <disk_write>
			fs->fsi_flag = 0;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	2200      	movs	r2, #0
 800bd8a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	785b      	ldrb	r3, [r3, #1]
 800bd90:	2200      	movs	r2, #0
 800bd92:	2100      	movs	r1, #0
 800bd94:	4618      	mov	r0, r3
 800bd96:	f7ff fca3 	bl	800b6e0 <disk_ioctl>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d001      	beq.n	800bda4 <sync_fs+0xcc>
 800bda0:	2301      	movs	r3, #1
 800bda2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800bda4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bda6:	4618      	mov	r0, r3
 800bda8:	3710      	adds	r7, #16
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	bd80      	pop	{r7, pc}
 800bdae:	bf00      	nop
 800bdb0:	41615252 	.word	0x41615252
 800bdb4:	61417272 	.word	0x61417272

0800bdb8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800bdb8:	b480      	push	{r7}
 800bdba:	b083      	sub	sp, #12
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
 800bdc0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	3b02      	subs	r3, #2
 800bdc6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	699b      	ldr	r3, [r3, #24]
 800bdcc:	3b02      	subs	r3, #2
 800bdce:	683a      	ldr	r2, [r7, #0]
 800bdd0:	429a      	cmp	r2, r3
 800bdd2:	d301      	bcc.n	800bdd8 <clust2sect+0x20>
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	e008      	b.n	800bdea <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	895b      	ldrh	r3, [r3, #10]
 800bddc:	461a      	mov	r2, r3
 800bdde:	683b      	ldr	r3, [r7, #0]
 800bde0:	fb03 f202 	mul.w	r2, r3, r2
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bde8:	4413      	add	r3, r2
}
 800bdea:	4618      	mov	r0, r3
 800bdec:	370c      	adds	r7, #12
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf4:	4770      	bx	lr

0800bdf6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800bdf6:	b580      	push	{r7, lr}
 800bdf8:	b086      	sub	sp, #24
 800bdfa:	af00      	add	r7, sp, #0
 800bdfc:	6078      	str	r0, [r7, #4]
 800bdfe:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	2b01      	cmp	r3, #1
 800be0a:	d904      	bls.n	800be16 <get_fat+0x20>
 800be0c:	693b      	ldr	r3, [r7, #16]
 800be0e:	699b      	ldr	r3, [r3, #24]
 800be10:	683a      	ldr	r2, [r7, #0]
 800be12:	429a      	cmp	r2, r3
 800be14:	d302      	bcc.n	800be1c <get_fat+0x26>
		val = 1;	/* Internal error */
 800be16:	2301      	movs	r3, #1
 800be18:	617b      	str	r3, [r7, #20]
 800be1a:	e0ba      	b.n	800bf92 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800be1c:	f04f 33ff 	mov.w	r3, #4294967295
 800be20:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800be22:	693b      	ldr	r3, [r7, #16]
 800be24:	781b      	ldrb	r3, [r3, #0]
 800be26:	2b03      	cmp	r3, #3
 800be28:	f000 8082 	beq.w	800bf30 <get_fat+0x13a>
 800be2c:	2b03      	cmp	r3, #3
 800be2e:	f300 80a6 	bgt.w	800bf7e <get_fat+0x188>
 800be32:	2b01      	cmp	r3, #1
 800be34:	d002      	beq.n	800be3c <get_fat+0x46>
 800be36:	2b02      	cmp	r3, #2
 800be38:	d055      	beq.n	800bee6 <get_fat+0xf0>
 800be3a:	e0a0      	b.n	800bf7e <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800be3c:	683b      	ldr	r3, [r7, #0]
 800be3e:	60fb      	str	r3, [r7, #12]
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	085b      	lsrs	r3, r3, #1
 800be44:	68fa      	ldr	r2, [r7, #12]
 800be46:	4413      	add	r3, r2
 800be48:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800be4a:	693b      	ldr	r3, [r7, #16]
 800be4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800be4e:	693b      	ldr	r3, [r7, #16]
 800be50:	899b      	ldrh	r3, [r3, #12]
 800be52:	4619      	mov	r1, r3
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	fbb3 f3f1 	udiv	r3, r3, r1
 800be5a:	4413      	add	r3, r2
 800be5c:	4619      	mov	r1, r3
 800be5e:	6938      	ldr	r0, [r7, #16]
 800be60:	f7ff ff0c 	bl	800bc7c <move_window>
 800be64:	4603      	mov	r3, r0
 800be66:	2b00      	cmp	r3, #0
 800be68:	f040 808c 	bne.w	800bf84 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	1c5a      	adds	r2, r3, #1
 800be70:	60fa      	str	r2, [r7, #12]
 800be72:	693a      	ldr	r2, [r7, #16]
 800be74:	8992      	ldrh	r2, [r2, #12]
 800be76:	fbb3 f1f2 	udiv	r1, r3, r2
 800be7a:	fb01 f202 	mul.w	r2, r1, r2
 800be7e:	1a9b      	subs	r3, r3, r2
 800be80:	693a      	ldr	r2, [r7, #16]
 800be82:	4413      	add	r3, r2
 800be84:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800be88:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800be8a:	693b      	ldr	r3, [r7, #16]
 800be8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800be8e:	693b      	ldr	r3, [r7, #16]
 800be90:	899b      	ldrh	r3, [r3, #12]
 800be92:	4619      	mov	r1, r3
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	fbb3 f3f1 	udiv	r3, r3, r1
 800be9a:	4413      	add	r3, r2
 800be9c:	4619      	mov	r1, r3
 800be9e:	6938      	ldr	r0, [r7, #16]
 800bea0:	f7ff feec 	bl	800bc7c <move_window>
 800bea4:	4603      	mov	r3, r0
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d16e      	bne.n	800bf88 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800beaa:	693b      	ldr	r3, [r7, #16]
 800beac:	899b      	ldrh	r3, [r3, #12]
 800beae:	461a      	mov	r2, r3
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	fbb3 f1f2 	udiv	r1, r3, r2
 800beb6:	fb01 f202 	mul.w	r2, r1, r2
 800beba:	1a9b      	subs	r3, r3, r2
 800bebc:	693a      	ldr	r2, [r7, #16]
 800bebe:	4413      	add	r3, r2
 800bec0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800bec4:	021b      	lsls	r3, r3, #8
 800bec6:	68ba      	ldr	r2, [r7, #8]
 800bec8:	4313      	orrs	r3, r2
 800beca:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	f003 0301 	and.w	r3, r3, #1
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d002      	beq.n	800bedc <get_fat+0xe6>
 800bed6:	68bb      	ldr	r3, [r7, #8]
 800bed8:	091b      	lsrs	r3, r3, #4
 800beda:	e002      	b.n	800bee2 <get_fat+0xec>
 800bedc:	68bb      	ldr	r3, [r7, #8]
 800bede:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bee2:	617b      	str	r3, [r7, #20]
			break;
 800bee4:	e055      	b.n	800bf92 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bee6:	693b      	ldr	r3, [r7, #16]
 800bee8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800beea:	693b      	ldr	r3, [r7, #16]
 800beec:	899b      	ldrh	r3, [r3, #12]
 800beee:	085b      	lsrs	r3, r3, #1
 800bef0:	b29b      	uxth	r3, r3
 800bef2:	4619      	mov	r1, r3
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	fbb3 f3f1 	udiv	r3, r3, r1
 800befa:	4413      	add	r3, r2
 800befc:	4619      	mov	r1, r3
 800befe:	6938      	ldr	r0, [r7, #16]
 800bf00:	f7ff febc 	bl	800bc7c <move_window>
 800bf04:	4603      	mov	r3, r0
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d140      	bne.n	800bf8c <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800bf0a:	693b      	ldr	r3, [r7, #16]
 800bf0c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	005b      	lsls	r3, r3, #1
 800bf14:	693a      	ldr	r2, [r7, #16]
 800bf16:	8992      	ldrh	r2, [r2, #12]
 800bf18:	fbb3 f0f2 	udiv	r0, r3, r2
 800bf1c:	fb00 f202 	mul.w	r2, r0, r2
 800bf20:	1a9b      	subs	r3, r3, r2
 800bf22:	440b      	add	r3, r1
 800bf24:	4618      	mov	r0, r3
 800bf26:	f7ff fbf9 	bl	800b71c <ld_word>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	617b      	str	r3, [r7, #20]
			break;
 800bf2e:	e030      	b.n	800bf92 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bf30:	693b      	ldr	r3, [r7, #16]
 800bf32:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bf34:	693b      	ldr	r3, [r7, #16]
 800bf36:	899b      	ldrh	r3, [r3, #12]
 800bf38:	089b      	lsrs	r3, r3, #2
 800bf3a:	b29b      	uxth	r3, r3
 800bf3c:	4619      	mov	r1, r3
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	fbb3 f3f1 	udiv	r3, r3, r1
 800bf44:	4413      	add	r3, r2
 800bf46:	4619      	mov	r1, r3
 800bf48:	6938      	ldr	r0, [r7, #16]
 800bf4a:	f7ff fe97 	bl	800bc7c <move_window>
 800bf4e:	4603      	mov	r3, r0
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d11d      	bne.n	800bf90 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800bf54:	693b      	ldr	r3, [r7, #16]
 800bf56:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	009b      	lsls	r3, r3, #2
 800bf5e:	693a      	ldr	r2, [r7, #16]
 800bf60:	8992      	ldrh	r2, [r2, #12]
 800bf62:	fbb3 f0f2 	udiv	r0, r3, r2
 800bf66:	fb00 f202 	mul.w	r2, r0, r2
 800bf6a:	1a9b      	subs	r3, r3, r2
 800bf6c:	440b      	add	r3, r1
 800bf6e:	4618      	mov	r0, r3
 800bf70:	f7ff fbec 	bl	800b74c <ld_dword>
 800bf74:	4603      	mov	r3, r0
 800bf76:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800bf7a:	617b      	str	r3, [r7, #20]
			break;
 800bf7c:	e009      	b.n	800bf92 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800bf7e:	2301      	movs	r3, #1
 800bf80:	617b      	str	r3, [r7, #20]
 800bf82:	e006      	b.n	800bf92 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bf84:	bf00      	nop
 800bf86:	e004      	b.n	800bf92 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bf88:	bf00      	nop
 800bf8a:	e002      	b.n	800bf92 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bf8c:	bf00      	nop
 800bf8e:	e000      	b.n	800bf92 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bf90:	bf00      	nop
		}
	}

	return val;
 800bf92:	697b      	ldr	r3, [r7, #20]
}
 800bf94:	4618      	mov	r0, r3
 800bf96:	3718      	adds	r7, #24
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	bd80      	pop	{r7, pc}

0800bf9c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800bf9c:	b590      	push	{r4, r7, lr}
 800bf9e:	b089      	sub	sp, #36	@ 0x24
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	60f8      	str	r0, [r7, #12]
 800bfa4:	60b9      	str	r1, [r7, #8]
 800bfa6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800bfa8:	2302      	movs	r3, #2
 800bfaa:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	2b01      	cmp	r3, #1
 800bfb0:	f240 8109 	bls.w	800c1c6 <put_fat+0x22a>
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	699b      	ldr	r3, [r3, #24]
 800bfb8:	68ba      	ldr	r2, [r7, #8]
 800bfba:	429a      	cmp	r2, r3
 800bfbc:	f080 8103 	bcs.w	800c1c6 <put_fat+0x22a>
		switch (fs->fs_type) {
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	781b      	ldrb	r3, [r3, #0]
 800bfc4:	2b03      	cmp	r3, #3
 800bfc6:	f000 80b6 	beq.w	800c136 <put_fat+0x19a>
 800bfca:	2b03      	cmp	r3, #3
 800bfcc:	f300 80fb 	bgt.w	800c1c6 <put_fat+0x22a>
 800bfd0:	2b01      	cmp	r3, #1
 800bfd2:	d003      	beq.n	800bfdc <put_fat+0x40>
 800bfd4:	2b02      	cmp	r3, #2
 800bfd6:	f000 8083 	beq.w	800c0e0 <put_fat+0x144>
 800bfda:	e0f4      	b.n	800c1c6 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800bfdc:	68bb      	ldr	r3, [r7, #8]
 800bfde:	61bb      	str	r3, [r7, #24]
 800bfe0:	69bb      	ldr	r3, [r7, #24]
 800bfe2:	085b      	lsrs	r3, r3, #1
 800bfe4:	69ba      	ldr	r2, [r7, #24]
 800bfe6:	4413      	add	r3, r2
 800bfe8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	899b      	ldrh	r3, [r3, #12]
 800bff2:	4619      	mov	r1, r3
 800bff4:	69bb      	ldr	r3, [r7, #24]
 800bff6:	fbb3 f3f1 	udiv	r3, r3, r1
 800bffa:	4413      	add	r3, r2
 800bffc:	4619      	mov	r1, r3
 800bffe:	68f8      	ldr	r0, [r7, #12]
 800c000:	f7ff fe3c 	bl	800bc7c <move_window>
 800c004:	4603      	mov	r3, r0
 800c006:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c008:	7ffb      	ldrb	r3, [r7, #31]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	f040 80d4 	bne.w	800c1b8 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800c016:	69bb      	ldr	r3, [r7, #24]
 800c018:	1c5a      	adds	r2, r3, #1
 800c01a:	61ba      	str	r2, [r7, #24]
 800c01c:	68fa      	ldr	r2, [r7, #12]
 800c01e:	8992      	ldrh	r2, [r2, #12]
 800c020:	fbb3 f0f2 	udiv	r0, r3, r2
 800c024:	fb00 f202 	mul.w	r2, r0, r2
 800c028:	1a9b      	subs	r3, r3, r2
 800c02a:	440b      	add	r3, r1
 800c02c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c02e:	68bb      	ldr	r3, [r7, #8]
 800c030:	f003 0301 	and.w	r3, r3, #1
 800c034:	2b00      	cmp	r3, #0
 800c036:	d00d      	beq.n	800c054 <put_fat+0xb8>
 800c038:	697b      	ldr	r3, [r7, #20]
 800c03a:	781b      	ldrb	r3, [r3, #0]
 800c03c:	b25b      	sxtb	r3, r3
 800c03e:	f003 030f 	and.w	r3, r3, #15
 800c042:	b25a      	sxtb	r2, r3
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	b2db      	uxtb	r3, r3
 800c048:	011b      	lsls	r3, r3, #4
 800c04a:	b25b      	sxtb	r3, r3
 800c04c:	4313      	orrs	r3, r2
 800c04e:	b25b      	sxtb	r3, r3
 800c050:	b2db      	uxtb	r3, r3
 800c052:	e001      	b.n	800c058 <put_fat+0xbc>
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	b2db      	uxtb	r3, r3
 800c058:	697a      	ldr	r2, [r7, #20]
 800c05a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	2201      	movs	r2, #1
 800c060:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	899b      	ldrh	r3, [r3, #12]
 800c06a:	4619      	mov	r1, r3
 800c06c:	69bb      	ldr	r3, [r7, #24]
 800c06e:	fbb3 f3f1 	udiv	r3, r3, r1
 800c072:	4413      	add	r3, r2
 800c074:	4619      	mov	r1, r3
 800c076:	68f8      	ldr	r0, [r7, #12]
 800c078:	f7ff fe00 	bl	800bc7c <move_window>
 800c07c:	4603      	mov	r3, r0
 800c07e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c080:	7ffb      	ldrb	r3, [r7, #31]
 800c082:	2b00      	cmp	r3, #0
 800c084:	f040 809a 	bne.w	800c1bc <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	899b      	ldrh	r3, [r3, #12]
 800c092:	461a      	mov	r2, r3
 800c094:	69bb      	ldr	r3, [r7, #24]
 800c096:	fbb3 f0f2 	udiv	r0, r3, r2
 800c09a:	fb00 f202 	mul.w	r2, r0, r2
 800c09e:	1a9b      	subs	r3, r3, r2
 800c0a0:	440b      	add	r3, r1
 800c0a2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	f003 0301 	and.w	r3, r3, #1
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d003      	beq.n	800c0b6 <put_fat+0x11a>
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	091b      	lsrs	r3, r3, #4
 800c0b2:	b2db      	uxtb	r3, r3
 800c0b4:	e00e      	b.n	800c0d4 <put_fat+0x138>
 800c0b6:	697b      	ldr	r3, [r7, #20]
 800c0b8:	781b      	ldrb	r3, [r3, #0]
 800c0ba:	b25b      	sxtb	r3, r3
 800c0bc:	f023 030f 	bic.w	r3, r3, #15
 800c0c0:	b25a      	sxtb	r2, r3
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	0a1b      	lsrs	r3, r3, #8
 800c0c6:	b25b      	sxtb	r3, r3
 800c0c8:	f003 030f 	and.w	r3, r3, #15
 800c0cc:	b25b      	sxtb	r3, r3
 800c0ce:	4313      	orrs	r3, r2
 800c0d0:	b25b      	sxtb	r3, r3
 800c0d2:	b2db      	uxtb	r3, r3
 800c0d4:	697a      	ldr	r2, [r7, #20]
 800c0d6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	2201      	movs	r2, #1
 800c0dc:	70da      	strb	r2, [r3, #3]
			break;
 800c0de:	e072      	b.n	800c1c6 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	899b      	ldrh	r3, [r3, #12]
 800c0e8:	085b      	lsrs	r3, r3, #1
 800c0ea:	b29b      	uxth	r3, r3
 800c0ec:	4619      	mov	r1, r3
 800c0ee:	68bb      	ldr	r3, [r7, #8]
 800c0f0:	fbb3 f3f1 	udiv	r3, r3, r1
 800c0f4:	4413      	add	r3, r2
 800c0f6:	4619      	mov	r1, r3
 800c0f8:	68f8      	ldr	r0, [r7, #12]
 800c0fa:	f7ff fdbf 	bl	800bc7c <move_window>
 800c0fe:	4603      	mov	r3, r0
 800c100:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c102:	7ffb      	ldrb	r3, [r7, #31]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d15b      	bne.n	800c1c0 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800c10e:	68bb      	ldr	r3, [r7, #8]
 800c110:	005b      	lsls	r3, r3, #1
 800c112:	68fa      	ldr	r2, [r7, #12]
 800c114:	8992      	ldrh	r2, [r2, #12]
 800c116:	fbb3 f0f2 	udiv	r0, r3, r2
 800c11a:	fb00 f202 	mul.w	r2, r0, r2
 800c11e:	1a9b      	subs	r3, r3, r2
 800c120:	440b      	add	r3, r1
 800c122:	687a      	ldr	r2, [r7, #4]
 800c124:	b292      	uxth	r2, r2
 800c126:	4611      	mov	r1, r2
 800c128:	4618      	mov	r0, r3
 800c12a:	f7ff fb32 	bl	800b792 <st_word>
			fs->wflag = 1;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	2201      	movs	r2, #1
 800c132:	70da      	strb	r2, [r3, #3]
			break;
 800c134:	e047      	b.n	800c1c6 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	899b      	ldrh	r3, [r3, #12]
 800c13e:	089b      	lsrs	r3, r3, #2
 800c140:	b29b      	uxth	r3, r3
 800c142:	4619      	mov	r1, r3
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	fbb3 f3f1 	udiv	r3, r3, r1
 800c14a:	4413      	add	r3, r2
 800c14c:	4619      	mov	r1, r3
 800c14e:	68f8      	ldr	r0, [r7, #12]
 800c150:	f7ff fd94 	bl	800bc7c <move_window>
 800c154:	4603      	mov	r3, r0
 800c156:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c158:	7ffb      	ldrb	r3, [r7, #31]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d132      	bne.n	800c1c4 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800c16a:	68bb      	ldr	r3, [r7, #8]
 800c16c:	009b      	lsls	r3, r3, #2
 800c16e:	68fa      	ldr	r2, [r7, #12]
 800c170:	8992      	ldrh	r2, [r2, #12]
 800c172:	fbb3 f0f2 	udiv	r0, r3, r2
 800c176:	fb00 f202 	mul.w	r2, r0, r2
 800c17a:	1a9b      	subs	r3, r3, r2
 800c17c:	440b      	add	r3, r1
 800c17e:	4618      	mov	r0, r3
 800c180:	f7ff fae4 	bl	800b74c <ld_dword>
 800c184:	4603      	mov	r3, r0
 800c186:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800c18a:	4323      	orrs	r3, r4
 800c18c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800c194:	68bb      	ldr	r3, [r7, #8]
 800c196:	009b      	lsls	r3, r3, #2
 800c198:	68fa      	ldr	r2, [r7, #12]
 800c19a:	8992      	ldrh	r2, [r2, #12]
 800c19c:	fbb3 f0f2 	udiv	r0, r3, r2
 800c1a0:	fb00 f202 	mul.w	r2, r0, r2
 800c1a4:	1a9b      	subs	r3, r3, r2
 800c1a6:	440b      	add	r3, r1
 800c1a8:	6879      	ldr	r1, [r7, #4]
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	f7ff fb0c 	bl	800b7c8 <st_dword>
			fs->wflag = 1;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	2201      	movs	r2, #1
 800c1b4:	70da      	strb	r2, [r3, #3]
			break;
 800c1b6:	e006      	b.n	800c1c6 <put_fat+0x22a>
			if (res != FR_OK) break;
 800c1b8:	bf00      	nop
 800c1ba:	e004      	b.n	800c1c6 <put_fat+0x22a>
			if (res != FR_OK) break;
 800c1bc:	bf00      	nop
 800c1be:	e002      	b.n	800c1c6 <put_fat+0x22a>
			if (res != FR_OK) break;
 800c1c0:	bf00      	nop
 800c1c2:	e000      	b.n	800c1c6 <put_fat+0x22a>
			if (res != FR_OK) break;
 800c1c4:	bf00      	nop
		}
	}
	return res;
 800c1c6:	7ffb      	ldrb	r3, [r7, #31]
}
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	3724      	adds	r7, #36	@ 0x24
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bd90      	pop	{r4, r7, pc}

0800c1d0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b088      	sub	sp, #32
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	60f8      	str	r0, [r7, #12]
 800c1d8:	60b9      	str	r1, [r7, #8]
 800c1da:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c1dc:	2300      	movs	r3, #0
 800c1de:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c1e6:	68bb      	ldr	r3, [r7, #8]
 800c1e8:	2b01      	cmp	r3, #1
 800c1ea:	d904      	bls.n	800c1f6 <remove_chain+0x26>
 800c1ec:	69bb      	ldr	r3, [r7, #24]
 800c1ee:	699b      	ldr	r3, [r3, #24]
 800c1f0:	68ba      	ldr	r2, [r7, #8]
 800c1f2:	429a      	cmp	r2, r3
 800c1f4:	d301      	bcc.n	800c1fa <remove_chain+0x2a>
 800c1f6:	2302      	movs	r3, #2
 800c1f8:	e04b      	b.n	800c292 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d00c      	beq.n	800c21a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c200:	f04f 32ff 	mov.w	r2, #4294967295
 800c204:	6879      	ldr	r1, [r7, #4]
 800c206:	69b8      	ldr	r0, [r7, #24]
 800c208:	f7ff fec8 	bl	800bf9c <put_fat>
 800c20c:	4603      	mov	r3, r0
 800c20e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c210:	7ffb      	ldrb	r3, [r7, #31]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d001      	beq.n	800c21a <remove_chain+0x4a>
 800c216:	7ffb      	ldrb	r3, [r7, #31]
 800c218:	e03b      	b.n	800c292 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c21a:	68b9      	ldr	r1, [r7, #8]
 800c21c:	68f8      	ldr	r0, [r7, #12]
 800c21e:	f7ff fdea 	bl	800bdf6 <get_fat>
 800c222:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c224:	697b      	ldr	r3, [r7, #20]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d031      	beq.n	800c28e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c22a:	697b      	ldr	r3, [r7, #20]
 800c22c:	2b01      	cmp	r3, #1
 800c22e:	d101      	bne.n	800c234 <remove_chain+0x64>
 800c230:	2302      	movs	r3, #2
 800c232:	e02e      	b.n	800c292 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c234:	697b      	ldr	r3, [r7, #20]
 800c236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c23a:	d101      	bne.n	800c240 <remove_chain+0x70>
 800c23c:	2301      	movs	r3, #1
 800c23e:	e028      	b.n	800c292 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c240:	2200      	movs	r2, #0
 800c242:	68b9      	ldr	r1, [r7, #8]
 800c244:	69b8      	ldr	r0, [r7, #24]
 800c246:	f7ff fea9 	bl	800bf9c <put_fat>
 800c24a:	4603      	mov	r3, r0
 800c24c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c24e:	7ffb      	ldrb	r3, [r7, #31]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d001      	beq.n	800c258 <remove_chain+0x88>
 800c254:	7ffb      	ldrb	r3, [r7, #31]
 800c256:	e01c      	b.n	800c292 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c258:	69bb      	ldr	r3, [r7, #24]
 800c25a:	695a      	ldr	r2, [r3, #20]
 800c25c:	69bb      	ldr	r3, [r7, #24]
 800c25e:	699b      	ldr	r3, [r3, #24]
 800c260:	3b02      	subs	r3, #2
 800c262:	429a      	cmp	r2, r3
 800c264:	d20b      	bcs.n	800c27e <remove_chain+0xae>
			fs->free_clst++;
 800c266:	69bb      	ldr	r3, [r7, #24]
 800c268:	695b      	ldr	r3, [r3, #20]
 800c26a:	1c5a      	adds	r2, r3, #1
 800c26c:	69bb      	ldr	r3, [r7, #24]
 800c26e:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800c270:	69bb      	ldr	r3, [r7, #24]
 800c272:	791b      	ldrb	r3, [r3, #4]
 800c274:	f043 0301 	orr.w	r3, r3, #1
 800c278:	b2da      	uxtb	r2, r3
 800c27a:	69bb      	ldr	r3, [r7, #24]
 800c27c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c27e:	697b      	ldr	r3, [r7, #20]
 800c280:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c282:	69bb      	ldr	r3, [r7, #24]
 800c284:	699b      	ldr	r3, [r3, #24]
 800c286:	68ba      	ldr	r2, [r7, #8]
 800c288:	429a      	cmp	r2, r3
 800c28a:	d3c6      	bcc.n	800c21a <remove_chain+0x4a>
 800c28c:	e000      	b.n	800c290 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c28e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c290:	2300      	movs	r3, #0
}
 800c292:	4618      	mov	r0, r3
 800c294:	3720      	adds	r7, #32
 800c296:	46bd      	mov	sp, r7
 800c298:	bd80      	pop	{r7, pc}

0800c29a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c29a:	b580      	push	{r7, lr}
 800c29c:	b088      	sub	sp, #32
 800c29e:	af00      	add	r7, sp, #0
 800c2a0:	6078      	str	r0, [r7, #4]
 800c2a2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d10d      	bne.n	800c2cc <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c2b0:	693b      	ldr	r3, [r7, #16]
 800c2b2:	691b      	ldr	r3, [r3, #16]
 800c2b4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c2b6:	69bb      	ldr	r3, [r7, #24]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d004      	beq.n	800c2c6 <create_chain+0x2c>
 800c2bc:	693b      	ldr	r3, [r7, #16]
 800c2be:	699b      	ldr	r3, [r3, #24]
 800c2c0:	69ba      	ldr	r2, [r7, #24]
 800c2c2:	429a      	cmp	r2, r3
 800c2c4:	d31b      	bcc.n	800c2fe <create_chain+0x64>
 800c2c6:	2301      	movs	r3, #1
 800c2c8:	61bb      	str	r3, [r7, #24]
 800c2ca:	e018      	b.n	800c2fe <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c2cc:	6839      	ldr	r1, [r7, #0]
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	f7ff fd91 	bl	800bdf6 <get_fat>
 800c2d4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	2b01      	cmp	r3, #1
 800c2da:	d801      	bhi.n	800c2e0 <create_chain+0x46>
 800c2dc:	2301      	movs	r3, #1
 800c2de:	e070      	b.n	800c3c2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2e6:	d101      	bne.n	800c2ec <create_chain+0x52>
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	e06a      	b.n	800c3c2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c2ec:	693b      	ldr	r3, [r7, #16]
 800c2ee:	699b      	ldr	r3, [r3, #24]
 800c2f0:	68fa      	ldr	r2, [r7, #12]
 800c2f2:	429a      	cmp	r2, r3
 800c2f4:	d201      	bcs.n	800c2fa <create_chain+0x60>
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	e063      	b.n	800c3c2 <create_chain+0x128>
		scl = clst;
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c2fe:	69bb      	ldr	r3, [r7, #24]
 800c300:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c302:	69fb      	ldr	r3, [r7, #28]
 800c304:	3301      	adds	r3, #1
 800c306:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c308:	693b      	ldr	r3, [r7, #16]
 800c30a:	699b      	ldr	r3, [r3, #24]
 800c30c:	69fa      	ldr	r2, [r7, #28]
 800c30e:	429a      	cmp	r2, r3
 800c310:	d307      	bcc.n	800c322 <create_chain+0x88>
				ncl = 2;
 800c312:	2302      	movs	r3, #2
 800c314:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c316:	69fa      	ldr	r2, [r7, #28]
 800c318:	69bb      	ldr	r3, [r7, #24]
 800c31a:	429a      	cmp	r2, r3
 800c31c:	d901      	bls.n	800c322 <create_chain+0x88>
 800c31e:	2300      	movs	r3, #0
 800c320:	e04f      	b.n	800c3c2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c322:	69f9      	ldr	r1, [r7, #28]
 800c324:	6878      	ldr	r0, [r7, #4]
 800c326:	f7ff fd66 	bl	800bdf6 <get_fat>
 800c32a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d00e      	beq.n	800c350 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	2b01      	cmp	r3, #1
 800c336:	d003      	beq.n	800c340 <create_chain+0xa6>
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c33e:	d101      	bne.n	800c344 <create_chain+0xaa>
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	e03e      	b.n	800c3c2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c344:	69fa      	ldr	r2, [r7, #28]
 800c346:	69bb      	ldr	r3, [r7, #24]
 800c348:	429a      	cmp	r2, r3
 800c34a:	d1da      	bne.n	800c302 <create_chain+0x68>
 800c34c:	2300      	movs	r3, #0
 800c34e:	e038      	b.n	800c3c2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c350:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c352:	f04f 32ff 	mov.w	r2, #4294967295
 800c356:	69f9      	ldr	r1, [r7, #28]
 800c358:	6938      	ldr	r0, [r7, #16]
 800c35a:	f7ff fe1f 	bl	800bf9c <put_fat>
 800c35e:	4603      	mov	r3, r0
 800c360:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c362:	7dfb      	ldrb	r3, [r7, #23]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d109      	bne.n	800c37c <create_chain+0xe2>
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d006      	beq.n	800c37c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c36e:	69fa      	ldr	r2, [r7, #28]
 800c370:	6839      	ldr	r1, [r7, #0]
 800c372:	6938      	ldr	r0, [r7, #16]
 800c374:	f7ff fe12 	bl	800bf9c <put_fat>
 800c378:	4603      	mov	r3, r0
 800c37a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c37c:	7dfb      	ldrb	r3, [r7, #23]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d116      	bne.n	800c3b0 <create_chain+0x116>
		fs->last_clst = ncl;
 800c382:	693b      	ldr	r3, [r7, #16]
 800c384:	69fa      	ldr	r2, [r7, #28]
 800c386:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c388:	693b      	ldr	r3, [r7, #16]
 800c38a:	695a      	ldr	r2, [r3, #20]
 800c38c:	693b      	ldr	r3, [r7, #16]
 800c38e:	699b      	ldr	r3, [r3, #24]
 800c390:	3b02      	subs	r3, #2
 800c392:	429a      	cmp	r2, r3
 800c394:	d804      	bhi.n	800c3a0 <create_chain+0x106>
 800c396:	693b      	ldr	r3, [r7, #16]
 800c398:	695b      	ldr	r3, [r3, #20]
 800c39a:	1e5a      	subs	r2, r3, #1
 800c39c:	693b      	ldr	r3, [r7, #16]
 800c39e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800c3a0:	693b      	ldr	r3, [r7, #16]
 800c3a2:	791b      	ldrb	r3, [r3, #4]
 800c3a4:	f043 0301 	orr.w	r3, r3, #1
 800c3a8:	b2da      	uxtb	r2, r3
 800c3aa:	693b      	ldr	r3, [r7, #16]
 800c3ac:	711a      	strb	r2, [r3, #4]
 800c3ae:	e007      	b.n	800c3c0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c3b0:	7dfb      	ldrb	r3, [r7, #23]
 800c3b2:	2b01      	cmp	r3, #1
 800c3b4:	d102      	bne.n	800c3bc <create_chain+0x122>
 800c3b6:	f04f 33ff 	mov.w	r3, #4294967295
 800c3ba:	e000      	b.n	800c3be <create_chain+0x124>
 800c3bc:	2301      	movs	r3, #1
 800c3be:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c3c0:	69fb      	ldr	r3, [r7, #28]
}
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	3720      	adds	r7, #32
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	bd80      	pop	{r7, pc}

0800c3ca <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c3ca:	b480      	push	{r7}
 800c3cc:	b087      	sub	sp, #28
 800c3ce:	af00      	add	r7, sp, #0
 800c3d0:	6078      	str	r0, [r7, #4]
 800c3d2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3de:	3304      	adds	r3, #4
 800c3e0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	899b      	ldrh	r3, [r3, #12]
 800c3e6:	461a      	mov	r2, r3
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	fbb3 f3f2 	udiv	r3, r3, r2
 800c3ee:	68fa      	ldr	r2, [r7, #12]
 800c3f0:	8952      	ldrh	r2, [r2, #10]
 800c3f2:	fbb3 f3f2 	udiv	r3, r3, r2
 800c3f6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c3f8:	693b      	ldr	r3, [r7, #16]
 800c3fa:	1d1a      	adds	r2, r3, #4
 800c3fc:	613a      	str	r2, [r7, #16]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d101      	bne.n	800c40c <clmt_clust+0x42>
 800c408:	2300      	movs	r3, #0
 800c40a:	e010      	b.n	800c42e <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800c40c:	697a      	ldr	r2, [r7, #20]
 800c40e:	68bb      	ldr	r3, [r7, #8]
 800c410:	429a      	cmp	r2, r3
 800c412:	d307      	bcc.n	800c424 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800c414:	697a      	ldr	r2, [r7, #20]
 800c416:	68bb      	ldr	r3, [r7, #8]
 800c418:	1ad3      	subs	r3, r2, r3
 800c41a:	617b      	str	r3, [r7, #20]
 800c41c:	693b      	ldr	r3, [r7, #16]
 800c41e:	3304      	adds	r3, #4
 800c420:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c422:	e7e9      	b.n	800c3f8 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800c424:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c426:	693b      	ldr	r3, [r7, #16]
 800c428:	681a      	ldr	r2, [r3, #0]
 800c42a:	697b      	ldr	r3, [r7, #20]
 800c42c:	4413      	add	r3, r2
}
 800c42e:	4618      	mov	r0, r3
 800c430:	371c      	adds	r7, #28
 800c432:	46bd      	mov	sp, r7
 800c434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c438:	4770      	bx	lr

0800c43a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c43a:	b580      	push	{r7, lr}
 800c43c:	b086      	sub	sp, #24
 800c43e:	af00      	add	r7, sp, #0
 800c440:	6078      	str	r0, [r7, #4]
 800c442:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c44a:	683b      	ldr	r3, [r7, #0]
 800c44c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c450:	d204      	bcs.n	800c45c <dir_sdi+0x22>
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	f003 031f 	and.w	r3, r3, #31
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d001      	beq.n	800c460 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c45c:	2302      	movs	r3, #2
 800c45e:	e071      	b.n	800c544 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	683a      	ldr	r2, [r7, #0]
 800c464:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	689b      	ldr	r3, [r3, #8]
 800c46a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c46c:	697b      	ldr	r3, [r7, #20]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d106      	bne.n	800c480 <dir_sdi+0x46>
 800c472:	693b      	ldr	r3, [r7, #16]
 800c474:	781b      	ldrb	r3, [r3, #0]
 800c476:	2b02      	cmp	r3, #2
 800c478:	d902      	bls.n	800c480 <dir_sdi+0x46>
		clst = fs->dirbase;
 800c47a:	693b      	ldr	r3, [r7, #16]
 800c47c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c47e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c480:	697b      	ldr	r3, [r7, #20]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d10c      	bne.n	800c4a0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c486:	683b      	ldr	r3, [r7, #0]
 800c488:	095b      	lsrs	r3, r3, #5
 800c48a:	693a      	ldr	r2, [r7, #16]
 800c48c:	8912      	ldrh	r2, [r2, #8]
 800c48e:	4293      	cmp	r3, r2
 800c490:	d301      	bcc.n	800c496 <dir_sdi+0x5c>
 800c492:	2302      	movs	r3, #2
 800c494:	e056      	b.n	800c544 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800c496:	693b      	ldr	r3, [r7, #16]
 800c498:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	61da      	str	r2, [r3, #28]
 800c49e:	e02d      	b.n	800c4fc <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c4a0:	693b      	ldr	r3, [r7, #16]
 800c4a2:	895b      	ldrh	r3, [r3, #10]
 800c4a4:	461a      	mov	r2, r3
 800c4a6:	693b      	ldr	r3, [r7, #16]
 800c4a8:	899b      	ldrh	r3, [r3, #12]
 800c4aa:	fb02 f303 	mul.w	r3, r2, r3
 800c4ae:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c4b0:	e019      	b.n	800c4e6 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	6979      	ldr	r1, [r7, #20]
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	f7ff fc9d 	bl	800bdf6 <get_fat>
 800c4bc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c4be:	697b      	ldr	r3, [r7, #20]
 800c4c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4c4:	d101      	bne.n	800c4ca <dir_sdi+0x90>
 800c4c6:	2301      	movs	r3, #1
 800c4c8:	e03c      	b.n	800c544 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c4ca:	697b      	ldr	r3, [r7, #20]
 800c4cc:	2b01      	cmp	r3, #1
 800c4ce:	d904      	bls.n	800c4da <dir_sdi+0xa0>
 800c4d0:	693b      	ldr	r3, [r7, #16]
 800c4d2:	699b      	ldr	r3, [r3, #24]
 800c4d4:	697a      	ldr	r2, [r7, #20]
 800c4d6:	429a      	cmp	r2, r3
 800c4d8:	d301      	bcc.n	800c4de <dir_sdi+0xa4>
 800c4da:	2302      	movs	r3, #2
 800c4dc:	e032      	b.n	800c544 <dir_sdi+0x10a>
			ofs -= csz;
 800c4de:	683a      	ldr	r2, [r7, #0]
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	1ad3      	subs	r3, r2, r3
 800c4e4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c4e6:	683a      	ldr	r2, [r7, #0]
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	429a      	cmp	r2, r3
 800c4ec:	d2e1      	bcs.n	800c4b2 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800c4ee:	6979      	ldr	r1, [r7, #20]
 800c4f0:	6938      	ldr	r0, [r7, #16]
 800c4f2:	f7ff fc61 	bl	800bdb8 <clust2sect>
 800c4f6:	4602      	mov	r2, r0
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	697a      	ldr	r2, [r7, #20]
 800c500:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	69db      	ldr	r3, [r3, #28]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d101      	bne.n	800c50e <dir_sdi+0xd4>
 800c50a:	2302      	movs	r3, #2
 800c50c:	e01a      	b.n	800c544 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	69da      	ldr	r2, [r3, #28]
 800c512:	693b      	ldr	r3, [r7, #16]
 800c514:	899b      	ldrh	r3, [r3, #12]
 800c516:	4619      	mov	r1, r3
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	fbb3 f3f1 	udiv	r3, r3, r1
 800c51e:	441a      	add	r2, r3
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c524:	693b      	ldr	r3, [r7, #16]
 800c526:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800c52a:	693b      	ldr	r3, [r7, #16]
 800c52c:	899b      	ldrh	r3, [r3, #12]
 800c52e:	461a      	mov	r2, r3
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	fbb3 f0f2 	udiv	r0, r3, r2
 800c536:	fb00 f202 	mul.w	r2, r0, r2
 800c53a:	1a9b      	subs	r3, r3, r2
 800c53c:	18ca      	adds	r2, r1, r3
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c542:	2300      	movs	r3, #0
}
 800c544:	4618      	mov	r0, r3
 800c546:	3718      	adds	r7, #24
 800c548:	46bd      	mov	sp, r7
 800c54a:	bd80      	pop	{r7, pc}

0800c54c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b086      	sub	sp, #24
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
 800c554:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	695b      	ldr	r3, [r3, #20]
 800c560:	3320      	adds	r3, #32
 800c562:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	69db      	ldr	r3, [r3, #28]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d003      	beq.n	800c574 <dir_next+0x28>
 800c56c:	68bb      	ldr	r3, [r7, #8]
 800c56e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c572:	d301      	bcc.n	800c578 <dir_next+0x2c>
 800c574:	2304      	movs	r3, #4
 800c576:	e0bb      	b.n	800c6f0 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	899b      	ldrh	r3, [r3, #12]
 800c57c:	461a      	mov	r2, r3
 800c57e:	68bb      	ldr	r3, [r7, #8]
 800c580:	fbb3 f1f2 	udiv	r1, r3, r2
 800c584:	fb01 f202 	mul.w	r2, r1, r2
 800c588:	1a9b      	subs	r3, r3, r2
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	f040 809d 	bne.w	800c6ca <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	69db      	ldr	r3, [r3, #28]
 800c594:	1c5a      	adds	r2, r3, #1
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	699b      	ldr	r3, [r3, #24]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d10b      	bne.n	800c5ba <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c5a2:	68bb      	ldr	r3, [r7, #8]
 800c5a4:	095b      	lsrs	r3, r3, #5
 800c5a6:	68fa      	ldr	r2, [r7, #12]
 800c5a8:	8912      	ldrh	r2, [r2, #8]
 800c5aa:	4293      	cmp	r3, r2
 800c5ac:	f0c0 808d 	bcc.w	800c6ca <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	61da      	str	r2, [r3, #28]
 800c5b6:	2304      	movs	r3, #4
 800c5b8:	e09a      	b.n	800c6f0 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	899b      	ldrh	r3, [r3, #12]
 800c5be:	461a      	mov	r2, r3
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	fbb3 f3f2 	udiv	r3, r3, r2
 800c5c6:	68fa      	ldr	r2, [r7, #12]
 800c5c8:	8952      	ldrh	r2, [r2, #10]
 800c5ca:	3a01      	subs	r2, #1
 800c5cc:	4013      	ands	r3, r2
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d17b      	bne.n	800c6ca <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c5d2:	687a      	ldr	r2, [r7, #4]
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	699b      	ldr	r3, [r3, #24]
 800c5d8:	4619      	mov	r1, r3
 800c5da:	4610      	mov	r0, r2
 800c5dc:	f7ff fc0b 	bl	800bdf6 <get_fat>
 800c5e0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c5e2:	697b      	ldr	r3, [r7, #20]
 800c5e4:	2b01      	cmp	r3, #1
 800c5e6:	d801      	bhi.n	800c5ec <dir_next+0xa0>
 800c5e8:	2302      	movs	r3, #2
 800c5ea:	e081      	b.n	800c6f0 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c5ec:	697b      	ldr	r3, [r7, #20]
 800c5ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5f2:	d101      	bne.n	800c5f8 <dir_next+0xac>
 800c5f4:	2301      	movs	r3, #1
 800c5f6:	e07b      	b.n	800c6f0 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	699b      	ldr	r3, [r3, #24]
 800c5fc:	697a      	ldr	r2, [r7, #20]
 800c5fe:	429a      	cmp	r2, r3
 800c600:	d359      	bcc.n	800c6b6 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d104      	bne.n	800c612 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2200      	movs	r2, #0
 800c60c:	61da      	str	r2, [r3, #28]
 800c60e:	2304      	movs	r3, #4
 800c610:	e06e      	b.n	800c6f0 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c612:	687a      	ldr	r2, [r7, #4]
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	699b      	ldr	r3, [r3, #24]
 800c618:	4619      	mov	r1, r3
 800c61a:	4610      	mov	r0, r2
 800c61c:	f7ff fe3d 	bl	800c29a <create_chain>
 800c620:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c622:	697b      	ldr	r3, [r7, #20]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d101      	bne.n	800c62c <dir_next+0xe0>
 800c628:	2307      	movs	r3, #7
 800c62a:	e061      	b.n	800c6f0 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c62c:	697b      	ldr	r3, [r7, #20]
 800c62e:	2b01      	cmp	r3, #1
 800c630:	d101      	bne.n	800c636 <dir_next+0xea>
 800c632:	2302      	movs	r3, #2
 800c634:	e05c      	b.n	800c6f0 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c636:	697b      	ldr	r3, [r7, #20]
 800c638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c63c:	d101      	bne.n	800c642 <dir_next+0xf6>
 800c63e:	2301      	movs	r3, #1
 800c640:	e056      	b.n	800c6f0 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c642:	68f8      	ldr	r0, [r7, #12]
 800c644:	f7ff fad6 	bl	800bbf4 <sync_window>
 800c648:	4603      	mov	r3, r0
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d001      	beq.n	800c652 <dir_next+0x106>
 800c64e:	2301      	movs	r3, #1
 800c650:	e04e      	b.n	800c6f0 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	899b      	ldrh	r3, [r3, #12]
 800c65c:	461a      	mov	r2, r3
 800c65e:	2100      	movs	r1, #0
 800c660:	f7ff f8ff 	bl	800b862 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c664:	2300      	movs	r3, #0
 800c666:	613b      	str	r3, [r7, #16]
 800c668:	6979      	ldr	r1, [r7, #20]
 800c66a:	68f8      	ldr	r0, [r7, #12]
 800c66c:	f7ff fba4 	bl	800bdb8 <clust2sect>
 800c670:	4602      	mov	r2, r0
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	631a      	str	r2, [r3, #48]	@ 0x30
 800c676:	e012      	b.n	800c69e <dir_next+0x152>
						fs->wflag = 1;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	2201      	movs	r2, #1
 800c67c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c67e:	68f8      	ldr	r0, [r7, #12]
 800c680:	f7ff fab8 	bl	800bbf4 <sync_window>
 800c684:	4603      	mov	r3, r0
 800c686:	2b00      	cmp	r3, #0
 800c688:	d001      	beq.n	800c68e <dir_next+0x142>
 800c68a:	2301      	movs	r3, #1
 800c68c:	e030      	b.n	800c6f0 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c68e:	693b      	ldr	r3, [r7, #16]
 800c690:	3301      	adds	r3, #1
 800c692:	613b      	str	r3, [r7, #16]
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c698:	1c5a      	adds	r2, r3, #1
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	631a      	str	r2, [r3, #48]	@ 0x30
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	895b      	ldrh	r3, [r3, #10]
 800c6a2:	461a      	mov	r2, r3
 800c6a4:	693b      	ldr	r3, [r7, #16]
 800c6a6:	4293      	cmp	r3, r2
 800c6a8:	d3e6      	bcc.n	800c678 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c6ae:	693b      	ldr	r3, [r7, #16]
 800c6b0:	1ad2      	subs	r2, r2, r3
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	697a      	ldr	r2, [r7, #20]
 800c6ba:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c6bc:	6979      	ldr	r1, [r7, #20]
 800c6be:	68f8      	ldr	r0, [r7, #12]
 800c6c0:	f7ff fb7a 	bl	800bdb8 <clust2sect>
 800c6c4:	4602      	mov	r2, r0
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	68ba      	ldr	r2, [r7, #8]
 800c6ce:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	899b      	ldrh	r3, [r3, #12]
 800c6da:	461a      	mov	r2, r3
 800c6dc:	68bb      	ldr	r3, [r7, #8]
 800c6de:	fbb3 f0f2 	udiv	r0, r3, r2
 800c6e2:	fb00 f202 	mul.w	r2, r0, r2
 800c6e6:	1a9b      	subs	r3, r3, r2
 800c6e8:	18ca      	adds	r2, r1, r3
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c6ee:	2300      	movs	r3, #0
}
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	3718      	adds	r7, #24
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	bd80      	pop	{r7, pc}

0800c6f8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b086      	sub	sp, #24
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
 800c700:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c708:	2100      	movs	r1, #0
 800c70a:	6878      	ldr	r0, [r7, #4]
 800c70c:	f7ff fe95 	bl	800c43a <dir_sdi>
 800c710:	4603      	mov	r3, r0
 800c712:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c714:	7dfb      	ldrb	r3, [r7, #23]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d12b      	bne.n	800c772 <dir_alloc+0x7a>
		n = 0;
 800c71a:	2300      	movs	r3, #0
 800c71c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	69db      	ldr	r3, [r3, #28]
 800c722:	4619      	mov	r1, r3
 800c724:	68f8      	ldr	r0, [r7, #12]
 800c726:	f7ff faa9 	bl	800bc7c <move_window>
 800c72a:	4603      	mov	r3, r0
 800c72c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c72e:	7dfb      	ldrb	r3, [r7, #23]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d11d      	bne.n	800c770 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	6a1b      	ldr	r3, [r3, #32]
 800c738:	781b      	ldrb	r3, [r3, #0]
 800c73a:	2be5      	cmp	r3, #229	@ 0xe5
 800c73c:	d004      	beq.n	800c748 <dir_alloc+0x50>
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	6a1b      	ldr	r3, [r3, #32]
 800c742:	781b      	ldrb	r3, [r3, #0]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d107      	bne.n	800c758 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c748:	693b      	ldr	r3, [r7, #16]
 800c74a:	3301      	adds	r3, #1
 800c74c:	613b      	str	r3, [r7, #16]
 800c74e:	693a      	ldr	r2, [r7, #16]
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	429a      	cmp	r2, r3
 800c754:	d102      	bne.n	800c75c <dir_alloc+0x64>
 800c756:	e00c      	b.n	800c772 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c758:	2300      	movs	r3, #0
 800c75a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c75c:	2101      	movs	r1, #1
 800c75e:	6878      	ldr	r0, [r7, #4]
 800c760:	f7ff fef4 	bl	800c54c <dir_next>
 800c764:	4603      	mov	r3, r0
 800c766:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c768:	7dfb      	ldrb	r3, [r7, #23]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d0d7      	beq.n	800c71e <dir_alloc+0x26>
 800c76e:	e000      	b.n	800c772 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c770:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c772:	7dfb      	ldrb	r3, [r7, #23]
 800c774:	2b04      	cmp	r3, #4
 800c776:	d101      	bne.n	800c77c <dir_alloc+0x84>
 800c778:	2307      	movs	r3, #7
 800c77a:	75fb      	strb	r3, [r7, #23]
	return res;
 800c77c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c77e:	4618      	mov	r0, r3
 800c780:	3718      	adds	r7, #24
 800c782:	46bd      	mov	sp, r7
 800c784:	bd80      	pop	{r7, pc}

0800c786 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c786:	b580      	push	{r7, lr}
 800c788:	b084      	sub	sp, #16
 800c78a:	af00      	add	r7, sp, #0
 800c78c:	6078      	str	r0, [r7, #4]
 800c78e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	331a      	adds	r3, #26
 800c794:	4618      	mov	r0, r3
 800c796:	f7fe ffc1 	bl	800b71c <ld_word>
 800c79a:	4603      	mov	r3, r0
 800c79c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	781b      	ldrb	r3, [r3, #0]
 800c7a2:	2b03      	cmp	r3, #3
 800c7a4:	d109      	bne.n	800c7ba <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c7a6:	683b      	ldr	r3, [r7, #0]
 800c7a8:	3314      	adds	r3, #20
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f7fe ffb6 	bl	800b71c <ld_word>
 800c7b0:	4603      	mov	r3, r0
 800c7b2:	041b      	lsls	r3, r3, #16
 800c7b4:	68fa      	ldr	r2, [r7, #12]
 800c7b6:	4313      	orrs	r3, r2
 800c7b8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
}
 800c7bc:	4618      	mov	r0, r3
 800c7be:	3710      	adds	r7, #16
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd80      	pop	{r7, pc}

0800c7c4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b084      	sub	sp, #16
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	60f8      	str	r0, [r7, #12]
 800c7cc:	60b9      	str	r1, [r7, #8]
 800c7ce:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c7d0:	68bb      	ldr	r3, [r7, #8]
 800c7d2:	331a      	adds	r3, #26
 800c7d4:	687a      	ldr	r2, [r7, #4]
 800c7d6:	b292      	uxth	r2, r2
 800c7d8:	4611      	mov	r1, r2
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f7fe ffd9 	bl	800b792 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	781b      	ldrb	r3, [r3, #0]
 800c7e4:	2b03      	cmp	r3, #3
 800c7e6:	d109      	bne.n	800c7fc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c7e8:	68bb      	ldr	r3, [r7, #8]
 800c7ea:	f103 0214 	add.w	r2, r3, #20
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	0c1b      	lsrs	r3, r3, #16
 800c7f2:	b29b      	uxth	r3, r3
 800c7f4:	4619      	mov	r1, r3
 800c7f6:	4610      	mov	r0, r2
 800c7f8:	f7fe ffcb 	bl	800b792 <st_word>
	}
}
 800c7fc:	bf00      	nop
 800c7fe:	3710      	adds	r7, #16
 800c800:	46bd      	mov	sp, r7
 800c802:	bd80      	pop	{r7, pc}

0800c804 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b086      	sub	sp, #24
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c812:	2100      	movs	r1, #0
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	f7ff fe10 	bl	800c43a <dir_sdi>
 800c81a:	4603      	mov	r3, r0
 800c81c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c81e:	7dfb      	ldrb	r3, [r7, #23]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d001      	beq.n	800c828 <dir_find+0x24>
 800c824:	7dfb      	ldrb	r3, [r7, #23]
 800c826:	e03e      	b.n	800c8a6 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	69db      	ldr	r3, [r3, #28]
 800c82c:	4619      	mov	r1, r3
 800c82e:	6938      	ldr	r0, [r7, #16]
 800c830:	f7ff fa24 	bl	800bc7c <move_window>
 800c834:	4603      	mov	r3, r0
 800c836:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c838:	7dfb      	ldrb	r3, [r7, #23]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d12f      	bne.n	800c89e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	6a1b      	ldr	r3, [r3, #32]
 800c842:	781b      	ldrb	r3, [r3, #0]
 800c844:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c846:	7bfb      	ldrb	r3, [r7, #15]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d102      	bne.n	800c852 <dir_find+0x4e>
 800c84c:	2304      	movs	r3, #4
 800c84e:	75fb      	strb	r3, [r7, #23]
 800c850:	e028      	b.n	800c8a4 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	6a1b      	ldr	r3, [r3, #32]
 800c856:	330b      	adds	r3, #11
 800c858:	781b      	ldrb	r3, [r3, #0]
 800c85a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c85e:	b2da      	uxtb	r2, r3
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	6a1b      	ldr	r3, [r3, #32]
 800c868:	330b      	adds	r3, #11
 800c86a:	781b      	ldrb	r3, [r3, #0]
 800c86c:	f003 0308 	and.w	r3, r3, #8
 800c870:	2b00      	cmp	r3, #0
 800c872:	d10a      	bne.n	800c88a <dir_find+0x86>
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	6a18      	ldr	r0, [r3, #32]
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	3324      	adds	r3, #36	@ 0x24
 800c87c:	220b      	movs	r2, #11
 800c87e:	4619      	mov	r1, r3
 800c880:	f7ff f80a 	bl	800b898 <mem_cmp>
 800c884:	4603      	mov	r3, r0
 800c886:	2b00      	cmp	r3, #0
 800c888:	d00b      	beq.n	800c8a2 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c88a:	2100      	movs	r1, #0
 800c88c:	6878      	ldr	r0, [r7, #4]
 800c88e:	f7ff fe5d 	bl	800c54c <dir_next>
 800c892:	4603      	mov	r3, r0
 800c894:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c896:	7dfb      	ldrb	r3, [r7, #23]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d0c5      	beq.n	800c828 <dir_find+0x24>
 800c89c:	e002      	b.n	800c8a4 <dir_find+0xa0>
		if (res != FR_OK) break;
 800c89e:	bf00      	nop
 800c8a0:	e000      	b.n	800c8a4 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c8a2:	bf00      	nop

	return res;
 800c8a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	3718      	adds	r7, #24
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	bd80      	pop	{r7, pc}

0800c8ae <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c8ae:	b580      	push	{r7, lr}
 800c8b0:	b084      	sub	sp, #16
 800c8b2:	af00      	add	r7, sp, #0
 800c8b4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800c8bc:	2101      	movs	r1, #1
 800c8be:	6878      	ldr	r0, [r7, #4]
 800c8c0:	f7ff ff1a 	bl	800c6f8 <dir_alloc>
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c8c8:	7bfb      	ldrb	r3, [r7, #15]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d11c      	bne.n	800c908 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	69db      	ldr	r3, [r3, #28]
 800c8d2:	4619      	mov	r1, r3
 800c8d4:	68b8      	ldr	r0, [r7, #8]
 800c8d6:	f7ff f9d1 	bl	800bc7c <move_window>
 800c8da:	4603      	mov	r3, r0
 800c8dc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c8de:	7bfb      	ldrb	r3, [r7, #15]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d111      	bne.n	800c908 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	6a1b      	ldr	r3, [r3, #32]
 800c8e8:	2220      	movs	r2, #32
 800c8ea:	2100      	movs	r1, #0
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	f7fe ffb8 	bl	800b862 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6a18      	ldr	r0, [r3, #32]
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	3324      	adds	r3, #36	@ 0x24
 800c8fa:	220b      	movs	r2, #11
 800c8fc:	4619      	mov	r1, r3
 800c8fe:	f7fe ff8f 	bl	800b820 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800c902:	68bb      	ldr	r3, [r7, #8]
 800c904:	2201      	movs	r2, #1
 800c906:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c908:	7bfb      	ldrb	r3, [r7, #15]
}
 800c90a:	4618      	mov	r0, r3
 800c90c:	3710      	adds	r7, #16
 800c90e:	46bd      	mov	sp, r7
 800c910:	bd80      	pop	{r7, pc}
	...

0800c914 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b088      	sub	sp, #32
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
 800c91c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	60fb      	str	r3, [r7, #12]
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	3324      	adds	r3, #36	@ 0x24
 800c928:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800c92a:	220b      	movs	r2, #11
 800c92c:	2120      	movs	r1, #32
 800c92e:	68b8      	ldr	r0, [r7, #8]
 800c930:	f7fe ff97 	bl	800b862 <mem_set>
	si = i = 0; ni = 8;
 800c934:	2300      	movs	r3, #0
 800c936:	613b      	str	r3, [r7, #16]
 800c938:	693b      	ldr	r3, [r7, #16]
 800c93a:	61fb      	str	r3, [r7, #28]
 800c93c:	2308      	movs	r3, #8
 800c93e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800c940:	69fb      	ldr	r3, [r7, #28]
 800c942:	1c5a      	adds	r2, r3, #1
 800c944:	61fa      	str	r2, [r7, #28]
 800c946:	68fa      	ldr	r2, [r7, #12]
 800c948:	4413      	add	r3, r2
 800c94a:	781b      	ldrb	r3, [r3, #0]
 800c94c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c94e:	7efb      	ldrb	r3, [r7, #27]
 800c950:	2b20      	cmp	r3, #32
 800c952:	d94e      	bls.n	800c9f2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800c954:	7efb      	ldrb	r3, [r7, #27]
 800c956:	2b2f      	cmp	r3, #47	@ 0x2f
 800c958:	d006      	beq.n	800c968 <create_name+0x54>
 800c95a:	7efb      	ldrb	r3, [r7, #27]
 800c95c:	2b5c      	cmp	r3, #92	@ 0x5c
 800c95e:	d110      	bne.n	800c982 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c960:	e002      	b.n	800c968 <create_name+0x54>
 800c962:	69fb      	ldr	r3, [r7, #28]
 800c964:	3301      	adds	r3, #1
 800c966:	61fb      	str	r3, [r7, #28]
 800c968:	68fa      	ldr	r2, [r7, #12]
 800c96a:	69fb      	ldr	r3, [r7, #28]
 800c96c:	4413      	add	r3, r2
 800c96e:	781b      	ldrb	r3, [r3, #0]
 800c970:	2b2f      	cmp	r3, #47	@ 0x2f
 800c972:	d0f6      	beq.n	800c962 <create_name+0x4e>
 800c974:	68fa      	ldr	r2, [r7, #12]
 800c976:	69fb      	ldr	r3, [r7, #28]
 800c978:	4413      	add	r3, r2
 800c97a:	781b      	ldrb	r3, [r3, #0]
 800c97c:	2b5c      	cmp	r3, #92	@ 0x5c
 800c97e:	d0f0      	beq.n	800c962 <create_name+0x4e>
			break;
 800c980:	e038      	b.n	800c9f4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800c982:	7efb      	ldrb	r3, [r7, #27]
 800c984:	2b2e      	cmp	r3, #46	@ 0x2e
 800c986:	d003      	beq.n	800c990 <create_name+0x7c>
 800c988:	693a      	ldr	r2, [r7, #16]
 800c98a:	697b      	ldr	r3, [r7, #20]
 800c98c:	429a      	cmp	r2, r3
 800c98e:	d30c      	bcc.n	800c9aa <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800c990:	697b      	ldr	r3, [r7, #20]
 800c992:	2b0b      	cmp	r3, #11
 800c994:	d002      	beq.n	800c99c <create_name+0x88>
 800c996:	7efb      	ldrb	r3, [r7, #27]
 800c998:	2b2e      	cmp	r3, #46	@ 0x2e
 800c99a:	d001      	beq.n	800c9a0 <create_name+0x8c>
 800c99c:	2306      	movs	r3, #6
 800c99e:	e044      	b.n	800ca2a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800c9a0:	2308      	movs	r3, #8
 800c9a2:	613b      	str	r3, [r7, #16]
 800c9a4:	230b      	movs	r3, #11
 800c9a6:	617b      	str	r3, [r7, #20]
			continue;
 800c9a8:	e022      	b.n	800c9f0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800c9aa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	da04      	bge.n	800c9bc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800c9b2:	7efb      	ldrb	r3, [r7, #27]
 800c9b4:	3b80      	subs	r3, #128	@ 0x80
 800c9b6:	4a1f      	ldr	r2, [pc, #124]	@ (800ca34 <create_name+0x120>)
 800c9b8:	5cd3      	ldrb	r3, [r2, r3]
 800c9ba:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800c9bc:	7efb      	ldrb	r3, [r7, #27]
 800c9be:	4619      	mov	r1, r3
 800c9c0:	481d      	ldr	r0, [pc, #116]	@ (800ca38 <create_name+0x124>)
 800c9c2:	f7fe ff90 	bl	800b8e6 <chk_chr>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d001      	beq.n	800c9d0 <create_name+0xbc>
 800c9cc:	2306      	movs	r3, #6
 800c9ce:	e02c      	b.n	800ca2a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800c9d0:	7efb      	ldrb	r3, [r7, #27]
 800c9d2:	2b60      	cmp	r3, #96	@ 0x60
 800c9d4:	d905      	bls.n	800c9e2 <create_name+0xce>
 800c9d6:	7efb      	ldrb	r3, [r7, #27]
 800c9d8:	2b7a      	cmp	r3, #122	@ 0x7a
 800c9da:	d802      	bhi.n	800c9e2 <create_name+0xce>
 800c9dc:	7efb      	ldrb	r3, [r7, #27]
 800c9de:	3b20      	subs	r3, #32
 800c9e0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800c9e2:	693b      	ldr	r3, [r7, #16]
 800c9e4:	1c5a      	adds	r2, r3, #1
 800c9e6:	613a      	str	r2, [r7, #16]
 800c9e8:	68ba      	ldr	r2, [r7, #8]
 800c9ea:	4413      	add	r3, r2
 800c9ec:	7efa      	ldrb	r2, [r7, #27]
 800c9ee:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800c9f0:	e7a6      	b.n	800c940 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c9f2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800c9f4:	68fa      	ldr	r2, [r7, #12]
 800c9f6:	69fb      	ldr	r3, [r7, #28]
 800c9f8:	441a      	add	r2, r3
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800c9fe:	693b      	ldr	r3, [r7, #16]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d101      	bne.n	800ca08 <create_name+0xf4>
 800ca04:	2306      	movs	r3, #6
 800ca06:	e010      	b.n	800ca2a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ca08:	68bb      	ldr	r3, [r7, #8]
 800ca0a:	781b      	ldrb	r3, [r3, #0]
 800ca0c:	2be5      	cmp	r3, #229	@ 0xe5
 800ca0e:	d102      	bne.n	800ca16 <create_name+0x102>
 800ca10:	68bb      	ldr	r3, [r7, #8]
 800ca12:	2205      	movs	r2, #5
 800ca14:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ca16:	7efb      	ldrb	r3, [r7, #27]
 800ca18:	2b20      	cmp	r3, #32
 800ca1a:	d801      	bhi.n	800ca20 <create_name+0x10c>
 800ca1c:	2204      	movs	r2, #4
 800ca1e:	e000      	b.n	800ca22 <create_name+0x10e>
 800ca20:	2200      	movs	r2, #0
 800ca22:	68bb      	ldr	r3, [r7, #8]
 800ca24:	330b      	adds	r3, #11
 800ca26:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800ca28:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	3720      	adds	r7, #32
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	bd80      	pop	{r7, pc}
 800ca32:	bf00      	nop
 800ca34:	08014178 	.word	0x08014178
 800ca38:	080140f0 	.word	0x080140f0

0800ca3c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b086      	sub	sp, #24
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
 800ca44:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ca4a:	693b      	ldr	r3, [r7, #16]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ca50:	e002      	b.n	800ca58 <follow_path+0x1c>
 800ca52:	683b      	ldr	r3, [r7, #0]
 800ca54:	3301      	adds	r3, #1
 800ca56:	603b      	str	r3, [r7, #0]
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	781b      	ldrb	r3, [r3, #0]
 800ca5c:	2b2f      	cmp	r3, #47	@ 0x2f
 800ca5e:	d0f8      	beq.n	800ca52 <follow_path+0x16>
 800ca60:	683b      	ldr	r3, [r7, #0]
 800ca62:	781b      	ldrb	r3, [r3, #0]
 800ca64:	2b5c      	cmp	r3, #92	@ 0x5c
 800ca66:	d0f4      	beq.n	800ca52 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ca68:	693b      	ldr	r3, [r7, #16]
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ca6e:	683b      	ldr	r3, [r7, #0]
 800ca70:	781b      	ldrb	r3, [r3, #0]
 800ca72:	2b1f      	cmp	r3, #31
 800ca74:	d80a      	bhi.n	800ca8c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2280      	movs	r2, #128	@ 0x80
 800ca7a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800ca7e:	2100      	movs	r1, #0
 800ca80:	6878      	ldr	r0, [r7, #4]
 800ca82:	f7ff fcda 	bl	800c43a <dir_sdi>
 800ca86:	4603      	mov	r3, r0
 800ca88:	75fb      	strb	r3, [r7, #23]
 800ca8a:	e048      	b.n	800cb1e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ca8c:	463b      	mov	r3, r7
 800ca8e:	4619      	mov	r1, r3
 800ca90:	6878      	ldr	r0, [r7, #4]
 800ca92:	f7ff ff3f 	bl	800c914 <create_name>
 800ca96:	4603      	mov	r3, r0
 800ca98:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ca9a:	7dfb      	ldrb	r3, [r7, #23]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d139      	bne.n	800cb14 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800caa0:	6878      	ldr	r0, [r7, #4]
 800caa2:	f7ff feaf 	bl	800c804 <dir_find>
 800caa6:	4603      	mov	r3, r0
 800caa8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800cab0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800cab2:	7dfb      	ldrb	r3, [r7, #23]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d00a      	beq.n	800cace <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800cab8:	7dfb      	ldrb	r3, [r7, #23]
 800caba:	2b04      	cmp	r3, #4
 800cabc:	d12c      	bne.n	800cb18 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800cabe:	7afb      	ldrb	r3, [r7, #11]
 800cac0:	f003 0304 	and.w	r3, r3, #4
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d127      	bne.n	800cb18 <follow_path+0xdc>
 800cac8:	2305      	movs	r3, #5
 800caca:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800cacc:	e024      	b.n	800cb18 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cace:	7afb      	ldrb	r3, [r7, #11]
 800cad0:	f003 0304 	and.w	r3, r3, #4
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d121      	bne.n	800cb1c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800cad8:	693b      	ldr	r3, [r7, #16]
 800cada:	799b      	ldrb	r3, [r3, #6]
 800cadc:	f003 0310 	and.w	r3, r3, #16
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d102      	bne.n	800caea <follow_path+0xae>
				res = FR_NO_PATH; break;
 800cae4:	2305      	movs	r3, #5
 800cae6:	75fb      	strb	r3, [r7, #23]
 800cae8:	e019      	b.n	800cb1e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	695b      	ldr	r3, [r3, #20]
 800caf4:	68fa      	ldr	r2, [r7, #12]
 800caf6:	8992      	ldrh	r2, [r2, #12]
 800caf8:	fbb3 f0f2 	udiv	r0, r3, r2
 800cafc:	fb00 f202 	mul.w	r2, r0, r2
 800cb00:	1a9b      	subs	r3, r3, r2
 800cb02:	440b      	add	r3, r1
 800cb04:	4619      	mov	r1, r3
 800cb06:	68f8      	ldr	r0, [r7, #12]
 800cb08:	f7ff fe3d 	bl	800c786 <ld_clust>
 800cb0c:	4602      	mov	r2, r0
 800cb0e:	693b      	ldr	r3, [r7, #16]
 800cb10:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cb12:	e7bb      	b.n	800ca8c <follow_path+0x50>
			if (res != FR_OK) break;
 800cb14:	bf00      	nop
 800cb16:	e002      	b.n	800cb1e <follow_path+0xe2>
				break;
 800cb18:	bf00      	nop
 800cb1a:	e000      	b.n	800cb1e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cb1c:	bf00      	nop
			}
		}
	}

	return res;
 800cb1e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb20:	4618      	mov	r0, r3
 800cb22:	3718      	adds	r7, #24
 800cb24:	46bd      	mov	sp, r7
 800cb26:	bd80      	pop	{r7, pc}

0800cb28 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800cb28:	b480      	push	{r7}
 800cb2a:	b087      	sub	sp, #28
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800cb30:	f04f 33ff 	mov.w	r3, #4294967295
 800cb34:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d031      	beq.n	800cba2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	617b      	str	r3, [r7, #20]
 800cb44:	e002      	b.n	800cb4c <get_ldnumber+0x24>
 800cb46:	697b      	ldr	r3, [r7, #20]
 800cb48:	3301      	adds	r3, #1
 800cb4a:	617b      	str	r3, [r7, #20]
 800cb4c:	697b      	ldr	r3, [r7, #20]
 800cb4e:	781b      	ldrb	r3, [r3, #0]
 800cb50:	2b20      	cmp	r3, #32
 800cb52:	d903      	bls.n	800cb5c <get_ldnumber+0x34>
 800cb54:	697b      	ldr	r3, [r7, #20]
 800cb56:	781b      	ldrb	r3, [r3, #0]
 800cb58:	2b3a      	cmp	r3, #58	@ 0x3a
 800cb5a:	d1f4      	bne.n	800cb46 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800cb5c:	697b      	ldr	r3, [r7, #20]
 800cb5e:	781b      	ldrb	r3, [r3, #0]
 800cb60:	2b3a      	cmp	r3, #58	@ 0x3a
 800cb62:	d11c      	bne.n	800cb9e <get_ldnumber+0x76>
			tp = *path;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	1c5a      	adds	r2, r3, #1
 800cb6e:	60fa      	str	r2, [r7, #12]
 800cb70:	781b      	ldrb	r3, [r3, #0]
 800cb72:	3b30      	subs	r3, #48	@ 0x30
 800cb74:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800cb76:	68bb      	ldr	r3, [r7, #8]
 800cb78:	2b09      	cmp	r3, #9
 800cb7a:	d80e      	bhi.n	800cb9a <get_ldnumber+0x72>
 800cb7c:	68fa      	ldr	r2, [r7, #12]
 800cb7e:	697b      	ldr	r3, [r7, #20]
 800cb80:	429a      	cmp	r2, r3
 800cb82:	d10a      	bne.n	800cb9a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800cb84:	68bb      	ldr	r3, [r7, #8]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d107      	bne.n	800cb9a <get_ldnumber+0x72>
					vol = (int)i;
 800cb8a:	68bb      	ldr	r3, [r7, #8]
 800cb8c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800cb8e:	697b      	ldr	r3, [r7, #20]
 800cb90:	3301      	adds	r3, #1
 800cb92:	617b      	str	r3, [r7, #20]
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	697a      	ldr	r2, [r7, #20]
 800cb98:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800cb9a:	693b      	ldr	r3, [r7, #16]
 800cb9c:	e002      	b.n	800cba4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800cb9e:	2300      	movs	r3, #0
 800cba0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800cba2:	693b      	ldr	r3, [r7, #16]
}
 800cba4:	4618      	mov	r0, r3
 800cba6:	371c      	adds	r7, #28
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbae:	4770      	bx	lr

0800cbb0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b082      	sub	sp, #8
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
 800cbb8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	70da      	strb	r2, [r3, #3]
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	f04f 32ff 	mov.w	r2, #4294967295
 800cbc6:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800cbc8:	6839      	ldr	r1, [r7, #0]
 800cbca:	6878      	ldr	r0, [r7, #4]
 800cbcc:	f7ff f856 	bl	800bc7c <move_window>
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d001      	beq.n	800cbda <check_fs+0x2a>
 800cbd6:	2304      	movs	r3, #4
 800cbd8:	e038      	b.n	800cc4c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	3334      	adds	r3, #52	@ 0x34
 800cbde:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	f7fe fd9a 	bl	800b71c <ld_word>
 800cbe8:	4603      	mov	r3, r0
 800cbea:	461a      	mov	r2, r3
 800cbec:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800cbf0:	429a      	cmp	r2, r3
 800cbf2:	d001      	beq.n	800cbf8 <check_fs+0x48>
 800cbf4:	2303      	movs	r3, #3
 800cbf6:	e029      	b.n	800cc4c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800cbfe:	2be9      	cmp	r3, #233	@ 0xe9
 800cc00:	d009      	beq.n	800cc16 <check_fs+0x66>
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800cc08:	2beb      	cmp	r3, #235	@ 0xeb
 800cc0a:	d11e      	bne.n	800cc4a <check_fs+0x9a>
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800cc12:	2b90      	cmp	r3, #144	@ 0x90
 800cc14:	d119      	bne.n	800cc4a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	3334      	adds	r3, #52	@ 0x34
 800cc1a:	3336      	adds	r3, #54	@ 0x36
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	f7fe fd95 	bl	800b74c <ld_dword>
 800cc22:	4603      	mov	r3, r0
 800cc24:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800cc28:	4a0a      	ldr	r2, [pc, #40]	@ (800cc54 <check_fs+0xa4>)
 800cc2a:	4293      	cmp	r3, r2
 800cc2c:	d101      	bne.n	800cc32 <check_fs+0x82>
 800cc2e:	2300      	movs	r3, #0
 800cc30:	e00c      	b.n	800cc4c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	3334      	adds	r3, #52	@ 0x34
 800cc36:	3352      	adds	r3, #82	@ 0x52
 800cc38:	4618      	mov	r0, r3
 800cc3a:	f7fe fd87 	bl	800b74c <ld_dword>
 800cc3e:	4603      	mov	r3, r0
 800cc40:	4a05      	ldr	r2, [pc, #20]	@ (800cc58 <check_fs+0xa8>)
 800cc42:	4293      	cmp	r3, r2
 800cc44:	d101      	bne.n	800cc4a <check_fs+0x9a>
 800cc46:	2300      	movs	r3, #0
 800cc48:	e000      	b.n	800cc4c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800cc4a:	2302      	movs	r3, #2
}
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	3708      	adds	r7, #8
 800cc50:	46bd      	mov	sp, r7
 800cc52:	bd80      	pop	{r7, pc}
 800cc54:	00544146 	.word	0x00544146
 800cc58:	33544146 	.word	0x33544146

0800cc5c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b096      	sub	sp, #88	@ 0x58
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	60f8      	str	r0, [r7, #12]
 800cc64:	60b9      	str	r1, [r7, #8]
 800cc66:	4613      	mov	r3, r2
 800cc68:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800cc6a:	68bb      	ldr	r3, [r7, #8]
 800cc6c:	2200      	movs	r2, #0
 800cc6e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800cc70:	68f8      	ldr	r0, [r7, #12]
 800cc72:	f7ff ff59 	bl	800cb28 <get_ldnumber>
 800cc76:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800cc78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	da01      	bge.n	800cc82 <find_volume+0x26>
 800cc7e:	230b      	movs	r3, #11
 800cc80:	e262      	b.n	800d148 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800cc82:	4a9f      	ldr	r2, [pc, #636]	@ (800cf00 <find_volume+0x2a4>)
 800cc84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc8a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800cc8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d101      	bne.n	800cc96 <find_volume+0x3a>
 800cc92:	230c      	movs	r3, #12
 800cc94:	e258      	b.n	800d148 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800cc96:	68bb      	ldr	r3, [r7, #8]
 800cc98:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cc9a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800cc9c:	79fb      	ldrb	r3, [r7, #7]
 800cc9e:	f023 0301 	bic.w	r3, r3, #1
 800cca2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800cca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cca6:	781b      	ldrb	r3, [r3, #0]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d01a      	beq.n	800cce2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800ccac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccae:	785b      	ldrb	r3, [r3, #1]
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	f7fe fc93 	bl	800b5dc <disk_status>
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ccbc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ccc0:	f003 0301 	and.w	r3, r3, #1
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d10c      	bne.n	800cce2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ccc8:	79fb      	ldrb	r3, [r7, #7]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d007      	beq.n	800ccde <find_volume+0x82>
 800ccce:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ccd2:	f003 0304 	and.w	r3, r3, #4
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d001      	beq.n	800ccde <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800ccda:	230a      	movs	r3, #10
 800ccdc:	e234      	b.n	800d148 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 800ccde:	2300      	movs	r3, #0
 800cce0:	e232      	b.n	800d148 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800cce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cce4:	2200      	movs	r2, #0
 800cce6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800cce8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ccea:	b2da      	uxtb	r2, r3
 800ccec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccee:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ccf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccf2:	785b      	ldrb	r3, [r3, #1]
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	f7fe fc8b 	bl	800b610 <disk_initialize>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800cd00:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cd04:	f003 0301 	and.w	r3, r3, #1
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d001      	beq.n	800cd10 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800cd0c:	2303      	movs	r3, #3
 800cd0e:	e21b      	b.n	800d148 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800cd10:	79fb      	ldrb	r3, [r7, #7]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d007      	beq.n	800cd26 <find_volume+0xca>
 800cd16:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cd1a:	f003 0304 	and.w	r3, r3, #4
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d001      	beq.n	800cd26 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800cd22:	230a      	movs	r3, #10
 800cd24:	e210      	b.n	800d148 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800cd26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd28:	7858      	ldrb	r0, [r3, #1]
 800cd2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd2c:	330c      	adds	r3, #12
 800cd2e:	461a      	mov	r2, r3
 800cd30:	2102      	movs	r1, #2
 800cd32:	f7fe fcd5 	bl	800b6e0 <disk_ioctl>
 800cd36:	4603      	mov	r3, r0
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d001      	beq.n	800cd40 <find_volume+0xe4>
 800cd3c:	2301      	movs	r3, #1
 800cd3e:	e203      	b.n	800d148 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800cd40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd42:	899b      	ldrh	r3, [r3, #12]
 800cd44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cd48:	d80d      	bhi.n	800cd66 <find_volume+0x10a>
 800cd4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd4c:	899b      	ldrh	r3, [r3, #12]
 800cd4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cd52:	d308      	bcc.n	800cd66 <find_volume+0x10a>
 800cd54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd56:	899b      	ldrh	r3, [r3, #12]
 800cd58:	461a      	mov	r2, r3
 800cd5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd5c:	899b      	ldrh	r3, [r3, #12]
 800cd5e:	3b01      	subs	r3, #1
 800cd60:	4013      	ands	r3, r2
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d001      	beq.n	800cd6a <find_volume+0x10e>
 800cd66:	2301      	movs	r3, #1
 800cd68:	e1ee      	b.n	800d148 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800cd6e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cd70:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cd72:	f7ff ff1d 	bl	800cbb0 <check_fs>
 800cd76:	4603      	mov	r3, r0
 800cd78:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800cd7c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cd80:	2b02      	cmp	r3, #2
 800cd82:	d149      	bne.n	800ce18 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cd84:	2300      	movs	r3, #0
 800cd86:	643b      	str	r3, [r7, #64]	@ 0x40
 800cd88:	e01e      	b.n	800cdc8 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800cd8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd8c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800cd90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cd92:	011b      	lsls	r3, r3, #4
 800cd94:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800cd98:	4413      	add	r3, r2
 800cd9a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800cd9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd9e:	3304      	adds	r3, #4
 800cda0:	781b      	ldrb	r3, [r3, #0]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d006      	beq.n	800cdb4 <find_volume+0x158>
 800cda6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cda8:	3308      	adds	r3, #8
 800cdaa:	4618      	mov	r0, r3
 800cdac:	f7fe fcce 	bl	800b74c <ld_dword>
 800cdb0:	4602      	mov	r2, r0
 800cdb2:	e000      	b.n	800cdb6 <find_volume+0x15a>
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cdb8:	009b      	lsls	r3, r3, #2
 800cdba:	3358      	adds	r3, #88	@ 0x58
 800cdbc:	443b      	add	r3, r7
 800cdbe:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cdc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cdc4:	3301      	adds	r3, #1
 800cdc6:	643b      	str	r3, [r7, #64]	@ 0x40
 800cdc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cdca:	2b03      	cmp	r3, #3
 800cdcc:	d9dd      	bls.n	800cd8a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800cdce:	2300      	movs	r3, #0
 800cdd0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800cdd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d002      	beq.n	800cdde <find_volume+0x182>
 800cdd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cdda:	3b01      	subs	r3, #1
 800cddc:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800cdde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cde0:	009b      	lsls	r3, r3, #2
 800cde2:	3358      	adds	r3, #88	@ 0x58
 800cde4:	443b      	add	r3, r7
 800cde6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800cdea:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800cdec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d005      	beq.n	800cdfe <find_volume+0x1a2>
 800cdf2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cdf4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cdf6:	f7ff fedb 	bl	800cbb0 <check_fs>
 800cdfa:	4603      	mov	r3, r0
 800cdfc:	e000      	b.n	800ce00 <find_volume+0x1a4>
 800cdfe:	2303      	movs	r3, #3
 800ce00:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ce04:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ce08:	2b01      	cmp	r3, #1
 800ce0a:	d905      	bls.n	800ce18 <find_volume+0x1bc>
 800ce0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce0e:	3301      	adds	r3, #1
 800ce10:	643b      	str	r3, [r7, #64]	@ 0x40
 800ce12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce14:	2b03      	cmp	r3, #3
 800ce16:	d9e2      	bls.n	800cdde <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ce18:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ce1c:	2b04      	cmp	r3, #4
 800ce1e:	d101      	bne.n	800ce24 <find_volume+0x1c8>
 800ce20:	2301      	movs	r3, #1
 800ce22:	e191      	b.n	800d148 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ce24:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ce28:	2b01      	cmp	r3, #1
 800ce2a:	d901      	bls.n	800ce30 <find_volume+0x1d4>
 800ce2c:	230d      	movs	r3, #13
 800ce2e:	e18b      	b.n	800d148 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ce30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce32:	3334      	adds	r3, #52	@ 0x34
 800ce34:	330b      	adds	r3, #11
 800ce36:	4618      	mov	r0, r3
 800ce38:	f7fe fc70 	bl	800b71c <ld_word>
 800ce3c:	4603      	mov	r3, r0
 800ce3e:	461a      	mov	r2, r3
 800ce40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce42:	899b      	ldrh	r3, [r3, #12]
 800ce44:	429a      	cmp	r2, r3
 800ce46:	d001      	beq.n	800ce4c <find_volume+0x1f0>
 800ce48:	230d      	movs	r3, #13
 800ce4a:	e17d      	b.n	800d148 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ce4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce4e:	3334      	adds	r3, #52	@ 0x34
 800ce50:	3316      	adds	r3, #22
 800ce52:	4618      	mov	r0, r3
 800ce54:	f7fe fc62 	bl	800b71c <ld_word>
 800ce58:	4603      	mov	r3, r0
 800ce5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ce5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d106      	bne.n	800ce70 <find_volume+0x214>
 800ce62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce64:	3334      	adds	r3, #52	@ 0x34
 800ce66:	3324      	adds	r3, #36	@ 0x24
 800ce68:	4618      	mov	r0, r3
 800ce6a:	f7fe fc6f 	bl	800b74c <ld_dword>
 800ce6e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800ce70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce72:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ce74:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ce76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce78:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800ce7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce7e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ce80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce82:	789b      	ldrb	r3, [r3, #2]
 800ce84:	2b01      	cmp	r3, #1
 800ce86:	d005      	beq.n	800ce94 <find_volume+0x238>
 800ce88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce8a:	789b      	ldrb	r3, [r3, #2]
 800ce8c:	2b02      	cmp	r3, #2
 800ce8e:	d001      	beq.n	800ce94 <find_volume+0x238>
 800ce90:	230d      	movs	r3, #13
 800ce92:	e159      	b.n	800d148 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ce94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce96:	789b      	ldrb	r3, [r3, #2]
 800ce98:	461a      	mov	r2, r3
 800ce9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ce9c:	fb02 f303 	mul.w	r3, r2, r3
 800cea0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800cea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cea4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cea8:	461a      	mov	r2, r3
 800ceaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ceac:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ceae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ceb0:	895b      	ldrh	r3, [r3, #10]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d008      	beq.n	800cec8 <find_volume+0x26c>
 800ceb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ceb8:	895b      	ldrh	r3, [r3, #10]
 800ceba:	461a      	mov	r2, r3
 800cebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cebe:	895b      	ldrh	r3, [r3, #10]
 800cec0:	3b01      	subs	r3, #1
 800cec2:	4013      	ands	r3, r2
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d001      	beq.n	800cecc <find_volume+0x270>
 800cec8:	230d      	movs	r3, #13
 800ceca:	e13d      	b.n	800d148 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800cecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cece:	3334      	adds	r3, #52	@ 0x34
 800ced0:	3311      	adds	r3, #17
 800ced2:	4618      	mov	r0, r3
 800ced4:	f7fe fc22 	bl	800b71c <ld_word>
 800ced8:	4603      	mov	r3, r0
 800ceda:	461a      	mov	r2, r3
 800cedc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cede:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800cee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cee2:	891b      	ldrh	r3, [r3, #8]
 800cee4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cee6:	8992      	ldrh	r2, [r2, #12]
 800cee8:	0952      	lsrs	r2, r2, #5
 800ceea:	b292      	uxth	r2, r2
 800ceec:	fbb3 f1f2 	udiv	r1, r3, r2
 800cef0:	fb01 f202 	mul.w	r2, r1, r2
 800cef4:	1a9b      	subs	r3, r3, r2
 800cef6:	b29b      	uxth	r3, r3
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d003      	beq.n	800cf04 <find_volume+0x2a8>
 800cefc:	230d      	movs	r3, #13
 800cefe:	e123      	b.n	800d148 <find_volume+0x4ec>
 800cf00:	20002ca0 	.word	0x20002ca0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800cf04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf06:	3334      	adds	r3, #52	@ 0x34
 800cf08:	3313      	adds	r3, #19
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	f7fe fc06 	bl	800b71c <ld_word>
 800cf10:	4603      	mov	r3, r0
 800cf12:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800cf14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d106      	bne.n	800cf28 <find_volume+0x2cc>
 800cf1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf1c:	3334      	adds	r3, #52	@ 0x34
 800cf1e:	3320      	adds	r3, #32
 800cf20:	4618      	mov	r0, r3
 800cf22:	f7fe fc13 	bl	800b74c <ld_dword>
 800cf26:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800cf28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf2a:	3334      	adds	r3, #52	@ 0x34
 800cf2c:	330e      	adds	r3, #14
 800cf2e:	4618      	mov	r0, r3
 800cf30:	f7fe fbf4 	bl	800b71c <ld_word>
 800cf34:	4603      	mov	r3, r0
 800cf36:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800cf38:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d101      	bne.n	800cf42 <find_volume+0x2e6>
 800cf3e:	230d      	movs	r3, #13
 800cf40:	e102      	b.n	800d148 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800cf42:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800cf44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cf46:	4413      	add	r3, r2
 800cf48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cf4a:	8911      	ldrh	r1, [r2, #8]
 800cf4c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cf4e:	8992      	ldrh	r2, [r2, #12]
 800cf50:	0952      	lsrs	r2, r2, #5
 800cf52:	b292      	uxth	r2, r2
 800cf54:	fbb1 f2f2 	udiv	r2, r1, r2
 800cf58:	b292      	uxth	r2, r2
 800cf5a:	4413      	add	r3, r2
 800cf5c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800cf5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cf60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf62:	429a      	cmp	r2, r3
 800cf64:	d201      	bcs.n	800cf6a <find_volume+0x30e>
 800cf66:	230d      	movs	r3, #13
 800cf68:	e0ee      	b.n	800d148 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800cf6a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cf6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf6e:	1ad3      	subs	r3, r2, r3
 800cf70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cf72:	8952      	ldrh	r2, [r2, #10]
 800cf74:	fbb3 f3f2 	udiv	r3, r3, r2
 800cf78:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800cf7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d101      	bne.n	800cf84 <find_volume+0x328>
 800cf80:	230d      	movs	r3, #13
 800cf82:	e0e1      	b.n	800d148 <find_volume+0x4ec>
		fmt = FS_FAT32;
 800cf84:	2303      	movs	r3, #3
 800cf86:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800cf8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf8c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800cf90:	4293      	cmp	r3, r2
 800cf92:	d802      	bhi.n	800cf9a <find_volume+0x33e>
 800cf94:	2302      	movs	r3, #2
 800cf96:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800cf9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf9c:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800cfa0:	4293      	cmp	r3, r2
 800cfa2:	d802      	bhi.n	800cfaa <find_volume+0x34e>
 800cfa4:	2301      	movs	r3, #1
 800cfa6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800cfaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfac:	1c9a      	adds	r2, r3, #2
 800cfae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfb0:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800cfb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfb4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cfb6:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800cfb8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800cfba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cfbc:	441a      	add	r2, r3
 800cfbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfc0:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800cfc2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cfc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfc6:	441a      	add	r2, r3
 800cfc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfca:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800cfcc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cfd0:	2b03      	cmp	r3, #3
 800cfd2:	d11e      	bne.n	800d012 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800cfd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfd6:	3334      	adds	r3, #52	@ 0x34
 800cfd8:	332a      	adds	r3, #42	@ 0x2a
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f7fe fb9e 	bl	800b71c <ld_word>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d001      	beq.n	800cfea <find_volume+0x38e>
 800cfe6:	230d      	movs	r3, #13
 800cfe8:	e0ae      	b.n	800d148 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800cfea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfec:	891b      	ldrh	r3, [r3, #8]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d001      	beq.n	800cff6 <find_volume+0x39a>
 800cff2:	230d      	movs	r3, #13
 800cff4:	e0a8      	b.n	800d148 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800cff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cff8:	3334      	adds	r3, #52	@ 0x34
 800cffa:	332c      	adds	r3, #44	@ 0x2c
 800cffc:	4618      	mov	r0, r3
 800cffe:	f7fe fba5 	bl	800b74c <ld_dword>
 800d002:	4602      	mov	r2, r0
 800d004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d006:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d00a:	699b      	ldr	r3, [r3, #24]
 800d00c:	009b      	lsls	r3, r3, #2
 800d00e:	647b      	str	r3, [r7, #68]	@ 0x44
 800d010:	e01f      	b.n	800d052 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d014:	891b      	ldrh	r3, [r3, #8]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d101      	bne.n	800d01e <find_volume+0x3c2>
 800d01a:	230d      	movs	r3, #13
 800d01c:	e094      	b.n	800d148 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d01e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d020:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d022:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d024:	441a      	add	r2, r3
 800d026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d028:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d02a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d02e:	2b02      	cmp	r3, #2
 800d030:	d103      	bne.n	800d03a <find_volume+0x3de>
 800d032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d034:	699b      	ldr	r3, [r3, #24]
 800d036:	005b      	lsls	r3, r3, #1
 800d038:	e00a      	b.n	800d050 <find_volume+0x3f4>
 800d03a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d03c:	699a      	ldr	r2, [r3, #24]
 800d03e:	4613      	mov	r3, r2
 800d040:	005b      	lsls	r3, r3, #1
 800d042:	4413      	add	r3, r2
 800d044:	085a      	lsrs	r2, r3, #1
 800d046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d048:	699b      	ldr	r3, [r3, #24]
 800d04a:	f003 0301 	and.w	r3, r3, #1
 800d04e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d050:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d054:	69da      	ldr	r2, [r3, #28]
 800d056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d058:	899b      	ldrh	r3, [r3, #12]
 800d05a:	4619      	mov	r1, r3
 800d05c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d05e:	440b      	add	r3, r1
 800d060:	3b01      	subs	r3, #1
 800d062:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d064:	8989      	ldrh	r1, [r1, #12]
 800d066:	fbb3 f3f1 	udiv	r3, r3, r1
 800d06a:	429a      	cmp	r2, r3
 800d06c:	d201      	bcs.n	800d072 <find_volume+0x416>
 800d06e:	230d      	movs	r3, #13
 800d070:	e06a      	b.n	800d148 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d074:	f04f 32ff 	mov.w	r2, #4294967295
 800d078:	615a      	str	r2, [r3, #20]
 800d07a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d07c:	695a      	ldr	r2, [r3, #20]
 800d07e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d080:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800d082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d084:	2280      	movs	r2, #128	@ 0x80
 800d086:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d088:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d08c:	2b03      	cmp	r3, #3
 800d08e:	d149      	bne.n	800d124 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d092:	3334      	adds	r3, #52	@ 0x34
 800d094:	3330      	adds	r3, #48	@ 0x30
 800d096:	4618      	mov	r0, r3
 800d098:	f7fe fb40 	bl	800b71c <ld_word>
 800d09c:	4603      	mov	r3, r0
 800d09e:	2b01      	cmp	r3, #1
 800d0a0:	d140      	bne.n	800d124 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d0a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d0a4:	3301      	adds	r3, #1
 800d0a6:	4619      	mov	r1, r3
 800d0a8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d0aa:	f7fe fde7 	bl	800bc7c <move_window>
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d137      	bne.n	800d124 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800d0b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d0ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0bc:	3334      	adds	r3, #52	@ 0x34
 800d0be:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	f7fe fb2a 	bl	800b71c <ld_word>
 800d0c8:	4603      	mov	r3, r0
 800d0ca:	461a      	mov	r2, r3
 800d0cc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800d0d0:	429a      	cmp	r2, r3
 800d0d2:	d127      	bne.n	800d124 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d0d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0d6:	3334      	adds	r3, #52	@ 0x34
 800d0d8:	4618      	mov	r0, r3
 800d0da:	f7fe fb37 	bl	800b74c <ld_dword>
 800d0de:	4603      	mov	r3, r0
 800d0e0:	4a1b      	ldr	r2, [pc, #108]	@ (800d150 <find_volume+0x4f4>)
 800d0e2:	4293      	cmp	r3, r2
 800d0e4:	d11e      	bne.n	800d124 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d0e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0e8:	3334      	adds	r3, #52	@ 0x34
 800d0ea:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	f7fe fb2c 	bl	800b74c <ld_dword>
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	4a17      	ldr	r2, [pc, #92]	@ (800d154 <find_volume+0x4f8>)
 800d0f8:	4293      	cmp	r3, r2
 800d0fa:	d113      	bne.n	800d124 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d0fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0fe:	3334      	adds	r3, #52	@ 0x34
 800d100:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800d104:	4618      	mov	r0, r3
 800d106:	f7fe fb21 	bl	800b74c <ld_dword>
 800d10a:	4602      	mov	r2, r0
 800d10c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d10e:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d112:	3334      	adds	r3, #52	@ 0x34
 800d114:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800d118:	4618      	mov	r0, r3
 800d11a:	f7fe fb17 	bl	800b74c <ld_dword>
 800d11e:	4602      	mov	r2, r0
 800d120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d122:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d126:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800d12a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d12c:	4b0a      	ldr	r3, [pc, #40]	@ (800d158 <find_volume+0x4fc>)
 800d12e:	881b      	ldrh	r3, [r3, #0]
 800d130:	3301      	adds	r3, #1
 800d132:	b29a      	uxth	r2, r3
 800d134:	4b08      	ldr	r3, [pc, #32]	@ (800d158 <find_volume+0x4fc>)
 800d136:	801a      	strh	r2, [r3, #0]
 800d138:	4b07      	ldr	r3, [pc, #28]	@ (800d158 <find_volume+0x4fc>)
 800d13a:	881a      	ldrh	r2, [r3, #0]
 800d13c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d13e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d140:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d142:	f7fe fd33 	bl	800bbac <clear_lock>
#endif
	return FR_OK;
 800d146:	2300      	movs	r3, #0
}
 800d148:	4618      	mov	r0, r3
 800d14a:	3758      	adds	r7, #88	@ 0x58
 800d14c:	46bd      	mov	sp, r7
 800d14e:	bd80      	pop	{r7, pc}
 800d150:	41615252 	.word	0x41615252
 800d154:	61417272 	.word	0x61417272
 800d158:	20002ca4 	.word	0x20002ca4

0800d15c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b084      	sub	sp, #16
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]
 800d164:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d166:	2309      	movs	r3, #9
 800d168:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d01c      	beq.n	800d1aa <validate+0x4e>
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d018      	beq.n	800d1aa <validate+0x4e>
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	781b      	ldrb	r3, [r3, #0]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d013      	beq.n	800d1aa <validate+0x4e>
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	889a      	ldrh	r2, [r3, #4]
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	88db      	ldrh	r3, [r3, #6]
 800d18c:	429a      	cmp	r2, r3
 800d18e:	d10c      	bne.n	800d1aa <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	785b      	ldrb	r3, [r3, #1]
 800d196:	4618      	mov	r0, r3
 800d198:	f7fe fa20 	bl	800b5dc <disk_status>
 800d19c:	4603      	mov	r3, r0
 800d19e:	f003 0301 	and.w	r3, r3, #1
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d101      	bne.n	800d1aa <validate+0x4e>
			res = FR_OK;
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d1aa:	7bfb      	ldrb	r3, [r7, #15]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d102      	bne.n	800d1b6 <validate+0x5a>
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	e000      	b.n	800d1b8 <validate+0x5c>
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	683a      	ldr	r2, [r7, #0]
 800d1ba:	6013      	str	r3, [r2, #0]
	return res;
 800d1bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1be:	4618      	mov	r0, r3
 800d1c0:	3710      	adds	r7, #16
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	bd80      	pop	{r7, pc}
	...

0800d1c8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b088      	sub	sp, #32
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	60f8      	str	r0, [r7, #12]
 800d1d0:	60b9      	str	r1, [r7, #8]
 800d1d2:	4613      	mov	r3, r2
 800d1d4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d1d6:	68bb      	ldr	r3, [r7, #8]
 800d1d8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d1da:	f107 0310 	add.w	r3, r7, #16
 800d1de:	4618      	mov	r0, r3
 800d1e0:	f7ff fca2 	bl	800cb28 <get_ldnumber>
 800d1e4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d1e6:	69fb      	ldr	r3, [r7, #28]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	da01      	bge.n	800d1f0 <f_mount+0x28>
 800d1ec:	230b      	movs	r3, #11
 800d1ee:	e02b      	b.n	800d248 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d1f0:	4a17      	ldr	r2, [pc, #92]	@ (800d250 <f_mount+0x88>)
 800d1f2:	69fb      	ldr	r3, [r7, #28]
 800d1f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d1f8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d1fa:	69bb      	ldr	r3, [r7, #24]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d005      	beq.n	800d20c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d200:	69b8      	ldr	r0, [r7, #24]
 800d202:	f7fe fcd3 	bl	800bbac <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d206:	69bb      	ldr	r3, [r7, #24]
 800d208:	2200      	movs	r2, #0
 800d20a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d002      	beq.n	800d218 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	2200      	movs	r2, #0
 800d216:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d218:	68fa      	ldr	r2, [r7, #12]
 800d21a:	490d      	ldr	r1, [pc, #52]	@ (800d250 <f_mount+0x88>)
 800d21c:	69fb      	ldr	r3, [r7, #28]
 800d21e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d002      	beq.n	800d22e <f_mount+0x66>
 800d228:	79fb      	ldrb	r3, [r7, #7]
 800d22a:	2b01      	cmp	r3, #1
 800d22c:	d001      	beq.n	800d232 <f_mount+0x6a>
 800d22e:	2300      	movs	r3, #0
 800d230:	e00a      	b.n	800d248 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d232:	f107 010c 	add.w	r1, r7, #12
 800d236:	f107 0308 	add.w	r3, r7, #8
 800d23a:	2200      	movs	r2, #0
 800d23c:	4618      	mov	r0, r3
 800d23e:	f7ff fd0d 	bl	800cc5c <find_volume>
 800d242:	4603      	mov	r3, r0
 800d244:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d246:	7dfb      	ldrb	r3, [r7, #23]
}
 800d248:	4618      	mov	r0, r3
 800d24a:	3720      	adds	r7, #32
 800d24c:	46bd      	mov	sp, r7
 800d24e:	bd80      	pop	{r7, pc}
 800d250:	20002ca0 	.word	0x20002ca0

0800d254 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b098      	sub	sp, #96	@ 0x60
 800d258:	af00      	add	r7, sp, #0
 800d25a:	60f8      	str	r0, [r7, #12]
 800d25c:	60b9      	str	r1, [r7, #8]
 800d25e:	4613      	mov	r3, r2
 800d260:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d101      	bne.n	800d26c <f_open+0x18>
 800d268:	2309      	movs	r3, #9
 800d26a:	e1b7      	b.n	800d5dc <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d26c:	79fb      	ldrb	r3, [r7, #7]
 800d26e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d272:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d274:	79fa      	ldrb	r2, [r7, #7]
 800d276:	f107 0110 	add.w	r1, r7, #16
 800d27a:	f107 0308 	add.w	r3, r7, #8
 800d27e:	4618      	mov	r0, r3
 800d280:	f7ff fcec 	bl	800cc5c <find_volume>
 800d284:	4603      	mov	r3, r0
 800d286:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800d28a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d28e:	2b00      	cmp	r3, #0
 800d290:	f040 819b 	bne.w	800d5ca <f_open+0x376>
		dj.obj.fs = fs;
 800d294:	693b      	ldr	r3, [r7, #16]
 800d296:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d298:	68ba      	ldr	r2, [r7, #8]
 800d29a:	f107 0314 	add.w	r3, r7, #20
 800d29e:	4611      	mov	r1, r2
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	f7ff fbcb 	bl	800ca3c <follow_path>
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d2ac:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d118      	bne.n	800d2e6 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d2b4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d2b8:	b25b      	sxtb	r3, r3
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	da03      	bge.n	800d2c6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800d2be:	2306      	movs	r3, #6
 800d2c0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d2c4:	e00f      	b.n	800d2e6 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d2c6:	79fb      	ldrb	r3, [r7, #7]
 800d2c8:	2b01      	cmp	r3, #1
 800d2ca:	bf8c      	ite	hi
 800d2cc:	2301      	movhi	r3, #1
 800d2ce:	2300      	movls	r3, #0
 800d2d0:	b2db      	uxtb	r3, r3
 800d2d2:	461a      	mov	r2, r3
 800d2d4:	f107 0314 	add.w	r3, r7, #20
 800d2d8:	4611      	mov	r1, r2
 800d2da:	4618      	mov	r0, r3
 800d2dc:	f7fe fb1e 	bl	800b91c <chk_lock>
 800d2e0:	4603      	mov	r3, r0
 800d2e2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d2e6:	79fb      	ldrb	r3, [r7, #7]
 800d2e8:	f003 031c 	and.w	r3, r3, #28
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d07f      	beq.n	800d3f0 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800d2f0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d017      	beq.n	800d328 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d2f8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d2fc:	2b04      	cmp	r3, #4
 800d2fe:	d10e      	bne.n	800d31e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d300:	f7fe fb68 	bl	800b9d4 <enq_lock>
 800d304:	4603      	mov	r3, r0
 800d306:	2b00      	cmp	r3, #0
 800d308:	d006      	beq.n	800d318 <f_open+0xc4>
 800d30a:	f107 0314 	add.w	r3, r7, #20
 800d30e:	4618      	mov	r0, r3
 800d310:	f7ff facd 	bl	800c8ae <dir_register>
 800d314:	4603      	mov	r3, r0
 800d316:	e000      	b.n	800d31a <f_open+0xc6>
 800d318:	2312      	movs	r3, #18
 800d31a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d31e:	79fb      	ldrb	r3, [r7, #7]
 800d320:	f043 0308 	orr.w	r3, r3, #8
 800d324:	71fb      	strb	r3, [r7, #7]
 800d326:	e010      	b.n	800d34a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d328:	7ebb      	ldrb	r3, [r7, #26]
 800d32a:	f003 0311 	and.w	r3, r3, #17
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d003      	beq.n	800d33a <f_open+0xe6>
					res = FR_DENIED;
 800d332:	2307      	movs	r3, #7
 800d334:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d338:	e007      	b.n	800d34a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d33a:	79fb      	ldrb	r3, [r7, #7]
 800d33c:	f003 0304 	and.w	r3, r3, #4
 800d340:	2b00      	cmp	r3, #0
 800d342:	d002      	beq.n	800d34a <f_open+0xf6>
 800d344:	2308      	movs	r3, #8
 800d346:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d34a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d168      	bne.n	800d424 <f_open+0x1d0>
 800d352:	79fb      	ldrb	r3, [r7, #7]
 800d354:	f003 0308 	and.w	r3, r3, #8
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d063      	beq.n	800d424 <f_open+0x1d0>
				dw = GET_FATTIME();
 800d35c:	f7fd ff0a 	bl	800b174 <get_fattime>
 800d360:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d364:	330e      	adds	r3, #14
 800d366:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d368:	4618      	mov	r0, r3
 800d36a:	f7fe fa2d 	bl	800b7c8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d36e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d370:	3316      	adds	r3, #22
 800d372:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d374:	4618      	mov	r0, r3
 800d376:	f7fe fa27 	bl	800b7c8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d37a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d37c:	330b      	adds	r3, #11
 800d37e:	2220      	movs	r2, #32
 800d380:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d382:	693b      	ldr	r3, [r7, #16]
 800d384:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d386:	4611      	mov	r1, r2
 800d388:	4618      	mov	r0, r3
 800d38a:	f7ff f9fc 	bl	800c786 <ld_clust>
 800d38e:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d390:	693b      	ldr	r3, [r7, #16]
 800d392:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d394:	2200      	movs	r2, #0
 800d396:	4618      	mov	r0, r3
 800d398:	f7ff fa14 	bl	800c7c4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d39c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d39e:	331c      	adds	r3, #28
 800d3a0:	2100      	movs	r1, #0
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	f7fe fa10 	bl	800b7c8 <st_dword>
					fs->wflag = 1;
 800d3a8:	693b      	ldr	r3, [r7, #16]
 800d3aa:	2201      	movs	r2, #1
 800d3ac:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d3ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d037      	beq.n	800d424 <f_open+0x1d0>
						dw = fs->winsect;
 800d3b4:	693b      	ldr	r3, [r7, #16]
 800d3b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d3b8:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800d3ba:	f107 0314 	add.w	r3, r7, #20
 800d3be:	2200      	movs	r2, #0
 800d3c0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	f7fe ff04 	bl	800c1d0 <remove_chain>
 800d3c8:	4603      	mov	r3, r0
 800d3ca:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800d3ce:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d126      	bne.n	800d424 <f_open+0x1d0>
							res = move_window(fs, dw);
 800d3d6:	693b      	ldr	r3, [r7, #16]
 800d3d8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d3da:	4618      	mov	r0, r3
 800d3dc:	f7fe fc4e 	bl	800bc7c <move_window>
 800d3e0:	4603      	mov	r3, r0
 800d3e2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d3e6:	693b      	ldr	r3, [r7, #16]
 800d3e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d3ea:	3a01      	subs	r2, #1
 800d3ec:	611a      	str	r2, [r3, #16]
 800d3ee:	e019      	b.n	800d424 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d3f0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d115      	bne.n	800d424 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d3f8:	7ebb      	ldrb	r3, [r7, #26]
 800d3fa:	f003 0310 	and.w	r3, r3, #16
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d003      	beq.n	800d40a <f_open+0x1b6>
					res = FR_NO_FILE;
 800d402:	2304      	movs	r3, #4
 800d404:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d408:	e00c      	b.n	800d424 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d40a:	79fb      	ldrb	r3, [r7, #7]
 800d40c:	f003 0302 	and.w	r3, r3, #2
 800d410:	2b00      	cmp	r3, #0
 800d412:	d007      	beq.n	800d424 <f_open+0x1d0>
 800d414:	7ebb      	ldrb	r3, [r7, #26]
 800d416:	f003 0301 	and.w	r3, r3, #1
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d002      	beq.n	800d424 <f_open+0x1d0>
						res = FR_DENIED;
 800d41e:	2307      	movs	r3, #7
 800d420:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800d424:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d126      	bne.n	800d47a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d42c:	79fb      	ldrb	r3, [r7, #7]
 800d42e:	f003 0308 	and.w	r3, r3, #8
 800d432:	2b00      	cmp	r3, #0
 800d434:	d003      	beq.n	800d43e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800d436:	79fb      	ldrb	r3, [r7, #7]
 800d438:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d43c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d43e:	693b      	ldr	r3, [r7, #16]
 800d440:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800d446:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d44c:	79fb      	ldrb	r3, [r7, #7]
 800d44e:	2b01      	cmp	r3, #1
 800d450:	bf8c      	ite	hi
 800d452:	2301      	movhi	r3, #1
 800d454:	2300      	movls	r3, #0
 800d456:	b2db      	uxtb	r3, r3
 800d458:	461a      	mov	r2, r3
 800d45a:	f107 0314 	add.w	r3, r7, #20
 800d45e:	4611      	mov	r1, r2
 800d460:	4618      	mov	r0, r3
 800d462:	f7fe fad9 	bl	800ba18 <inc_lock>
 800d466:	4602      	mov	r2, r0
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	691b      	ldr	r3, [r3, #16]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d102      	bne.n	800d47a <f_open+0x226>
 800d474:	2302      	movs	r3, #2
 800d476:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d47a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d47e:	2b00      	cmp	r3, #0
 800d480:	f040 80a3 	bne.w	800d5ca <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d484:	693b      	ldr	r3, [r7, #16]
 800d486:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d488:	4611      	mov	r1, r2
 800d48a:	4618      	mov	r0, r3
 800d48c:	f7ff f97b 	bl	800c786 <ld_clust>
 800d490:	4602      	mov	r2, r0
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d496:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d498:	331c      	adds	r3, #28
 800d49a:	4618      	mov	r0, r3
 800d49c:	f7fe f956 	bl	800b74c <ld_dword>
 800d4a0:	4602      	mov	r2, r0
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d4ac:	693a      	ldr	r2, [r7, #16]
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d4b2:	693b      	ldr	r3, [r7, #16]
 800d4b4:	88da      	ldrh	r2, [r3, #6]
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	79fa      	ldrb	r2, [r7, #7]
 800d4be:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	2200      	movs	r2, #0
 800d4ca:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	3330      	adds	r3, #48	@ 0x30
 800d4d6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800d4da:	2100      	movs	r1, #0
 800d4dc:	4618      	mov	r0, r3
 800d4de:	f7fe f9c0 	bl	800b862 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d4e2:	79fb      	ldrb	r3, [r7, #7]
 800d4e4:	f003 0320 	and.w	r3, r3, #32
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d06e      	beq.n	800d5ca <f_open+0x376>
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	68db      	ldr	r3, [r3, #12]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d06a      	beq.n	800d5ca <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	68da      	ldr	r2, [r3, #12]
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d4fc:	693b      	ldr	r3, [r7, #16]
 800d4fe:	895b      	ldrh	r3, [r3, #10]
 800d500:	461a      	mov	r2, r3
 800d502:	693b      	ldr	r3, [r7, #16]
 800d504:	899b      	ldrh	r3, [r3, #12]
 800d506:	fb02 f303 	mul.w	r3, r2, r3
 800d50a:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	689b      	ldr	r3, [r3, #8]
 800d510:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	68db      	ldr	r3, [r3, #12]
 800d516:	657b      	str	r3, [r7, #84]	@ 0x54
 800d518:	e016      	b.n	800d548 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d51e:	4618      	mov	r0, r3
 800d520:	f7fe fc69 	bl	800bdf6 <get_fat>
 800d524:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800d526:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d528:	2b01      	cmp	r3, #1
 800d52a:	d802      	bhi.n	800d532 <f_open+0x2de>
 800d52c:	2302      	movs	r3, #2
 800d52e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d532:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d534:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d538:	d102      	bne.n	800d540 <f_open+0x2ec>
 800d53a:	2301      	movs	r3, #1
 800d53c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d540:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d542:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d544:	1ad3      	subs	r3, r2, r3
 800d546:	657b      	str	r3, [r7, #84]	@ 0x54
 800d548:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d103      	bne.n	800d558 <f_open+0x304>
 800d550:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d552:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d554:	429a      	cmp	r2, r3
 800d556:	d8e0      	bhi.n	800d51a <f_open+0x2c6>
				}
				fp->clust = clst;
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d55c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d55e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d562:	2b00      	cmp	r3, #0
 800d564:	d131      	bne.n	800d5ca <f_open+0x376>
 800d566:	693b      	ldr	r3, [r7, #16]
 800d568:	899b      	ldrh	r3, [r3, #12]
 800d56a:	461a      	mov	r2, r3
 800d56c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d56e:	fbb3 f1f2 	udiv	r1, r3, r2
 800d572:	fb01 f202 	mul.w	r2, r1, r2
 800d576:	1a9b      	subs	r3, r3, r2
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d026      	beq.n	800d5ca <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d57c:	693b      	ldr	r3, [r7, #16]
 800d57e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d580:	4618      	mov	r0, r3
 800d582:	f7fe fc19 	bl	800bdb8 <clust2sect>
 800d586:	6478      	str	r0, [r7, #68]	@ 0x44
 800d588:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d103      	bne.n	800d596 <f_open+0x342>
						res = FR_INT_ERR;
 800d58e:	2302      	movs	r3, #2
 800d590:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d594:	e019      	b.n	800d5ca <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d596:	693b      	ldr	r3, [r7, #16]
 800d598:	899b      	ldrh	r3, [r3, #12]
 800d59a:	461a      	mov	r2, r3
 800d59c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d59e:	fbb3 f2f2 	udiv	r2, r3, r2
 800d5a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d5a4:	441a      	add	r2, r3
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d5aa:	693b      	ldr	r3, [r7, #16]
 800d5ac:	7858      	ldrb	r0, [r3, #1]
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	6a1a      	ldr	r2, [r3, #32]
 800d5b8:	2301      	movs	r3, #1
 800d5ba:	f7fe f851 	bl	800b660 <disk_read>
 800d5be:	4603      	mov	r3, r0
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d002      	beq.n	800d5ca <f_open+0x376>
 800d5c4:	2301      	movs	r3, #1
 800d5c6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d5ca:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d002      	beq.n	800d5d8 <f_open+0x384>
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	2200      	movs	r2, #0
 800d5d6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d5d8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800d5dc:	4618      	mov	r0, r3
 800d5de:	3760      	adds	r7, #96	@ 0x60
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	bd80      	pop	{r7, pc}

0800d5e4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b08c      	sub	sp, #48	@ 0x30
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	60f8      	str	r0, [r7, #12]
 800d5ec:	60b9      	str	r1, [r7, #8]
 800d5ee:	607a      	str	r2, [r7, #4]
 800d5f0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d5f2:	68bb      	ldr	r3, [r7, #8]
 800d5f4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d5f6:	683b      	ldr	r3, [r7, #0]
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	f107 0210 	add.w	r2, r7, #16
 800d602:	4611      	mov	r1, r2
 800d604:	4618      	mov	r0, r3
 800d606:	f7ff fda9 	bl	800d15c <validate>
 800d60a:	4603      	mov	r3, r0
 800d60c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d610:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d614:	2b00      	cmp	r3, #0
 800d616:	d107      	bne.n	800d628 <f_write+0x44>
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	7d5b      	ldrb	r3, [r3, #21]
 800d61c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800d620:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d624:	2b00      	cmp	r3, #0
 800d626:	d002      	beq.n	800d62e <f_write+0x4a>
 800d628:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d62c:	e16a      	b.n	800d904 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	7d1b      	ldrb	r3, [r3, #20]
 800d632:	f003 0302 	and.w	r3, r3, #2
 800d636:	2b00      	cmp	r3, #0
 800d638:	d101      	bne.n	800d63e <f_write+0x5a>
 800d63a:	2307      	movs	r3, #7
 800d63c:	e162      	b.n	800d904 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	699a      	ldr	r2, [r3, #24]
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	441a      	add	r2, r3
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	699b      	ldr	r3, [r3, #24]
 800d64a:	429a      	cmp	r2, r3
 800d64c:	f080 814c 	bcs.w	800d8e8 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	699b      	ldr	r3, [r3, #24]
 800d654:	43db      	mvns	r3, r3
 800d656:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d658:	e146      	b.n	800d8e8 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	699b      	ldr	r3, [r3, #24]
 800d65e:	693a      	ldr	r2, [r7, #16]
 800d660:	8992      	ldrh	r2, [r2, #12]
 800d662:	fbb3 f1f2 	udiv	r1, r3, r2
 800d666:	fb01 f202 	mul.w	r2, r1, r2
 800d66a:	1a9b      	subs	r3, r3, r2
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	f040 80f1 	bne.w	800d854 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	699b      	ldr	r3, [r3, #24]
 800d676:	693a      	ldr	r2, [r7, #16]
 800d678:	8992      	ldrh	r2, [r2, #12]
 800d67a:	fbb3 f3f2 	udiv	r3, r3, r2
 800d67e:	693a      	ldr	r2, [r7, #16]
 800d680:	8952      	ldrh	r2, [r2, #10]
 800d682:	3a01      	subs	r2, #1
 800d684:	4013      	ands	r3, r2
 800d686:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d688:	69bb      	ldr	r3, [r7, #24]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d143      	bne.n	800d716 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	699b      	ldr	r3, [r3, #24]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d10c      	bne.n	800d6b0 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	689b      	ldr	r3, [r3, #8]
 800d69a:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d69c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d11a      	bne.n	800d6d8 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	2100      	movs	r1, #0
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	f7fe fdf7 	bl	800c29a <create_chain>
 800d6ac:	62b8      	str	r0, [r7, #40]	@ 0x28
 800d6ae:	e013      	b.n	800d6d8 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d007      	beq.n	800d6c8 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	699b      	ldr	r3, [r3, #24]
 800d6bc:	4619      	mov	r1, r3
 800d6be:	68f8      	ldr	r0, [r7, #12]
 800d6c0:	f7fe fe83 	bl	800c3ca <clmt_clust>
 800d6c4:	62b8      	str	r0, [r7, #40]	@ 0x28
 800d6c6:	e007      	b.n	800d6d8 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d6c8:	68fa      	ldr	r2, [r7, #12]
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	69db      	ldr	r3, [r3, #28]
 800d6ce:	4619      	mov	r1, r3
 800d6d0:	4610      	mov	r0, r2
 800d6d2:	f7fe fde2 	bl	800c29a <create_chain>
 800d6d6:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d6d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	f000 8109 	beq.w	800d8f2 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d6e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6e2:	2b01      	cmp	r3, #1
 800d6e4:	d104      	bne.n	800d6f0 <f_write+0x10c>
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	2202      	movs	r2, #2
 800d6ea:	755a      	strb	r2, [r3, #21]
 800d6ec:	2302      	movs	r3, #2
 800d6ee:	e109      	b.n	800d904 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d6f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6f6:	d104      	bne.n	800d702 <f_write+0x11e>
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	2201      	movs	r2, #1
 800d6fc:	755a      	strb	r2, [r3, #21]
 800d6fe:	2301      	movs	r3, #1
 800d700:	e100      	b.n	800d904 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d706:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	689b      	ldr	r3, [r3, #8]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d102      	bne.n	800d716 <f_write+0x132>
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d714:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	7d1b      	ldrb	r3, [r3, #20]
 800d71a:	b25b      	sxtb	r3, r3
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	da18      	bge.n	800d752 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d720:	693b      	ldr	r3, [r7, #16]
 800d722:	7858      	ldrb	r0, [r3, #1]
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	6a1a      	ldr	r2, [r3, #32]
 800d72e:	2301      	movs	r3, #1
 800d730:	f7fd ffb6 	bl	800b6a0 <disk_write>
 800d734:	4603      	mov	r3, r0
 800d736:	2b00      	cmp	r3, #0
 800d738:	d004      	beq.n	800d744 <f_write+0x160>
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	2201      	movs	r2, #1
 800d73e:	755a      	strb	r2, [r3, #21]
 800d740:	2301      	movs	r3, #1
 800d742:	e0df      	b.n	800d904 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	7d1b      	ldrb	r3, [r3, #20]
 800d748:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d74c:	b2da      	uxtb	r2, r3
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d752:	693a      	ldr	r2, [r7, #16]
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	69db      	ldr	r3, [r3, #28]
 800d758:	4619      	mov	r1, r3
 800d75a:	4610      	mov	r0, r2
 800d75c:	f7fe fb2c 	bl	800bdb8 <clust2sect>
 800d760:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d762:	697b      	ldr	r3, [r7, #20]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d104      	bne.n	800d772 <f_write+0x18e>
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	2202      	movs	r2, #2
 800d76c:	755a      	strb	r2, [r3, #21]
 800d76e:	2302      	movs	r3, #2
 800d770:	e0c8      	b.n	800d904 <f_write+0x320>
			sect += csect;
 800d772:	697a      	ldr	r2, [r7, #20]
 800d774:	69bb      	ldr	r3, [r7, #24]
 800d776:	4413      	add	r3, r2
 800d778:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d77a:	693b      	ldr	r3, [r7, #16]
 800d77c:	899b      	ldrh	r3, [r3, #12]
 800d77e:	461a      	mov	r2, r3
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	fbb3 f3f2 	udiv	r3, r3, r2
 800d786:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d788:	6a3b      	ldr	r3, [r7, #32]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d043      	beq.n	800d816 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d78e:	69ba      	ldr	r2, [r7, #24]
 800d790:	6a3b      	ldr	r3, [r7, #32]
 800d792:	4413      	add	r3, r2
 800d794:	693a      	ldr	r2, [r7, #16]
 800d796:	8952      	ldrh	r2, [r2, #10]
 800d798:	4293      	cmp	r3, r2
 800d79a:	d905      	bls.n	800d7a8 <f_write+0x1c4>
					cc = fs->csize - csect;
 800d79c:	693b      	ldr	r3, [r7, #16]
 800d79e:	895b      	ldrh	r3, [r3, #10]
 800d7a0:	461a      	mov	r2, r3
 800d7a2:	69bb      	ldr	r3, [r7, #24]
 800d7a4:	1ad3      	subs	r3, r2, r3
 800d7a6:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d7a8:	693b      	ldr	r3, [r7, #16]
 800d7aa:	7858      	ldrb	r0, [r3, #1]
 800d7ac:	6a3b      	ldr	r3, [r7, #32]
 800d7ae:	697a      	ldr	r2, [r7, #20]
 800d7b0:	69f9      	ldr	r1, [r7, #28]
 800d7b2:	f7fd ff75 	bl	800b6a0 <disk_write>
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d004      	beq.n	800d7c6 <f_write+0x1e2>
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	2201      	movs	r2, #1
 800d7c0:	755a      	strb	r2, [r3, #21]
 800d7c2:	2301      	movs	r3, #1
 800d7c4:	e09e      	b.n	800d904 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	6a1a      	ldr	r2, [r3, #32]
 800d7ca:	697b      	ldr	r3, [r7, #20]
 800d7cc:	1ad3      	subs	r3, r2, r3
 800d7ce:	6a3a      	ldr	r2, [r7, #32]
 800d7d0:	429a      	cmp	r2, r3
 800d7d2:	d918      	bls.n	800d806 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	6a1a      	ldr	r2, [r3, #32]
 800d7de:	697b      	ldr	r3, [r7, #20]
 800d7e0:	1ad3      	subs	r3, r2, r3
 800d7e2:	693a      	ldr	r2, [r7, #16]
 800d7e4:	8992      	ldrh	r2, [r2, #12]
 800d7e6:	fb02 f303 	mul.w	r3, r2, r3
 800d7ea:	69fa      	ldr	r2, [r7, #28]
 800d7ec:	18d1      	adds	r1, r2, r3
 800d7ee:	693b      	ldr	r3, [r7, #16]
 800d7f0:	899b      	ldrh	r3, [r3, #12]
 800d7f2:	461a      	mov	r2, r3
 800d7f4:	f7fe f814 	bl	800b820 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	7d1b      	ldrb	r3, [r3, #20]
 800d7fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d800:	b2da      	uxtb	r2, r3
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d806:	693b      	ldr	r3, [r7, #16]
 800d808:	899b      	ldrh	r3, [r3, #12]
 800d80a:	461a      	mov	r2, r3
 800d80c:	6a3b      	ldr	r3, [r7, #32]
 800d80e:	fb02 f303 	mul.w	r3, r2, r3
 800d812:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800d814:	e04b      	b.n	800d8ae <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	6a1b      	ldr	r3, [r3, #32]
 800d81a:	697a      	ldr	r2, [r7, #20]
 800d81c:	429a      	cmp	r2, r3
 800d81e:	d016      	beq.n	800d84e <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	699a      	ldr	r2, [r3, #24]
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d828:	429a      	cmp	r2, r3
 800d82a:	d210      	bcs.n	800d84e <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d82c:	693b      	ldr	r3, [r7, #16]
 800d82e:	7858      	ldrb	r0, [r3, #1]
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d836:	2301      	movs	r3, #1
 800d838:	697a      	ldr	r2, [r7, #20]
 800d83a:	f7fd ff11 	bl	800b660 <disk_read>
 800d83e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800d840:	2b00      	cmp	r3, #0
 800d842:	d004      	beq.n	800d84e <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	2201      	movs	r2, #1
 800d848:	755a      	strb	r2, [r3, #21]
 800d84a:	2301      	movs	r3, #1
 800d84c:	e05a      	b.n	800d904 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	697a      	ldr	r2, [r7, #20]
 800d852:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d854:	693b      	ldr	r3, [r7, #16]
 800d856:	899b      	ldrh	r3, [r3, #12]
 800d858:	4618      	mov	r0, r3
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	699b      	ldr	r3, [r3, #24]
 800d85e:	693a      	ldr	r2, [r7, #16]
 800d860:	8992      	ldrh	r2, [r2, #12]
 800d862:	fbb3 f1f2 	udiv	r1, r3, r2
 800d866:	fb01 f202 	mul.w	r2, r1, r2
 800d86a:	1a9b      	subs	r3, r3, r2
 800d86c:	1ac3      	subs	r3, r0, r3
 800d86e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d870:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	429a      	cmp	r2, r3
 800d876:	d901      	bls.n	800d87c <f_write+0x298>
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	699b      	ldr	r3, [r3, #24]
 800d886:	693a      	ldr	r2, [r7, #16]
 800d888:	8992      	ldrh	r2, [r2, #12]
 800d88a:	fbb3 f0f2 	udiv	r0, r3, r2
 800d88e:	fb00 f202 	mul.w	r2, r0, r2
 800d892:	1a9b      	subs	r3, r3, r2
 800d894:	440b      	add	r3, r1
 800d896:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d898:	69f9      	ldr	r1, [r7, #28]
 800d89a:	4618      	mov	r0, r3
 800d89c:	f7fd ffc0 	bl	800b820 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	7d1b      	ldrb	r3, [r3, #20]
 800d8a4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d8a8:	b2da      	uxtb	r2, r3
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d8ae:	69fa      	ldr	r2, [r7, #28]
 800d8b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8b2:	4413      	add	r3, r2
 800d8b4:	61fb      	str	r3, [r7, #28]
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	699a      	ldr	r2, [r3, #24]
 800d8ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8bc:	441a      	add	r2, r3
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	619a      	str	r2, [r3, #24]
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	68da      	ldr	r2, [r3, #12]
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	699b      	ldr	r3, [r3, #24]
 800d8ca:	429a      	cmp	r2, r3
 800d8cc:	bf38      	it	cc
 800d8ce:	461a      	movcc	r2, r3
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	60da      	str	r2, [r3, #12]
 800d8d4:	683b      	ldr	r3, [r7, #0]
 800d8d6:	681a      	ldr	r2, [r3, #0]
 800d8d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8da:	441a      	add	r2, r3
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	601a      	str	r2, [r3, #0]
 800d8e0:	687a      	ldr	r2, [r7, #4]
 800d8e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8e4:	1ad3      	subs	r3, r2, r3
 800d8e6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	f47f aeb5 	bne.w	800d65a <f_write+0x76>
 800d8f0:	e000      	b.n	800d8f4 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d8f2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	7d1b      	ldrb	r3, [r3, #20]
 800d8f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d8fc:	b2da      	uxtb	r2, r3
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800d902:	2300      	movs	r3, #0
}
 800d904:	4618      	mov	r0, r3
 800d906:	3730      	adds	r7, #48	@ 0x30
 800d908:	46bd      	mov	sp, r7
 800d90a:	bd80      	pop	{r7, pc}

0800d90c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b086      	sub	sp, #24
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	f107 0208 	add.w	r2, r7, #8
 800d91a:	4611      	mov	r1, r2
 800d91c:	4618      	mov	r0, r3
 800d91e:	f7ff fc1d 	bl	800d15c <validate>
 800d922:	4603      	mov	r3, r0
 800d924:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d926:	7dfb      	ldrb	r3, [r7, #23]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d168      	bne.n	800d9fe <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	7d1b      	ldrb	r3, [r3, #20]
 800d930:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d934:	2b00      	cmp	r3, #0
 800d936:	d062      	beq.n	800d9fe <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	7d1b      	ldrb	r3, [r3, #20]
 800d93c:	b25b      	sxtb	r3, r3
 800d93e:	2b00      	cmp	r3, #0
 800d940:	da15      	bge.n	800d96e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d942:	68bb      	ldr	r3, [r7, #8]
 800d944:	7858      	ldrb	r0, [r3, #1]
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	6a1a      	ldr	r2, [r3, #32]
 800d950:	2301      	movs	r3, #1
 800d952:	f7fd fea5 	bl	800b6a0 <disk_write>
 800d956:	4603      	mov	r3, r0
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d001      	beq.n	800d960 <f_sync+0x54>
 800d95c:	2301      	movs	r3, #1
 800d95e:	e04f      	b.n	800da00 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	7d1b      	ldrb	r3, [r3, #20]
 800d964:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d968:	b2da      	uxtb	r2, r3
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d96e:	f7fd fc01 	bl	800b174 <get_fattime>
 800d972:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d974:	68ba      	ldr	r2, [r7, #8]
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d97a:	4619      	mov	r1, r3
 800d97c:	4610      	mov	r0, r2
 800d97e:	f7fe f97d 	bl	800bc7c <move_window>
 800d982:	4603      	mov	r3, r0
 800d984:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d986:	7dfb      	ldrb	r3, [r7, #23]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d138      	bne.n	800d9fe <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d990:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	330b      	adds	r3, #11
 800d996:	781a      	ldrb	r2, [r3, #0]
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	330b      	adds	r3, #11
 800d99c:	f042 0220 	orr.w	r2, r2, #32
 800d9a0:	b2d2      	uxtb	r2, r2
 800d9a2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	6818      	ldr	r0, [r3, #0]
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	689b      	ldr	r3, [r3, #8]
 800d9ac:	461a      	mov	r2, r3
 800d9ae:	68f9      	ldr	r1, [r7, #12]
 800d9b0:	f7fe ff08 	bl	800c7c4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	f103 021c 	add.w	r2, r3, #28
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	68db      	ldr	r3, [r3, #12]
 800d9be:	4619      	mov	r1, r3
 800d9c0:	4610      	mov	r0, r2
 800d9c2:	f7fd ff01 	bl	800b7c8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	3316      	adds	r3, #22
 800d9ca:	6939      	ldr	r1, [r7, #16]
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	f7fd fefb 	bl	800b7c8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	3312      	adds	r3, #18
 800d9d6:	2100      	movs	r1, #0
 800d9d8:	4618      	mov	r0, r3
 800d9da:	f7fd feda 	bl	800b792 <st_word>
					fs->wflag = 1;
 800d9de:	68bb      	ldr	r3, [r7, #8]
 800d9e0:	2201      	movs	r2, #1
 800d9e2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d9e4:	68bb      	ldr	r3, [r7, #8]
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	f7fe f976 	bl	800bcd8 <sync_fs>
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	7d1b      	ldrb	r3, [r3, #20]
 800d9f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d9f8:	b2da      	uxtb	r2, r3
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d9fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800da00:	4618      	mov	r0, r3
 800da02:	3718      	adds	r7, #24
 800da04:	46bd      	mov	sp, r7
 800da06:	bd80      	pop	{r7, pc}

0800da08 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b084      	sub	sp, #16
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800da10:	6878      	ldr	r0, [r7, #4]
 800da12:	f7ff ff7b 	bl	800d90c <f_sync>
 800da16:	4603      	mov	r3, r0
 800da18:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800da1a:	7bfb      	ldrb	r3, [r7, #15]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d118      	bne.n	800da52 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	f107 0208 	add.w	r2, r7, #8
 800da26:	4611      	mov	r1, r2
 800da28:	4618      	mov	r0, r3
 800da2a:	f7ff fb97 	bl	800d15c <validate>
 800da2e:	4603      	mov	r3, r0
 800da30:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800da32:	7bfb      	ldrb	r3, [r7, #15]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d10c      	bne.n	800da52 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	691b      	ldr	r3, [r3, #16]
 800da3c:	4618      	mov	r0, r3
 800da3e:	f7fe f879 	bl	800bb34 <dec_lock>
 800da42:	4603      	mov	r3, r0
 800da44:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800da46:	7bfb      	ldrb	r3, [r7, #15]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d102      	bne.n	800da52 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	2200      	movs	r2, #0
 800da50:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800da52:	7bfb      	ldrb	r3, [r7, #15]
}
 800da54:	4618      	mov	r0, r3
 800da56:	3710      	adds	r7, #16
 800da58:	46bd      	mov	sp, r7
 800da5a:	bd80      	pop	{r7, pc}

0800da5c <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b096      	sub	sp, #88	@ 0x58
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800da64:	f107 0108 	add.w	r1, r7, #8
 800da68:	1d3b      	adds	r3, r7, #4
 800da6a:	2202      	movs	r2, #2
 800da6c:	4618      	mov	r0, r3
 800da6e:	f7ff f8f5 	bl	800cc5c <find_volume>
 800da72:	4603      	mov	r3, r0
 800da74:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	dj.obj.fs = fs;
 800da78:	68bb      	ldr	r3, [r7, #8]
 800da7a:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 800da7c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800da80:	2b00      	cmp	r3, #0
 800da82:	f040 80f2 	bne.w	800dc6a <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800da86:	687a      	ldr	r2, [r7, #4]
 800da88:	f107 030c 	add.w	r3, r7, #12
 800da8c:	4611      	mov	r1, r2
 800da8e:	4618      	mov	r0, r3
 800da90:	f7fe ffd4 	bl	800ca3c <follow_path>
 800da94:	4603      	mov	r3, r0
 800da96:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800da9a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d102      	bne.n	800daa8 <f_mkdir+0x4c>
 800daa2:	2308      	movs	r3, #8
 800daa4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800daa8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800daac:	2b04      	cmp	r3, #4
 800daae:	f040 80dc 	bne.w	800dc6a <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800dab2:	f107 030c 	add.w	r3, r7, #12
 800dab6:	2100      	movs	r1, #0
 800dab8:	4618      	mov	r0, r3
 800daba:	f7fe fbee 	bl	800c29a <create_chain>
 800dabe:	6478      	str	r0, [r7, #68]	@ 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800dac0:	68bb      	ldr	r3, [r7, #8]
 800dac2:	895b      	ldrh	r3, [r3, #10]
 800dac4:	461a      	mov	r2, r3
 800dac6:	68bb      	ldr	r3, [r7, #8]
 800dac8:	899b      	ldrh	r3, [r3, #12]
 800daca:	fb02 f303 	mul.w	r3, r2, r3
 800dace:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 800dad0:	2300      	movs	r3, #0
 800dad2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800dad6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d102      	bne.n	800dae2 <f_mkdir+0x86>
 800dadc:	2307      	movs	r3, #7
 800dade:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 1) res = FR_INT_ERR;
 800dae2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dae4:	2b01      	cmp	r3, #1
 800dae6:	d102      	bne.n	800daee <f_mkdir+0x92>
 800dae8:	2302      	movs	r3, #2
 800daea:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800daee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800daf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daf4:	d102      	bne.n	800dafc <f_mkdir+0xa0>
 800daf6:	2301      	movs	r3, #1
 800daf8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800dafc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800db00:	2b00      	cmp	r3, #0
 800db02:	d106      	bne.n	800db12 <f_mkdir+0xb6>
 800db04:	68bb      	ldr	r3, [r7, #8]
 800db06:	4618      	mov	r0, r3
 800db08:	f7fe f874 	bl	800bbf4 <sync_window>
 800db0c:	4603      	mov	r3, r0
 800db0e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			tm = GET_FATTIME();
 800db12:	f7fd fb2f 	bl	800b174 <get_fattime>
 800db16:	6438      	str	r0, [r7, #64]	@ 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 800db18:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d16c      	bne.n	800dbfa <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 800db20:	68bb      	ldr	r3, [r7, #8]
 800db22:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800db24:	4618      	mov	r0, r3
 800db26:	f7fe f947 	bl	800bdb8 <clust2sect>
 800db2a:	64f8      	str	r0, [r7, #76]	@ 0x4c
				dir = fs->win;
 800db2c:	68bb      	ldr	r3, [r7, #8]
 800db2e:	3334      	adds	r3, #52	@ 0x34
 800db30:	63fb      	str	r3, [r7, #60]	@ 0x3c
				mem_set(dir, 0, SS(fs));
 800db32:	68bb      	ldr	r3, [r7, #8]
 800db34:	899b      	ldrh	r3, [r3, #12]
 800db36:	461a      	mov	r2, r3
 800db38:	2100      	movs	r1, #0
 800db3a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800db3c:	f7fd fe91 	bl	800b862 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800db40:	220b      	movs	r2, #11
 800db42:	2120      	movs	r1, #32
 800db44:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800db46:	f7fd fe8c 	bl	800b862 <mem_set>
					dir[DIR_Name] = '.';
 800db4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db4c:	222e      	movs	r2, #46	@ 0x2e
 800db4e:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800db50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db52:	330b      	adds	r3, #11
 800db54:	2210      	movs	r2, #16
 800db56:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800db58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db5a:	3316      	adds	r3, #22
 800db5c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800db5e:	4618      	mov	r0, r3
 800db60:	f7fd fe32 	bl	800b7c8 <st_dword>
					st_clust(fs, dir, dcl);
 800db64:	68bb      	ldr	r3, [r7, #8]
 800db66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800db68:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800db6a:	4618      	mov	r0, r3
 800db6c:	f7fe fe2a 	bl	800c7c4 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800db70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db72:	3320      	adds	r3, #32
 800db74:	2220      	movs	r2, #32
 800db76:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800db78:	4618      	mov	r0, r3
 800db7a:	f7fd fe51 	bl	800b820 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800db7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db80:	3321      	adds	r3, #33	@ 0x21
 800db82:	222e      	movs	r2, #46	@ 0x2e
 800db84:	701a      	strb	r2, [r3, #0]
 800db86:	697b      	ldr	r3, [r7, #20]
 800db88:	64bb      	str	r3, [r7, #72]	@ 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800db8a:	68bb      	ldr	r3, [r7, #8]
 800db8c:	781b      	ldrb	r3, [r3, #0]
 800db8e:	2b03      	cmp	r3, #3
 800db90:	d106      	bne.n	800dba0 <f_mkdir+0x144>
 800db92:	68bb      	ldr	r3, [r7, #8]
 800db94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800db98:	429a      	cmp	r2, r3
 800db9a:	d101      	bne.n	800dba0 <f_mkdir+0x144>
 800db9c:	2300      	movs	r3, #0
 800db9e:	64bb      	str	r3, [r7, #72]	@ 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 800dba0:	68b8      	ldr	r0, [r7, #8]
 800dba2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dba4:	3320      	adds	r3, #32
 800dba6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dba8:	4619      	mov	r1, r3
 800dbaa:	f7fe fe0b 	bl	800c7c4 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800dbae:	68bb      	ldr	r3, [r7, #8]
 800dbb0:	895b      	ldrh	r3, [r3, #10]
 800dbb2:	653b      	str	r3, [r7, #80]	@ 0x50
 800dbb4:	e01c      	b.n	800dbf0 <f_mkdir+0x194>
					fs->winsect = dsc++;
 800dbb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dbb8:	1c5a      	adds	r2, r3, #1
 800dbba:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800dbbc:	68ba      	ldr	r2, [r7, #8]
 800dbbe:	6313      	str	r3, [r2, #48]	@ 0x30
					fs->wflag = 1;
 800dbc0:	68bb      	ldr	r3, [r7, #8]
 800dbc2:	2201      	movs	r2, #1
 800dbc4:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800dbc6:	68bb      	ldr	r3, [r7, #8]
 800dbc8:	4618      	mov	r0, r3
 800dbca:	f7fe f813 	bl	800bbf4 <sync_window>
 800dbce:	4603      	mov	r3, r0
 800dbd0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					if (res != FR_OK) break;
 800dbd4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d10d      	bne.n	800dbf8 <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 800dbdc:	68bb      	ldr	r3, [r7, #8]
 800dbde:	899b      	ldrh	r3, [r3, #12]
 800dbe0:	461a      	mov	r2, r3
 800dbe2:	2100      	movs	r1, #0
 800dbe4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800dbe6:	f7fd fe3c 	bl	800b862 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800dbea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dbec:	3b01      	subs	r3, #1
 800dbee:	653b      	str	r3, [r7, #80]	@ 0x50
 800dbf0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d1df      	bne.n	800dbb6 <f_mkdir+0x15a>
 800dbf6:	e000      	b.n	800dbfa <f_mkdir+0x19e>
					if (res != FR_OK) break;
 800dbf8:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800dbfa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d107      	bne.n	800dc12 <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800dc02:	f107 030c 	add.w	r3, r7, #12
 800dc06:	4618      	mov	r0, r3
 800dc08:	f7fe fe51 	bl	800c8ae <dir_register>
 800dc0c:	4603      	mov	r3, r0
 800dc0e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			}
			if (res == FR_OK) {
 800dc12:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d120      	bne.n	800dc5c <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800dc1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800dc1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc20:	3316      	adds	r3, #22
 800dc22:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800dc24:	4618      	mov	r0, r3
 800dc26:	f7fd fdcf 	bl	800b7c8 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800dc2a:	68bb      	ldr	r3, [r7, #8]
 800dc2c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dc2e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800dc30:	4618      	mov	r0, r3
 800dc32:	f7fe fdc7 	bl	800c7c4 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800dc36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc38:	330b      	adds	r3, #11
 800dc3a:	2210      	movs	r2, #16
 800dc3c:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800dc3e:	68bb      	ldr	r3, [r7, #8]
 800dc40:	2201      	movs	r2, #1
 800dc42:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800dc44:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d10e      	bne.n	800dc6a <f_mkdir+0x20e>
					res = sync_fs(fs);
 800dc4c:	68bb      	ldr	r3, [r7, #8]
 800dc4e:	4618      	mov	r0, r3
 800dc50:	f7fe f842 	bl	800bcd8 <sync_fs>
 800dc54:	4603      	mov	r3, r0
 800dc56:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 800dc5a:	e006      	b.n	800dc6a <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800dc5c:	f107 030c 	add.w	r3, r7, #12
 800dc60:	2200      	movs	r2, #0
 800dc62:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800dc64:	4618      	mov	r0, r3
 800dc66:	f7fe fab3 	bl	800c1d0 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800dc6a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 800dc6e:	4618      	mov	r0, r3
 800dc70:	3758      	adds	r7, #88	@ 0x58
 800dc72:	46bd      	mov	sp, r7
 800dc74:	bd80      	pop	{r7, pc}
	...

0800dc78 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800dc78:	b480      	push	{r7}
 800dc7a:	b087      	sub	sp, #28
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	60f8      	str	r0, [r7, #12]
 800dc80:	60b9      	str	r1, [r7, #8]
 800dc82:	4613      	mov	r3, r2
 800dc84:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800dc86:	2301      	movs	r3, #1
 800dc88:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800dc8e:	4b1f      	ldr	r3, [pc, #124]	@ (800dd0c <FATFS_LinkDriverEx+0x94>)
 800dc90:	7a5b      	ldrb	r3, [r3, #9]
 800dc92:	b2db      	uxtb	r3, r3
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d131      	bne.n	800dcfc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800dc98:	4b1c      	ldr	r3, [pc, #112]	@ (800dd0c <FATFS_LinkDriverEx+0x94>)
 800dc9a:	7a5b      	ldrb	r3, [r3, #9]
 800dc9c:	b2db      	uxtb	r3, r3
 800dc9e:	461a      	mov	r2, r3
 800dca0:	4b1a      	ldr	r3, [pc, #104]	@ (800dd0c <FATFS_LinkDriverEx+0x94>)
 800dca2:	2100      	movs	r1, #0
 800dca4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800dca6:	4b19      	ldr	r3, [pc, #100]	@ (800dd0c <FATFS_LinkDriverEx+0x94>)
 800dca8:	7a5b      	ldrb	r3, [r3, #9]
 800dcaa:	b2db      	uxtb	r3, r3
 800dcac:	4a17      	ldr	r2, [pc, #92]	@ (800dd0c <FATFS_LinkDriverEx+0x94>)
 800dcae:	009b      	lsls	r3, r3, #2
 800dcb0:	4413      	add	r3, r2
 800dcb2:	68fa      	ldr	r2, [r7, #12]
 800dcb4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800dcb6:	4b15      	ldr	r3, [pc, #84]	@ (800dd0c <FATFS_LinkDriverEx+0x94>)
 800dcb8:	7a5b      	ldrb	r3, [r3, #9]
 800dcba:	b2db      	uxtb	r3, r3
 800dcbc:	461a      	mov	r2, r3
 800dcbe:	4b13      	ldr	r3, [pc, #76]	@ (800dd0c <FATFS_LinkDriverEx+0x94>)
 800dcc0:	4413      	add	r3, r2
 800dcc2:	79fa      	ldrb	r2, [r7, #7]
 800dcc4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800dcc6:	4b11      	ldr	r3, [pc, #68]	@ (800dd0c <FATFS_LinkDriverEx+0x94>)
 800dcc8:	7a5b      	ldrb	r3, [r3, #9]
 800dcca:	b2db      	uxtb	r3, r3
 800dccc:	1c5a      	adds	r2, r3, #1
 800dcce:	b2d1      	uxtb	r1, r2
 800dcd0:	4a0e      	ldr	r2, [pc, #56]	@ (800dd0c <FATFS_LinkDriverEx+0x94>)
 800dcd2:	7251      	strb	r1, [r2, #9]
 800dcd4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800dcd6:	7dbb      	ldrb	r3, [r7, #22]
 800dcd8:	3330      	adds	r3, #48	@ 0x30
 800dcda:	b2da      	uxtb	r2, r3
 800dcdc:	68bb      	ldr	r3, [r7, #8]
 800dcde:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800dce0:	68bb      	ldr	r3, [r7, #8]
 800dce2:	3301      	adds	r3, #1
 800dce4:	223a      	movs	r2, #58	@ 0x3a
 800dce6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800dce8:	68bb      	ldr	r3, [r7, #8]
 800dcea:	3302      	adds	r3, #2
 800dcec:	222f      	movs	r2, #47	@ 0x2f
 800dcee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800dcf0:	68bb      	ldr	r3, [r7, #8]
 800dcf2:	3303      	adds	r3, #3
 800dcf4:	2200      	movs	r2, #0
 800dcf6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800dcfc:	7dfb      	ldrb	r3, [r7, #23]
}
 800dcfe:	4618      	mov	r0, r3
 800dd00:	371c      	adds	r7, #28
 800dd02:	46bd      	mov	sp, r7
 800dd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd08:	4770      	bx	lr
 800dd0a:	bf00      	nop
 800dd0c:	20002cc8 	.word	0x20002cc8

0800dd10 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800dd10:	b580      	push	{r7, lr}
 800dd12:	b082      	sub	sp, #8
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	6078      	str	r0, [r7, #4]
 800dd18:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	6839      	ldr	r1, [r7, #0]
 800dd1e:	6878      	ldr	r0, [r7, #4]
 800dd20:	f7ff ffaa 	bl	800dc78 <FATFS_LinkDriverEx>
 800dd24:	4603      	mov	r3, r0
}
 800dd26:	4618      	mov	r0, r3
 800dd28:	3708      	adds	r7, #8
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	bd80      	pop	{r7, pc}

0800dd2e <atof>:
 800dd2e:	2100      	movs	r1, #0
 800dd30:	f000 be08 	b.w	800e944 <strtod>

0800dd34 <sulp>:
 800dd34:	b570      	push	{r4, r5, r6, lr}
 800dd36:	4604      	mov	r4, r0
 800dd38:	460d      	mov	r5, r1
 800dd3a:	ec45 4b10 	vmov	d0, r4, r5
 800dd3e:	4616      	mov	r6, r2
 800dd40:	f003 fd3a 	bl	80117b8 <__ulp>
 800dd44:	ec51 0b10 	vmov	r0, r1, d0
 800dd48:	b17e      	cbz	r6, 800dd6a <sulp+0x36>
 800dd4a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800dd4e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	dd09      	ble.n	800dd6a <sulp+0x36>
 800dd56:	051b      	lsls	r3, r3, #20
 800dd58:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800dd5c:	2400      	movs	r4, #0
 800dd5e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800dd62:	4622      	mov	r2, r4
 800dd64:	462b      	mov	r3, r5
 800dd66:	f7f2 fc4f 	bl	8000608 <__aeabi_dmul>
 800dd6a:	ec41 0b10 	vmov	d0, r0, r1
 800dd6e:	bd70      	pop	{r4, r5, r6, pc}

0800dd70 <_strtod_l>:
 800dd70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd74:	b09f      	sub	sp, #124	@ 0x7c
 800dd76:	460c      	mov	r4, r1
 800dd78:	9217      	str	r2, [sp, #92]	@ 0x5c
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	921a      	str	r2, [sp, #104]	@ 0x68
 800dd7e:	9005      	str	r0, [sp, #20]
 800dd80:	f04f 0a00 	mov.w	sl, #0
 800dd84:	f04f 0b00 	mov.w	fp, #0
 800dd88:	460a      	mov	r2, r1
 800dd8a:	9219      	str	r2, [sp, #100]	@ 0x64
 800dd8c:	7811      	ldrb	r1, [r2, #0]
 800dd8e:	292b      	cmp	r1, #43	@ 0x2b
 800dd90:	d04a      	beq.n	800de28 <_strtod_l+0xb8>
 800dd92:	d838      	bhi.n	800de06 <_strtod_l+0x96>
 800dd94:	290d      	cmp	r1, #13
 800dd96:	d832      	bhi.n	800ddfe <_strtod_l+0x8e>
 800dd98:	2908      	cmp	r1, #8
 800dd9a:	d832      	bhi.n	800de02 <_strtod_l+0x92>
 800dd9c:	2900      	cmp	r1, #0
 800dd9e:	d03b      	beq.n	800de18 <_strtod_l+0xa8>
 800dda0:	2200      	movs	r2, #0
 800dda2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800dda4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800dda6:	782a      	ldrb	r2, [r5, #0]
 800dda8:	2a30      	cmp	r2, #48	@ 0x30
 800ddaa:	f040 80b3 	bne.w	800df14 <_strtod_l+0x1a4>
 800ddae:	786a      	ldrb	r2, [r5, #1]
 800ddb0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ddb4:	2a58      	cmp	r2, #88	@ 0x58
 800ddb6:	d16e      	bne.n	800de96 <_strtod_l+0x126>
 800ddb8:	9302      	str	r3, [sp, #8]
 800ddba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ddbc:	9301      	str	r3, [sp, #4]
 800ddbe:	ab1a      	add	r3, sp, #104	@ 0x68
 800ddc0:	9300      	str	r3, [sp, #0]
 800ddc2:	4a8e      	ldr	r2, [pc, #568]	@ (800dffc <_strtod_l+0x28c>)
 800ddc4:	9805      	ldr	r0, [sp, #20]
 800ddc6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ddc8:	a919      	add	r1, sp, #100	@ 0x64
 800ddca:	f002 fde7 	bl	801099c <__gethex>
 800ddce:	f010 060f 	ands.w	r6, r0, #15
 800ddd2:	4604      	mov	r4, r0
 800ddd4:	d005      	beq.n	800dde2 <_strtod_l+0x72>
 800ddd6:	2e06      	cmp	r6, #6
 800ddd8:	d128      	bne.n	800de2c <_strtod_l+0xbc>
 800ddda:	3501      	adds	r5, #1
 800dddc:	2300      	movs	r3, #0
 800ddde:	9519      	str	r5, [sp, #100]	@ 0x64
 800dde0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dde2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	f040 858e 	bne.w	800e906 <_strtod_l+0xb96>
 800ddea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ddec:	b1cb      	cbz	r3, 800de22 <_strtod_l+0xb2>
 800ddee:	4652      	mov	r2, sl
 800ddf0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800ddf4:	ec43 2b10 	vmov	d0, r2, r3
 800ddf8:	b01f      	add	sp, #124	@ 0x7c
 800ddfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddfe:	2920      	cmp	r1, #32
 800de00:	d1ce      	bne.n	800dda0 <_strtod_l+0x30>
 800de02:	3201      	adds	r2, #1
 800de04:	e7c1      	b.n	800dd8a <_strtod_l+0x1a>
 800de06:	292d      	cmp	r1, #45	@ 0x2d
 800de08:	d1ca      	bne.n	800dda0 <_strtod_l+0x30>
 800de0a:	2101      	movs	r1, #1
 800de0c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800de0e:	1c51      	adds	r1, r2, #1
 800de10:	9119      	str	r1, [sp, #100]	@ 0x64
 800de12:	7852      	ldrb	r2, [r2, #1]
 800de14:	2a00      	cmp	r2, #0
 800de16:	d1c5      	bne.n	800dda4 <_strtod_l+0x34>
 800de18:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800de1a:	9419      	str	r4, [sp, #100]	@ 0x64
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	f040 8570 	bne.w	800e902 <_strtod_l+0xb92>
 800de22:	4652      	mov	r2, sl
 800de24:	465b      	mov	r3, fp
 800de26:	e7e5      	b.n	800ddf4 <_strtod_l+0x84>
 800de28:	2100      	movs	r1, #0
 800de2a:	e7ef      	b.n	800de0c <_strtod_l+0x9c>
 800de2c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800de2e:	b13a      	cbz	r2, 800de40 <_strtod_l+0xd0>
 800de30:	2135      	movs	r1, #53	@ 0x35
 800de32:	a81c      	add	r0, sp, #112	@ 0x70
 800de34:	f003 fdba 	bl	80119ac <__copybits>
 800de38:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800de3a:	9805      	ldr	r0, [sp, #20]
 800de3c:	f003 f988 	bl	8011150 <_Bfree>
 800de40:	3e01      	subs	r6, #1
 800de42:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800de44:	2e04      	cmp	r6, #4
 800de46:	d806      	bhi.n	800de56 <_strtod_l+0xe6>
 800de48:	e8df f006 	tbb	[pc, r6]
 800de4c:	201d0314 	.word	0x201d0314
 800de50:	14          	.byte	0x14
 800de51:	00          	.byte	0x00
 800de52:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800de56:	05e1      	lsls	r1, r4, #23
 800de58:	bf48      	it	mi
 800de5a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800de5e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800de62:	0d1b      	lsrs	r3, r3, #20
 800de64:	051b      	lsls	r3, r3, #20
 800de66:	2b00      	cmp	r3, #0
 800de68:	d1bb      	bne.n	800dde2 <_strtod_l+0x72>
 800de6a:	f001 fe4d 	bl	800fb08 <__errno>
 800de6e:	2322      	movs	r3, #34	@ 0x22
 800de70:	6003      	str	r3, [r0, #0]
 800de72:	e7b6      	b.n	800dde2 <_strtod_l+0x72>
 800de74:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800de78:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800de7c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800de80:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800de84:	e7e7      	b.n	800de56 <_strtod_l+0xe6>
 800de86:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800e004 <_strtod_l+0x294>
 800de8a:	e7e4      	b.n	800de56 <_strtod_l+0xe6>
 800de8c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800de90:	f04f 3aff 	mov.w	sl, #4294967295
 800de94:	e7df      	b.n	800de56 <_strtod_l+0xe6>
 800de96:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800de98:	1c5a      	adds	r2, r3, #1
 800de9a:	9219      	str	r2, [sp, #100]	@ 0x64
 800de9c:	785b      	ldrb	r3, [r3, #1]
 800de9e:	2b30      	cmp	r3, #48	@ 0x30
 800dea0:	d0f9      	beq.n	800de96 <_strtod_l+0x126>
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d09d      	beq.n	800dde2 <_strtod_l+0x72>
 800dea6:	2301      	movs	r3, #1
 800dea8:	9309      	str	r3, [sp, #36]	@ 0x24
 800deaa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800deac:	930c      	str	r3, [sp, #48]	@ 0x30
 800deae:	2300      	movs	r3, #0
 800deb0:	9308      	str	r3, [sp, #32]
 800deb2:	930a      	str	r3, [sp, #40]	@ 0x28
 800deb4:	461f      	mov	r7, r3
 800deb6:	220a      	movs	r2, #10
 800deb8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800deba:	7805      	ldrb	r5, [r0, #0]
 800debc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800dec0:	b2d9      	uxtb	r1, r3
 800dec2:	2909      	cmp	r1, #9
 800dec4:	d928      	bls.n	800df18 <_strtod_l+0x1a8>
 800dec6:	494e      	ldr	r1, [pc, #312]	@ (800e000 <_strtod_l+0x290>)
 800dec8:	2201      	movs	r2, #1
 800deca:	f001 fdae 	bl	800fa2a <strncmp>
 800dece:	2800      	cmp	r0, #0
 800ded0:	d032      	beq.n	800df38 <_strtod_l+0x1c8>
 800ded2:	2000      	movs	r0, #0
 800ded4:	462a      	mov	r2, r5
 800ded6:	4681      	mov	r9, r0
 800ded8:	463d      	mov	r5, r7
 800deda:	4603      	mov	r3, r0
 800dedc:	2a65      	cmp	r2, #101	@ 0x65
 800dede:	d001      	beq.n	800dee4 <_strtod_l+0x174>
 800dee0:	2a45      	cmp	r2, #69	@ 0x45
 800dee2:	d114      	bne.n	800df0e <_strtod_l+0x19e>
 800dee4:	b91d      	cbnz	r5, 800deee <_strtod_l+0x17e>
 800dee6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dee8:	4302      	orrs	r2, r0
 800deea:	d095      	beq.n	800de18 <_strtod_l+0xa8>
 800deec:	2500      	movs	r5, #0
 800deee:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800def0:	1c62      	adds	r2, r4, #1
 800def2:	9219      	str	r2, [sp, #100]	@ 0x64
 800def4:	7862      	ldrb	r2, [r4, #1]
 800def6:	2a2b      	cmp	r2, #43	@ 0x2b
 800def8:	d077      	beq.n	800dfea <_strtod_l+0x27a>
 800defa:	2a2d      	cmp	r2, #45	@ 0x2d
 800defc:	d07b      	beq.n	800dff6 <_strtod_l+0x286>
 800defe:	f04f 0c00 	mov.w	ip, #0
 800df02:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800df06:	2909      	cmp	r1, #9
 800df08:	f240 8082 	bls.w	800e010 <_strtod_l+0x2a0>
 800df0c:	9419      	str	r4, [sp, #100]	@ 0x64
 800df0e:	f04f 0800 	mov.w	r8, #0
 800df12:	e0a2      	b.n	800e05a <_strtod_l+0x2ea>
 800df14:	2300      	movs	r3, #0
 800df16:	e7c7      	b.n	800dea8 <_strtod_l+0x138>
 800df18:	2f08      	cmp	r7, #8
 800df1a:	bfd5      	itete	le
 800df1c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800df1e:	9908      	ldrgt	r1, [sp, #32]
 800df20:	fb02 3301 	mlale	r3, r2, r1, r3
 800df24:	fb02 3301 	mlagt	r3, r2, r1, r3
 800df28:	f100 0001 	add.w	r0, r0, #1
 800df2c:	bfd4      	ite	le
 800df2e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800df30:	9308      	strgt	r3, [sp, #32]
 800df32:	3701      	adds	r7, #1
 800df34:	9019      	str	r0, [sp, #100]	@ 0x64
 800df36:	e7bf      	b.n	800deb8 <_strtod_l+0x148>
 800df38:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800df3a:	1c5a      	adds	r2, r3, #1
 800df3c:	9219      	str	r2, [sp, #100]	@ 0x64
 800df3e:	785a      	ldrb	r2, [r3, #1]
 800df40:	b37f      	cbz	r7, 800dfa2 <_strtod_l+0x232>
 800df42:	4681      	mov	r9, r0
 800df44:	463d      	mov	r5, r7
 800df46:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800df4a:	2b09      	cmp	r3, #9
 800df4c:	d912      	bls.n	800df74 <_strtod_l+0x204>
 800df4e:	2301      	movs	r3, #1
 800df50:	e7c4      	b.n	800dedc <_strtod_l+0x16c>
 800df52:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800df54:	1c5a      	adds	r2, r3, #1
 800df56:	9219      	str	r2, [sp, #100]	@ 0x64
 800df58:	785a      	ldrb	r2, [r3, #1]
 800df5a:	3001      	adds	r0, #1
 800df5c:	2a30      	cmp	r2, #48	@ 0x30
 800df5e:	d0f8      	beq.n	800df52 <_strtod_l+0x1e2>
 800df60:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800df64:	2b08      	cmp	r3, #8
 800df66:	f200 84d3 	bhi.w	800e910 <_strtod_l+0xba0>
 800df6a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800df6c:	930c      	str	r3, [sp, #48]	@ 0x30
 800df6e:	4681      	mov	r9, r0
 800df70:	2000      	movs	r0, #0
 800df72:	4605      	mov	r5, r0
 800df74:	3a30      	subs	r2, #48	@ 0x30
 800df76:	f100 0301 	add.w	r3, r0, #1
 800df7a:	d02a      	beq.n	800dfd2 <_strtod_l+0x262>
 800df7c:	4499      	add	r9, r3
 800df7e:	eb00 0c05 	add.w	ip, r0, r5
 800df82:	462b      	mov	r3, r5
 800df84:	210a      	movs	r1, #10
 800df86:	4563      	cmp	r3, ip
 800df88:	d10d      	bne.n	800dfa6 <_strtod_l+0x236>
 800df8a:	1c69      	adds	r1, r5, #1
 800df8c:	4401      	add	r1, r0
 800df8e:	4428      	add	r0, r5
 800df90:	2808      	cmp	r0, #8
 800df92:	dc16      	bgt.n	800dfc2 <_strtod_l+0x252>
 800df94:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800df96:	230a      	movs	r3, #10
 800df98:	fb03 2300 	mla	r3, r3, r0, r2
 800df9c:	930a      	str	r3, [sp, #40]	@ 0x28
 800df9e:	2300      	movs	r3, #0
 800dfa0:	e018      	b.n	800dfd4 <_strtod_l+0x264>
 800dfa2:	4638      	mov	r0, r7
 800dfa4:	e7da      	b.n	800df5c <_strtod_l+0x1ec>
 800dfa6:	2b08      	cmp	r3, #8
 800dfa8:	f103 0301 	add.w	r3, r3, #1
 800dfac:	dc03      	bgt.n	800dfb6 <_strtod_l+0x246>
 800dfae:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800dfb0:	434e      	muls	r6, r1
 800dfb2:	960a      	str	r6, [sp, #40]	@ 0x28
 800dfb4:	e7e7      	b.n	800df86 <_strtod_l+0x216>
 800dfb6:	2b10      	cmp	r3, #16
 800dfb8:	bfde      	ittt	le
 800dfba:	9e08      	ldrle	r6, [sp, #32]
 800dfbc:	434e      	mulle	r6, r1
 800dfbe:	9608      	strle	r6, [sp, #32]
 800dfc0:	e7e1      	b.n	800df86 <_strtod_l+0x216>
 800dfc2:	280f      	cmp	r0, #15
 800dfc4:	dceb      	bgt.n	800df9e <_strtod_l+0x22e>
 800dfc6:	9808      	ldr	r0, [sp, #32]
 800dfc8:	230a      	movs	r3, #10
 800dfca:	fb03 2300 	mla	r3, r3, r0, r2
 800dfce:	9308      	str	r3, [sp, #32]
 800dfd0:	e7e5      	b.n	800df9e <_strtod_l+0x22e>
 800dfd2:	4629      	mov	r1, r5
 800dfd4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dfd6:	1c50      	adds	r0, r2, #1
 800dfd8:	9019      	str	r0, [sp, #100]	@ 0x64
 800dfda:	7852      	ldrb	r2, [r2, #1]
 800dfdc:	4618      	mov	r0, r3
 800dfde:	460d      	mov	r5, r1
 800dfe0:	e7b1      	b.n	800df46 <_strtod_l+0x1d6>
 800dfe2:	f04f 0900 	mov.w	r9, #0
 800dfe6:	2301      	movs	r3, #1
 800dfe8:	e77d      	b.n	800dee6 <_strtod_l+0x176>
 800dfea:	f04f 0c00 	mov.w	ip, #0
 800dfee:	1ca2      	adds	r2, r4, #2
 800dff0:	9219      	str	r2, [sp, #100]	@ 0x64
 800dff2:	78a2      	ldrb	r2, [r4, #2]
 800dff4:	e785      	b.n	800df02 <_strtod_l+0x192>
 800dff6:	f04f 0c01 	mov.w	ip, #1
 800dffa:	e7f8      	b.n	800dfee <_strtod_l+0x27e>
 800dffc:	08014210 	.word	0x08014210
 800e000:	080141f8 	.word	0x080141f8
 800e004:	7ff00000 	.word	0x7ff00000
 800e008:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e00a:	1c51      	adds	r1, r2, #1
 800e00c:	9119      	str	r1, [sp, #100]	@ 0x64
 800e00e:	7852      	ldrb	r2, [r2, #1]
 800e010:	2a30      	cmp	r2, #48	@ 0x30
 800e012:	d0f9      	beq.n	800e008 <_strtod_l+0x298>
 800e014:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800e018:	2908      	cmp	r1, #8
 800e01a:	f63f af78 	bhi.w	800df0e <_strtod_l+0x19e>
 800e01e:	3a30      	subs	r2, #48	@ 0x30
 800e020:	920e      	str	r2, [sp, #56]	@ 0x38
 800e022:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e024:	920f      	str	r2, [sp, #60]	@ 0x3c
 800e026:	f04f 080a 	mov.w	r8, #10
 800e02a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e02c:	1c56      	adds	r6, r2, #1
 800e02e:	9619      	str	r6, [sp, #100]	@ 0x64
 800e030:	7852      	ldrb	r2, [r2, #1]
 800e032:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800e036:	f1be 0f09 	cmp.w	lr, #9
 800e03a:	d939      	bls.n	800e0b0 <_strtod_l+0x340>
 800e03c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e03e:	1a76      	subs	r6, r6, r1
 800e040:	2e08      	cmp	r6, #8
 800e042:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800e046:	dc03      	bgt.n	800e050 <_strtod_l+0x2e0>
 800e048:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e04a:	4588      	cmp	r8, r1
 800e04c:	bfa8      	it	ge
 800e04e:	4688      	movge	r8, r1
 800e050:	f1bc 0f00 	cmp.w	ip, #0
 800e054:	d001      	beq.n	800e05a <_strtod_l+0x2ea>
 800e056:	f1c8 0800 	rsb	r8, r8, #0
 800e05a:	2d00      	cmp	r5, #0
 800e05c:	d14e      	bne.n	800e0fc <_strtod_l+0x38c>
 800e05e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e060:	4308      	orrs	r0, r1
 800e062:	f47f aebe 	bne.w	800dde2 <_strtod_l+0x72>
 800e066:	2b00      	cmp	r3, #0
 800e068:	f47f aed6 	bne.w	800de18 <_strtod_l+0xa8>
 800e06c:	2a69      	cmp	r2, #105	@ 0x69
 800e06e:	d028      	beq.n	800e0c2 <_strtod_l+0x352>
 800e070:	dc25      	bgt.n	800e0be <_strtod_l+0x34e>
 800e072:	2a49      	cmp	r2, #73	@ 0x49
 800e074:	d025      	beq.n	800e0c2 <_strtod_l+0x352>
 800e076:	2a4e      	cmp	r2, #78	@ 0x4e
 800e078:	f47f aece 	bne.w	800de18 <_strtod_l+0xa8>
 800e07c:	499b      	ldr	r1, [pc, #620]	@ (800e2ec <_strtod_l+0x57c>)
 800e07e:	a819      	add	r0, sp, #100	@ 0x64
 800e080:	f002 feae 	bl	8010de0 <__match>
 800e084:	2800      	cmp	r0, #0
 800e086:	f43f aec7 	beq.w	800de18 <_strtod_l+0xa8>
 800e08a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e08c:	781b      	ldrb	r3, [r3, #0]
 800e08e:	2b28      	cmp	r3, #40	@ 0x28
 800e090:	d12e      	bne.n	800e0f0 <_strtod_l+0x380>
 800e092:	4997      	ldr	r1, [pc, #604]	@ (800e2f0 <_strtod_l+0x580>)
 800e094:	aa1c      	add	r2, sp, #112	@ 0x70
 800e096:	a819      	add	r0, sp, #100	@ 0x64
 800e098:	f002 feb6 	bl	8010e08 <__hexnan>
 800e09c:	2805      	cmp	r0, #5
 800e09e:	d127      	bne.n	800e0f0 <_strtod_l+0x380>
 800e0a0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e0a2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800e0a6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800e0aa:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800e0ae:	e698      	b.n	800dde2 <_strtod_l+0x72>
 800e0b0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e0b2:	fb08 2101 	mla	r1, r8, r1, r2
 800e0b6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800e0ba:	920e      	str	r2, [sp, #56]	@ 0x38
 800e0bc:	e7b5      	b.n	800e02a <_strtod_l+0x2ba>
 800e0be:	2a6e      	cmp	r2, #110	@ 0x6e
 800e0c0:	e7da      	b.n	800e078 <_strtod_l+0x308>
 800e0c2:	498c      	ldr	r1, [pc, #560]	@ (800e2f4 <_strtod_l+0x584>)
 800e0c4:	a819      	add	r0, sp, #100	@ 0x64
 800e0c6:	f002 fe8b 	bl	8010de0 <__match>
 800e0ca:	2800      	cmp	r0, #0
 800e0cc:	f43f aea4 	beq.w	800de18 <_strtod_l+0xa8>
 800e0d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e0d2:	4989      	ldr	r1, [pc, #548]	@ (800e2f8 <_strtod_l+0x588>)
 800e0d4:	3b01      	subs	r3, #1
 800e0d6:	a819      	add	r0, sp, #100	@ 0x64
 800e0d8:	9319      	str	r3, [sp, #100]	@ 0x64
 800e0da:	f002 fe81 	bl	8010de0 <__match>
 800e0de:	b910      	cbnz	r0, 800e0e6 <_strtod_l+0x376>
 800e0e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e0e2:	3301      	adds	r3, #1
 800e0e4:	9319      	str	r3, [sp, #100]	@ 0x64
 800e0e6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800e308 <_strtod_l+0x598>
 800e0ea:	f04f 0a00 	mov.w	sl, #0
 800e0ee:	e678      	b.n	800dde2 <_strtod_l+0x72>
 800e0f0:	4882      	ldr	r0, [pc, #520]	@ (800e2fc <_strtod_l+0x58c>)
 800e0f2:	f001 fd45 	bl	800fb80 <nan>
 800e0f6:	ec5b ab10 	vmov	sl, fp, d0
 800e0fa:	e672      	b.n	800dde2 <_strtod_l+0x72>
 800e0fc:	eba8 0309 	sub.w	r3, r8, r9
 800e100:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e102:	9309      	str	r3, [sp, #36]	@ 0x24
 800e104:	2f00      	cmp	r7, #0
 800e106:	bf08      	it	eq
 800e108:	462f      	moveq	r7, r5
 800e10a:	2d10      	cmp	r5, #16
 800e10c:	462c      	mov	r4, r5
 800e10e:	bfa8      	it	ge
 800e110:	2410      	movge	r4, #16
 800e112:	f7f2 f9ff 	bl	8000514 <__aeabi_ui2d>
 800e116:	2d09      	cmp	r5, #9
 800e118:	4682      	mov	sl, r0
 800e11a:	468b      	mov	fp, r1
 800e11c:	dc13      	bgt.n	800e146 <_strtod_l+0x3d6>
 800e11e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e120:	2b00      	cmp	r3, #0
 800e122:	f43f ae5e 	beq.w	800dde2 <_strtod_l+0x72>
 800e126:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e128:	dd78      	ble.n	800e21c <_strtod_l+0x4ac>
 800e12a:	2b16      	cmp	r3, #22
 800e12c:	dc5f      	bgt.n	800e1ee <_strtod_l+0x47e>
 800e12e:	4974      	ldr	r1, [pc, #464]	@ (800e300 <_strtod_l+0x590>)
 800e130:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e134:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e138:	4652      	mov	r2, sl
 800e13a:	465b      	mov	r3, fp
 800e13c:	f7f2 fa64 	bl	8000608 <__aeabi_dmul>
 800e140:	4682      	mov	sl, r0
 800e142:	468b      	mov	fp, r1
 800e144:	e64d      	b.n	800dde2 <_strtod_l+0x72>
 800e146:	4b6e      	ldr	r3, [pc, #440]	@ (800e300 <_strtod_l+0x590>)
 800e148:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e14c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800e150:	f7f2 fa5a 	bl	8000608 <__aeabi_dmul>
 800e154:	4682      	mov	sl, r0
 800e156:	9808      	ldr	r0, [sp, #32]
 800e158:	468b      	mov	fp, r1
 800e15a:	f7f2 f9db 	bl	8000514 <__aeabi_ui2d>
 800e15e:	4602      	mov	r2, r0
 800e160:	460b      	mov	r3, r1
 800e162:	4650      	mov	r0, sl
 800e164:	4659      	mov	r1, fp
 800e166:	f7f2 f899 	bl	800029c <__adddf3>
 800e16a:	2d0f      	cmp	r5, #15
 800e16c:	4682      	mov	sl, r0
 800e16e:	468b      	mov	fp, r1
 800e170:	ddd5      	ble.n	800e11e <_strtod_l+0x3ae>
 800e172:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e174:	1b2c      	subs	r4, r5, r4
 800e176:	441c      	add	r4, r3
 800e178:	2c00      	cmp	r4, #0
 800e17a:	f340 8096 	ble.w	800e2aa <_strtod_l+0x53a>
 800e17e:	f014 030f 	ands.w	r3, r4, #15
 800e182:	d00a      	beq.n	800e19a <_strtod_l+0x42a>
 800e184:	495e      	ldr	r1, [pc, #376]	@ (800e300 <_strtod_l+0x590>)
 800e186:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e18a:	4652      	mov	r2, sl
 800e18c:	465b      	mov	r3, fp
 800e18e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e192:	f7f2 fa39 	bl	8000608 <__aeabi_dmul>
 800e196:	4682      	mov	sl, r0
 800e198:	468b      	mov	fp, r1
 800e19a:	f034 040f 	bics.w	r4, r4, #15
 800e19e:	d073      	beq.n	800e288 <_strtod_l+0x518>
 800e1a0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800e1a4:	dd48      	ble.n	800e238 <_strtod_l+0x4c8>
 800e1a6:	2400      	movs	r4, #0
 800e1a8:	46a0      	mov	r8, r4
 800e1aa:	940a      	str	r4, [sp, #40]	@ 0x28
 800e1ac:	46a1      	mov	r9, r4
 800e1ae:	9a05      	ldr	r2, [sp, #20]
 800e1b0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800e308 <_strtod_l+0x598>
 800e1b4:	2322      	movs	r3, #34	@ 0x22
 800e1b6:	6013      	str	r3, [r2, #0]
 800e1b8:	f04f 0a00 	mov.w	sl, #0
 800e1bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	f43f ae0f 	beq.w	800dde2 <_strtod_l+0x72>
 800e1c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e1c6:	9805      	ldr	r0, [sp, #20]
 800e1c8:	f002 ffc2 	bl	8011150 <_Bfree>
 800e1cc:	9805      	ldr	r0, [sp, #20]
 800e1ce:	4649      	mov	r1, r9
 800e1d0:	f002 ffbe 	bl	8011150 <_Bfree>
 800e1d4:	9805      	ldr	r0, [sp, #20]
 800e1d6:	4641      	mov	r1, r8
 800e1d8:	f002 ffba 	bl	8011150 <_Bfree>
 800e1dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e1de:	9805      	ldr	r0, [sp, #20]
 800e1e0:	f002 ffb6 	bl	8011150 <_Bfree>
 800e1e4:	9805      	ldr	r0, [sp, #20]
 800e1e6:	4621      	mov	r1, r4
 800e1e8:	f002 ffb2 	bl	8011150 <_Bfree>
 800e1ec:	e5f9      	b.n	800dde2 <_strtod_l+0x72>
 800e1ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e1f0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800e1f4:	4293      	cmp	r3, r2
 800e1f6:	dbbc      	blt.n	800e172 <_strtod_l+0x402>
 800e1f8:	4c41      	ldr	r4, [pc, #260]	@ (800e300 <_strtod_l+0x590>)
 800e1fa:	f1c5 050f 	rsb	r5, r5, #15
 800e1fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e202:	4652      	mov	r2, sl
 800e204:	465b      	mov	r3, fp
 800e206:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e20a:	f7f2 f9fd 	bl	8000608 <__aeabi_dmul>
 800e20e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e210:	1b5d      	subs	r5, r3, r5
 800e212:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e216:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e21a:	e78f      	b.n	800e13c <_strtod_l+0x3cc>
 800e21c:	3316      	adds	r3, #22
 800e21e:	dba8      	blt.n	800e172 <_strtod_l+0x402>
 800e220:	4b37      	ldr	r3, [pc, #220]	@ (800e300 <_strtod_l+0x590>)
 800e222:	eba9 0808 	sub.w	r8, r9, r8
 800e226:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800e22a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800e22e:	4650      	mov	r0, sl
 800e230:	4659      	mov	r1, fp
 800e232:	f7f2 fb13 	bl	800085c <__aeabi_ddiv>
 800e236:	e783      	b.n	800e140 <_strtod_l+0x3d0>
 800e238:	4b32      	ldr	r3, [pc, #200]	@ (800e304 <_strtod_l+0x594>)
 800e23a:	9308      	str	r3, [sp, #32]
 800e23c:	2300      	movs	r3, #0
 800e23e:	1124      	asrs	r4, r4, #4
 800e240:	4650      	mov	r0, sl
 800e242:	4659      	mov	r1, fp
 800e244:	461e      	mov	r6, r3
 800e246:	2c01      	cmp	r4, #1
 800e248:	dc21      	bgt.n	800e28e <_strtod_l+0x51e>
 800e24a:	b10b      	cbz	r3, 800e250 <_strtod_l+0x4e0>
 800e24c:	4682      	mov	sl, r0
 800e24e:	468b      	mov	fp, r1
 800e250:	492c      	ldr	r1, [pc, #176]	@ (800e304 <_strtod_l+0x594>)
 800e252:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800e256:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800e25a:	4652      	mov	r2, sl
 800e25c:	465b      	mov	r3, fp
 800e25e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e262:	f7f2 f9d1 	bl	8000608 <__aeabi_dmul>
 800e266:	4b28      	ldr	r3, [pc, #160]	@ (800e308 <_strtod_l+0x598>)
 800e268:	460a      	mov	r2, r1
 800e26a:	400b      	ands	r3, r1
 800e26c:	4927      	ldr	r1, [pc, #156]	@ (800e30c <_strtod_l+0x59c>)
 800e26e:	428b      	cmp	r3, r1
 800e270:	4682      	mov	sl, r0
 800e272:	d898      	bhi.n	800e1a6 <_strtod_l+0x436>
 800e274:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800e278:	428b      	cmp	r3, r1
 800e27a:	bf86      	itte	hi
 800e27c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800e310 <_strtod_l+0x5a0>
 800e280:	f04f 3aff 	movhi.w	sl, #4294967295
 800e284:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800e288:	2300      	movs	r3, #0
 800e28a:	9308      	str	r3, [sp, #32]
 800e28c:	e07a      	b.n	800e384 <_strtod_l+0x614>
 800e28e:	07e2      	lsls	r2, r4, #31
 800e290:	d505      	bpl.n	800e29e <_strtod_l+0x52e>
 800e292:	9b08      	ldr	r3, [sp, #32]
 800e294:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e298:	f7f2 f9b6 	bl	8000608 <__aeabi_dmul>
 800e29c:	2301      	movs	r3, #1
 800e29e:	9a08      	ldr	r2, [sp, #32]
 800e2a0:	3208      	adds	r2, #8
 800e2a2:	3601      	adds	r6, #1
 800e2a4:	1064      	asrs	r4, r4, #1
 800e2a6:	9208      	str	r2, [sp, #32]
 800e2a8:	e7cd      	b.n	800e246 <_strtod_l+0x4d6>
 800e2aa:	d0ed      	beq.n	800e288 <_strtod_l+0x518>
 800e2ac:	4264      	negs	r4, r4
 800e2ae:	f014 020f 	ands.w	r2, r4, #15
 800e2b2:	d00a      	beq.n	800e2ca <_strtod_l+0x55a>
 800e2b4:	4b12      	ldr	r3, [pc, #72]	@ (800e300 <_strtod_l+0x590>)
 800e2b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e2ba:	4650      	mov	r0, sl
 800e2bc:	4659      	mov	r1, fp
 800e2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2c2:	f7f2 facb 	bl	800085c <__aeabi_ddiv>
 800e2c6:	4682      	mov	sl, r0
 800e2c8:	468b      	mov	fp, r1
 800e2ca:	1124      	asrs	r4, r4, #4
 800e2cc:	d0dc      	beq.n	800e288 <_strtod_l+0x518>
 800e2ce:	2c1f      	cmp	r4, #31
 800e2d0:	dd20      	ble.n	800e314 <_strtod_l+0x5a4>
 800e2d2:	2400      	movs	r4, #0
 800e2d4:	46a0      	mov	r8, r4
 800e2d6:	940a      	str	r4, [sp, #40]	@ 0x28
 800e2d8:	46a1      	mov	r9, r4
 800e2da:	9a05      	ldr	r2, [sp, #20]
 800e2dc:	2322      	movs	r3, #34	@ 0x22
 800e2de:	f04f 0a00 	mov.w	sl, #0
 800e2e2:	f04f 0b00 	mov.w	fp, #0
 800e2e6:	6013      	str	r3, [r2, #0]
 800e2e8:	e768      	b.n	800e1bc <_strtod_l+0x44c>
 800e2ea:	bf00      	nop
 800e2ec:	0801425d 	.word	0x0801425d
 800e2f0:	080141fc 	.word	0x080141fc
 800e2f4:	08014255 	.word	0x08014255
 800e2f8:	08014292 	.word	0x08014292
 800e2fc:	08014640 	.word	0x08014640
 800e300:	08014410 	.word	0x08014410
 800e304:	080143e8 	.word	0x080143e8
 800e308:	7ff00000 	.word	0x7ff00000
 800e30c:	7ca00000 	.word	0x7ca00000
 800e310:	7fefffff 	.word	0x7fefffff
 800e314:	f014 0310 	ands.w	r3, r4, #16
 800e318:	bf18      	it	ne
 800e31a:	236a      	movne	r3, #106	@ 0x6a
 800e31c:	4ea9      	ldr	r6, [pc, #676]	@ (800e5c4 <_strtod_l+0x854>)
 800e31e:	9308      	str	r3, [sp, #32]
 800e320:	4650      	mov	r0, sl
 800e322:	4659      	mov	r1, fp
 800e324:	2300      	movs	r3, #0
 800e326:	07e2      	lsls	r2, r4, #31
 800e328:	d504      	bpl.n	800e334 <_strtod_l+0x5c4>
 800e32a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e32e:	f7f2 f96b 	bl	8000608 <__aeabi_dmul>
 800e332:	2301      	movs	r3, #1
 800e334:	1064      	asrs	r4, r4, #1
 800e336:	f106 0608 	add.w	r6, r6, #8
 800e33a:	d1f4      	bne.n	800e326 <_strtod_l+0x5b6>
 800e33c:	b10b      	cbz	r3, 800e342 <_strtod_l+0x5d2>
 800e33e:	4682      	mov	sl, r0
 800e340:	468b      	mov	fp, r1
 800e342:	9b08      	ldr	r3, [sp, #32]
 800e344:	b1b3      	cbz	r3, 800e374 <_strtod_l+0x604>
 800e346:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800e34a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800e34e:	2b00      	cmp	r3, #0
 800e350:	4659      	mov	r1, fp
 800e352:	dd0f      	ble.n	800e374 <_strtod_l+0x604>
 800e354:	2b1f      	cmp	r3, #31
 800e356:	dd55      	ble.n	800e404 <_strtod_l+0x694>
 800e358:	2b34      	cmp	r3, #52	@ 0x34
 800e35a:	bfde      	ittt	le
 800e35c:	f04f 33ff 	movle.w	r3, #4294967295
 800e360:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800e364:	4093      	lslle	r3, r2
 800e366:	f04f 0a00 	mov.w	sl, #0
 800e36a:	bfcc      	ite	gt
 800e36c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800e370:	ea03 0b01 	andle.w	fp, r3, r1
 800e374:	2200      	movs	r2, #0
 800e376:	2300      	movs	r3, #0
 800e378:	4650      	mov	r0, sl
 800e37a:	4659      	mov	r1, fp
 800e37c:	f7f2 fbac 	bl	8000ad8 <__aeabi_dcmpeq>
 800e380:	2800      	cmp	r0, #0
 800e382:	d1a6      	bne.n	800e2d2 <_strtod_l+0x562>
 800e384:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e386:	9300      	str	r3, [sp, #0]
 800e388:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e38a:	9805      	ldr	r0, [sp, #20]
 800e38c:	462b      	mov	r3, r5
 800e38e:	463a      	mov	r2, r7
 800e390:	f002 ff46 	bl	8011220 <__s2b>
 800e394:	900a      	str	r0, [sp, #40]	@ 0x28
 800e396:	2800      	cmp	r0, #0
 800e398:	f43f af05 	beq.w	800e1a6 <_strtod_l+0x436>
 800e39c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e39e:	2a00      	cmp	r2, #0
 800e3a0:	eba9 0308 	sub.w	r3, r9, r8
 800e3a4:	bfa8      	it	ge
 800e3a6:	2300      	movge	r3, #0
 800e3a8:	9312      	str	r3, [sp, #72]	@ 0x48
 800e3aa:	2400      	movs	r4, #0
 800e3ac:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e3b0:	9316      	str	r3, [sp, #88]	@ 0x58
 800e3b2:	46a0      	mov	r8, r4
 800e3b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e3b6:	9805      	ldr	r0, [sp, #20]
 800e3b8:	6859      	ldr	r1, [r3, #4]
 800e3ba:	f002 fe89 	bl	80110d0 <_Balloc>
 800e3be:	4681      	mov	r9, r0
 800e3c0:	2800      	cmp	r0, #0
 800e3c2:	f43f aef4 	beq.w	800e1ae <_strtod_l+0x43e>
 800e3c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e3c8:	691a      	ldr	r2, [r3, #16]
 800e3ca:	3202      	adds	r2, #2
 800e3cc:	f103 010c 	add.w	r1, r3, #12
 800e3d0:	0092      	lsls	r2, r2, #2
 800e3d2:	300c      	adds	r0, #12
 800e3d4:	f001 fbc5 	bl	800fb62 <memcpy>
 800e3d8:	ec4b ab10 	vmov	d0, sl, fp
 800e3dc:	9805      	ldr	r0, [sp, #20]
 800e3de:	aa1c      	add	r2, sp, #112	@ 0x70
 800e3e0:	a91b      	add	r1, sp, #108	@ 0x6c
 800e3e2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800e3e6:	f003 fa57 	bl	8011898 <__d2b>
 800e3ea:	901a      	str	r0, [sp, #104]	@ 0x68
 800e3ec:	2800      	cmp	r0, #0
 800e3ee:	f43f aede 	beq.w	800e1ae <_strtod_l+0x43e>
 800e3f2:	9805      	ldr	r0, [sp, #20]
 800e3f4:	2101      	movs	r1, #1
 800e3f6:	f002 ffa9 	bl	801134c <__i2b>
 800e3fa:	4680      	mov	r8, r0
 800e3fc:	b948      	cbnz	r0, 800e412 <_strtod_l+0x6a2>
 800e3fe:	f04f 0800 	mov.w	r8, #0
 800e402:	e6d4      	b.n	800e1ae <_strtod_l+0x43e>
 800e404:	f04f 32ff 	mov.w	r2, #4294967295
 800e408:	fa02 f303 	lsl.w	r3, r2, r3
 800e40c:	ea03 0a0a 	and.w	sl, r3, sl
 800e410:	e7b0      	b.n	800e374 <_strtod_l+0x604>
 800e412:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800e414:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800e416:	2d00      	cmp	r5, #0
 800e418:	bfab      	itete	ge
 800e41a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800e41c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800e41e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800e420:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800e422:	bfac      	ite	ge
 800e424:	18ef      	addge	r7, r5, r3
 800e426:	1b5e      	sublt	r6, r3, r5
 800e428:	9b08      	ldr	r3, [sp, #32]
 800e42a:	1aed      	subs	r5, r5, r3
 800e42c:	4415      	add	r5, r2
 800e42e:	4b66      	ldr	r3, [pc, #408]	@ (800e5c8 <_strtod_l+0x858>)
 800e430:	3d01      	subs	r5, #1
 800e432:	429d      	cmp	r5, r3
 800e434:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800e438:	da50      	bge.n	800e4dc <_strtod_l+0x76c>
 800e43a:	1b5b      	subs	r3, r3, r5
 800e43c:	2b1f      	cmp	r3, #31
 800e43e:	eba2 0203 	sub.w	r2, r2, r3
 800e442:	f04f 0101 	mov.w	r1, #1
 800e446:	dc3d      	bgt.n	800e4c4 <_strtod_l+0x754>
 800e448:	fa01 f303 	lsl.w	r3, r1, r3
 800e44c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e44e:	2300      	movs	r3, #0
 800e450:	9310      	str	r3, [sp, #64]	@ 0x40
 800e452:	18bd      	adds	r5, r7, r2
 800e454:	9b08      	ldr	r3, [sp, #32]
 800e456:	42af      	cmp	r7, r5
 800e458:	4416      	add	r6, r2
 800e45a:	441e      	add	r6, r3
 800e45c:	463b      	mov	r3, r7
 800e45e:	bfa8      	it	ge
 800e460:	462b      	movge	r3, r5
 800e462:	42b3      	cmp	r3, r6
 800e464:	bfa8      	it	ge
 800e466:	4633      	movge	r3, r6
 800e468:	2b00      	cmp	r3, #0
 800e46a:	bfc2      	ittt	gt
 800e46c:	1aed      	subgt	r5, r5, r3
 800e46e:	1af6      	subgt	r6, r6, r3
 800e470:	1aff      	subgt	r7, r7, r3
 800e472:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e474:	2b00      	cmp	r3, #0
 800e476:	dd16      	ble.n	800e4a6 <_strtod_l+0x736>
 800e478:	4641      	mov	r1, r8
 800e47a:	9805      	ldr	r0, [sp, #20]
 800e47c:	461a      	mov	r2, r3
 800e47e:	f003 f825 	bl	80114cc <__pow5mult>
 800e482:	4680      	mov	r8, r0
 800e484:	2800      	cmp	r0, #0
 800e486:	d0ba      	beq.n	800e3fe <_strtod_l+0x68e>
 800e488:	4601      	mov	r1, r0
 800e48a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e48c:	9805      	ldr	r0, [sp, #20]
 800e48e:	f002 ff73 	bl	8011378 <__multiply>
 800e492:	900e      	str	r0, [sp, #56]	@ 0x38
 800e494:	2800      	cmp	r0, #0
 800e496:	f43f ae8a 	beq.w	800e1ae <_strtod_l+0x43e>
 800e49a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e49c:	9805      	ldr	r0, [sp, #20]
 800e49e:	f002 fe57 	bl	8011150 <_Bfree>
 800e4a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e4a4:	931a      	str	r3, [sp, #104]	@ 0x68
 800e4a6:	2d00      	cmp	r5, #0
 800e4a8:	dc1d      	bgt.n	800e4e6 <_strtod_l+0x776>
 800e4aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	dd23      	ble.n	800e4f8 <_strtod_l+0x788>
 800e4b0:	4649      	mov	r1, r9
 800e4b2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e4b4:	9805      	ldr	r0, [sp, #20]
 800e4b6:	f003 f809 	bl	80114cc <__pow5mult>
 800e4ba:	4681      	mov	r9, r0
 800e4bc:	b9e0      	cbnz	r0, 800e4f8 <_strtod_l+0x788>
 800e4be:	f04f 0900 	mov.w	r9, #0
 800e4c2:	e674      	b.n	800e1ae <_strtod_l+0x43e>
 800e4c4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800e4c8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800e4cc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800e4d0:	35e2      	adds	r5, #226	@ 0xe2
 800e4d2:	fa01 f305 	lsl.w	r3, r1, r5
 800e4d6:	9310      	str	r3, [sp, #64]	@ 0x40
 800e4d8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800e4da:	e7ba      	b.n	800e452 <_strtod_l+0x6e2>
 800e4dc:	2300      	movs	r3, #0
 800e4de:	9310      	str	r3, [sp, #64]	@ 0x40
 800e4e0:	2301      	movs	r3, #1
 800e4e2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e4e4:	e7b5      	b.n	800e452 <_strtod_l+0x6e2>
 800e4e6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e4e8:	9805      	ldr	r0, [sp, #20]
 800e4ea:	462a      	mov	r2, r5
 800e4ec:	f003 f848 	bl	8011580 <__lshift>
 800e4f0:	901a      	str	r0, [sp, #104]	@ 0x68
 800e4f2:	2800      	cmp	r0, #0
 800e4f4:	d1d9      	bne.n	800e4aa <_strtod_l+0x73a>
 800e4f6:	e65a      	b.n	800e1ae <_strtod_l+0x43e>
 800e4f8:	2e00      	cmp	r6, #0
 800e4fa:	dd07      	ble.n	800e50c <_strtod_l+0x79c>
 800e4fc:	4649      	mov	r1, r9
 800e4fe:	9805      	ldr	r0, [sp, #20]
 800e500:	4632      	mov	r2, r6
 800e502:	f003 f83d 	bl	8011580 <__lshift>
 800e506:	4681      	mov	r9, r0
 800e508:	2800      	cmp	r0, #0
 800e50a:	d0d8      	beq.n	800e4be <_strtod_l+0x74e>
 800e50c:	2f00      	cmp	r7, #0
 800e50e:	dd08      	ble.n	800e522 <_strtod_l+0x7b2>
 800e510:	4641      	mov	r1, r8
 800e512:	9805      	ldr	r0, [sp, #20]
 800e514:	463a      	mov	r2, r7
 800e516:	f003 f833 	bl	8011580 <__lshift>
 800e51a:	4680      	mov	r8, r0
 800e51c:	2800      	cmp	r0, #0
 800e51e:	f43f ae46 	beq.w	800e1ae <_strtod_l+0x43e>
 800e522:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e524:	9805      	ldr	r0, [sp, #20]
 800e526:	464a      	mov	r2, r9
 800e528:	f003 f8b2 	bl	8011690 <__mdiff>
 800e52c:	4604      	mov	r4, r0
 800e52e:	2800      	cmp	r0, #0
 800e530:	f43f ae3d 	beq.w	800e1ae <_strtod_l+0x43e>
 800e534:	68c3      	ldr	r3, [r0, #12]
 800e536:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e538:	2300      	movs	r3, #0
 800e53a:	60c3      	str	r3, [r0, #12]
 800e53c:	4641      	mov	r1, r8
 800e53e:	f003 f88b 	bl	8011658 <__mcmp>
 800e542:	2800      	cmp	r0, #0
 800e544:	da46      	bge.n	800e5d4 <_strtod_l+0x864>
 800e546:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e548:	ea53 030a 	orrs.w	r3, r3, sl
 800e54c:	d16c      	bne.n	800e628 <_strtod_l+0x8b8>
 800e54e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e552:	2b00      	cmp	r3, #0
 800e554:	d168      	bne.n	800e628 <_strtod_l+0x8b8>
 800e556:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e55a:	0d1b      	lsrs	r3, r3, #20
 800e55c:	051b      	lsls	r3, r3, #20
 800e55e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e562:	d961      	bls.n	800e628 <_strtod_l+0x8b8>
 800e564:	6963      	ldr	r3, [r4, #20]
 800e566:	b913      	cbnz	r3, 800e56e <_strtod_l+0x7fe>
 800e568:	6923      	ldr	r3, [r4, #16]
 800e56a:	2b01      	cmp	r3, #1
 800e56c:	dd5c      	ble.n	800e628 <_strtod_l+0x8b8>
 800e56e:	4621      	mov	r1, r4
 800e570:	2201      	movs	r2, #1
 800e572:	9805      	ldr	r0, [sp, #20]
 800e574:	f003 f804 	bl	8011580 <__lshift>
 800e578:	4641      	mov	r1, r8
 800e57a:	4604      	mov	r4, r0
 800e57c:	f003 f86c 	bl	8011658 <__mcmp>
 800e580:	2800      	cmp	r0, #0
 800e582:	dd51      	ble.n	800e628 <_strtod_l+0x8b8>
 800e584:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e588:	9a08      	ldr	r2, [sp, #32]
 800e58a:	0d1b      	lsrs	r3, r3, #20
 800e58c:	051b      	lsls	r3, r3, #20
 800e58e:	2a00      	cmp	r2, #0
 800e590:	d06b      	beq.n	800e66a <_strtod_l+0x8fa>
 800e592:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e596:	d868      	bhi.n	800e66a <_strtod_l+0x8fa>
 800e598:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e59c:	f67f ae9d 	bls.w	800e2da <_strtod_l+0x56a>
 800e5a0:	4b0a      	ldr	r3, [pc, #40]	@ (800e5cc <_strtod_l+0x85c>)
 800e5a2:	4650      	mov	r0, sl
 800e5a4:	4659      	mov	r1, fp
 800e5a6:	2200      	movs	r2, #0
 800e5a8:	f7f2 f82e 	bl	8000608 <__aeabi_dmul>
 800e5ac:	4b08      	ldr	r3, [pc, #32]	@ (800e5d0 <_strtod_l+0x860>)
 800e5ae:	400b      	ands	r3, r1
 800e5b0:	4682      	mov	sl, r0
 800e5b2:	468b      	mov	fp, r1
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	f47f ae05 	bne.w	800e1c4 <_strtod_l+0x454>
 800e5ba:	9a05      	ldr	r2, [sp, #20]
 800e5bc:	2322      	movs	r3, #34	@ 0x22
 800e5be:	6013      	str	r3, [r2, #0]
 800e5c0:	e600      	b.n	800e1c4 <_strtod_l+0x454>
 800e5c2:	bf00      	nop
 800e5c4:	08014228 	.word	0x08014228
 800e5c8:	fffffc02 	.word	0xfffffc02
 800e5cc:	39500000 	.word	0x39500000
 800e5d0:	7ff00000 	.word	0x7ff00000
 800e5d4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800e5d8:	d165      	bne.n	800e6a6 <_strtod_l+0x936>
 800e5da:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e5dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e5e0:	b35a      	cbz	r2, 800e63a <_strtod_l+0x8ca>
 800e5e2:	4a9f      	ldr	r2, [pc, #636]	@ (800e860 <_strtod_l+0xaf0>)
 800e5e4:	4293      	cmp	r3, r2
 800e5e6:	d12b      	bne.n	800e640 <_strtod_l+0x8d0>
 800e5e8:	9b08      	ldr	r3, [sp, #32]
 800e5ea:	4651      	mov	r1, sl
 800e5ec:	b303      	cbz	r3, 800e630 <_strtod_l+0x8c0>
 800e5ee:	4b9d      	ldr	r3, [pc, #628]	@ (800e864 <_strtod_l+0xaf4>)
 800e5f0:	465a      	mov	r2, fp
 800e5f2:	4013      	ands	r3, r2
 800e5f4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e5f8:	f04f 32ff 	mov.w	r2, #4294967295
 800e5fc:	d81b      	bhi.n	800e636 <_strtod_l+0x8c6>
 800e5fe:	0d1b      	lsrs	r3, r3, #20
 800e600:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e604:	fa02 f303 	lsl.w	r3, r2, r3
 800e608:	4299      	cmp	r1, r3
 800e60a:	d119      	bne.n	800e640 <_strtod_l+0x8d0>
 800e60c:	4b96      	ldr	r3, [pc, #600]	@ (800e868 <_strtod_l+0xaf8>)
 800e60e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e610:	429a      	cmp	r2, r3
 800e612:	d102      	bne.n	800e61a <_strtod_l+0x8aa>
 800e614:	3101      	adds	r1, #1
 800e616:	f43f adca 	beq.w	800e1ae <_strtod_l+0x43e>
 800e61a:	4b92      	ldr	r3, [pc, #584]	@ (800e864 <_strtod_l+0xaf4>)
 800e61c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e61e:	401a      	ands	r2, r3
 800e620:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800e624:	f04f 0a00 	mov.w	sl, #0
 800e628:	9b08      	ldr	r3, [sp, #32]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d1b8      	bne.n	800e5a0 <_strtod_l+0x830>
 800e62e:	e5c9      	b.n	800e1c4 <_strtod_l+0x454>
 800e630:	f04f 33ff 	mov.w	r3, #4294967295
 800e634:	e7e8      	b.n	800e608 <_strtod_l+0x898>
 800e636:	4613      	mov	r3, r2
 800e638:	e7e6      	b.n	800e608 <_strtod_l+0x898>
 800e63a:	ea53 030a 	orrs.w	r3, r3, sl
 800e63e:	d0a1      	beq.n	800e584 <_strtod_l+0x814>
 800e640:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e642:	b1db      	cbz	r3, 800e67c <_strtod_l+0x90c>
 800e644:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e646:	4213      	tst	r3, r2
 800e648:	d0ee      	beq.n	800e628 <_strtod_l+0x8b8>
 800e64a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e64c:	9a08      	ldr	r2, [sp, #32]
 800e64e:	4650      	mov	r0, sl
 800e650:	4659      	mov	r1, fp
 800e652:	b1bb      	cbz	r3, 800e684 <_strtod_l+0x914>
 800e654:	f7ff fb6e 	bl	800dd34 <sulp>
 800e658:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e65c:	ec53 2b10 	vmov	r2, r3, d0
 800e660:	f7f1 fe1c 	bl	800029c <__adddf3>
 800e664:	4682      	mov	sl, r0
 800e666:	468b      	mov	fp, r1
 800e668:	e7de      	b.n	800e628 <_strtod_l+0x8b8>
 800e66a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e66e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e672:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e676:	f04f 3aff 	mov.w	sl, #4294967295
 800e67a:	e7d5      	b.n	800e628 <_strtod_l+0x8b8>
 800e67c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e67e:	ea13 0f0a 	tst.w	r3, sl
 800e682:	e7e1      	b.n	800e648 <_strtod_l+0x8d8>
 800e684:	f7ff fb56 	bl	800dd34 <sulp>
 800e688:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e68c:	ec53 2b10 	vmov	r2, r3, d0
 800e690:	f7f1 fe02 	bl	8000298 <__aeabi_dsub>
 800e694:	2200      	movs	r2, #0
 800e696:	2300      	movs	r3, #0
 800e698:	4682      	mov	sl, r0
 800e69a:	468b      	mov	fp, r1
 800e69c:	f7f2 fa1c 	bl	8000ad8 <__aeabi_dcmpeq>
 800e6a0:	2800      	cmp	r0, #0
 800e6a2:	d0c1      	beq.n	800e628 <_strtod_l+0x8b8>
 800e6a4:	e619      	b.n	800e2da <_strtod_l+0x56a>
 800e6a6:	4641      	mov	r1, r8
 800e6a8:	4620      	mov	r0, r4
 800e6aa:	f003 f94d 	bl	8011948 <__ratio>
 800e6ae:	ec57 6b10 	vmov	r6, r7, d0
 800e6b2:	2200      	movs	r2, #0
 800e6b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e6b8:	4630      	mov	r0, r6
 800e6ba:	4639      	mov	r1, r7
 800e6bc:	f7f2 fa20 	bl	8000b00 <__aeabi_dcmple>
 800e6c0:	2800      	cmp	r0, #0
 800e6c2:	d06f      	beq.n	800e7a4 <_strtod_l+0xa34>
 800e6c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d17a      	bne.n	800e7c0 <_strtod_l+0xa50>
 800e6ca:	f1ba 0f00 	cmp.w	sl, #0
 800e6ce:	d158      	bne.n	800e782 <_strtod_l+0xa12>
 800e6d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e6d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d15a      	bne.n	800e790 <_strtod_l+0xa20>
 800e6da:	4b64      	ldr	r3, [pc, #400]	@ (800e86c <_strtod_l+0xafc>)
 800e6dc:	2200      	movs	r2, #0
 800e6de:	4630      	mov	r0, r6
 800e6e0:	4639      	mov	r1, r7
 800e6e2:	f7f2 fa03 	bl	8000aec <__aeabi_dcmplt>
 800e6e6:	2800      	cmp	r0, #0
 800e6e8:	d159      	bne.n	800e79e <_strtod_l+0xa2e>
 800e6ea:	4630      	mov	r0, r6
 800e6ec:	4639      	mov	r1, r7
 800e6ee:	4b60      	ldr	r3, [pc, #384]	@ (800e870 <_strtod_l+0xb00>)
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	f7f1 ff89 	bl	8000608 <__aeabi_dmul>
 800e6f6:	4606      	mov	r6, r0
 800e6f8:	460f      	mov	r7, r1
 800e6fa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800e6fe:	9606      	str	r6, [sp, #24]
 800e700:	9307      	str	r3, [sp, #28]
 800e702:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e706:	4d57      	ldr	r5, [pc, #348]	@ (800e864 <_strtod_l+0xaf4>)
 800e708:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e70c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e70e:	401d      	ands	r5, r3
 800e710:	4b58      	ldr	r3, [pc, #352]	@ (800e874 <_strtod_l+0xb04>)
 800e712:	429d      	cmp	r5, r3
 800e714:	f040 80b2 	bne.w	800e87c <_strtod_l+0xb0c>
 800e718:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e71a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800e71e:	ec4b ab10 	vmov	d0, sl, fp
 800e722:	f003 f849 	bl	80117b8 <__ulp>
 800e726:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e72a:	ec51 0b10 	vmov	r0, r1, d0
 800e72e:	f7f1 ff6b 	bl	8000608 <__aeabi_dmul>
 800e732:	4652      	mov	r2, sl
 800e734:	465b      	mov	r3, fp
 800e736:	f7f1 fdb1 	bl	800029c <__adddf3>
 800e73a:	460b      	mov	r3, r1
 800e73c:	4949      	ldr	r1, [pc, #292]	@ (800e864 <_strtod_l+0xaf4>)
 800e73e:	4a4e      	ldr	r2, [pc, #312]	@ (800e878 <_strtod_l+0xb08>)
 800e740:	4019      	ands	r1, r3
 800e742:	4291      	cmp	r1, r2
 800e744:	4682      	mov	sl, r0
 800e746:	d942      	bls.n	800e7ce <_strtod_l+0xa5e>
 800e748:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e74a:	4b47      	ldr	r3, [pc, #284]	@ (800e868 <_strtod_l+0xaf8>)
 800e74c:	429a      	cmp	r2, r3
 800e74e:	d103      	bne.n	800e758 <_strtod_l+0x9e8>
 800e750:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e752:	3301      	adds	r3, #1
 800e754:	f43f ad2b 	beq.w	800e1ae <_strtod_l+0x43e>
 800e758:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800e868 <_strtod_l+0xaf8>
 800e75c:	f04f 3aff 	mov.w	sl, #4294967295
 800e760:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e762:	9805      	ldr	r0, [sp, #20]
 800e764:	f002 fcf4 	bl	8011150 <_Bfree>
 800e768:	9805      	ldr	r0, [sp, #20]
 800e76a:	4649      	mov	r1, r9
 800e76c:	f002 fcf0 	bl	8011150 <_Bfree>
 800e770:	9805      	ldr	r0, [sp, #20]
 800e772:	4641      	mov	r1, r8
 800e774:	f002 fcec 	bl	8011150 <_Bfree>
 800e778:	9805      	ldr	r0, [sp, #20]
 800e77a:	4621      	mov	r1, r4
 800e77c:	f002 fce8 	bl	8011150 <_Bfree>
 800e780:	e618      	b.n	800e3b4 <_strtod_l+0x644>
 800e782:	f1ba 0f01 	cmp.w	sl, #1
 800e786:	d103      	bne.n	800e790 <_strtod_l+0xa20>
 800e788:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	f43f ada5 	beq.w	800e2da <_strtod_l+0x56a>
 800e790:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800e840 <_strtod_l+0xad0>
 800e794:	4f35      	ldr	r7, [pc, #212]	@ (800e86c <_strtod_l+0xafc>)
 800e796:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e79a:	2600      	movs	r6, #0
 800e79c:	e7b1      	b.n	800e702 <_strtod_l+0x992>
 800e79e:	4f34      	ldr	r7, [pc, #208]	@ (800e870 <_strtod_l+0xb00>)
 800e7a0:	2600      	movs	r6, #0
 800e7a2:	e7aa      	b.n	800e6fa <_strtod_l+0x98a>
 800e7a4:	4b32      	ldr	r3, [pc, #200]	@ (800e870 <_strtod_l+0xb00>)
 800e7a6:	4630      	mov	r0, r6
 800e7a8:	4639      	mov	r1, r7
 800e7aa:	2200      	movs	r2, #0
 800e7ac:	f7f1 ff2c 	bl	8000608 <__aeabi_dmul>
 800e7b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e7b2:	4606      	mov	r6, r0
 800e7b4:	460f      	mov	r7, r1
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d09f      	beq.n	800e6fa <_strtod_l+0x98a>
 800e7ba:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e7be:	e7a0      	b.n	800e702 <_strtod_l+0x992>
 800e7c0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800e848 <_strtod_l+0xad8>
 800e7c4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e7c8:	ec57 6b17 	vmov	r6, r7, d7
 800e7cc:	e799      	b.n	800e702 <_strtod_l+0x992>
 800e7ce:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e7d2:	9b08      	ldr	r3, [sp, #32]
 800e7d4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d1c1      	bne.n	800e760 <_strtod_l+0x9f0>
 800e7dc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e7e0:	0d1b      	lsrs	r3, r3, #20
 800e7e2:	051b      	lsls	r3, r3, #20
 800e7e4:	429d      	cmp	r5, r3
 800e7e6:	d1bb      	bne.n	800e760 <_strtod_l+0x9f0>
 800e7e8:	4630      	mov	r0, r6
 800e7ea:	4639      	mov	r1, r7
 800e7ec:	f7f2 fa6c 	bl	8000cc8 <__aeabi_d2lz>
 800e7f0:	f7f1 fedc 	bl	80005ac <__aeabi_l2d>
 800e7f4:	4602      	mov	r2, r0
 800e7f6:	460b      	mov	r3, r1
 800e7f8:	4630      	mov	r0, r6
 800e7fa:	4639      	mov	r1, r7
 800e7fc:	f7f1 fd4c 	bl	8000298 <__aeabi_dsub>
 800e800:	460b      	mov	r3, r1
 800e802:	4602      	mov	r2, r0
 800e804:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800e808:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800e80c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e80e:	ea46 060a 	orr.w	r6, r6, sl
 800e812:	431e      	orrs	r6, r3
 800e814:	d06f      	beq.n	800e8f6 <_strtod_l+0xb86>
 800e816:	a30e      	add	r3, pc, #56	@ (adr r3, 800e850 <_strtod_l+0xae0>)
 800e818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e81c:	f7f2 f966 	bl	8000aec <__aeabi_dcmplt>
 800e820:	2800      	cmp	r0, #0
 800e822:	f47f accf 	bne.w	800e1c4 <_strtod_l+0x454>
 800e826:	a30c      	add	r3, pc, #48	@ (adr r3, 800e858 <_strtod_l+0xae8>)
 800e828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e82c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e830:	f7f2 f97a 	bl	8000b28 <__aeabi_dcmpgt>
 800e834:	2800      	cmp	r0, #0
 800e836:	d093      	beq.n	800e760 <_strtod_l+0x9f0>
 800e838:	e4c4      	b.n	800e1c4 <_strtod_l+0x454>
 800e83a:	bf00      	nop
 800e83c:	f3af 8000 	nop.w
 800e840:	00000000 	.word	0x00000000
 800e844:	bff00000 	.word	0xbff00000
 800e848:	00000000 	.word	0x00000000
 800e84c:	3ff00000 	.word	0x3ff00000
 800e850:	94a03595 	.word	0x94a03595
 800e854:	3fdfffff 	.word	0x3fdfffff
 800e858:	35afe535 	.word	0x35afe535
 800e85c:	3fe00000 	.word	0x3fe00000
 800e860:	000fffff 	.word	0x000fffff
 800e864:	7ff00000 	.word	0x7ff00000
 800e868:	7fefffff 	.word	0x7fefffff
 800e86c:	3ff00000 	.word	0x3ff00000
 800e870:	3fe00000 	.word	0x3fe00000
 800e874:	7fe00000 	.word	0x7fe00000
 800e878:	7c9fffff 	.word	0x7c9fffff
 800e87c:	9b08      	ldr	r3, [sp, #32]
 800e87e:	b323      	cbz	r3, 800e8ca <_strtod_l+0xb5a>
 800e880:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800e884:	d821      	bhi.n	800e8ca <_strtod_l+0xb5a>
 800e886:	a328      	add	r3, pc, #160	@ (adr r3, 800e928 <_strtod_l+0xbb8>)
 800e888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e88c:	4630      	mov	r0, r6
 800e88e:	4639      	mov	r1, r7
 800e890:	f7f2 f936 	bl	8000b00 <__aeabi_dcmple>
 800e894:	b1a0      	cbz	r0, 800e8c0 <_strtod_l+0xb50>
 800e896:	4639      	mov	r1, r7
 800e898:	4630      	mov	r0, r6
 800e89a:	f7f2 f98d 	bl	8000bb8 <__aeabi_d2uiz>
 800e89e:	2801      	cmp	r0, #1
 800e8a0:	bf38      	it	cc
 800e8a2:	2001      	movcc	r0, #1
 800e8a4:	f7f1 fe36 	bl	8000514 <__aeabi_ui2d>
 800e8a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e8aa:	4606      	mov	r6, r0
 800e8ac:	460f      	mov	r7, r1
 800e8ae:	b9fb      	cbnz	r3, 800e8f0 <_strtod_l+0xb80>
 800e8b0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e8b4:	9014      	str	r0, [sp, #80]	@ 0x50
 800e8b6:	9315      	str	r3, [sp, #84]	@ 0x54
 800e8b8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800e8bc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e8c0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e8c2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800e8c6:	1b5b      	subs	r3, r3, r5
 800e8c8:	9311      	str	r3, [sp, #68]	@ 0x44
 800e8ca:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e8ce:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800e8d2:	f002 ff71 	bl	80117b8 <__ulp>
 800e8d6:	4650      	mov	r0, sl
 800e8d8:	ec53 2b10 	vmov	r2, r3, d0
 800e8dc:	4659      	mov	r1, fp
 800e8de:	f7f1 fe93 	bl	8000608 <__aeabi_dmul>
 800e8e2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e8e6:	f7f1 fcd9 	bl	800029c <__adddf3>
 800e8ea:	4682      	mov	sl, r0
 800e8ec:	468b      	mov	fp, r1
 800e8ee:	e770      	b.n	800e7d2 <_strtod_l+0xa62>
 800e8f0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800e8f4:	e7e0      	b.n	800e8b8 <_strtod_l+0xb48>
 800e8f6:	a30e      	add	r3, pc, #56	@ (adr r3, 800e930 <_strtod_l+0xbc0>)
 800e8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8fc:	f7f2 f8f6 	bl	8000aec <__aeabi_dcmplt>
 800e900:	e798      	b.n	800e834 <_strtod_l+0xac4>
 800e902:	2300      	movs	r3, #0
 800e904:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e906:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e908:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e90a:	6013      	str	r3, [r2, #0]
 800e90c:	f7ff ba6d 	b.w	800ddea <_strtod_l+0x7a>
 800e910:	2a65      	cmp	r2, #101	@ 0x65
 800e912:	f43f ab66 	beq.w	800dfe2 <_strtod_l+0x272>
 800e916:	2a45      	cmp	r2, #69	@ 0x45
 800e918:	f43f ab63 	beq.w	800dfe2 <_strtod_l+0x272>
 800e91c:	2301      	movs	r3, #1
 800e91e:	f7ff bb9e 	b.w	800e05e <_strtod_l+0x2ee>
 800e922:	bf00      	nop
 800e924:	f3af 8000 	nop.w
 800e928:	ffc00000 	.word	0xffc00000
 800e92c:	41dfffff 	.word	0x41dfffff
 800e930:	94a03595 	.word	0x94a03595
 800e934:	3fcfffff 	.word	0x3fcfffff

0800e938 <_strtod_r>:
 800e938:	4b01      	ldr	r3, [pc, #4]	@ (800e940 <_strtod_r+0x8>)
 800e93a:	f7ff ba19 	b.w	800dd70 <_strtod_l>
 800e93e:	bf00      	nop
 800e940:	20000020 	.word	0x20000020

0800e944 <strtod>:
 800e944:	460a      	mov	r2, r1
 800e946:	4601      	mov	r1, r0
 800e948:	4802      	ldr	r0, [pc, #8]	@ (800e954 <strtod+0x10>)
 800e94a:	4b03      	ldr	r3, [pc, #12]	@ (800e958 <strtod+0x14>)
 800e94c:	6800      	ldr	r0, [r0, #0]
 800e94e:	f7ff ba0f 	b.w	800dd70 <_strtod_l>
 800e952:	bf00      	nop
 800e954:	2000018c 	.word	0x2000018c
 800e958:	20000020 	.word	0x20000020

0800e95c <__cvt>:
 800e95c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e960:	ec57 6b10 	vmov	r6, r7, d0
 800e964:	2f00      	cmp	r7, #0
 800e966:	460c      	mov	r4, r1
 800e968:	4619      	mov	r1, r3
 800e96a:	463b      	mov	r3, r7
 800e96c:	bfbb      	ittet	lt
 800e96e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e972:	461f      	movlt	r7, r3
 800e974:	2300      	movge	r3, #0
 800e976:	232d      	movlt	r3, #45	@ 0x2d
 800e978:	700b      	strb	r3, [r1, #0]
 800e97a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e97c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e980:	4691      	mov	r9, r2
 800e982:	f023 0820 	bic.w	r8, r3, #32
 800e986:	bfbc      	itt	lt
 800e988:	4632      	movlt	r2, r6
 800e98a:	4616      	movlt	r6, r2
 800e98c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e990:	d005      	beq.n	800e99e <__cvt+0x42>
 800e992:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e996:	d100      	bne.n	800e99a <__cvt+0x3e>
 800e998:	3401      	adds	r4, #1
 800e99a:	2102      	movs	r1, #2
 800e99c:	e000      	b.n	800e9a0 <__cvt+0x44>
 800e99e:	2103      	movs	r1, #3
 800e9a0:	ab03      	add	r3, sp, #12
 800e9a2:	9301      	str	r3, [sp, #4]
 800e9a4:	ab02      	add	r3, sp, #8
 800e9a6:	9300      	str	r3, [sp, #0]
 800e9a8:	ec47 6b10 	vmov	d0, r6, r7
 800e9ac:	4653      	mov	r3, sl
 800e9ae:	4622      	mov	r2, r4
 800e9b0:	f001 f97e 	bl	800fcb0 <_dtoa_r>
 800e9b4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e9b8:	4605      	mov	r5, r0
 800e9ba:	d119      	bne.n	800e9f0 <__cvt+0x94>
 800e9bc:	f019 0f01 	tst.w	r9, #1
 800e9c0:	d00e      	beq.n	800e9e0 <__cvt+0x84>
 800e9c2:	eb00 0904 	add.w	r9, r0, r4
 800e9c6:	2200      	movs	r2, #0
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	4630      	mov	r0, r6
 800e9cc:	4639      	mov	r1, r7
 800e9ce:	f7f2 f883 	bl	8000ad8 <__aeabi_dcmpeq>
 800e9d2:	b108      	cbz	r0, 800e9d8 <__cvt+0x7c>
 800e9d4:	f8cd 900c 	str.w	r9, [sp, #12]
 800e9d8:	2230      	movs	r2, #48	@ 0x30
 800e9da:	9b03      	ldr	r3, [sp, #12]
 800e9dc:	454b      	cmp	r3, r9
 800e9de:	d31e      	bcc.n	800ea1e <__cvt+0xc2>
 800e9e0:	9b03      	ldr	r3, [sp, #12]
 800e9e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e9e4:	1b5b      	subs	r3, r3, r5
 800e9e6:	4628      	mov	r0, r5
 800e9e8:	6013      	str	r3, [r2, #0]
 800e9ea:	b004      	add	sp, #16
 800e9ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9f0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e9f4:	eb00 0904 	add.w	r9, r0, r4
 800e9f8:	d1e5      	bne.n	800e9c6 <__cvt+0x6a>
 800e9fa:	7803      	ldrb	r3, [r0, #0]
 800e9fc:	2b30      	cmp	r3, #48	@ 0x30
 800e9fe:	d10a      	bne.n	800ea16 <__cvt+0xba>
 800ea00:	2200      	movs	r2, #0
 800ea02:	2300      	movs	r3, #0
 800ea04:	4630      	mov	r0, r6
 800ea06:	4639      	mov	r1, r7
 800ea08:	f7f2 f866 	bl	8000ad8 <__aeabi_dcmpeq>
 800ea0c:	b918      	cbnz	r0, 800ea16 <__cvt+0xba>
 800ea0e:	f1c4 0401 	rsb	r4, r4, #1
 800ea12:	f8ca 4000 	str.w	r4, [sl]
 800ea16:	f8da 3000 	ldr.w	r3, [sl]
 800ea1a:	4499      	add	r9, r3
 800ea1c:	e7d3      	b.n	800e9c6 <__cvt+0x6a>
 800ea1e:	1c59      	adds	r1, r3, #1
 800ea20:	9103      	str	r1, [sp, #12]
 800ea22:	701a      	strb	r2, [r3, #0]
 800ea24:	e7d9      	b.n	800e9da <__cvt+0x7e>

0800ea26 <__exponent>:
 800ea26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ea28:	2900      	cmp	r1, #0
 800ea2a:	bfba      	itte	lt
 800ea2c:	4249      	neglt	r1, r1
 800ea2e:	232d      	movlt	r3, #45	@ 0x2d
 800ea30:	232b      	movge	r3, #43	@ 0x2b
 800ea32:	2909      	cmp	r1, #9
 800ea34:	7002      	strb	r2, [r0, #0]
 800ea36:	7043      	strb	r3, [r0, #1]
 800ea38:	dd29      	ble.n	800ea8e <__exponent+0x68>
 800ea3a:	f10d 0307 	add.w	r3, sp, #7
 800ea3e:	461d      	mov	r5, r3
 800ea40:	270a      	movs	r7, #10
 800ea42:	461a      	mov	r2, r3
 800ea44:	fbb1 f6f7 	udiv	r6, r1, r7
 800ea48:	fb07 1416 	mls	r4, r7, r6, r1
 800ea4c:	3430      	adds	r4, #48	@ 0x30
 800ea4e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ea52:	460c      	mov	r4, r1
 800ea54:	2c63      	cmp	r4, #99	@ 0x63
 800ea56:	f103 33ff 	add.w	r3, r3, #4294967295
 800ea5a:	4631      	mov	r1, r6
 800ea5c:	dcf1      	bgt.n	800ea42 <__exponent+0x1c>
 800ea5e:	3130      	adds	r1, #48	@ 0x30
 800ea60:	1e94      	subs	r4, r2, #2
 800ea62:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ea66:	1c41      	adds	r1, r0, #1
 800ea68:	4623      	mov	r3, r4
 800ea6a:	42ab      	cmp	r3, r5
 800ea6c:	d30a      	bcc.n	800ea84 <__exponent+0x5e>
 800ea6e:	f10d 0309 	add.w	r3, sp, #9
 800ea72:	1a9b      	subs	r3, r3, r2
 800ea74:	42ac      	cmp	r4, r5
 800ea76:	bf88      	it	hi
 800ea78:	2300      	movhi	r3, #0
 800ea7a:	3302      	adds	r3, #2
 800ea7c:	4403      	add	r3, r0
 800ea7e:	1a18      	subs	r0, r3, r0
 800ea80:	b003      	add	sp, #12
 800ea82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea84:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ea88:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ea8c:	e7ed      	b.n	800ea6a <__exponent+0x44>
 800ea8e:	2330      	movs	r3, #48	@ 0x30
 800ea90:	3130      	adds	r1, #48	@ 0x30
 800ea92:	7083      	strb	r3, [r0, #2]
 800ea94:	70c1      	strb	r1, [r0, #3]
 800ea96:	1d03      	adds	r3, r0, #4
 800ea98:	e7f1      	b.n	800ea7e <__exponent+0x58>
	...

0800ea9c <_printf_float>:
 800ea9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaa0:	b08d      	sub	sp, #52	@ 0x34
 800eaa2:	460c      	mov	r4, r1
 800eaa4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800eaa8:	4616      	mov	r6, r2
 800eaaa:	461f      	mov	r7, r3
 800eaac:	4605      	mov	r5, r0
 800eaae:	f000 ffe1 	bl	800fa74 <_localeconv_r>
 800eab2:	6803      	ldr	r3, [r0, #0]
 800eab4:	9304      	str	r3, [sp, #16]
 800eab6:	4618      	mov	r0, r3
 800eab8:	f7f1 fbe2 	bl	8000280 <strlen>
 800eabc:	2300      	movs	r3, #0
 800eabe:	930a      	str	r3, [sp, #40]	@ 0x28
 800eac0:	f8d8 3000 	ldr.w	r3, [r8]
 800eac4:	9005      	str	r0, [sp, #20]
 800eac6:	3307      	adds	r3, #7
 800eac8:	f023 0307 	bic.w	r3, r3, #7
 800eacc:	f103 0208 	add.w	r2, r3, #8
 800ead0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ead4:	f8d4 b000 	ldr.w	fp, [r4]
 800ead8:	f8c8 2000 	str.w	r2, [r8]
 800eadc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800eae0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800eae4:	9307      	str	r3, [sp, #28]
 800eae6:	f8cd 8018 	str.w	r8, [sp, #24]
 800eaea:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800eaee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eaf2:	4b9c      	ldr	r3, [pc, #624]	@ (800ed64 <_printf_float+0x2c8>)
 800eaf4:	f04f 32ff 	mov.w	r2, #4294967295
 800eaf8:	f7f2 f820 	bl	8000b3c <__aeabi_dcmpun>
 800eafc:	bb70      	cbnz	r0, 800eb5c <_printf_float+0xc0>
 800eafe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eb02:	4b98      	ldr	r3, [pc, #608]	@ (800ed64 <_printf_float+0x2c8>)
 800eb04:	f04f 32ff 	mov.w	r2, #4294967295
 800eb08:	f7f1 fffa 	bl	8000b00 <__aeabi_dcmple>
 800eb0c:	bb30      	cbnz	r0, 800eb5c <_printf_float+0xc0>
 800eb0e:	2200      	movs	r2, #0
 800eb10:	2300      	movs	r3, #0
 800eb12:	4640      	mov	r0, r8
 800eb14:	4649      	mov	r1, r9
 800eb16:	f7f1 ffe9 	bl	8000aec <__aeabi_dcmplt>
 800eb1a:	b110      	cbz	r0, 800eb22 <_printf_float+0x86>
 800eb1c:	232d      	movs	r3, #45	@ 0x2d
 800eb1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eb22:	4a91      	ldr	r2, [pc, #580]	@ (800ed68 <_printf_float+0x2cc>)
 800eb24:	4b91      	ldr	r3, [pc, #580]	@ (800ed6c <_printf_float+0x2d0>)
 800eb26:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800eb2a:	bf94      	ite	ls
 800eb2c:	4690      	movls	r8, r2
 800eb2e:	4698      	movhi	r8, r3
 800eb30:	2303      	movs	r3, #3
 800eb32:	6123      	str	r3, [r4, #16]
 800eb34:	f02b 0304 	bic.w	r3, fp, #4
 800eb38:	6023      	str	r3, [r4, #0]
 800eb3a:	f04f 0900 	mov.w	r9, #0
 800eb3e:	9700      	str	r7, [sp, #0]
 800eb40:	4633      	mov	r3, r6
 800eb42:	aa0b      	add	r2, sp, #44	@ 0x2c
 800eb44:	4621      	mov	r1, r4
 800eb46:	4628      	mov	r0, r5
 800eb48:	f000 f9d2 	bl	800eef0 <_printf_common>
 800eb4c:	3001      	adds	r0, #1
 800eb4e:	f040 808d 	bne.w	800ec6c <_printf_float+0x1d0>
 800eb52:	f04f 30ff 	mov.w	r0, #4294967295
 800eb56:	b00d      	add	sp, #52	@ 0x34
 800eb58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb5c:	4642      	mov	r2, r8
 800eb5e:	464b      	mov	r3, r9
 800eb60:	4640      	mov	r0, r8
 800eb62:	4649      	mov	r1, r9
 800eb64:	f7f1 ffea 	bl	8000b3c <__aeabi_dcmpun>
 800eb68:	b140      	cbz	r0, 800eb7c <_printf_float+0xe0>
 800eb6a:	464b      	mov	r3, r9
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	bfbc      	itt	lt
 800eb70:	232d      	movlt	r3, #45	@ 0x2d
 800eb72:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800eb76:	4a7e      	ldr	r2, [pc, #504]	@ (800ed70 <_printf_float+0x2d4>)
 800eb78:	4b7e      	ldr	r3, [pc, #504]	@ (800ed74 <_printf_float+0x2d8>)
 800eb7a:	e7d4      	b.n	800eb26 <_printf_float+0x8a>
 800eb7c:	6863      	ldr	r3, [r4, #4]
 800eb7e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800eb82:	9206      	str	r2, [sp, #24]
 800eb84:	1c5a      	adds	r2, r3, #1
 800eb86:	d13b      	bne.n	800ec00 <_printf_float+0x164>
 800eb88:	2306      	movs	r3, #6
 800eb8a:	6063      	str	r3, [r4, #4]
 800eb8c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800eb90:	2300      	movs	r3, #0
 800eb92:	6022      	str	r2, [r4, #0]
 800eb94:	9303      	str	r3, [sp, #12]
 800eb96:	ab0a      	add	r3, sp, #40	@ 0x28
 800eb98:	e9cd a301 	strd	sl, r3, [sp, #4]
 800eb9c:	ab09      	add	r3, sp, #36	@ 0x24
 800eb9e:	9300      	str	r3, [sp, #0]
 800eba0:	6861      	ldr	r1, [r4, #4]
 800eba2:	ec49 8b10 	vmov	d0, r8, r9
 800eba6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ebaa:	4628      	mov	r0, r5
 800ebac:	f7ff fed6 	bl	800e95c <__cvt>
 800ebb0:	9b06      	ldr	r3, [sp, #24]
 800ebb2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ebb4:	2b47      	cmp	r3, #71	@ 0x47
 800ebb6:	4680      	mov	r8, r0
 800ebb8:	d129      	bne.n	800ec0e <_printf_float+0x172>
 800ebba:	1cc8      	adds	r0, r1, #3
 800ebbc:	db02      	blt.n	800ebc4 <_printf_float+0x128>
 800ebbe:	6863      	ldr	r3, [r4, #4]
 800ebc0:	4299      	cmp	r1, r3
 800ebc2:	dd41      	ble.n	800ec48 <_printf_float+0x1ac>
 800ebc4:	f1aa 0a02 	sub.w	sl, sl, #2
 800ebc8:	fa5f fa8a 	uxtb.w	sl, sl
 800ebcc:	3901      	subs	r1, #1
 800ebce:	4652      	mov	r2, sl
 800ebd0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ebd4:	9109      	str	r1, [sp, #36]	@ 0x24
 800ebd6:	f7ff ff26 	bl	800ea26 <__exponent>
 800ebda:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ebdc:	1813      	adds	r3, r2, r0
 800ebde:	2a01      	cmp	r2, #1
 800ebe0:	4681      	mov	r9, r0
 800ebe2:	6123      	str	r3, [r4, #16]
 800ebe4:	dc02      	bgt.n	800ebec <_printf_float+0x150>
 800ebe6:	6822      	ldr	r2, [r4, #0]
 800ebe8:	07d2      	lsls	r2, r2, #31
 800ebea:	d501      	bpl.n	800ebf0 <_printf_float+0x154>
 800ebec:	3301      	adds	r3, #1
 800ebee:	6123      	str	r3, [r4, #16]
 800ebf0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d0a2      	beq.n	800eb3e <_printf_float+0xa2>
 800ebf8:	232d      	movs	r3, #45	@ 0x2d
 800ebfa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ebfe:	e79e      	b.n	800eb3e <_printf_float+0xa2>
 800ec00:	9a06      	ldr	r2, [sp, #24]
 800ec02:	2a47      	cmp	r2, #71	@ 0x47
 800ec04:	d1c2      	bne.n	800eb8c <_printf_float+0xf0>
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d1c0      	bne.n	800eb8c <_printf_float+0xf0>
 800ec0a:	2301      	movs	r3, #1
 800ec0c:	e7bd      	b.n	800eb8a <_printf_float+0xee>
 800ec0e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ec12:	d9db      	bls.n	800ebcc <_printf_float+0x130>
 800ec14:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ec18:	d118      	bne.n	800ec4c <_printf_float+0x1b0>
 800ec1a:	2900      	cmp	r1, #0
 800ec1c:	6863      	ldr	r3, [r4, #4]
 800ec1e:	dd0b      	ble.n	800ec38 <_printf_float+0x19c>
 800ec20:	6121      	str	r1, [r4, #16]
 800ec22:	b913      	cbnz	r3, 800ec2a <_printf_float+0x18e>
 800ec24:	6822      	ldr	r2, [r4, #0]
 800ec26:	07d0      	lsls	r0, r2, #31
 800ec28:	d502      	bpl.n	800ec30 <_printf_float+0x194>
 800ec2a:	3301      	adds	r3, #1
 800ec2c:	440b      	add	r3, r1
 800ec2e:	6123      	str	r3, [r4, #16]
 800ec30:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ec32:	f04f 0900 	mov.w	r9, #0
 800ec36:	e7db      	b.n	800ebf0 <_printf_float+0x154>
 800ec38:	b913      	cbnz	r3, 800ec40 <_printf_float+0x1a4>
 800ec3a:	6822      	ldr	r2, [r4, #0]
 800ec3c:	07d2      	lsls	r2, r2, #31
 800ec3e:	d501      	bpl.n	800ec44 <_printf_float+0x1a8>
 800ec40:	3302      	adds	r3, #2
 800ec42:	e7f4      	b.n	800ec2e <_printf_float+0x192>
 800ec44:	2301      	movs	r3, #1
 800ec46:	e7f2      	b.n	800ec2e <_printf_float+0x192>
 800ec48:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ec4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ec4e:	4299      	cmp	r1, r3
 800ec50:	db05      	blt.n	800ec5e <_printf_float+0x1c2>
 800ec52:	6823      	ldr	r3, [r4, #0]
 800ec54:	6121      	str	r1, [r4, #16]
 800ec56:	07d8      	lsls	r0, r3, #31
 800ec58:	d5ea      	bpl.n	800ec30 <_printf_float+0x194>
 800ec5a:	1c4b      	adds	r3, r1, #1
 800ec5c:	e7e7      	b.n	800ec2e <_printf_float+0x192>
 800ec5e:	2900      	cmp	r1, #0
 800ec60:	bfd4      	ite	le
 800ec62:	f1c1 0202 	rsble	r2, r1, #2
 800ec66:	2201      	movgt	r2, #1
 800ec68:	4413      	add	r3, r2
 800ec6a:	e7e0      	b.n	800ec2e <_printf_float+0x192>
 800ec6c:	6823      	ldr	r3, [r4, #0]
 800ec6e:	055a      	lsls	r2, r3, #21
 800ec70:	d407      	bmi.n	800ec82 <_printf_float+0x1e6>
 800ec72:	6923      	ldr	r3, [r4, #16]
 800ec74:	4642      	mov	r2, r8
 800ec76:	4631      	mov	r1, r6
 800ec78:	4628      	mov	r0, r5
 800ec7a:	47b8      	blx	r7
 800ec7c:	3001      	adds	r0, #1
 800ec7e:	d12b      	bne.n	800ecd8 <_printf_float+0x23c>
 800ec80:	e767      	b.n	800eb52 <_printf_float+0xb6>
 800ec82:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ec86:	f240 80dd 	bls.w	800ee44 <_printf_float+0x3a8>
 800ec8a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ec8e:	2200      	movs	r2, #0
 800ec90:	2300      	movs	r3, #0
 800ec92:	f7f1 ff21 	bl	8000ad8 <__aeabi_dcmpeq>
 800ec96:	2800      	cmp	r0, #0
 800ec98:	d033      	beq.n	800ed02 <_printf_float+0x266>
 800ec9a:	4a37      	ldr	r2, [pc, #220]	@ (800ed78 <_printf_float+0x2dc>)
 800ec9c:	2301      	movs	r3, #1
 800ec9e:	4631      	mov	r1, r6
 800eca0:	4628      	mov	r0, r5
 800eca2:	47b8      	blx	r7
 800eca4:	3001      	adds	r0, #1
 800eca6:	f43f af54 	beq.w	800eb52 <_printf_float+0xb6>
 800ecaa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ecae:	4543      	cmp	r3, r8
 800ecb0:	db02      	blt.n	800ecb8 <_printf_float+0x21c>
 800ecb2:	6823      	ldr	r3, [r4, #0]
 800ecb4:	07d8      	lsls	r0, r3, #31
 800ecb6:	d50f      	bpl.n	800ecd8 <_printf_float+0x23c>
 800ecb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ecbc:	4631      	mov	r1, r6
 800ecbe:	4628      	mov	r0, r5
 800ecc0:	47b8      	blx	r7
 800ecc2:	3001      	adds	r0, #1
 800ecc4:	f43f af45 	beq.w	800eb52 <_printf_float+0xb6>
 800ecc8:	f04f 0900 	mov.w	r9, #0
 800eccc:	f108 38ff 	add.w	r8, r8, #4294967295
 800ecd0:	f104 0a1a 	add.w	sl, r4, #26
 800ecd4:	45c8      	cmp	r8, r9
 800ecd6:	dc09      	bgt.n	800ecec <_printf_float+0x250>
 800ecd8:	6823      	ldr	r3, [r4, #0]
 800ecda:	079b      	lsls	r3, r3, #30
 800ecdc:	f100 8103 	bmi.w	800eee6 <_printf_float+0x44a>
 800ece0:	68e0      	ldr	r0, [r4, #12]
 800ece2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ece4:	4298      	cmp	r0, r3
 800ece6:	bfb8      	it	lt
 800ece8:	4618      	movlt	r0, r3
 800ecea:	e734      	b.n	800eb56 <_printf_float+0xba>
 800ecec:	2301      	movs	r3, #1
 800ecee:	4652      	mov	r2, sl
 800ecf0:	4631      	mov	r1, r6
 800ecf2:	4628      	mov	r0, r5
 800ecf4:	47b8      	blx	r7
 800ecf6:	3001      	adds	r0, #1
 800ecf8:	f43f af2b 	beq.w	800eb52 <_printf_float+0xb6>
 800ecfc:	f109 0901 	add.w	r9, r9, #1
 800ed00:	e7e8      	b.n	800ecd4 <_printf_float+0x238>
 800ed02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	dc39      	bgt.n	800ed7c <_printf_float+0x2e0>
 800ed08:	4a1b      	ldr	r2, [pc, #108]	@ (800ed78 <_printf_float+0x2dc>)
 800ed0a:	2301      	movs	r3, #1
 800ed0c:	4631      	mov	r1, r6
 800ed0e:	4628      	mov	r0, r5
 800ed10:	47b8      	blx	r7
 800ed12:	3001      	adds	r0, #1
 800ed14:	f43f af1d 	beq.w	800eb52 <_printf_float+0xb6>
 800ed18:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ed1c:	ea59 0303 	orrs.w	r3, r9, r3
 800ed20:	d102      	bne.n	800ed28 <_printf_float+0x28c>
 800ed22:	6823      	ldr	r3, [r4, #0]
 800ed24:	07d9      	lsls	r1, r3, #31
 800ed26:	d5d7      	bpl.n	800ecd8 <_printf_float+0x23c>
 800ed28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ed2c:	4631      	mov	r1, r6
 800ed2e:	4628      	mov	r0, r5
 800ed30:	47b8      	blx	r7
 800ed32:	3001      	adds	r0, #1
 800ed34:	f43f af0d 	beq.w	800eb52 <_printf_float+0xb6>
 800ed38:	f04f 0a00 	mov.w	sl, #0
 800ed3c:	f104 0b1a 	add.w	fp, r4, #26
 800ed40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed42:	425b      	negs	r3, r3
 800ed44:	4553      	cmp	r3, sl
 800ed46:	dc01      	bgt.n	800ed4c <_printf_float+0x2b0>
 800ed48:	464b      	mov	r3, r9
 800ed4a:	e793      	b.n	800ec74 <_printf_float+0x1d8>
 800ed4c:	2301      	movs	r3, #1
 800ed4e:	465a      	mov	r2, fp
 800ed50:	4631      	mov	r1, r6
 800ed52:	4628      	mov	r0, r5
 800ed54:	47b8      	blx	r7
 800ed56:	3001      	adds	r0, #1
 800ed58:	f43f aefb 	beq.w	800eb52 <_printf_float+0xb6>
 800ed5c:	f10a 0a01 	add.w	sl, sl, #1
 800ed60:	e7ee      	b.n	800ed40 <_printf_float+0x2a4>
 800ed62:	bf00      	nop
 800ed64:	7fefffff 	.word	0x7fefffff
 800ed68:	08014250 	.word	0x08014250
 800ed6c:	08014254 	.word	0x08014254
 800ed70:	08014258 	.word	0x08014258
 800ed74:	0801425c 	.word	0x0801425c
 800ed78:	08014600 	.word	0x08014600
 800ed7c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ed7e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ed82:	4553      	cmp	r3, sl
 800ed84:	bfa8      	it	ge
 800ed86:	4653      	movge	r3, sl
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	4699      	mov	r9, r3
 800ed8c:	dc36      	bgt.n	800edfc <_printf_float+0x360>
 800ed8e:	f04f 0b00 	mov.w	fp, #0
 800ed92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ed96:	f104 021a 	add.w	r2, r4, #26
 800ed9a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ed9c:	9306      	str	r3, [sp, #24]
 800ed9e:	eba3 0309 	sub.w	r3, r3, r9
 800eda2:	455b      	cmp	r3, fp
 800eda4:	dc31      	bgt.n	800ee0a <_printf_float+0x36e>
 800eda6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eda8:	459a      	cmp	sl, r3
 800edaa:	dc3a      	bgt.n	800ee22 <_printf_float+0x386>
 800edac:	6823      	ldr	r3, [r4, #0]
 800edae:	07da      	lsls	r2, r3, #31
 800edb0:	d437      	bmi.n	800ee22 <_printf_float+0x386>
 800edb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800edb4:	ebaa 0903 	sub.w	r9, sl, r3
 800edb8:	9b06      	ldr	r3, [sp, #24]
 800edba:	ebaa 0303 	sub.w	r3, sl, r3
 800edbe:	4599      	cmp	r9, r3
 800edc0:	bfa8      	it	ge
 800edc2:	4699      	movge	r9, r3
 800edc4:	f1b9 0f00 	cmp.w	r9, #0
 800edc8:	dc33      	bgt.n	800ee32 <_printf_float+0x396>
 800edca:	f04f 0800 	mov.w	r8, #0
 800edce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800edd2:	f104 0b1a 	add.w	fp, r4, #26
 800edd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800edd8:	ebaa 0303 	sub.w	r3, sl, r3
 800eddc:	eba3 0309 	sub.w	r3, r3, r9
 800ede0:	4543      	cmp	r3, r8
 800ede2:	f77f af79 	ble.w	800ecd8 <_printf_float+0x23c>
 800ede6:	2301      	movs	r3, #1
 800ede8:	465a      	mov	r2, fp
 800edea:	4631      	mov	r1, r6
 800edec:	4628      	mov	r0, r5
 800edee:	47b8      	blx	r7
 800edf0:	3001      	adds	r0, #1
 800edf2:	f43f aeae 	beq.w	800eb52 <_printf_float+0xb6>
 800edf6:	f108 0801 	add.w	r8, r8, #1
 800edfa:	e7ec      	b.n	800edd6 <_printf_float+0x33a>
 800edfc:	4642      	mov	r2, r8
 800edfe:	4631      	mov	r1, r6
 800ee00:	4628      	mov	r0, r5
 800ee02:	47b8      	blx	r7
 800ee04:	3001      	adds	r0, #1
 800ee06:	d1c2      	bne.n	800ed8e <_printf_float+0x2f2>
 800ee08:	e6a3      	b.n	800eb52 <_printf_float+0xb6>
 800ee0a:	2301      	movs	r3, #1
 800ee0c:	4631      	mov	r1, r6
 800ee0e:	4628      	mov	r0, r5
 800ee10:	9206      	str	r2, [sp, #24]
 800ee12:	47b8      	blx	r7
 800ee14:	3001      	adds	r0, #1
 800ee16:	f43f ae9c 	beq.w	800eb52 <_printf_float+0xb6>
 800ee1a:	9a06      	ldr	r2, [sp, #24]
 800ee1c:	f10b 0b01 	add.w	fp, fp, #1
 800ee20:	e7bb      	b.n	800ed9a <_printf_float+0x2fe>
 800ee22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ee26:	4631      	mov	r1, r6
 800ee28:	4628      	mov	r0, r5
 800ee2a:	47b8      	blx	r7
 800ee2c:	3001      	adds	r0, #1
 800ee2e:	d1c0      	bne.n	800edb2 <_printf_float+0x316>
 800ee30:	e68f      	b.n	800eb52 <_printf_float+0xb6>
 800ee32:	9a06      	ldr	r2, [sp, #24]
 800ee34:	464b      	mov	r3, r9
 800ee36:	4442      	add	r2, r8
 800ee38:	4631      	mov	r1, r6
 800ee3a:	4628      	mov	r0, r5
 800ee3c:	47b8      	blx	r7
 800ee3e:	3001      	adds	r0, #1
 800ee40:	d1c3      	bne.n	800edca <_printf_float+0x32e>
 800ee42:	e686      	b.n	800eb52 <_printf_float+0xb6>
 800ee44:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ee48:	f1ba 0f01 	cmp.w	sl, #1
 800ee4c:	dc01      	bgt.n	800ee52 <_printf_float+0x3b6>
 800ee4e:	07db      	lsls	r3, r3, #31
 800ee50:	d536      	bpl.n	800eec0 <_printf_float+0x424>
 800ee52:	2301      	movs	r3, #1
 800ee54:	4642      	mov	r2, r8
 800ee56:	4631      	mov	r1, r6
 800ee58:	4628      	mov	r0, r5
 800ee5a:	47b8      	blx	r7
 800ee5c:	3001      	adds	r0, #1
 800ee5e:	f43f ae78 	beq.w	800eb52 <_printf_float+0xb6>
 800ee62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ee66:	4631      	mov	r1, r6
 800ee68:	4628      	mov	r0, r5
 800ee6a:	47b8      	blx	r7
 800ee6c:	3001      	adds	r0, #1
 800ee6e:	f43f ae70 	beq.w	800eb52 <_printf_float+0xb6>
 800ee72:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ee76:	2200      	movs	r2, #0
 800ee78:	2300      	movs	r3, #0
 800ee7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ee7e:	f7f1 fe2b 	bl	8000ad8 <__aeabi_dcmpeq>
 800ee82:	b9c0      	cbnz	r0, 800eeb6 <_printf_float+0x41a>
 800ee84:	4653      	mov	r3, sl
 800ee86:	f108 0201 	add.w	r2, r8, #1
 800ee8a:	4631      	mov	r1, r6
 800ee8c:	4628      	mov	r0, r5
 800ee8e:	47b8      	blx	r7
 800ee90:	3001      	adds	r0, #1
 800ee92:	d10c      	bne.n	800eeae <_printf_float+0x412>
 800ee94:	e65d      	b.n	800eb52 <_printf_float+0xb6>
 800ee96:	2301      	movs	r3, #1
 800ee98:	465a      	mov	r2, fp
 800ee9a:	4631      	mov	r1, r6
 800ee9c:	4628      	mov	r0, r5
 800ee9e:	47b8      	blx	r7
 800eea0:	3001      	adds	r0, #1
 800eea2:	f43f ae56 	beq.w	800eb52 <_printf_float+0xb6>
 800eea6:	f108 0801 	add.w	r8, r8, #1
 800eeaa:	45d0      	cmp	r8, sl
 800eeac:	dbf3      	blt.n	800ee96 <_printf_float+0x3fa>
 800eeae:	464b      	mov	r3, r9
 800eeb0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800eeb4:	e6df      	b.n	800ec76 <_printf_float+0x1da>
 800eeb6:	f04f 0800 	mov.w	r8, #0
 800eeba:	f104 0b1a 	add.w	fp, r4, #26
 800eebe:	e7f4      	b.n	800eeaa <_printf_float+0x40e>
 800eec0:	2301      	movs	r3, #1
 800eec2:	4642      	mov	r2, r8
 800eec4:	e7e1      	b.n	800ee8a <_printf_float+0x3ee>
 800eec6:	2301      	movs	r3, #1
 800eec8:	464a      	mov	r2, r9
 800eeca:	4631      	mov	r1, r6
 800eecc:	4628      	mov	r0, r5
 800eece:	47b8      	blx	r7
 800eed0:	3001      	adds	r0, #1
 800eed2:	f43f ae3e 	beq.w	800eb52 <_printf_float+0xb6>
 800eed6:	f108 0801 	add.w	r8, r8, #1
 800eeda:	68e3      	ldr	r3, [r4, #12]
 800eedc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800eede:	1a5b      	subs	r3, r3, r1
 800eee0:	4543      	cmp	r3, r8
 800eee2:	dcf0      	bgt.n	800eec6 <_printf_float+0x42a>
 800eee4:	e6fc      	b.n	800ece0 <_printf_float+0x244>
 800eee6:	f04f 0800 	mov.w	r8, #0
 800eeea:	f104 0919 	add.w	r9, r4, #25
 800eeee:	e7f4      	b.n	800eeda <_printf_float+0x43e>

0800eef0 <_printf_common>:
 800eef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eef4:	4616      	mov	r6, r2
 800eef6:	4698      	mov	r8, r3
 800eef8:	688a      	ldr	r2, [r1, #8]
 800eefa:	690b      	ldr	r3, [r1, #16]
 800eefc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ef00:	4293      	cmp	r3, r2
 800ef02:	bfb8      	it	lt
 800ef04:	4613      	movlt	r3, r2
 800ef06:	6033      	str	r3, [r6, #0]
 800ef08:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ef0c:	4607      	mov	r7, r0
 800ef0e:	460c      	mov	r4, r1
 800ef10:	b10a      	cbz	r2, 800ef16 <_printf_common+0x26>
 800ef12:	3301      	adds	r3, #1
 800ef14:	6033      	str	r3, [r6, #0]
 800ef16:	6823      	ldr	r3, [r4, #0]
 800ef18:	0699      	lsls	r1, r3, #26
 800ef1a:	bf42      	ittt	mi
 800ef1c:	6833      	ldrmi	r3, [r6, #0]
 800ef1e:	3302      	addmi	r3, #2
 800ef20:	6033      	strmi	r3, [r6, #0]
 800ef22:	6825      	ldr	r5, [r4, #0]
 800ef24:	f015 0506 	ands.w	r5, r5, #6
 800ef28:	d106      	bne.n	800ef38 <_printf_common+0x48>
 800ef2a:	f104 0a19 	add.w	sl, r4, #25
 800ef2e:	68e3      	ldr	r3, [r4, #12]
 800ef30:	6832      	ldr	r2, [r6, #0]
 800ef32:	1a9b      	subs	r3, r3, r2
 800ef34:	42ab      	cmp	r3, r5
 800ef36:	dc26      	bgt.n	800ef86 <_printf_common+0x96>
 800ef38:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ef3c:	6822      	ldr	r2, [r4, #0]
 800ef3e:	3b00      	subs	r3, #0
 800ef40:	bf18      	it	ne
 800ef42:	2301      	movne	r3, #1
 800ef44:	0692      	lsls	r2, r2, #26
 800ef46:	d42b      	bmi.n	800efa0 <_printf_common+0xb0>
 800ef48:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ef4c:	4641      	mov	r1, r8
 800ef4e:	4638      	mov	r0, r7
 800ef50:	47c8      	blx	r9
 800ef52:	3001      	adds	r0, #1
 800ef54:	d01e      	beq.n	800ef94 <_printf_common+0xa4>
 800ef56:	6823      	ldr	r3, [r4, #0]
 800ef58:	6922      	ldr	r2, [r4, #16]
 800ef5a:	f003 0306 	and.w	r3, r3, #6
 800ef5e:	2b04      	cmp	r3, #4
 800ef60:	bf02      	ittt	eq
 800ef62:	68e5      	ldreq	r5, [r4, #12]
 800ef64:	6833      	ldreq	r3, [r6, #0]
 800ef66:	1aed      	subeq	r5, r5, r3
 800ef68:	68a3      	ldr	r3, [r4, #8]
 800ef6a:	bf0c      	ite	eq
 800ef6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ef70:	2500      	movne	r5, #0
 800ef72:	4293      	cmp	r3, r2
 800ef74:	bfc4      	itt	gt
 800ef76:	1a9b      	subgt	r3, r3, r2
 800ef78:	18ed      	addgt	r5, r5, r3
 800ef7a:	2600      	movs	r6, #0
 800ef7c:	341a      	adds	r4, #26
 800ef7e:	42b5      	cmp	r5, r6
 800ef80:	d11a      	bne.n	800efb8 <_printf_common+0xc8>
 800ef82:	2000      	movs	r0, #0
 800ef84:	e008      	b.n	800ef98 <_printf_common+0xa8>
 800ef86:	2301      	movs	r3, #1
 800ef88:	4652      	mov	r2, sl
 800ef8a:	4641      	mov	r1, r8
 800ef8c:	4638      	mov	r0, r7
 800ef8e:	47c8      	blx	r9
 800ef90:	3001      	adds	r0, #1
 800ef92:	d103      	bne.n	800ef9c <_printf_common+0xac>
 800ef94:	f04f 30ff 	mov.w	r0, #4294967295
 800ef98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef9c:	3501      	adds	r5, #1
 800ef9e:	e7c6      	b.n	800ef2e <_printf_common+0x3e>
 800efa0:	18e1      	adds	r1, r4, r3
 800efa2:	1c5a      	adds	r2, r3, #1
 800efa4:	2030      	movs	r0, #48	@ 0x30
 800efa6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800efaa:	4422      	add	r2, r4
 800efac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800efb0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800efb4:	3302      	adds	r3, #2
 800efb6:	e7c7      	b.n	800ef48 <_printf_common+0x58>
 800efb8:	2301      	movs	r3, #1
 800efba:	4622      	mov	r2, r4
 800efbc:	4641      	mov	r1, r8
 800efbe:	4638      	mov	r0, r7
 800efc0:	47c8      	blx	r9
 800efc2:	3001      	adds	r0, #1
 800efc4:	d0e6      	beq.n	800ef94 <_printf_common+0xa4>
 800efc6:	3601      	adds	r6, #1
 800efc8:	e7d9      	b.n	800ef7e <_printf_common+0x8e>
	...

0800efcc <_printf_i>:
 800efcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800efd0:	7e0f      	ldrb	r7, [r1, #24]
 800efd2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800efd4:	2f78      	cmp	r7, #120	@ 0x78
 800efd6:	4691      	mov	r9, r2
 800efd8:	4680      	mov	r8, r0
 800efda:	460c      	mov	r4, r1
 800efdc:	469a      	mov	sl, r3
 800efde:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800efe2:	d807      	bhi.n	800eff4 <_printf_i+0x28>
 800efe4:	2f62      	cmp	r7, #98	@ 0x62
 800efe6:	d80a      	bhi.n	800effe <_printf_i+0x32>
 800efe8:	2f00      	cmp	r7, #0
 800efea:	f000 80d2 	beq.w	800f192 <_printf_i+0x1c6>
 800efee:	2f58      	cmp	r7, #88	@ 0x58
 800eff0:	f000 80b9 	beq.w	800f166 <_printf_i+0x19a>
 800eff4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800eff8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800effc:	e03a      	b.n	800f074 <_printf_i+0xa8>
 800effe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f002:	2b15      	cmp	r3, #21
 800f004:	d8f6      	bhi.n	800eff4 <_printf_i+0x28>
 800f006:	a101      	add	r1, pc, #4	@ (adr r1, 800f00c <_printf_i+0x40>)
 800f008:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f00c:	0800f065 	.word	0x0800f065
 800f010:	0800f079 	.word	0x0800f079
 800f014:	0800eff5 	.word	0x0800eff5
 800f018:	0800eff5 	.word	0x0800eff5
 800f01c:	0800eff5 	.word	0x0800eff5
 800f020:	0800eff5 	.word	0x0800eff5
 800f024:	0800f079 	.word	0x0800f079
 800f028:	0800eff5 	.word	0x0800eff5
 800f02c:	0800eff5 	.word	0x0800eff5
 800f030:	0800eff5 	.word	0x0800eff5
 800f034:	0800eff5 	.word	0x0800eff5
 800f038:	0800f179 	.word	0x0800f179
 800f03c:	0800f0a3 	.word	0x0800f0a3
 800f040:	0800f133 	.word	0x0800f133
 800f044:	0800eff5 	.word	0x0800eff5
 800f048:	0800eff5 	.word	0x0800eff5
 800f04c:	0800f19b 	.word	0x0800f19b
 800f050:	0800eff5 	.word	0x0800eff5
 800f054:	0800f0a3 	.word	0x0800f0a3
 800f058:	0800eff5 	.word	0x0800eff5
 800f05c:	0800eff5 	.word	0x0800eff5
 800f060:	0800f13b 	.word	0x0800f13b
 800f064:	6833      	ldr	r3, [r6, #0]
 800f066:	1d1a      	adds	r2, r3, #4
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	6032      	str	r2, [r6, #0]
 800f06c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f070:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f074:	2301      	movs	r3, #1
 800f076:	e09d      	b.n	800f1b4 <_printf_i+0x1e8>
 800f078:	6833      	ldr	r3, [r6, #0]
 800f07a:	6820      	ldr	r0, [r4, #0]
 800f07c:	1d19      	adds	r1, r3, #4
 800f07e:	6031      	str	r1, [r6, #0]
 800f080:	0606      	lsls	r6, r0, #24
 800f082:	d501      	bpl.n	800f088 <_printf_i+0xbc>
 800f084:	681d      	ldr	r5, [r3, #0]
 800f086:	e003      	b.n	800f090 <_printf_i+0xc4>
 800f088:	0645      	lsls	r5, r0, #25
 800f08a:	d5fb      	bpl.n	800f084 <_printf_i+0xb8>
 800f08c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f090:	2d00      	cmp	r5, #0
 800f092:	da03      	bge.n	800f09c <_printf_i+0xd0>
 800f094:	232d      	movs	r3, #45	@ 0x2d
 800f096:	426d      	negs	r5, r5
 800f098:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f09c:	4859      	ldr	r0, [pc, #356]	@ (800f204 <_printf_i+0x238>)
 800f09e:	230a      	movs	r3, #10
 800f0a0:	e011      	b.n	800f0c6 <_printf_i+0xfa>
 800f0a2:	6821      	ldr	r1, [r4, #0]
 800f0a4:	6833      	ldr	r3, [r6, #0]
 800f0a6:	0608      	lsls	r0, r1, #24
 800f0a8:	f853 5b04 	ldr.w	r5, [r3], #4
 800f0ac:	d402      	bmi.n	800f0b4 <_printf_i+0xe8>
 800f0ae:	0649      	lsls	r1, r1, #25
 800f0b0:	bf48      	it	mi
 800f0b2:	b2ad      	uxthmi	r5, r5
 800f0b4:	2f6f      	cmp	r7, #111	@ 0x6f
 800f0b6:	4853      	ldr	r0, [pc, #332]	@ (800f204 <_printf_i+0x238>)
 800f0b8:	6033      	str	r3, [r6, #0]
 800f0ba:	bf14      	ite	ne
 800f0bc:	230a      	movne	r3, #10
 800f0be:	2308      	moveq	r3, #8
 800f0c0:	2100      	movs	r1, #0
 800f0c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f0c6:	6866      	ldr	r6, [r4, #4]
 800f0c8:	60a6      	str	r6, [r4, #8]
 800f0ca:	2e00      	cmp	r6, #0
 800f0cc:	bfa2      	ittt	ge
 800f0ce:	6821      	ldrge	r1, [r4, #0]
 800f0d0:	f021 0104 	bicge.w	r1, r1, #4
 800f0d4:	6021      	strge	r1, [r4, #0]
 800f0d6:	b90d      	cbnz	r5, 800f0dc <_printf_i+0x110>
 800f0d8:	2e00      	cmp	r6, #0
 800f0da:	d04b      	beq.n	800f174 <_printf_i+0x1a8>
 800f0dc:	4616      	mov	r6, r2
 800f0de:	fbb5 f1f3 	udiv	r1, r5, r3
 800f0e2:	fb03 5711 	mls	r7, r3, r1, r5
 800f0e6:	5dc7      	ldrb	r7, [r0, r7]
 800f0e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f0ec:	462f      	mov	r7, r5
 800f0ee:	42bb      	cmp	r3, r7
 800f0f0:	460d      	mov	r5, r1
 800f0f2:	d9f4      	bls.n	800f0de <_printf_i+0x112>
 800f0f4:	2b08      	cmp	r3, #8
 800f0f6:	d10b      	bne.n	800f110 <_printf_i+0x144>
 800f0f8:	6823      	ldr	r3, [r4, #0]
 800f0fa:	07df      	lsls	r7, r3, #31
 800f0fc:	d508      	bpl.n	800f110 <_printf_i+0x144>
 800f0fe:	6923      	ldr	r3, [r4, #16]
 800f100:	6861      	ldr	r1, [r4, #4]
 800f102:	4299      	cmp	r1, r3
 800f104:	bfde      	ittt	le
 800f106:	2330      	movle	r3, #48	@ 0x30
 800f108:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f10c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f110:	1b92      	subs	r2, r2, r6
 800f112:	6122      	str	r2, [r4, #16]
 800f114:	f8cd a000 	str.w	sl, [sp]
 800f118:	464b      	mov	r3, r9
 800f11a:	aa03      	add	r2, sp, #12
 800f11c:	4621      	mov	r1, r4
 800f11e:	4640      	mov	r0, r8
 800f120:	f7ff fee6 	bl	800eef0 <_printf_common>
 800f124:	3001      	adds	r0, #1
 800f126:	d14a      	bne.n	800f1be <_printf_i+0x1f2>
 800f128:	f04f 30ff 	mov.w	r0, #4294967295
 800f12c:	b004      	add	sp, #16
 800f12e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f132:	6823      	ldr	r3, [r4, #0]
 800f134:	f043 0320 	orr.w	r3, r3, #32
 800f138:	6023      	str	r3, [r4, #0]
 800f13a:	4833      	ldr	r0, [pc, #204]	@ (800f208 <_printf_i+0x23c>)
 800f13c:	2778      	movs	r7, #120	@ 0x78
 800f13e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f142:	6823      	ldr	r3, [r4, #0]
 800f144:	6831      	ldr	r1, [r6, #0]
 800f146:	061f      	lsls	r7, r3, #24
 800f148:	f851 5b04 	ldr.w	r5, [r1], #4
 800f14c:	d402      	bmi.n	800f154 <_printf_i+0x188>
 800f14e:	065f      	lsls	r7, r3, #25
 800f150:	bf48      	it	mi
 800f152:	b2ad      	uxthmi	r5, r5
 800f154:	6031      	str	r1, [r6, #0]
 800f156:	07d9      	lsls	r1, r3, #31
 800f158:	bf44      	itt	mi
 800f15a:	f043 0320 	orrmi.w	r3, r3, #32
 800f15e:	6023      	strmi	r3, [r4, #0]
 800f160:	b11d      	cbz	r5, 800f16a <_printf_i+0x19e>
 800f162:	2310      	movs	r3, #16
 800f164:	e7ac      	b.n	800f0c0 <_printf_i+0xf4>
 800f166:	4827      	ldr	r0, [pc, #156]	@ (800f204 <_printf_i+0x238>)
 800f168:	e7e9      	b.n	800f13e <_printf_i+0x172>
 800f16a:	6823      	ldr	r3, [r4, #0]
 800f16c:	f023 0320 	bic.w	r3, r3, #32
 800f170:	6023      	str	r3, [r4, #0]
 800f172:	e7f6      	b.n	800f162 <_printf_i+0x196>
 800f174:	4616      	mov	r6, r2
 800f176:	e7bd      	b.n	800f0f4 <_printf_i+0x128>
 800f178:	6833      	ldr	r3, [r6, #0]
 800f17a:	6825      	ldr	r5, [r4, #0]
 800f17c:	6961      	ldr	r1, [r4, #20]
 800f17e:	1d18      	adds	r0, r3, #4
 800f180:	6030      	str	r0, [r6, #0]
 800f182:	062e      	lsls	r6, r5, #24
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	d501      	bpl.n	800f18c <_printf_i+0x1c0>
 800f188:	6019      	str	r1, [r3, #0]
 800f18a:	e002      	b.n	800f192 <_printf_i+0x1c6>
 800f18c:	0668      	lsls	r0, r5, #25
 800f18e:	d5fb      	bpl.n	800f188 <_printf_i+0x1bc>
 800f190:	8019      	strh	r1, [r3, #0]
 800f192:	2300      	movs	r3, #0
 800f194:	6123      	str	r3, [r4, #16]
 800f196:	4616      	mov	r6, r2
 800f198:	e7bc      	b.n	800f114 <_printf_i+0x148>
 800f19a:	6833      	ldr	r3, [r6, #0]
 800f19c:	1d1a      	adds	r2, r3, #4
 800f19e:	6032      	str	r2, [r6, #0]
 800f1a0:	681e      	ldr	r6, [r3, #0]
 800f1a2:	6862      	ldr	r2, [r4, #4]
 800f1a4:	2100      	movs	r1, #0
 800f1a6:	4630      	mov	r0, r6
 800f1a8:	f7f1 f81a 	bl	80001e0 <memchr>
 800f1ac:	b108      	cbz	r0, 800f1b2 <_printf_i+0x1e6>
 800f1ae:	1b80      	subs	r0, r0, r6
 800f1b0:	6060      	str	r0, [r4, #4]
 800f1b2:	6863      	ldr	r3, [r4, #4]
 800f1b4:	6123      	str	r3, [r4, #16]
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f1bc:	e7aa      	b.n	800f114 <_printf_i+0x148>
 800f1be:	6923      	ldr	r3, [r4, #16]
 800f1c0:	4632      	mov	r2, r6
 800f1c2:	4649      	mov	r1, r9
 800f1c4:	4640      	mov	r0, r8
 800f1c6:	47d0      	blx	sl
 800f1c8:	3001      	adds	r0, #1
 800f1ca:	d0ad      	beq.n	800f128 <_printf_i+0x15c>
 800f1cc:	6823      	ldr	r3, [r4, #0]
 800f1ce:	079b      	lsls	r3, r3, #30
 800f1d0:	d413      	bmi.n	800f1fa <_printf_i+0x22e>
 800f1d2:	68e0      	ldr	r0, [r4, #12]
 800f1d4:	9b03      	ldr	r3, [sp, #12]
 800f1d6:	4298      	cmp	r0, r3
 800f1d8:	bfb8      	it	lt
 800f1da:	4618      	movlt	r0, r3
 800f1dc:	e7a6      	b.n	800f12c <_printf_i+0x160>
 800f1de:	2301      	movs	r3, #1
 800f1e0:	4632      	mov	r2, r6
 800f1e2:	4649      	mov	r1, r9
 800f1e4:	4640      	mov	r0, r8
 800f1e6:	47d0      	blx	sl
 800f1e8:	3001      	adds	r0, #1
 800f1ea:	d09d      	beq.n	800f128 <_printf_i+0x15c>
 800f1ec:	3501      	adds	r5, #1
 800f1ee:	68e3      	ldr	r3, [r4, #12]
 800f1f0:	9903      	ldr	r1, [sp, #12]
 800f1f2:	1a5b      	subs	r3, r3, r1
 800f1f4:	42ab      	cmp	r3, r5
 800f1f6:	dcf2      	bgt.n	800f1de <_printf_i+0x212>
 800f1f8:	e7eb      	b.n	800f1d2 <_printf_i+0x206>
 800f1fa:	2500      	movs	r5, #0
 800f1fc:	f104 0619 	add.w	r6, r4, #25
 800f200:	e7f5      	b.n	800f1ee <_printf_i+0x222>
 800f202:	bf00      	nop
 800f204:	08014260 	.word	0x08014260
 800f208:	08014271 	.word	0x08014271

0800f20c <_scanf_float>:
 800f20c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f210:	b087      	sub	sp, #28
 800f212:	4617      	mov	r7, r2
 800f214:	9303      	str	r3, [sp, #12]
 800f216:	688b      	ldr	r3, [r1, #8]
 800f218:	1e5a      	subs	r2, r3, #1
 800f21a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800f21e:	bf81      	itttt	hi
 800f220:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f224:	eb03 0b05 	addhi.w	fp, r3, r5
 800f228:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f22c:	608b      	strhi	r3, [r1, #8]
 800f22e:	680b      	ldr	r3, [r1, #0]
 800f230:	460a      	mov	r2, r1
 800f232:	f04f 0500 	mov.w	r5, #0
 800f236:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800f23a:	f842 3b1c 	str.w	r3, [r2], #28
 800f23e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f242:	4680      	mov	r8, r0
 800f244:	460c      	mov	r4, r1
 800f246:	bf98      	it	ls
 800f248:	f04f 0b00 	movls.w	fp, #0
 800f24c:	9201      	str	r2, [sp, #4]
 800f24e:	4616      	mov	r6, r2
 800f250:	46aa      	mov	sl, r5
 800f252:	46a9      	mov	r9, r5
 800f254:	9502      	str	r5, [sp, #8]
 800f256:	68a2      	ldr	r2, [r4, #8]
 800f258:	b152      	cbz	r2, 800f270 <_scanf_float+0x64>
 800f25a:	683b      	ldr	r3, [r7, #0]
 800f25c:	781b      	ldrb	r3, [r3, #0]
 800f25e:	2b4e      	cmp	r3, #78	@ 0x4e
 800f260:	d864      	bhi.n	800f32c <_scanf_float+0x120>
 800f262:	2b40      	cmp	r3, #64	@ 0x40
 800f264:	d83c      	bhi.n	800f2e0 <_scanf_float+0xd4>
 800f266:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800f26a:	b2c8      	uxtb	r0, r1
 800f26c:	280e      	cmp	r0, #14
 800f26e:	d93a      	bls.n	800f2e6 <_scanf_float+0xda>
 800f270:	f1b9 0f00 	cmp.w	r9, #0
 800f274:	d003      	beq.n	800f27e <_scanf_float+0x72>
 800f276:	6823      	ldr	r3, [r4, #0]
 800f278:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f27c:	6023      	str	r3, [r4, #0]
 800f27e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f282:	f1ba 0f01 	cmp.w	sl, #1
 800f286:	f200 8117 	bhi.w	800f4b8 <_scanf_float+0x2ac>
 800f28a:	9b01      	ldr	r3, [sp, #4]
 800f28c:	429e      	cmp	r6, r3
 800f28e:	f200 8108 	bhi.w	800f4a2 <_scanf_float+0x296>
 800f292:	2001      	movs	r0, #1
 800f294:	b007      	add	sp, #28
 800f296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f29a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800f29e:	2a0d      	cmp	r2, #13
 800f2a0:	d8e6      	bhi.n	800f270 <_scanf_float+0x64>
 800f2a2:	a101      	add	r1, pc, #4	@ (adr r1, 800f2a8 <_scanf_float+0x9c>)
 800f2a4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f2a8:	0800f3ef 	.word	0x0800f3ef
 800f2ac:	0800f271 	.word	0x0800f271
 800f2b0:	0800f271 	.word	0x0800f271
 800f2b4:	0800f271 	.word	0x0800f271
 800f2b8:	0800f44f 	.word	0x0800f44f
 800f2bc:	0800f427 	.word	0x0800f427
 800f2c0:	0800f271 	.word	0x0800f271
 800f2c4:	0800f271 	.word	0x0800f271
 800f2c8:	0800f3fd 	.word	0x0800f3fd
 800f2cc:	0800f271 	.word	0x0800f271
 800f2d0:	0800f271 	.word	0x0800f271
 800f2d4:	0800f271 	.word	0x0800f271
 800f2d8:	0800f271 	.word	0x0800f271
 800f2dc:	0800f3b5 	.word	0x0800f3b5
 800f2e0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800f2e4:	e7db      	b.n	800f29e <_scanf_float+0x92>
 800f2e6:	290e      	cmp	r1, #14
 800f2e8:	d8c2      	bhi.n	800f270 <_scanf_float+0x64>
 800f2ea:	a001      	add	r0, pc, #4	@ (adr r0, 800f2f0 <_scanf_float+0xe4>)
 800f2ec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f2f0:	0800f3a5 	.word	0x0800f3a5
 800f2f4:	0800f271 	.word	0x0800f271
 800f2f8:	0800f3a5 	.word	0x0800f3a5
 800f2fc:	0800f43b 	.word	0x0800f43b
 800f300:	0800f271 	.word	0x0800f271
 800f304:	0800f34d 	.word	0x0800f34d
 800f308:	0800f38b 	.word	0x0800f38b
 800f30c:	0800f38b 	.word	0x0800f38b
 800f310:	0800f38b 	.word	0x0800f38b
 800f314:	0800f38b 	.word	0x0800f38b
 800f318:	0800f38b 	.word	0x0800f38b
 800f31c:	0800f38b 	.word	0x0800f38b
 800f320:	0800f38b 	.word	0x0800f38b
 800f324:	0800f38b 	.word	0x0800f38b
 800f328:	0800f38b 	.word	0x0800f38b
 800f32c:	2b6e      	cmp	r3, #110	@ 0x6e
 800f32e:	d809      	bhi.n	800f344 <_scanf_float+0x138>
 800f330:	2b60      	cmp	r3, #96	@ 0x60
 800f332:	d8b2      	bhi.n	800f29a <_scanf_float+0x8e>
 800f334:	2b54      	cmp	r3, #84	@ 0x54
 800f336:	d07b      	beq.n	800f430 <_scanf_float+0x224>
 800f338:	2b59      	cmp	r3, #89	@ 0x59
 800f33a:	d199      	bne.n	800f270 <_scanf_float+0x64>
 800f33c:	2d07      	cmp	r5, #7
 800f33e:	d197      	bne.n	800f270 <_scanf_float+0x64>
 800f340:	2508      	movs	r5, #8
 800f342:	e02c      	b.n	800f39e <_scanf_float+0x192>
 800f344:	2b74      	cmp	r3, #116	@ 0x74
 800f346:	d073      	beq.n	800f430 <_scanf_float+0x224>
 800f348:	2b79      	cmp	r3, #121	@ 0x79
 800f34a:	e7f6      	b.n	800f33a <_scanf_float+0x12e>
 800f34c:	6821      	ldr	r1, [r4, #0]
 800f34e:	05c8      	lsls	r0, r1, #23
 800f350:	d51b      	bpl.n	800f38a <_scanf_float+0x17e>
 800f352:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800f356:	6021      	str	r1, [r4, #0]
 800f358:	f109 0901 	add.w	r9, r9, #1
 800f35c:	f1bb 0f00 	cmp.w	fp, #0
 800f360:	d003      	beq.n	800f36a <_scanf_float+0x15e>
 800f362:	3201      	adds	r2, #1
 800f364:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f368:	60a2      	str	r2, [r4, #8]
 800f36a:	68a3      	ldr	r3, [r4, #8]
 800f36c:	3b01      	subs	r3, #1
 800f36e:	60a3      	str	r3, [r4, #8]
 800f370:	6923      	ldr	r3, [r4, #16]
 800f372:	3301      	adds	r3, #1
 800f374:	6123      	str	r3, [r4, #16]
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	3b01      	subs	r3, #1
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	607b      	str	r3, [r7, #4]
 800f37e:	f340 8087 	ble.w	800f490 <_scanf_float+0x284>
 800f382:	683b      	ldr	r3, [r7, #0]
 800f384:	3301      	adds	r3, #1
 800f386:	603b      	str	r3, [r7, #0]
 800f388:	e765      	b.n	800f256 <_scanf_float+0x4a>
 800f38a:	eb1a 0105 	adds.w	r1, sl, r5
 800f38e:	f47f af6f 	bne.w	800f270 <_scanf_float+0x64>
 800f392:	6822      	ldr	r2, [r4, #0]
 800f394:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800f398:	6022      	str	r2, [r4, #0]
 800f39a:	460d      	mov	r5, r1
 800f39c:	468a      	mov	sl, r1
 800f39e:	f806 3b01 	strb.w	r3, [r6], #1
 800f3a2:	e7e2      	b.n	800f36a <_scanf_float+0x15e>
 800f3a4:	6822      	ldr	r2, [r4, #0]
 800f3a6:	0610      	lsls	r0, r2, #24
 800f3a8:	f57f af62 	bpl.w	800f270 <_scanf_float+0x64>
 800f3ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800f3b0:	6022      	str	r2, [r4, #0]
 800f3b2:	e7f4      	b.n	800f39e <_scanf_float+0x192>
 800f3b4:	f1ba 0f00 	cmp.w	sl, #0
 800f3b8:	d10e      	bne.n	800f3d8 <_scanf_float+0x1cc>
 800f3ba:	f1b9 0f00 	cmp.w	r9, #0
 800f3be:	d10e      	bne.n	800f3de <_scanf_float+0x1d2>
 800f3c0:	6822      	ldr	r2, [r4, #0]
 800f3c2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f3c6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f3ca:	d108      	bne.n	800f3de <_scanf_float+0x1d2>
 800f3cc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f3d0:	6022      	str	r2, [r4, #0]
 800f3d2:	f04f 0a01 	mov.w	sl, #1
 800f3d6:	e7e2      	b.n	800f39e <_scanf_float+0x192>
 800f3d8:	f1ba 0f02 	cmp.w	sl, #2
 800f3dc:	d055      	beq.n	800f48a <_scanf_float+0x27e>
 800f3de:	2d01      	cmp	r5, #1
 800f3e0:	d002      	beq.n	800f3e8 <_scanf_float+0x1dc>
 800f3e2:	2d04      	cmp	r5, #4
 800f3e4:	f47f af44 	bne.w	800f270 <_scanf_float+0x64>
 800f3e8:	3501      	adds	r5, #1
 800f3ea:	b2ed      	uxtb	r5, r5
 800f3ec:	e7d7      	b.n	800f39e <_scanf_float+0x192>
 800f3ee:	f1ba 0f01 	cmp.w	sl, #1
 800f3f2:	f47f af3d 	bne.w	800f270 <_scanf_float+0x64>
 800f3f6:	f04f 0a02 	mov.w	sl, #2
 800f3fa:	e7d0      	b.n	800f39e <_scanf_float+0x192>
 800f3fc:	b97d      	cbnz	r5, 800f41e <_scanf_float+0x212>
 800f3fe:	f1b9 0f00 	cmp.w	r9, #0
 800f402:	f47f af38 	bne.w	800f276 <_scanf_float+0x6a>
 800f406:	6822      	ldr	r2, [r4, #0]
 800f408:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f40c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f410:	f040 8108 	bne.w	800f624 <_scanf_float+0x418>
 800f414:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f418:	6022      	str	r2, [r4, #0]
 800f41a:	2501      	movs	r5, #1
 800f41c:	e7bf      	b.n	800f39e <_scanf_float+0x192>
 800f41e:	2d03      	cmp	r5, #3
 800f420:	d0e2      	beq.n	800f3e8 <_scanf_float+0x1dc>
 800f422:	2d05      	cmp	r5, #5
 800f424:	e7de      	b.n	800f3e4 <_scanf_float+0x1d8>
 800f426:	2d02      	cmp	r5, #2
 800f428:	f47f af22 	bne.w	800f270 <_scanf_float+0x64>
 800f42c:	2503      	movs	r5, #3
 800f42e:	e7b6      	b.n	800f39e <_scanf_float+0x192>
 800f430:	2d06      	cmp	r5, #6
 800f432:	f47f af1d 	bne.w	800f270 <_scanf_float+0x64>
 800f436:	2507      	movs	r5, #7
 800f438:	e7b1      	b.n	800f39e <_scanf_float+0x192>
 800f43a:	6822      	ldr	r2, [r4, #0]
 800f43c:	0591      	lsls	r1, r2, #22
 800f43e:	f57f af17 	bpl.w	800f270 <_scanf_float+0x64>
 800f442:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800f446:	6022      	str	r2, [r4, #0]
 800f448:	f8cd 9008 	str.w	r9, [sp, #8]
 800f44c:	e7a7      	b.n	800f39e <_scanf_float+0x192>
 800f44e:	6822      	ldr	r2, [r4, #0]
 800f450:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800f454:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800f458:	d006      	beq.n	800f468 <_scanf_float+0x25c>
 800f45a:	0550      	lsls	r0, r2, #21
 800f45c:	f57f af08 	bpl.w	800f270 <_scanf_float+0x64>
 800f460:	f1b9 0f00 	cmp.w	r9, #0
 800f464:	f000 80de 	beq.w	800f624 <_scanf_float+0x418>
 800f468:	0591      	lsls	r1, r2, #22
 800f46a:	bf58      	it	pl
 800f46c:	9902      	ldrpl	r1, [sp, #8]
 800f46e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f472:	bf58      	it	pl
 800f474:	eba9 0101 	subpl.w	r1, r9, r1
 800f478:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800f47c:	bf58      	it	pl
 800f47e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f482:	6022      	str	r2, [r4, #0]
 800f484:	f04f 0900 	mov.w	r9, #0
 800f488:	e789      	b.n	800f39e <_scanf_float+0x192>
 800f48a:	f04f 0a03 	mov.w	sl, #3
 800f48e:	e786      	b.n	800f39e <_scanf_float+0x192>
 800f490:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f494:	4639      	mov	r1, r7
 800f496:	4640      	mov	r0, r8
 800f498:	4798      	blx	r3
 800f49a:	2800      	cmp	r0, #0
 800f49c:	f43f aedb 	beq.w	800f256 <_scanf_float+0x4a>
 800f4a0:	e6e6      	b.n	800f270 <_scanf_float+0x64>
 800f4a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f4a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f4aa:	463a      	mov	r2, r7
 800f4ac:	4640      	mov	r0, r8
 800f4ae:	4798      	blx	r3
 800f4b0:	6923      	ldr	r3, [r4, #16]
 800f4b2:	3b01      	subs	r3, #1
 800f4b4:	6123      	str	r3, [r4, #16]
 800f4b6:	e6e8      	b.n	800f28a <_scanf_float+0x7e>
 800f4b8:	1e6b      	subs	r3, r5, #1
 800f4ba:	2b06      	cmp	r3, #6
 800f4bc:	d824      	bhi.n	800f508 <_scanf_float+0x2fc>
 800f4be:	2d02      	cmp	r5, #2
 800f4c0:	d836      	bhi.n	800f530 <_scanf_float+0x324>
 800f4c2:	9b01      	ldr	r3, [sp, #4]
 800f4c4:	429e      	cmp	r6, r3
 800f4c6:	f67f aee4 	bls.w	800f292 <_scanf_float+0x86>
 800f4ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f4ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f4d2:	463a      	mov	r2, r7
 800f4d4:	4640      	mov	r0, r8
 800f4d6:	4798      	blx	r3
 800f4d8:	6923      	ldr	r3, [r4, #16]
 800f4da:	3b01      	subs	r3, #1
 800f4dc:	6123      	str	r3, [r4, #16]
 800f4de:	e7f0      	b.n	800f4c2 <_scanf_float+0x2b6>
 800f4e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f4e4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800f4e8:	463a      	mov	r2, r7
 800f4ea:	4640      	mov	r0, r8
 800f4ec:	4798      	blx	r3
 800f4ee:	6923      	ldr	r3, [r4, #16]
 800f4f0:	3b01      	subs	r3, #1
 800f4f2:	6123      	str	r3, [r4, #16]
 800f4f4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f4f8:	fa5f fa8a 	uxtb.w	sl, sl
 800f4fc:	f1ba 0f02 	cmp.w	sl, #2
 800f500:	d1ee      	bne.n	800f4e0 <_scanf_float+0x2d4>
 800f502:	3d03      	subs	r5, #3
 800f504:	b2ed      	uxtb	r5, r5
 800f506:	1b76      	subs	r6, r6, r5
 800f508:	6823      	ldr	r3, [r4, #0]
 800f50a:	05da      	lsls	r2, r3, #23
 800f50c:	d530      	bpl.n	800f570 <_scanf_float+0x364>
 800f50e:	055b      	lsls	r3, r3, #21
 800f510:	d511      	bpl.n	800f536 <_scanf_float+0x32a>
 800f512:	9b01      	ldr	r3, [sp, #4]
 800f514:	429e      	cmp	r6, r3
 800f516:	f67f aebc 	bls.w	800f292 <_scanf_float+0x86>
 800f51a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f51e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f522:	463a      	mov	r2, r7
 800f524:	4640      	mov	r0, r8
 800f526:	4798      	blx	r3
 800f528:	6923      	ldr	r3, [r4, #16]
 800f52a:	3b01      	subs	r3, #1
 800f52c:	6123      	str	r3, [r4, #16]
 800f52e:	e7f0      	b.n	800f512 <_scanf_float+0x306>
 800f530:	46aa      	mov	sl, r5
 800f532:	46b3      	mov	fp, r6
 800f534:	e7de      	b.n	800f4f4 <_scanf_float+0x2e8>
 800f536:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f53a:	6923      	ldr	r3, [r4, #16]
 800f53c:	2965      	cmp	r1, #101	@ 0x65
 800f53e:	f103 33ff 	add.w	r3, r3, #4294967295
 800f542:	f106 35ff 	add.w	r5, r6, #4294967295
 800f546:	6123      	str	r3, [r4, #16]
 800f548:	d00c      	beq.n	800f564 <_scanf_float+0x358>
 800f54a:	2945      	cmp	r1, #69	@ 0x45
 800f54c:	d00a      	beq.n	800f564 <_scanf_float+0x358>
 800f54e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f552:	463a      	mov	r2, r7
 800f554:	4640      	mov	r0, r8
 800f556:	4798      	blx	r3
 800f558:	6923      	ldr	r3, [r4, #16]
 800f55a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f55e:	3b01      	subs	r3, #1
 800f560:	1eb5      	subs	r5, r6, #2
 800f562:	6123      	str	r3, [r4, #16]
 800f564:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f568:	463a      	mov	r2, r7
 800f56a:	4640      	mov	r0, r8
 800f56c:	4798      	blx	r3
 800f56e:	462e      	mov	r6, r5
 800f570:	6822      	ldr	r2, [r4, #0]
 800f572:	f012 0210 	ands.w	r2, r2, #16
 800f576:	d001      	beq.n	800f57c <_scanf_float+0x370>
 800f578:	2000      	movs	r0, #0
 800f57a:	e68b      	b.n	800f294 <_scanf_float+0x88>
 800f57c:	7032      	strb	r2, [r6, #0]
 800f57e:	6823      	ldr	r3, [r4, #0]
 800f580:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800f584:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f588:	d11c      	bne.n	800f5c4 <_scanf_float+0x3b8>
 800f58a:	9b02      	ldr	r3, [sp, #8]
 800f58c:	454b      	cmp	r3, r9
 800f58e:	eba3 0209 	sub.w	r2, r3, r9
 800f592:	d123      	bne.n	800f5dc <_scanf_float+0x3d0>
 800f594:	9901      	ldr	r1, [sp, #4]
 800f596:	2200      	movs	r2, #0
 800f598:	4640      	mov	r0, r8
 800f59a:	f7ff f9cd 	bl	800e938 <_strtod_r>
 800f59e:	9b03      	ldr	r3, [sp, #12]
 800f5a0:	6821      	ldr	r1, [r4, #0]
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	f011 0f02 	tst.w	r1, #2
 800f5a8:	ec57 6b10 	vmov	r6, r7, d0
 800f5ac:	f103 0204 	add.w	r2, r3, #4
 800f5b0:	d01f      	beq.n	800f5f2 <_scanf_float+0x3e6>
 800f5b2:	9903      	ldr	r1, [sp, #12]
 800f5b4:	600a      	str	r2, [r1, #0]
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	e9c3 6700 	strd	r6, r7, [r3]
 800f5bc:	68e3      	ldr	r3, [r4, #12]
 800f5be:	3301      	adds	r3, #1
 800f5c0:	60e3      	str	r3, [r4, #12]
 800f5c2:	e7d9      	b.n	800f578 <_scanf_float+0x36c>
 800f5c4:	9b04      	ldr	r3, [sp, #16]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d0e4      	beq.n	800f594 <_scanf_float+0x388>
 800f5ca:	9905      	ldr	r1, [sp, #20]
 800f5cc:	230a      	movs	r3, #10
 800f5ce:	3101      	adds	r1, #1
 800f5d0:	4640      	mov	r0, r8
 800f5d2:	f002 faa9 	bl	8011b28 <_strtol_r>
 800f5d6:	9b04      	ldr	r3, [sp, #16]
 800f5d8:	9e05      	ldr	r6, [sp, #20]
 800f5da:	1ac2      	subs	r2, r0, r3
 800f5dc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800f5e0:	429e      	cmp	r6, r3
 800f5e2:	bf28      	it	cs
 800f5e4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800f5e8:	4910      	ldr	r1, [pc, #64]	@ (800f62c <_scanf_float+0x420>)
 800f5ea:	4630      	mov	r0, r6
 800f5ec:	f000 f8e4 	bl	800f7b8 <siprintf>
 800f5f0:	e7d0      	b.n	800f594 <_scanf_float+0x388>
 800f5f2:	f011 0f04 	tst.w	r1, #4
 800f5f6:	9903      	ldr	r1, [sp, #12]
 800f5f8:	600a      	str	r2, [r1, #0]
 800f5fa:	d1dc      	bne.n	800f5b6 <_scanf_float+0x3aa>
 800f5fc:	681d      	ldr	r5, [r3, #0]
 800f5fe:	4632      	mov	r2, r6
 800f600:	463b      	mov	r3, r7
 800f602:	4630      	mov	r0, r6
 800f604:	4639      	mov	r1, r7
 800f606:	f7f1 fa99 	bl	8000b3c <__aeabi_dcmpun>
 800f60a:	b128      	cbz	r0, 800f618 <_scanf_float+0x40c>
 800f60c:	4808      	ldr	r0, [pc, #32]	@ (800f630 <_scanf_float+0x424>)
 800f60e:	f000 fabf 	bl	800fb90 <nanf>
 800f612:	ed85 0a00 	vstr	s0, [r5]
 800f616:	e7d1      	b.n	800f5bc <_scanf_float+0x3b0>
 800f618:	4630      	mov	r0, r6
 800f61a:	4639      	mov	r1, r7
 800f61c:	f7f1 faec 	bl	8000bf8 <__aeabi_d2f>
 800f620:	6028      	str	r0, [r5, #0]
 800f622:	e7cb      	b.n	800f5bc <_scanf_float+0x3b0>
 800f624:	f04f 0900 	mov.w	r9, #0
 800f628:	e629      	b.n	800f27e <_scanf_float+0x72>
 800f62a:	bf00      	nop
 800f62c:	08014282 	.word	0x08014282
 800f630:	08014640 	.word	0x08014640

0800f634 <std>:
 800f634:	2300      	movs	r3, #0
 800f636:	b510      	push	{r4, lr}
 800f638:	4604      	mov	r4, r0
 800f63a:	e9c0 3300 	strd	r3, r3, [r0]
 800f63e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f642:	6083      	str	r3, [r0, #8]
 800f644:	8181      	strh	r1, [r0, #12]
 800f646:	6643      	str	r3, [r0, #100]	@ 0x64
 800f648:	81c2      	strh	r2, [r0, #14]
 800f64a:	6183      	str	r3, [r0, #24]
 800f64c:	4619      	mov	r1, r3
 800f64e:	2208      	movs	r2, #8
 800f650:	305c      	adds	r0, #92	@ 0x5c
 800f652:	f000 f9d5 	bl	800fa00 <memset>
 800f656:	4b0d      	ldr	r3, [pc, #52]	@ (800f68c <std+0x58>)
 800f658:	6263      	str	r3, [r4, #36]	@ 0x24
 800f65a:	4b0d      	ldr	r3, [pc, #52]	@ (800f690 <std+0x5c>)
 800f65c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f65e:	4b0d      	ldr	r3, [pc, #52]	@ (800f694 <std+0x60>)
 800f660:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f662:	4b0d      	ldr	r3, [pc, #52]	@ (800f698 <std+0x64>)
 800f664:	6323      	str	r3, [r4, #48]	@ 0x30
 800f666:	4b0d      	ldr	r3, [pc, #52]	@ (800f69c <std+0x68>)
 800f668:	6224      	str	r4, [r4, #32]
 800f66a:	429c      	cmp	r4, r3
 800f66c:	d006      	beq.n	800f67c <std+0x48>
 800f66e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f672:	4294      	cmp	r4, r2
 800f674:	d002      	beq.n	800f67c <std+0x48>
 800f676:	33d0      	adds	r3, #208	@ 0xd0
 800f678:	429c      	cmp	r4, r3
 800f67a:	d105      	bne.n	800f688 <std+0x54>
 800f67c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f684:	f000 ba6a 	b.w	800fb5c <__retarget_lock_init_recursive>
 800f688:	bd10      	pop	{r4, pc}
 800f68a:	bf00      	nop
 800f68c:	0800f84d 	.word	0x0800f84d
 800f690:	0800f873 	.word	0x0800f873
 800f694:	0800f8ab 	.word	0x0800f8ab
 800f698:	0800f8cf 	.word	0x0800f8cf
 800f69c:	20002cd4 	.word	0x20002cd4

0800f6a0 <stdio_exit_handler>:
 800f6a0:	4a02      	ldr	r2, [pc, #8]	@ (800f6ac <stdio_exit_handler+0xc>)
 800f6a2:	4903      	ldr	r1, [pc, #12]	@ (800f6b0 <stdio_exit_handler+0x10>)
 800f6a4:	4803      	ldr	r0, [pc, #12]	@ (800f6b4 <stdio_exit_handler+0x14>)
 800f6a6:	f000 b869 	b.w	800f77c <_fwalk_sglue>
 800f6aa:	bf00      	nop
 800f6ac:	20000014 	.word	0x20000014
 800f6b0:	080127b5 	.word	0x080127b5
 800f6b4:	20000190 	.word	0x20000190

0800f6b8 <cleanup_stdio>:
 800f6b8:	6841      	ldr	r1, [r0, #4]
 800f6ba:	4b0c      	ldr	r3, [pc, #48]	@ (800f6ec <cleanup_stdio+0x34>)
 800f6bc:	4299      	cmp	r1, r3
 800f6be:	b510      	push	{r4, lr}
 800f6c0:	4604      	mov	r4, r0
 800f6c2:	d001      	beq.n	800f6c8 <cleanup_stdio+0x10>
 800f6c4:	f003 f876 	bl	80127b4 <_fflush_r>
 800f6c8:	68a1      	ldr	r1, [r4, #8]
 800f6ca:	4b09      	ldr	r3, [pc, #36]	@ (800f6f0 <cleanup_stdio+0x38>)
 800f6cc:	4299      	cmp	r1, r3
 800f6ce:	d002      	beq.n	800f6d6 <cleanup_stdio+0x1e>
 800f6d0:	4620      	mov	r0, r4
 800f6d2:	f003 f86f 	bl	80127b4 <_fflush_r>
 800f6d6:	68e1      	ldr	r1, [r4, #12]
 800f6d8:	4b06      	ldr	r3, [pc, #24]	@ (800f6f4 <cleanup_stdio+0x3c>)
 800f6da:	4299      	cmp	r1, r3
 800f6dc:	d004      	beq.n	800f6e8 <cleanup_stdio+0x30>
 800f6de:	4620      	mov	r0, r4
 800f6e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f6e4:	f003 b866 	b.w	80127b4 <_fflush_r>
 800f6e8:	bd10      	pop	{r4, pc}
 800f6ea:	bf00      	nop
 800f6ec:	20002cd4 	.word	0x20002cd4
 800f6f0:	20002d3c 	.word	0x20002d3c
 800f6f4:	20002da4 	.word	0x20002da4

0800f6f8 <global_stdio_init.part.0>:
 800f6f8:	b510      	push	{r4, lr}
 800f6fa:	4b0b      	ldr	r3, [pc, #44]	@ (800f728 <global_stdio_init.part.0+0x30>)
 800f6fc:	4c0b      	ldr	r4, [pc, #44]	@ (800f72c <global_stdio_init.part.0+0x34>)
 800f6fe:	4a0c      	ldr	r2, [pc, #48]	@ (800f730 <global_stdio_init.part.0+0x38>)
 800f700:	601a      	str	r2, [r3, #0]
 800f702:	4620      	mov	r0, r4
 800f704:	2200      	movs	r2, #0
 800f706:	2104      	movs	r1, #4
 800f708:	f7ff ff94 	bl	800f634 <std>
 800f70c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f710:	2201      	movs	r2, #1
 800f712:	2109      	movs	r1, #9
 800f714:	f7ff ff8e 	bl	800f634 <std>
 800f718:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f71c:	2202      	movs	r2, #2
 800f71e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f722:	2112      	movs	r1, #18
 800f724:	f7ff bf86 	b.w	800f634 <std>
 800f728:	20002e0c 	.word	0x20002e0c
 800f72c:	20002cd4 	.word	0x20002cd4
 800f730:	0800f6a1 	.word	0x0800f6a1

0800f734 <__sfp_lock_acquire>:
 800f734:	4801      	ldr	r0, [pc, #4]	@ (800f73c <__sfp_lock_acquire+0x8>)
 800f736:	f000 ba12 	b.w	800fb5e <__retarget_lock_acquire_recursive>
 800f73a:	bf00      	nop
 800f73c:	20002e15 	.word	0x20002e15

0800f740 <__sfp_lock_release>:
 800f740:	4801      	ldr	r0, [pc, #4]	@ (800f748 <__sfp_lock_release+0x8>)
 800f742:	f000 ba0d 	b.w	800fb60 <__retarget_lock_release_recursive>
 800f746:	bf00      	nop
 800f748:	20002e15 	.word	0x20002e15

0800f74c <__sinit>:
 800f74c:	b510      	push	{r4, lr}
 800f74e:	4604      	mov	r4, r0
 800f750:	f7ff fff0 	bl	800f734 <__sfp_lock_acquire>
 800f754:	6a23      	ldr	r3, [r4, #32]
 800f756:	b11b      	cbz	r3, 800f760 <__sinit+0x14>
 800f758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f75c:	f7ff bff0 	b.w	800f740 <__sfp_lock_release>
 800f760:	4b04      	ldr	r3, [pc, #16]	@ (800f774 <__sinit+0x28>)
 800f762:	6223      	str	r3, [r4, #32]
 800f764:	4b04      	ldr	r3, [pc, #16]	@ (800f778 <__sinit+0x2c>)
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d1f5      	bne.n	800f758 <__sinit+0xc>
 800f76c:	f7ff ffc4 	bl	800f6f8 <global_stdio_init.part.0>
 800f770:	e7f2      	b.n	800f758 <__sinit+0xc>
 800f772:	bf00      	nop
 800f774:	0800f6b9 	.word	0x0800f6b9
 800f778:	20002e0c 	.word	0x20002e0c

0800f77c <_fwalk_sglue>:
 800f77c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f780:	4607      	mov	r7, r0
 800f782:	4688      	mov	r8, r1
 800f784:	4614      	mov	r4, r2
 800f786:	2600      	movs	r6, #0
 800f788:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f78c:	f1b9 0901 	subs.w	r9, r9, #1
 800f790:	d505      	bpl.n	800f79e <_fwalk_sglue+0x22>
 800f792:	6824      	ldr	r4, [r4, #0]
 800f794:	2c00      	cmp	r4, #0
 800f796:	d1f7      	bne.n	800f788 <_fwalk_sglue+0xc>
 800f798:	4630      	mov	r0, r6
 800f79a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f79e:	89ab      	ldrh	r3, [r5, #12]
 800f7a0:	2b01      	cmp	r3, #1
 800f7a2:	d907      	bls.n	800f7b4 <_fwalk_sglue+0x38>
 800f7a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f7a8:	3301      	adds	r3, #1
 800f7aa:	d003      	beq.n	800f7b4 <_fwalk_sglue+0x38>
 800f7ac:	4629      	mov	r1, r5
 800f7ae:	4638      	mov	r0, r7
 800f7b0:	47c0      	blx	r8
 800f7b2:	4306      	orrs	r6, r0
 800f7b4:	3568      	adds	r5, #104	@ 0x68
 800f7b6:	e7e9      	b.n	800f78c <_fwalk_sglue+0x10>

0800f7b8 <siprintf>:
 800f7b8:	b40e      	push	{r1, r2, r3}
 800f7ba:	b500      	push	{lr}
 800f7bc:	b09c      	sub	sp, #112	@ 0x70
 800f7be:	ab1d      	add	r3, sp, #116	@ 0x74
 800f7c0:	9002      	str	r0, [sp, #8]
 800f7c2:	9006      	str	r0, [sp, #24]
 800f7c4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f7c8:	4809      	ldr	r0, [pc, #36]	@ (800f7f0 <siprintf+0x38>)
 800f7ca:	9107      	str	r1, [sp, #28]
 800f7cc:	9104      	str	r1, [sp, #16]
 800f7ce:	4909      	ldr	r1, [pc, #36]	@ (800f7f4 <siprintf+0x3c>)
 800f7d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800f7d4:	9105      	str	r1, [sp, #20]
 800f7d6:	6800      	ldr	r0, [r0, #0]
 800f7d8:	9301      	str	r3, [sp, #4]
 800f7da:	a902      	add	r1, sp, #8
 800f7dc:	f002 fa0e 	bl	8011bfc <_svfiprintf_r>
 800f7e0:	9b02      	ldr	r3, [sp, #8]
 800f7e2:	2200      	movs	r2, #0
 800f7e4:	701a      	strb	r2, [r3, #0]
 800f7e6:	b01c      	add	sp, #112	@ 0x70
 800f7e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f7ec:	b003      	add	sp, #12
 800f7ee:	4770      	bx	lr
 800f7f0:	2000018c 	.word	0x2000018c
 800f7f4:	ffff0208 	.word	0xffff0208

0800f7f8 <siscanf>:
 800f7f8:	b40e      	push	{r1, r2, r3}
 800f7fa:	b530      	push	{r4, r5, lr}
 800f7fc:	b09c      	sub	sp, #112	@ 0x70
 800f7fe:	ac1f      	add	r4, sp, #124	@ 0x7c
 800f800:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800f804:	f854 5b04 	ldr.w	r5, [r4], #4
 800f808:	f8ad 2014 	strh.w	r2, [sp, #20]
 800f80c:	9002      	str	r0, [sp, #8]
 800f80e:	9006      	str	r0, [sp, #24]
 800f810:	f7f0 fd36 	bl	8000280 <strlen>
 800f814:	4b0b      	ldr	r3, [pc, #44]	@ (800f844 <siscanf+0x4c>)
 800f816:	9003      	str	r0, [sp, #12]
 800f818:	9007      	str	r0, [sp, #28]
 800f81a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f81c:	480a      	ldr	r0, [pc, #40]	@ (800f848 <siscanf+0x50>)
 800f81e:	9401      	str	r4, [sp, #4]
 800f820:	2300      	movs	r3, #0
 800f822:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f824:	9314      	str	r3, [sp, #80]	@ 0x50
 800f826:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f82a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f82e:	462a      	mov	r2, r5
 800f830:	4623      	mov	r3, r4
 800f832:	a902      	add	r1, sp, #8
 800f834:	6800      	ldr	r0, [r0, #0]
 800f836:	f002 fb35 	bl	8011ea4 <__ssvfiscanf_r>
 800f83a:	b01c      	add	sp, #112	@ 0x70
 800f83c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f840:	b003      	add	sp, #12
 800f842:	4770      	bx	lr
 800f844:	0800f86f 	.word	0x0800f86f
 800f848:	2000018c 	.word	0x2000018c

0800f84c <__sread>:
 800f84c:	b510      	push	{r4, lr}
 800f84e:	460c      	mov	r4, r1
 800f850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f854:	f000 f934 	bl	800fac0 <_read_r>
 800f858:	2800      	cmp	r0, #0
 800f85a:	bfab      	itete	ge
 800f85c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f85e:	89a3      	ldrhlt	r3, [r4, #12]
 800f860:	181b      	addge	r3, r3, r0
 800f862:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f866:	bfac      	ite	ge
 800f868:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f86a:	81a3      	strhlt	r3, [r4, #12]
 800f86c:	bd10      	pop	{r4, pc}

0800f86e <__seofread>:
 800f86e:	2000      	movs	r0, #0
 800f870:	4770      	bx	lr

0800f872 <__swrite>:
 800f872:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f876:	461f      	mov	r7, r3
 800f878:	898b      	ldrh	r3, [r1, #12]
 800f87a:	05db      	lsls	r3, r3, #23
 800f87c:	4605      	mov	r5, r0
 800f87e:	460c      	mov	r4, r1
 800f880:	4616      	mov	r6, r2
 800f882:	d505      	bpl.n	800f890 <__swrite+0x1e>
 800f884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f888:	2302      	movs	r3, #2
 800f88a:	2200      	movs	r2, #0
 800f88c:	f000 f906 	bl	800fa9c <_lseek_r>
 800f890:	89a3      	ldrh	r3, [r4, #12]
 800f892:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f896:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f89a:	81a3      	strh	r3, [r4, #12]
 800f89c:	4632      	mov	r2, r6
 800f89e:	463b      	mov	r3, r7
 800f8a0:	4628      	mov	r0, r5
 800f8a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f8a6:	f000 b91d 	b.w	800fae4 <_write_r>

0800f8aa <__sseek>:
 800f8aa:	b510      	push	{r4, lr}
 800f8ac:	460c      	mov	r4, r1
 800f8ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f8b2:	f000 f8f3 	bl	800fa9c <_lseek_r>
 800f8b6:	1c43      	adds	r3, r0, #1
 800f8b8:	89a3      	ldrh	r3, [r4, #12]
 800f8ba:	bf15      	itete	ne
 800f8bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f8be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f8c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f8c6:	81a3      	strheq	r3, [r4, #12]
 800f8c8:	bf18      	it	ne
 800f8ca:	81a3      	strhne	r3, [r4, #12]
 800f8cc:	bd10      	pop	{r4, pc}

0800f8ce <__sclose>:
 800f8ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f8d2:	f000 b8d3 	b.w	800fa7c <_close_r>

0800f8d6 <__swbuf_r>:
 800f8d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8d8:	460e      	mov	r6, r1
 800f8da:	4614      	mov	r4, r2
 800f8dc:	4605      	mov	r5, r0
 800f8de:	b118      	cbz	r0, 800f8e8 <__swbuf_r+0x12>
 800f8e0:	6a03      	ldr	r3, [r0, #32]
 800f8e2:	b90b      	cbnz	r3, 800f8e8 <__swbuf_r+0x12>
 800f8e4:	f7ff ff32 	bl	800f74c <__sinit>
 800f8e8:	69a3      	ldr	r3, [r4, #24]
 800f8ea:	60a3      	str	r3, [r4, #8]
 800f8ec:	89a3      	ldrh	r3, [r4, #12]
 800f8ee:	071a      	lsls	r2, r3, #28
 800f8f0:	d501      	bpl.n	800f8f6 <__swbuf_r+0x20>
 800f8f2:	6923      	ldr	r3, [r4, #16]
 800f8f4:	b943      	cbnz	r3, 800f908 <__swbuf_r+0x32>
 800f8f6:	4621      	mov	r1, r4
 800f8f8:	4628      	mov	r0, r5
 800f8fa:	f000 f82b 	bl	800f954 <__swsetup_r>
 800f8fe:	b118      	cbz	r0, 800f908 <__swbuf_r+0x32>
 800f900:	f04f 37ff 	mov.w	r7, #4294967295
 800f904:	4638      	mov	r0, r7
 800f906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f908:	6823      	ldr	r3, [r4, #0]
 800f90a:	6922      	ldr	r2, [r4, #16]
 800f90c:	1a98      	subs	r0, r3, r2
 800f90e:	6963      	ldr	r3, [r4, #20]
 800f910:	b2f6      	uxtb	r6, r6
 800f912:	4283      	cmp	r3, r0
 800f914:	4637      	mov	r7, r6
 800f916:	dc05      	bgt.n	800f924 <__swbuf_r+0x4e>
 800f918:	4621      	mov	r1, r4
 800f91a:	4628      	mov	r0, r5
 800f91c:	f002 ff4a 	bl	80127b4 <_fflush_r>
 800f920:	2800      	cmp	r0, #0
 800f922:	d1ed      	bne.n	800f900 <__swbuf_r+0x2a>
 800f924:	68a3      	ldr	r3, [r4, #8]
 800f926:	3b01      	subs	r3, #1
 800f928:	60a3      	str	r3, [r4, #8]
 800f92a:	6823      	ldr	r3, [r4, #0]
 800f92c:	1c5a      	adds	r2, r3, #1
 800f92e:	6022      	str	r2, [r4, #0]
 800f930:	701e      	strb	r6, [r3, #0]
 800f932:	6962      	ldr	r2, [r4, #20]
 800f934:	1c43      	adds	r3, r0, #1
 800f936:	429a      	cmp	r2, r3
 800f938:	d004      	beq.n	800f944 <__swbuf_r+0x6e>
 800f93a:	89a3      	ldrh	r3, [r4, #12]
 800f93c:	07db      	lsls	r3, r3, #31
 800f93e:	d5e1      	bpl.n	800f904 <__swbuf_r+0x2e>
 800f940:	2e0a      	cmp	r6, #10
 800f942:	d1df      	bne.n	800f904 <__swbuf_r+0x2e>
 800f944:	4621      	mov	r1, r4
 800f946:	4628      	mov	r0, r5
 800f948:	f002 ff34 	bl	80127b4 <_fflush_r>
 800f94c:	2800      	cmp	r0, #0
 800f94e:	d0d9      	beq.n	800f904 <__swbuf_r+0x2e>
 800f950:	e7d6      	b.n	800f900 <__swbuf_r+0x2a>
	...

0800f954 <__swsetup_r>:
 800f954:	b538      	push	{r3, r4, r5, lr}
 800f956:	4b29      	ldr	r3, [pc, #164]	@ (800f9fc <__swsetup_r+0xa8>)
 800f958:	4605      	mov	r5, r0
 800f95a:	6818      	ldr	r0, [r3, #0]
 800f95c:	460c      	mov	r4, r1
 800f95e:	b118      	cbz	r0, 800f968 <__swsetup_r+0x14>
 800f960:	6a03      	ldr	r3, [r0, #32]
 800f962:	b90b      	cbnz	r3, 800f968 <__swsetup_r+0x14>
 800f964:	f7ff fef2 	bl	800f74c <__sinit>
 800f968:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f96c:	0719      	lsls	r1, r3, #28
 800f96e:	d422      	bmi.n	800f9b6 <__swsetup_r+0x62>
 800f970:	06da      	lsls	r2, r3, #27
 800f972:	d407      	bmi.n	800f984 <__swsetup_r+0x30>
 800f974:	2209      	movs	r2, #9
 800f976:	602a      	str	r2, [r5, #0]
 800f978:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f97c:	81a3      	strh	r3, [r4, #12]
 800f97e:	f04f 30ff 	mov.w	r0, #4294967295
 800f982:	e033      	b.n	800f9ec <__swsetup_r+0x98>
 800f984:	0758      	lsls	r0, r3, #29
 800f986:	d512      	bpl.n	800f9ae <__swsetup_r+0x5a>
 800f988:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f98a:	b141      	cbz	r1, 800f99e <__swsetup_r+0x4a>
 800f98c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f990:	4299      	cmp	r1, r3
 800f992:	d002      	beq.n	800f99a <__swsetup_r+0x46>
 800f994:	4628      	mov	r0, r5
 800f996:	f000 ff4f 	bl	8010838 <_free_r>
 800f99a:	2300      	movs	r3, #0
 800f99c:	6363      	str	r3, [r4, #52]	@ 0x34
 800f99e:	89a3      	ldrh	r3, [r4, #12]
 800f9a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f9a4:	81a3      	strh	r3, [r4, #12]
 800f9a6:	2300      	movs	r3, #0
 800f9a8:	6063      	str	r3, [r4, #4]
 800f9aa:	6923      	ldr	r3, [r4, #16]
 800f9ac:	6023      	str	r3, [r4, #0]
 800f9ae:	89a3      	ldrh	r3, [r4, #12]
 800f9b0:	f043 0308 	orr.w	r3, r3, #8
 800f9b4:	81a3      	strh	r3, [r4, #12]
 800f9b6:	6923      	ldr	r3, [r4, #16]
 800f9b8:	b94b      	cbnz	r3, 800f9ce <__swsetup_r+0x7a>
 800f9ba:	89a3      	ldrh	r3, [r4, #12]
 800f9bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f9c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f9c4:	d003      	beq.n	800f9ce <__swsetup_r+0x7a>
 800f9c6:	4621      	mov	r1, r4
 800f9c8:	4628      	mov	r0, r5
 800f9ca:	f002 ff41 	bl	8012850 <__smakebuf_r>
 800f9ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f9d2:	f013 0201 	ands.w	r2, r3, #1
 800f9d6:	d00a      	beq.n	800f9ee <__swsetup_r+0x9a>
 800f9d8:	2200      	movs	r2, #0
 800f9da:	60a2      	str	r2, [r4, #8]
 800f9dc:	6962      	ldr	r2, [r4, #20]
 800f9de:	4252      	negs	r2, r2
 800f9e0:	61a2      	str	r2, [r4, #24]
 800f9e2:	6922      	ldr	r2, [r4, #16]
 800f9e4:	b942      	cbnz	r2, 800f9f8 <__swsetup_r+0xa4>
 800f9e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f9ea:	d1c5      	bne.n	800f978 <__swsetup_r+0x24>
 800f9ec:	bd38      	pop	{r3, r4, r5, pc}
 800f9ee:	0799      	lsls	r1, r3, #30
 800f9f0:	bf58      	it	pl
 800f9f2:	6962      	ldrpl	r2, [r4, #20]
 800f9f4:	60a2      	str	r2, [r4, #8]
 800f9f6:	e7f4      	b.n	800f9e2 <__swsetup_r+0x8e>
 800f9f8:	2000      	movs	r0, #0
 800f9fa:	e7f7      	b.n	800f9ec <__swsetup_r+0x98>
 800f9fc:	2000018c 	.word	0x2000018c

0800fa00 <memset>:
 800fa00:	4402      	add	r2, r0
 800fa02:	4603      	mov	r3, r0
 800fa04:	4293      	cmp	r3, r2
 800fa06:	d100      	bne.n	800fa0a <memset+0xa>
 800fa08:	4770      	bx	lr
 800fa0a:	f803 1b01 	strb.w	r1, [r3], #1
 800fa0e:	e7f9      	b.n	800fa04 <memset+0x4>

0800fa10 <strchr>:
 800fa10:	b2c9      	uxtb	r1, r1
 800fa12:	4603      	mov	r3, r0
 800fa14:	4618      	mov	r0, r3
 800fa16:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fa1a:	b112      	cbz	r2, 800fa22 <strchr+0x12>
 800fa1c:	428a      	cmp	r2, r1
 800fa1e:	d1f9      	bne.n	800fa14 <strchr+0x4>
 800fa20:	4770      	bx	lr
 800fa22:	2900      	cmp	r1, #0
 800fa24:	bf18      	it	ne
 800fa26:	2000      	movne	r0, #0
 800fa28:	4770      	bx	lr

0800fa2a <strncmp>:
 800fa2a:	b510      	push	{r4, lr}
 800fa2c:	b16a      	cbz	r2, 800fa4a <strncmp+0x20>
 800fa2e:	3901      	subs	r1, #1
 800fa30:	1884      	adds	r4, r0, r2
 800fa32:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fa36:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800fa3a:	429a      	cmp	r2, r3
 800fa3c:	d103      	bne.n	800fa46 <strncmp+0x1c>
 800fa3e:	42a0      	cmp	r0, r4
 800fa40:	d001      	beq.n	800fa46 <strncmp+0x1c>
 800fa42:	2a00      	cmp	r2, #0
 800fa44:	d1f5      	bne.n	800fa32 <strncmp+0x8>
 800fa46:	1ad0      	subs	r0, r2, r3
 800fa48:	bd10      	pop	{r4, pc}
 800fa4a:	4610      	mov	r0, r2
 800fa4c:	e7fc      	b.n	800fa48 <strncmp+0x1e>

0800fa4e <strncpy>:
 800fa4e:	b510      	push	{r4, lr}
 800fa50:	3901      	subs	r1, #1
 800fa52:	4603      	mov	r3, r0
 800fa54:	b132      	cbz	r2, 800fa64 <strncpy+0x16>
 800fa56:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800fa5a:	f803 4b01 	strb.w	r4, [r3], #1
 800fa5e:	3a01      	subs	r2, #1
 800fa60:	2c00      	cmp	r4, #0
 800fa62:	d1f7      	bne.n	800fa54 <strncpy+0x6>
 800fa64:	441a      	add	r2, r3
 800fa66:	2100      	movs	r1, #0
 800fa68:	4293      	cmp	r3, r2
 800fa6a:	d100      	bne.n	800fa6e <strncpy+0x20>
 800fa6c:	bd10      	pop	{r4, pc}
 800fa6e:	f803 1b01 	strb.w	r1, [r3], #1
 800fa72:	e7f9      	b.n	800fa68 <strncpy+0x1a>

0800fa74 <_localeconv_r>:
 800fa74:	4800      	ldr	r0, [pc, #0]	@ (800fa78 <_localeconv_r+0x4>)
 800fa76:	4770      	bx	lr
 800fa78:	20000110 	.word	0x20000110

0800fa7c <_close_r>:
 800fa7c:	b538      	push	{r3, r4, r5, lr}
 800fa7e:	4d06      	ldr	r5, [pc, #24]	@ (800fa98 <_close_r+0x1c>)
 800fa80:	2300      	movs	r3, #0
 800fa82:	4604      	mov	r4, r0
 800fa84:	4608      	mov	r0, r1
 800fa86:	602b      	str	r3, [r5, #0]
 800fa88:	f7f4 fbc8 	bl	800421c <_close>
 800fa8c:	1c43      	adds	r3, r0, #1
 800fa8e:	d102      	bne.n	800fa96 <_close_r+0x1a>
 800fa90:	682b      	ldr	r3, [r5, #0]
 800fa92:	b103      	cbz	r3, 800fa96 <_close_r+0x1a>
 800fa94:	6023      	str	r3, [r4, #0]
 800fa96:	bd38      	pop	{r3, r4, r5, pc}
 800fa98:	20002e10 	.word	0x20002e10

0800fa9c <_lseek_r>:
 800fa9c:	b538      	push	{r3, r4, r5, lr}
 800fa9e:	4d07      	ldr	r5, [pc, #28]	@ (800fabc <_lseek_r+0x20>)
 800faa0:	4604      	mov	r4, r0
 800faa2:	4608      	mov	r0, r1
 800faa4:	4611      	mov	r1, r2
 800faa6:	2200      	movs	r2, #0
 800faa8:	602a      	str	r2, [r5, #0]
 800faaa:	461a      	mov	r2, r3
 800faac:	f7f4 fbdd 	bl	800426a <_lseek>
 800fab0:	1c43      	adds	r3, r0, #1
 800fab2:	d102      	bne.n	800faba <_lseek_r+0x1e>
 800fab4:	682b      	ldr	r3, [r5, #0]
 800fab6:	b103      	cbz	r3, 800faba <_lseek_r+0x1e>
 800fab8:	6023      	str	r3, [r4, #0]
 800faba:	bd38      	pop	{r3, r4, r5, pc}
 800fabc:	20002e10 	.word	0x20002e10

0800fac0 <_read_r>:
 800fac0:	b538      	push	{r3, r4, r5, lr}
 800fac2:	4d07      	ldr	r5, [pc, #28]	@ (800fae0 <_read_r+0x20>)
 800fac4:	4604      	mov	r4, r0
 800fac6:	4608      	mov	r0, r1
 800fac8:	4611      	mov	r1, r2
 800faca:	2200      	movs	r2, #0
 800facc:	602a      	str	r2, [r5, #0]
 800face:	461a      	mov	r2, r3
 800fad0:	f7f4 fb6b 	bl	80041aa <_read>
 800fad4:	1c43      	adds	r3, r0, #1
 800fad6:	d102      	bne.n	800fade <_read_r+0x1e>
 800fad8:	682b      	ldr	r3, [r5, #0]
 800fada:	b103      	cbz	r3, 800fade <_read_r+0x1e>
 800fadc:	6023      	str	r3, [r4, #0]
 800fade:	bd38      	pop	{r3, r4, r5, pc}
 800fae0:	20002e10 	.word	0x20002e10

0800fae4 <_write_r>:
 800fae4:	b538      	push	{r3, r4, r5, lr}
 800fae6:	4d07      	ldr	r5, [pc, #28]	@ (800fb04 <_write_r+0x20>)
 800fae8:	4604      	mov	r4, r0
 800faea:	4608      	mov	r0, r1
 800faec:	4611      	mov	r1, r2
 800faee:	2200      	movs	r2, #0
 800faf0:	602a      	str	r2, [r5, #0]
 800faf2:	461a      	mov	r2, r3
 800faf4:	f7f4 fb76 	bl	80041e4 <_write>
 800faf8:	1c43      	adds	r3, r0, #1
 800fafa:	d102      	bne.n	800fb02 <_write_r+0x1e>
 800fafc:	682b      	ldr	r3, [r5, #0]
 800fafe:	b103      	cbz	r3, 800fb02 <_write_r+0x1e>
 800fb00:	6023      	str	r3, [r4, #0]
 800fb02:	bd38      	pop	{r3, r4, r5, pc}
 800fb04:	20002e10 	.word	0x20002e10

0800fb08 <__errno>:
 800fb08:	4b01      	ldr	r3, [pc, #4]	@ (800fb10 <__errno+0x8>)
 800fb0a:	6818      	ldr	r0, [r3, #0]
 800fb0c:	4770      	bx	lr
 800fb0e:	bf00      	nop
 800fb10:	2000018c 	.word	0x2000018c

0800fb14 <__libc_init_array>:
 800fb14:	b570      	push	{r4, r5, r6, lr}
 800fb16:	4d0d      	ldr	r5, [pc, #52]	@ (800fb4c <__libc_init_array+0x38>)
 800fb18:	4c0d      	ldr	r4, [pc, #52]	@ (800fb50 <__libc_init_array+0x3c>)
 800fb1a:	1b64      	subs	r4, r4, r5
 800fb1c:	10a4      	asrs	r4, r4, #2
 800fb1e:	2600      	movs	r6, #0
 800fb20:	42a6      	cmp	r6, r4
 800fb22:	d109      	bne.n	800fb38 <__libc_init_array+0x24>
 800fb24:	4d0b      	ldr	r5, [pc, #44]	@ (800fb54 <__libc_init_array+0x40>)
 800fb26:	4c0c      	ldr	r4, [pc, #48]	@ (800fb58 <__libc_init_array+0x44>)
 800fb28:	f004 f824 	bl	8013b74 <_init>
 800fb2c:	1b64      	subs	r4, r4, r5
 800fb2e:	10a4      	asrs	r4, r4, #2
 800fb30:	2600      	movs	r6, #0
 800fb32:	42a6      	cmp	r6, r4
 800fb34:	d105      	bne.n	800fb42 <__libc_init_array+0x2e>
 800fb36:	bd70      	pop	{r4, r5, r6, pc}
 800fb38:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb3c:	4798      	blx	r3
 800fb3e:	3601      	adds	r6, #1
 800fb40:	e7ee      	b.n	800fb20 <__libc_init_array+0xc>
 800fb42:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb46:	4798      	blx	r3
 800fb48:	3601      	adds	r6, #1
 800fb4a:	e7f2      	b.n	800fb32 <__libc_init_array+0x1e>
 800fb4c:	08014680 	.word	0x08014680
 800fb50:	08014680 	.word	0x08014680
 800fb54:	08014680 	.word	0x08014680
 800fb58:	08014684 	.word	0x08014684

0800fb5c <__retarget_lock_init_recursive>:
 800fb5c:	4770      	bx	lr

0800fb5e <__retarget_lock_acquire_recursive>:
 800fb5e:	4770      	bx	lr

0800fb60 <__retarget_lock_release_recursive>:
 800fb60:	4770      	bx	lr

0800fb62 <memcpy>:
 800fb62:	440a      	add	r2, r1
 800fb64:	4291      	cmp	r1, r2
 800fb66:	f100 33ff 	add.w	r3, r0, #4294967295
 800fb6a:	d100      	bne.n	800fb6e <memcpy+0xc>
 800fb6c:	4770      	bx	lr
 800fb6e:	b510      	push	{r4, lr}
 800fb70:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fb74:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fb78:	4291      	cmp	r1, r2
 800fb7a:	d1f9      	bne.n	800fb70 <memcpy+0xe>
 800fb7c:	bd10      	pop	{r4, pc}
	...

0800fb80 <nan>:
 800fb80:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800fb88 <nan+0x8>
 800fb84:	4770      	bx	lr
 800fb86:	bf00      	nop
 800fb88:	00000000 	.word	0x00000000
 800fb8c:	7ff80000 	.word	0x7ff80000

0800fb90 <nanf>:
 800fb90:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800fb98 <nanf+0x8>
 800fb94:	4770      	bx	lr
 800fb96:	bf00      	nop
 800fb98:	7fc00000 	.word	0x7fc00000

0800fb9c <quorem>:
 800fb9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fba0:	6903      	ldr	r3, [r0, #16]
 800fba2:	690c      	ldr	r4, [r1, #16]
 800fba4:	42a3      	cmp	r3, r4
 800fba6:	4607      	mov	r7, r0
 800fba8:	db7e      	blt.n	800fca8 <quorem+0x10c>
 800fbaa:	3c01      	subs	r4, #1
 800fbac:	f101 0814 	add.w	r8, r1, #20
 800fbb0:	00a3      	lsls	r3, r4, #2
 800fbb2:	f100 0514 	add.w	r5, r0, #20
 800fbb6:	9300      	str	r3, [sp, #0]
 800fbb8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fbbc:	9301      	str	r3, [sp, #4]
 800fbbe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fbc2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fbc6:	3301      	adds	r3, #1
 800fbc8:	429a      	cmp	r2, r3
 800fbca:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fbce:	fbb2 f6f3 	udiv	r6, r2, r3
 800fbd2:	d32e      	bcc.n	800fc32 <quorem+0x96>
 800fbd4:	f04f 0a00 	mov.w	sl, #0
 800fbd8:	46c4      	mov	ip, r8
 800fbda:	46ae      	mov	lr, r5
 800fbdc:	46d3      	mov	fp, sl
 800fbde:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fbe2:	b298      	uxth	r0, r3
 800fbe4:	fb06 a000 	mla	r0, r6, r0, sl
 800fbe8:	0c02      	lsrs	r2, r0, #16
 800fbea:	0c1b      	lsrs	r3, r3, #16
 800fbec:	fb06 2303 	mla	r3, r6, r3, r2
 800fbf0:	f8de 2000 	ldr.w	r2, [lr]
 800fbf4:	b280      	uxth	r0, r0
 800fbf6:	b292      	uxth	r2, r2
 800fbf8:	1a12      	subs	r2, r2, r0
 800fbfa:	445a      	add	r2, fp
 800fbfc:	f8de 0000 	ldr.w	r0, [lr]
 800fc00:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fc04:	b29b      	uxth	r3, r3
 800fc06:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800fc0a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800fc0e:	b292      	uxth	r2, r2
 800fc10:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800fc14:	45e1      	cmp	r9, ip
 800fc16:	f84e 2b04 	str.w	r2, [lr], #4
 800fc1a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800fc1e:	d2de      	bcs.n	800fbde <quorem+0x42>
 800fc20:	9b00      	ldr	r3, [sp, #0]
 800fc22:	58eb      	ldr	r3, [r5, r3]
 800fc24:	b92b      	cbnz	r3, 800fc32 <quorem+0x96>
 800fc26:	9b01      	ldr	r3, [sp, #4]
 800fc28:	3b04      	subs	r3, #4
 800fc2a:	429d      	cmp	r5, r3
 800fc2c:	461a      	mov	r2, r3
 800fc2e:	d32f      	bcc.n	800fc90 <quorem+0xf4>
 800fc30:	613c      	str	r4, [r7, #16]
 800fc32:	4638      	mov	r0, r7
 800fc34:	f001 fd10 	bl	8011658 <__mcmp>
 800fc38:	2800      	cmp	r0, #0
 800fc3a:	db25      	blt.n	800fc88 <quorem+0xec>
 800fc3c:	4629      	mov	r1, r5
 800fc3e:	2000      	movs	r0, #0
 800fc40:	f858 2b04 	ldr.w	r2, [r8], #4
 800fc44:	f8d1 c000 	ldr.w	ip, [r1]
 800fc48:	fa1f fe82 	uxth.w	lr, r2
 800fc4c:	fa1f f38c 	uxth.w	r3, ip
 800fc50:	eba3 030e 	sub.w	r3, r3, lr
 800fc54:	4403      	add	r3, r0
 800fc56:	0c12      	lsrs	r2, r2, #16
 800fc58:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800fc5c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800fc60:	b29b      	uxth	r3, r3
 800fc62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fc66:	45c1      	cmp	r9, r8
 800fc68:	f841 3b04 	str.w	r3, [r1], #4
 800fc6c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800fc70:	d2e6      	bcs.n	800fc40 <quorem+0xa4>
 800fc72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fc76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fc7a:	b922      	cbnz	r2, 800fc86 <quorem+0xea>
 800fc7c:	3b04      	subs	r3, #4
 800fc7e:	429d      	cmp	r5, r3
 800fc80:	461a      	mov	r2, r3
 800fc82:	d30b      	bcc.n	800fc9c <quorem+0x100>
 800fc84:	613c      	str	r4, [r7, #16]
 800fc86:	3601      	adds	r6, #1
 800fc88:	4630      	mov	r0, r6
 800fc8a:	b003      	add	sp, #12
 800fc8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc90:	6812      	ldr	r2, [r2, #0]
 800fc92:	3b04      	subs	r3, #4
 800fc94:	2a00      	cmp	r2, #0
 800fc96:	d1cb      	bne.n	800fc30 <quorem+0x94>
 800fc98:	3c01      	subs	r4, #1
 800fc9a:	e7c6      	b.n	800fc2a <quorem+0x8e>
 800fc9c:	6812      	ldr	r2, [r2, #0]
 800fc9e:	3b04      	subs	r3, #4
 800fca0:	2a00      	cmp	r2, #0
 800fca2:	d1ef      	bne.n	800fc84 <quorem+0xe8>
 800fca4:	3c01      	subs	r4, #1
 800fca6:	e7ea      	b.n	800fc7e <quorem+0xe2>
 800fca8:	2000      	movs	r0, #0
 800fcaa:	e7ee      	b.n	800fc8a <quorem+0xee>
 800fcac:	0000      	movs	r0, r0
	...

0800fcb0 <_dtoa_r>:
 800fcb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcb4:	69c7      	ldr	r7, [r0, #28]
 800fcb6:	b099      	sub	sp, #100	@ 0x64
 800fcb8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800fcbc:	ec55 4b10 	vmov	r4, r5, d0
 800fcc0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800fcc2:	9109      	str	r1, [sp, #36]	@ 0x24
 800fcc4:	4683      	mov	fp, r0
 800fcc6:	920e      	str	r2, [sp, #56]	@ 0x38
 800fcc8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fcca:	b97f      	cbnz	r7, 800fcec <_dtoa_r+0x3c>
 800fccc:	2010      	movs	r0, #16
 800fcce:	f001 f937 	bl	8010f40 <malloc>
 800fcd2:	4602      	mov	r2, r0
 800fcd4:	f8cb 001c 	str.w	r0, [fp, #28]
 800fcd8:	b920      	cbnz	r0, 800fce4 <_dtoa_r+0x34>
 800fcda:	4ba7      	ldr	r3, [pc, #668]	@ (800ff78 <_dtoa_r+0x2c8>)
 800fcdc:	21ef      	movs	r1, #239	@ 0xef
 800fcde:	48a7      	ldr	r0, [pc, #668]	@ (800ff7c <_dtoa_r+0x2cc>)
 800fce0:	f002 feb2 	bl	8012a48 <__assert_func>
 800fce4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800fce8:	6007      	str	r7, [r0, #0]
 800fcea:	60c7      	str	r7, [r0, #12]
 800fcec:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fcf0:	6819      	ldr	r1, [r3, #0]
 800fcf2:	b159      	cbz	r1, 800fd0c <_dtoa_r+0x5c>
 800fcf4:	685a      	ldr	r2, [r3, #4]
 800fcf6:	604a      	str	r2, [r1, #4]
 800fcf8:	2301      	movs	r3, #1
 800fcfa:	4093      	lsls	r3, r2
 800fcfc:	608b      	str	r3, [r1, #8]
 800fcfe:	4658      	mov	r0, fp
 800fd00:	f001 fa26 	bl	8011150 <_Bfree>
 800fd04:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fd08:	2200      	movs	r2, #0
 800fd0a:	601a      	str	r2, [r3, #0]
 800fd0c:	1e2b      	subs	r3, r5, #0
 800fd0e:	bfb9      	ittee	lt
 800fd10:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800fd14:	9303      	strlt	r3, [sp, #12]
 800fd16:	2300      	movge	r3, #0
 800fd18:	6033      	strge	r3, [r6, #0]
 800fd1a:	9f03      	ldr	r7, [sp, #12]
 800fd1c:	4b98      	ldr	r3, [pc, #608]	@ (800ff80 <_dtoa_r+0x2d0>)
 800fd1e:	bfbc      	itt	lt
 800fd20:	2201      	movlt	r2, #1
 800fd22:	6032      	strlt	r2, [r6, #0]
 800fd24:	43bb      	bics	r3, r7
 800fd26:	d112      	bne.n	800fd4e <_dtoa_r+0x9e>
 800fd28:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800fd2a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800fd2e:	6013      	str	r3, [r2, #0]
 800fd30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fd34:	4323      	orrs	r3, r4
 800fd36:	f000 854d 	beq.w	80107d4 <_dtoa_r+0xb24>
 800fd3a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fd3c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800ff94 <_dtoa_r+0x2e4>
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	f000 854f 	beq.w	80107e4 <_dtoa_r+0xb34>
 800fd46:	f10a 0303 	add.w	r3, sl, #3
 800fd4a:	f000 bd49 	b.w	80107e0 <_dtoa_r+0xb30>
 800fd4e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fd52:	2200      	movs	r2, #0
 800fd54:	ec51 0b17 	vmov	r0, r1, d7
 800fd58:	2300      	movs	r3, #0
 800fd5a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800fd5e:	f7f0 febb 	bl	8000ad8 <__aeabi_dcmpeq>
 800fd62:	4680      	mov	r8, r0
 800fd64:	b158      	cbz	r0, 800fd7e <_dtoa_r+0xce>
 800fd66:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800fd68:	2301      	movs	r3, #1
 800fd6a:	6013      	str	r3, [r2, #0]
 800fd6c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fd6e:	b113      	cbz	r3, 800fd76 <_dtoa_r+0xc6>
 800fd70:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800fd72:	4b84      	ldr	r3, [pc, #528]	@ (800ff84 <_dtoa_r+0x2d4>)
 800fd74:	6013      	str	r3, [r2, #0]
 800fd76:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800ff98 <_dtoa_r+0x2e8>
 800fd7a:	f000 bd33 	b.w	80107e4 <_dtoa_r+0xb34>
 800fd7e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800fd82:	aa16      	add	r2, sp, #88	@ 0x58
 800fd84:	a917      	add	r1, sp, #92	@ 0x5c
 800fd86:	4658      	mov	r0, fp
 800fd88:	f001 fd86 	bl	8011898 <__d2b>
 800fd8c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800fd90:	4681      	mov	r9, r0
 800fd92:	2e00      	cmp	r6, #0
 800fd94:	d077      	beq.n	800fe86 <_dtoa_r+0x1d6>
 800fd96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fd98:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800fd9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fda0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fda4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800fda8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800fdac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800fdb0:	4619      	mov	r1, r3
 800fdb2:	2200      	movs	r2, #0
 800fdb4:	4b74      	ldr	r3, [pc, #464]	@ (800ff88 <_dtoa_r+0x2d8>)
 800fdb6:	f7f0 fa6f 	bl	8000298 <__aeabi_dsub>
 800fdba:	a369      	add	r3, pc, #420	@ (adr r3, 800ff60 <_dtoa_r+0x2b0>)
 800fdbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdc0:	f7f0 fc22 	bl	8000608 <__aeabi_dmul>
 800fdc4:	a368      	add	r3, pc, #416	@ (adr r3, 800ff68 <_dtoa_r+0x2b8>)
 800fdc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdca:	f7f0 fa67 	bl	800029c <__adddf3>
 800fdce:	4604      	mov	r4, r0
 800fdd0:	4630      	mov	r0, r6
 800fdd2:	460d      	mov	r5, r1
 800fdd4:	f7f0 fbae 	bl	8000534 <__aeabi_i2d>
 800fdd8:	a365      	add	r3, pc, #404	@ (adr r3, 800ff70 <_dtoa_r+0x2c0>)
 800fdda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdde:	f7f0 fc13 	bl	8000608 <__aeabi_dmul>
 800fde2:	4602      	mov	r2, r0
 800fde4:	460b      	mov	r3, r1
 800fde6:	4620      	mov	r0, r4
 800fde8:	4629      	mov	r1, r5
 800fdea:	f7f0 fa57 	bl	800029c <__adddf3>
 800fdee:	4604      	mov	r4, r0
 800fdf0:	460d      	mov	r5, r1
 800fdf2:	f7f0 feb9 	bl	8000b68 <__aeabi_d2iz>
 800fdf6:	2200      	movs	r2, #0
 800fdf8:	4607      	mov	r7, r0
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	4620      	mov	r0, r4
 800fdfe:	4629      	mov	r1, r5
 800fe00:	f7f0 fe74 	bl	8000aec <__aeabi_dcmplt>
 800fe04:	b140      	cbz	r0, 800fe18 <_dtoa_r+0x168>
 800fe06:	4638      	mov	r0, r7
 800fe08:	f7f0 fb94 	bl	8000534 <__aeabi_i2d>
 800fe0c:	4622      	mov	r2, r4
 800fe0e:	462b      	mov	r3, r5
 800fe10:	f7f0 fe62 	bl	8000ad8 <__aeabi_dcmpeq>
 800fe14:	b900      	cbnz	r0, 800fe18 <_dtoa_r+0x168>
 800fe16:	3f01      	subs	r7, #1
 800fe18:	2f16      	cmp	r7, #22
 800fe1a:	d851      	bhi.n	800fec0 <_dtoa_r+0x210>
 800fe1c:	4b5b      	ldr	r3, [pc, #364]	@ (800ff8c <_dtoa_r+0x2dc>)
 800fe1e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fe22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fe2a:	f7f0 fe5f 	bl	8000aec <__aeabi_dcmplt>
 800fe2e:	2800      	cmp	r0, #0
 800fe30:	d048      	beq.n	800fec4 <_dtoa_r+0x214>
 800fe32:	3f01      	subs	r7, #1
 800fe34:	2300      	movs	r3, #0
 800fe36:	9312      	str	r3, [sp, #72]	@ 0x48
 800fe38:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800fe3a:	1b9b      	subs	r3, r3, r6
 800fe3c:	1e5a      	subs	r2, r3, #1
 800fe3e:	bf44      	itt	mi
 800fe40:	f1c3 0801 	rsbmi	r8, r3, #1
 800fe44:	2300      	movmi	r3, #0
 800fe46:	9208      	str	r2, [sp, #32]
 800fe48:	bf54      	ite	pl
 800fe4a:	f04f 0800 	movpl.w	r8, #0
 800fe4e:	9308      	strmi	r3, [sp, #32]
 800fe50:	2f00      	cmp	r7, #0
 800fe52:	db39      	blt.n	800fec8 <_dtoa_r+0x218>
 800fe54:	9b08      	ldr	r3, [sp, #32]
 800fe56:	970f      	str	r7, [sp, #60]	@ 0x3c
 800fe58:	443b      	add	r3, r7
 800fe5a:	9308      	str	r3, [sp, #32]
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	930a      	str	r3, [sp, #40]	@ 0x28
 800fe60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe62:	2b09      	cmp	r3, #9
 800fe64:	d864      	bhi.n	800ff30 <_dtoa_r+0x280>
 800fe66:	2b05      	cmp	r3, #5
 800fe68:	bfc4      	itt	gt
 800fe6a:	3b04      	subgt	r3, #4
 800fe6c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800fe6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe70:	f1a3 0302 	sub.w	r3, r3, #2
 800fe74:	bfcc      	ite	gt
 800fe76:	2400      	movgt	r4, #0
 800fe78:	2401      	movle	r4, #1
 800fe7a:	2b03      	cmp	r3, #3
 800fe7c:	d863      	bhi.n	800ff46 <_dtoa_r+0x296>
 800fe7e:	e8df f003 	tbb	[pc, r3]
 800fe82:	372a      	.short	0x372a
 800fe84:	5535      	.short	0x5535
 800fe86:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800fe8a:	441e      	add	r6, r3
 800fe8c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800fe90:	2b20      	cmp	r3, #32
 800fe92:	bfc1      	itttt	gt
 800fe94:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800fe98:	409f      	lslgt	r7, r3
 800fe9a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800fe9e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800fea2:	bfd6      	itet	le
 800fea4:	f1c3 0320 	rsble	r3, r3, #32
 800fea8:	ea47 0003 	orrgt.w	r0, r7, r3
 800feac:	fa04 f003 	lslle.w	r0, r4, r3
 800feb0:	f7f0 fb30 	bl	8000514 <__aeabi_ui2d>
 800feb4:	2201      	movs	r2, #1
 800feb6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800feba:	3e01      	subs	r6, #1
 800febc:	9214      	str	r2, [sp, #80]	@ 0x50
 800febe:	e777      	b.n	800fdb0 <_dtoa_r+0x100>
 800fec0:	2301      	movs	r3, #1
 800fec2:	e7b8      	b.n	800fe36 <_dtoa_r+0x186>
 800fec4:	9012      	str	r0, [sp, #72]	@ 0x48
 800fec6:	e7b7      	b.n	800fe38 <_dtoa_r+0x188>
 800fec8:	427b      	negs	r3, r7
 800feca:	930a      	str	r3, [sp, #40]	@ 0x28
 800fecc:	2300      	movs	r3, #0
 800fece:	eba8 0807 	sub.w	r8, r8, r7
 800fed2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fed4:	e7c4      	b.n	800fe60 <_dtoa_r+0x1b0>
 800fed6:	2300      	movs	r3, #0
 800fed8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800feda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fedc:	2b00      	cmp	r3, #0
 800fede:	dc35      	bgt.n	800ff4c <_dtoa_r+0x29c>
 800fee0:	2301      	movs	r3, #1
 800fee2:	9300      	str	r3, [sp, #0]
 800fee4:	9307      	str	r3, [sp, #28]
 800fee6:	461a      	mov	r2, r3
 800fee8:	920e      	str	r2, [sp, #56]	@ 0x38
 800feea:	e00b      	b.n	800ff04 <_dtoa_r+0x254>
 800feec:	2301      	movs	r3, #1
 800feee:	e7f3      	b.n	800fed8 <_dtoa_r+0x228>
 800fef0:	2300      	movs	r3, #0
 800fef2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fef4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fef6:	18fb      	adds	r3, r7, r3
 800fef8:	9300      	str	r3, [sp, #0]
 800fefa:	3301      	adds	r3, #1
 800fefc:	2b01      	cmp	r3, #1
 800fefe:	9307      	str	r3, [sp, #28]
 800ff00:	bfb8      	it	lt
 800ff02:	2301      	movlt	r3, #1
 800ff04:	f8db 001c 	ldr.w	r0, [fp, #28]
 800ff08:	2100      	movs	r1, #0
 800ff0a:	2204      	movs	r2, #4
 800ff0c:	f102 0514 	add.w	r5, r2, #20
 800ff10:	429d      	cmp	r5, r3
 800ff12:	d91f      	bls.n	800ff54 <_dtoa_r+0x2a4>
 800ff14:	6041      	str	r1, [r0, #4]
 800ff16:	4658      	mov	r0, fp
 800ff18:	f001 f8da 	bl	80110d0 <_Balloc>
 800ff1c:	4682      	mov	sl, r0
 800ff1e:	2800      	cmp	r0, #0
 800ff20:	d13c      	bne.n	800ff9c <_dtoa_r+0x2ec>
 800ff22:	4b1b      	ldr	r3, [pc, #108]	@ (800ff90 <_dtoa_r+0x2e0>)
 800ff24:	4602      	mov	r2, r0
 800ff26:	f240 11af 	movw	r1, #431	@ 0x1af
 800ff2a:	e6d8      	b.n	800fcde <_dtoa_r+0x2e>
 800ff2c:	2301      	movs	r3, #1
 800ff2e:	e7e0      	b.n	800fef2 <_dtoa_r+0x242>
 800ff30:	2401      	movs	r4, #1
 800ff32:	2300      	movs	r3, #0
 800ff34:	9309      	str	r3, [sp, #36]	@ 0x24
 800ff36:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ff38:	f04f 33ff 	mov.w	r3, #4294967295
 800ff3c:	9300      	str	r3, [sp, #0]
 800ff3e:	9307      	str	r3, [sp, #28]
 800ff40:	2200      	movs	r2, #0
 800ff42:	2312      	movs	r3, #18
 800ff44:	e7d0      	b.n	800fee8 <_dtoa_r+0x238>
 800ff46:	2301      	movs	r3, #1
 800ff48:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ff4a:	e7f5      	b.n	800ff38 <_dtoa_r+0x288>
 800ff4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ff4e:	9300      	str	r3, [sp, #0]
 800ff50:	9307      	str	r3, [sp, #28]
 800ff52:	e7d7      	b.n	800ff04 <_dtoa_r+0x254>
 800ff54:	3101      	adds	r1, #1
 800ff56:	0052      	lsls	r2, r2, #1
 800ff58:	e7d8      	b.n	800ff0c <_dtoa_r+0x25c>
 800ff5a:	bf00      	nop
 800ff5c:	f3af 8000 	nop.w
 800ff60:	636f4361 	.word	0x636f4361
 800ff64:	3fd287a7 	.word	0x3fd287a7
 800ff68:	8b60c8b3 	.word	0x8b60c8b3
 800ff6c:	3fc68a28 	.word	0x3fc68a28
 800ff70:	509f79fb 	.word	0x509f79fb
 800ff74:	3fd34413 	.word	0x3fd34413
 800ff78:	0801429c 	.word	0x0801429c
 800ff7c:	080142b3 	.word	0x080142b3
 800ff80:	7ff00000 	.word	0x7ff00000
 800ff84:	08014601 	.word	0x08014601
 800ff88:	3ff80000 	.word	0x3ff80000
 800ff8c:	08014410 	.word	0x08014410
 800ff90:	0801430b 	.word	0x0801430b
 800ff94:	08014298 	.word	0x08014298
 800ff98:	08014600 	.word	0x08014600
 800ff9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ffa0:	6018      	str	r0, [r3, #0]
 800ffa2:	9b07      	ldr	r3, [sp, #28]
 800ffa4:	2b0e      	cmp	r3, #14
 800ffa6:	f200 80a4 	bhi.w	80100f2 <_dtoa_r+0x442>
 800ffaa:	2c00      	cmp	r4, #0
 800ffac:	f000 80a1 	beq.w	80100f2 <_dtoa_r+0x442>
 800ffb0:	2f00      	cmp	r7, #0
 800ffb2:	dd33      	ble.n	801001c <_dtoa_r+0x36c>
 800ffb4:	4bad      	ldr	r3, [pc, #692]	@ (801026c <_dtoa_r+0x5bc>)
 800ffb6:	f007 020f 	and.w	r2, r7, #15
 800ffba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ffbe:	ed93 7b00 	vldr	d7, [r3]
 800ffc2:	05f8      	lsls	r0, r7, #23
 800ffc4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ffc8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ffcc:	d516      	bpl.n	800fffc <_dtoa_r+0x34c>
 800ffce:	4ba8      	ldr	r3, [pc, #672]	@ (8010270 <_dtoa_r+0x5c0>)
 800ffd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ffd4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ffd8:	f7f0 fc40 	bl	800085c <__aeabi_ddiv>
 800ffdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ffe0:	f004 040f 	and.w	r4, r4, #15
 800ffe4:	2603      	movs	r6, #3
 800ffe6:	4da2      	ldr	r5, [pc, #648]	@ (8010270 <_dtoa_r+0x5c0>)
 800ffe8:	b954      	cbnz	r4, 8010000 <_dtoa_r+0x350>
 800ffea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ffee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fff2:	f7f0 fc33 	bl	800085c <__aeabi_ddiv>
 800fff6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fffa:	e028      	b.n	801004e <_dtoa_r+0x39e>
 800fffc:	2602      	movs	r6, #2
 800fffe:	e7f2      	b.n	800ffe6 <_dtoa_r+0x336>
 8010000:	07e1      	lsls	r1, r4, #31
 8010002:	d508      	bpl.n	8010016 <_dtoa_r+0x366>
 8010004:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010008:	e9d5 2300 	ldrd	r2, r3, [r5]
 801000c:	f7f0 fafc 	bl	8000608 <__aeabi_dmul>
 8010010:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010014:	3601      	adds	r6, #1
 8010016:	1064      	asrs	r4, r4, #1
 8010018:	3508      	adds	r5, #8
 801001a:	e7e5      	b.n	800ffe8 <_dtoa_r+0x338>
 801001c:	f000 80d2 	beq.w	80101c4 <_dtoa_r+0x514>
 8010020:	427c      	negs	r4, r7
 8010022:	4b92      	ldr	r3, [pc, #584]	@ (801026c <_dtoa_r+0x5bc>)
 8010024:	4d92      	ldr	r5, [pc, #584]	@ (8010270 <_dtoa_r+0x5c0>)
 8010026:	f004 020f 	and.w	r2, r4, #15
 801002a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801002e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010032:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010036:	f7f0 fae7 	bl	8000608 <__aeabi_dmul>
 801003a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801003e:	1124      	asrs	r4, r4, #4
 8010040:	2300      	movs	r3, #0
 8010042:	2602      	movs	r6, #2
 8010044:	2c00      	cmp	r4, #0
 8010046:	f040 80b2 	bne.w	80101ae <_dtoa_r+0x4fe>
 801004a:	2b00      	cmp	r3, #0
 801004c:	d1d3      	bne.n	800fff6 <_dtoa_r+0x346>
 801004e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010050:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010054:	2b00      	cmp	r3, #0
 8010056:	f000 80b7 	beq.w	80101c8 <_dtoa_r+0x518>
 801005a:	4b86      	ldr	r3, [pc, #536]	@ (8010274 <_dtoa_r+0x5c4>)
 801005c:	2200      	movs	r2, #0
 801005e:	4620      	mov	r0, r4
 8010060:	4629      	mov	r1, r5
 8010062:	f7f0 fd43 	bl	8000aec <__aeabi_dcmplt>
 8010066:	2800      	cmp	r0, #0
 8010068:	f000 80ae 	beq.w	80101c8 <_dtoa_r+0x518>
 801006c:	9b07      	ldr	r3, [sp, #28]
 801006e:	2b00      	cmp	r3, #0
 8010070:	f000 80aa 	beq.w	80101c8 <_dtoa_r+0x518>
 8010074:	9b00      	ldr	r3, [sp, #0]
 8010076:	2b00      	cmp	r3, #0
 8010078:	dd37      	ble.n	80100ea <_dtoa_r+0x43a>
 801007a:	1e7b      	subs	r3, r7, #1
 801007c:	9304      	str	r3, [sp, #16]
 801007e:	4620      	mov	r0, r4
 8010080:	4b7d      	ldr	r3, [pc, #500]	@ (8010278 <_dtoa_r+0x5c8>)
 8010082:	2200      	movs	r2, #0
 8010084:	4629      	mov	r1, r5
 8010086:	f7f0 fabf 	bl	8000608 <__aeabi_dmul>
 801008a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801008e:	9c00      	ldr	r4, [sp, #0]
 8010090:	3601      	adds	r6, #1
 8010092:	4630      	mov	r0, r6
 8010094:	f7f0 fa4e 	bl	8000534 <__aeabi_i2d>
 8010098:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801009c:	f7f0 fab4 	bl	8000608 <__aeabi_dmul>
 80100a0:	4b76      	ldr	r3, [pc, #472]	@ (801027c <_dtoa_r+0x5cc>)
 80100a2:	2200      	movs	r2, #0
 80100a4:	f7f0 f8fa 	bl	800029c <__adddf3>
 80100a8:	4605      	mov	r5, r0
 80100aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80100ae:	2c00      	cmp	r4, #0
 80100b0:	f040 808d 	bne.w	80101ce <_dtoa_r+0x51e>
 80100b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80100b8:	4b71      	ldr	r3, [pc, #452]	@ (8010280 <_dtoa_r+0x5d0>)
 80100ba:	2200      	movs	r2, #0
 80100bc:	f7f0 f8ec 	bl	8000298 <__aeabi_dsub>
 80100c0:	4602      	mov	r2, r0
 80100c2:	460b      	mov	r3, r1
 80100c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80100c8:	462a      	mov	r2, r5
 80100ca:	4633      	mov	r3, r6
 80100cc:	f7f0 fd2c 	bl	8000b28 <__aeabi_dcmpgt>
 80100d0:	2800      	cmp	r0, #0
 80100d2:	f040 828b 	bne.w	80105ec <_dtoa_r+0x93c>
 80100d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80100da:	462a      	mov	r2, r5
 80100dc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80100e0:	f7f0 fd04 	bl	8000aec <__aeabi_dcmplt>
 80100e4:	2800      	cmp	r0, #0
 80100e6:	f040 8128 	bne.w	801033a <_dtoa_r+0x68a>
 80100ea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80100ee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80100f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	f2c0 815a 	blt.w	80103ae <_dtoa_r+0x6fe>
 80100fa:	2f0e      	cmp	r7, #14
 80100fc:	f300 8157 	bgt.w	80103ae <_dtoa_r+0x6fe>
 8010100:	4b5a      	ldr	r3, [pc, #360]	@ (801026c <_dtoa_r+0x5bc>)
 8010102:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010106:	ed93 7b00 	vldr	d7, [r3]
 801010a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801010c:	2b00      	cmp	r3, #0
 801010e:	ed8d 7b00 	vstr	d7, [sp]
 8010112:	da03      	bge.n	801011c <_dtoa_r+0x46c>
 8010114:	9b07      	ldr	r3, [sp, #28]
 8010116:	2b00      	cmp	r3, #0
 8010118:	f340 8101 	ble.w	801031e <_dtoa_r+0x66e>
 801011c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010120:	4656      	mov	r6, sl
 8010122:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010126:	4620      	mov	r0, r4
 8010128:	4629      	mov	r1, r5
 801012a:	f7f0 fb97 	bl	800085c <__aeabi_ddiv>
 801012e:	f7f0 fd1b 	bl	8000b68 <__aeabi_d2iz>
 8010132:	4680      	mov	r8, r0
 8010134:	f7f0 f9fe 	bl	8000534 <__aeabi_i2d>
 8010138:	e9dd 2300 	ldrd	r2, r3, [sp]
 801013c:	f7f0 fa64 	bl	8000608 <__aeabi_dmul>
 8010140:	4602      	mov	r2, r0
 8010142:	460b      	mov	r3, r1
 8010144:	4620      	mov	r0, r4
 8010146:	4629      	mov	r1, r5
 8010148:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801014c:	f7f0 f8a4 	bl	8000298 <__aeabi_dsub>
 8010150:	f806 4b01 	strb.w	r4, [r6], #1
 8010154:	9d07      	ldr	r5, [sp, #28]
 8010156:	eba6 040a 	sub.w	r4, r6, sl
 801015a:	42a5      	cmp	r5, r4
 801015c:	4602      	mov	r2, r0
 801015e:	460b      	mov	r3, r1
 8010160:	f040 8117 	bne.w	8010392 <_dtoa_r+0x6e2>
 8010164:	f7f0 f89a 	bl	800029c <__adddf3>
 8010168:	e9dd 2300 	ldrd	r2, r3, [sp]
 801016c:	4604      	mov	r4, r0
 801016e:	460d      	mov	r5, r1
 8010170:	f7f0 fcda 	bl	8000b28 <__aeabi_dcmpgt>
 8010174:	2800      	cmp	r0, #0
 8010176:	f040 80f9 	bne.w	801036c <_dtoa_r+0x6bc>
 801017a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801017e:	4620      	mov	r0, r4
 8010180:	4629      	mov	r1, r5
 8010182:	f7f0 fca9 	bl	8000ad8 <__aeabi_dcmpeq>
 8010186:	b118      	cbz	r0, 8010190 <_dtoa_r+0x4e0>
 8010188:	f018 0f01 	tst.w	r8, #1
 801018c:	f040 80ee 	bne.w	801036c <_dtoa_r+0x6bc>
 8010190:	4649      	mov	r1, r9
 8010192:	4658      	mov	r0, fp
 8010194:	f000 ffdc 	bl	8011150 <_Bfree>
 8010198:	2300      	movs	r3, #0
 801019a:	7033      	strb	r3, [r6, #0]
 801019c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801019e:	3701      	adds	r7, #1
 80101a0:	601f      	str	r7, [r3, #0]
 80101a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	f000 831d 	beq.w	80107e4 <_dtoa_r+0xb34>
 80101aa:	601e      	str	r6, [r3, #0]
 80101ac:	e31a      	b.n	80107e4 <_dtoa_r+0xb34>
 80101ae:	07e2      	lsls	r2, r4, #31
 80101b0:	d505      	bpl.n	80101be <_dtoa_r+0x50e>
 80101b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80101b6:	f7f0 fa27 	bl	8000608 <__aeabi_dmul>
 80101ba:	3601      	adds	r6, #1
 80101bc:	2301      	movs	r3, #1
 80101be:	1064      	asrs	r4, r4, #1
 80101c0:	3508      	adds	r5, #8
 80101c2:	e73f      	b.n	8010044 <_dtoa_r+0x394>
 80101c4:	2602      	movs	r6, #2
 80101c6:	e742      	b.n	801004e <_dtoa_r+0x39e>
 80101c8:	9c07      	ldr	r4, [sp, #28]
 80101ca:	9704      	str	r7, [sp, #16]
 80101cc:	e761      	b.n	8010092 <_dtoa_r+0x3e2>
 80101ce:	4b27      	ldr	r3, [pc, #156]	@ (801026c <_dtoa_r+0x5bc>)
 80101d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80101d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80101d6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80101da:	4454      	add	r4, sl
 80101dc:	2900      	cmp	r1, #0
 80101de:	d053      	beq.n	8010288 <_dtoa_r+0x5d8>
 80101e0:	4928      	ldr	r1, [pc, #160]	@ (8010284 <_dtoa_r+0x5d4>)
 80101e2:	2000      	movs	r0, #0
 80101e4:	f7f0 fb3a 	bl	800085c <__aeabi_ddiv>
 80101e8:	4633      	mov	r3, r6
 80101ea:	462a      	mov	r2, r5
 80101ec:	f7f0 f854 	bl	8000298 <__aeabi_dsub>
 80101f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80101f4:	4656      	mov	r6, sl
 80101f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80101fa:	f7f0 fcb5 	bl	8000b68 <__aeabi_d2iz>
 80101fe:	4605      	mov	r5, r0
 8010200:	f7f0 f998 	bl	8000534 <__aeabi_i2d>
 8010204:	4602      	mov	r2, r0
 8010206:	460b      	mov	r3, r1
 8010208:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801020c:	f7f0 f844 	bl	8000298 <__aeabi_dsub>
 8010210:	3530      	adds	r5, #48	@ 0x30
 8010212:	4602      	mov	r2, r0
 8010214:	460b      	mov	r3, r1
 8010216:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801021a:	f806 5b01 	strb.w	r5, [r6], #1
 801021e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010222:	f7f0 fc63 	bl	8000aec <__aeabi_dcmplt>
 8010226:	2800      	cmp	r0, #0
 8010228:	d171      	bne.n	801030e <_dtoa_r+0x65e>
 801022a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801022e:	4911      	ldr	r1, [pc, #68]	@ (8010274 <_dtoa_r+0x5c4>)
 8010230:	2000      	movs	r0, #0
 8010232:	f7f0 f831 	bl	8000298 <__aeabi_dsub>
 8010236:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801023a:	f7f0 fc57 	bl	8000aec <__aeabi_dcmplt>
 801023e:	2800      	cmp	r0, #0
 8010240:	f040 8095 	bne.w	801036e <_dtoa_r+0x6be>
 8010244:	42a6      	cmp	r6, r4
 8010246:	f43f af50 	beq.w	80100ea <_dtoa_r+0x43a>
 801024a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801024e:	4b0a      	ldr	r3, [pc, #40]	@ (8010278 <_dtoa_r+0x5c8>)
 8010250:	2200      	movs	r2, #0
 8010252:	f7f0 f9d9 	bl	8000608 <__aeabi_dmul>
 8010256:	4b08      	ldr	r3, [pc, #32]	@ (8010278 <_dtoa_r+0x5c8>)
 8010258:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801025c:	2200      	movs	r2, #0
 801025e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010262:	f7f0 f9d1 	bl	8000608 <__aeabi_dmul>
 8010266:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801026a:	e7c4      	b.n	80101f6 <_dtoa_r+0x546>
 801026c:	08014410 	.word	0x08014410
 8010270:	080143e8 	.word	0x080143e8
 8010274:	3ff00000 	.word	0x3ff00000
 8010278:	40240000 	.word	0x40240000
 801027c:	401c0000 	.word	0x401c0000
 8010280:	40140000 	.word	0x40140000
 8010284:	3fe00000 	.word	0x3fe00000
 8010288:	4631      	mov	r1, r6
 801028a:	4628      	mov	r0, r5
 801028c:	f7f0 f9bc 	bl	8000608 <__aeabi_dmul>
 8010290:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010294:	9415      	str	r4, [sp, #84]	@ 0x54
 8010296:	4656      	mov	r6, sl
 8010298:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801029c:	f7f0 fc64 	bl	8000b68 <__aeabi_d2iz>
 80102a0:	4605      	mov	r5, r0
 80102a2:	f7f0 f947 	bl	8000534 <__aeabi_i2d>
 80102a6:	4602      	mov	r2, r0
 80102a8:	460b      	mov	r3, r1
 80102aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80102ae:	f7ef fff3 	bl	8000298 <__aeabi_dsub>
 80102b2:	3530      	adds	r5, #48	@ 0x30
 80102b4:	f806 5b01 	strb.w	r5, [r6], #1
 80102b8:	4602      	mov	r2, r0
 80102ba:	460b      	mov	r3, r1
 80102bc:	42a6      	cmp	r6, r4
 80102be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80102c2:	f04f 0200 	mov.w	r2, #0
 80102c6:	d124      	bne.n	8010312 <_dtoa_r+0x662>
 80102c8:	4bac      	ldr	r3, [pc, #688]	@ (801057c <_dtoa_r+0x8cc>)
 80102ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80102ce:	f7ef ffe5 	bl	800029c <__adddf3>
 80102d2:	4602      	mov	r2, r0
 80102d4:	460b      	mov	r3, r1
 80102d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80102da:	f7f0 fc25 	bl	8000b28 <__aeabi_dcmpgt>
 80102de:	2800      	cmp	r0, #0
 80102e0:	d145      	bne.n	801036e <_dtoa_r+0x6be>
 80102e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80102e6:	49a5      	ldr	r1, [pc, #660]	@ (801057c <_dtoa_r+0x8cc>)
 80102e8:	2000      	movs	r0, #0
 80102ea:	f7ef ffd5 	bl	8000298 <__aeabi_dsub>
 80102ee:	4602      	mov	r2, r0
 80102f0:	460b      	mov	r3, r1
 80102f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80102f6:	f7f0 fbf9 	bl	8000aec <__aeabi_dcmplt>
 80102fa:	2800      	cmp	r0, #0
 80102fc:	f43f aef5 	beq.w	80100ea <_dtoa_r+0x43a>
 8010300:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8010302:	1e73      	subs	r3, r6, #1
 8010304:	9315      	str	r3, [sp, #84]	@ 0x54
 8010306:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801030a:	2b30      	cmp	r3, #48	@ 0x30
 801030c:	d0f8      	beq.n	8010300 <_dtoa_r+0x650>
 801030e:	9f04      	ldr	r7, [sp, #16]
 8010310:	e73e      	b.n	8010190 <_dtoa_r+0x4e0>
 8010312:	4b9b      	ldr	r3, [pc, #620]	@ (8010580 <_dtoa_r+0x8d0>)
 8010314:	f7f0 f978 	bl	8000608 <__aeabi_dmul>
 8010318:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801031c:	e7bc      	b.n	8010298 <_dtoa_r+0x5e8>
 801031e:	d10c      	bne.n	801033a <_dtoa_r+0x68a>
 8010320:	4b98      	ldr	r3, [pc, #608]	@ (8010584 <_dtoa_r+0x8d4>)
 8010322:	2200      	movs	r2, #0
 8010324:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010328:	f7f0 f96e 	bl	8000608 <__aeabi_dmul>
 801032c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010330:	f7f0 fbf0 	bl	8000b14 <__aeabi_dcmpge>
 8010334:	2800      	cmp	r0, #0
 8010336:	f000 8157 	beq.w	80105e8 <_dtoa_r+0x938>
 801033a:	2400      	movs	r4, #0
 801033c:	4625      	mov	r5, r4
 801033e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010340:	43db      	mvns	r3, r3
 8010342:	9304      	str	r3, [sp, #16]
 8010344:	4656      	mov	r6, sl
 8010346:	2700      	movs	r7, #0
 8010348:	4621      	mov	r1, r4
 801034a:	4658      	mov	r0, fp
 801034c:	f000 ff00 	bl	8011150 <_Bfree>
 8010350:	2d00      	cmp	r5, #0
 8010352:	d0dc      	beq.n	801030e <_dtoa_r+0x65e>
 8010354:	b12f      	cbz	r7, 8010362 <_dtoa_r+0x6b2>
 8010356:	42af      	cmp	r7, r5
 8010358:	d003      	beq.n	8010362 <_dtoa_r+0x6b2>
 801035a:	4639      	mov	r1, r7
 801035c:	4658      	mov	r0, fp
 801035e:	f000 fef7 	bl	8011150 <_Bfree>
 8010362:	4629      	mov	r1, r5
 8010364:	4658      	mov	r0, fp
 8010366:	f000 fef3 	bl	8011150 <_Bfree>
 801036a:	e7d0      	b.n	801030e <_dtoa_r+0x65e>
 801036c:	9704      	str	r7, [sp, #16]
 801036e:	4633      	mov	r3, r6
 8010370:	461e      	mov	r6, r3
 8010372:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010376:	2a39      	cmp	r2, #57	@ 0x39
 8010378:	d107      	bne.n	801038a <_dtoa_r+0x6da>
 801037a:	459a      	cmp	sl, r3
 801037c:	d1f8      	bne.n	8010370 <_dtoa_r+0x6c0>
 801037e:	9a04      	ldr	r2, [sp, #16]
 8010380:	3201      	adds	r2, #1
 8010382:	9204      	str	r2, [sp, #16]
 8010384:	2230      	movs	r2, #48	@ 0x30
 8010386:	f88a 2000 	strb.w	r2, [sl]
 801038a:	781a      	ldrb	r2, [r3, #0]
 801038c:	3201      	adds	r2, #1
 801038e:	701a      	strb	r2, [r3, #0]
 8010390:	e7bd      	b.n	801030e <_dtoa_r+0x65e>
 8010392:	4b7b      	ldr	r3, [pc, #492]	@ (8010580 <_dtoa_r+0x8d0>)
 8010394:	2200      	movs	r2, #0
 8010396:	f7f0 f937 	bl	8000608 <__aeabi_dmul>
 801039a:	2200      	movs	r2, #0
 801039c:	2300      	movs	r3, #0
 801039e:	4604      	mov	r4, r0
 80103a0:	460d      	mov	r5, r1
 80103a2:	f7f0 fb99 	bl	8000ad8 <__aeabi_dcmpeq>
 80103a6:	2800      	cmp	r0, #0
 80103a8:	f43f aebb 	beq.w	8010122 <_dtoa_r+0x472>
 80103ac:	e6f0      	b.n	8010190 <_dtoa_r+0x4e0>
 80103ae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80103b0:	2a00      	cmp	r2, #0
 80103b2:	f000 80db 	beq.w	801056c <_dtoa_r+0x8bc>
 80103b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80103b8:	2a01      	cmp	r2, #1
 80103ba:	f300 80bf 	bgt.w	801053c <_dtoa_r+0x88c>
 80103be:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80103c0:	2a00      	cmp	r2, #0
 80103c2:	f000 80b7 	beq.w	8010534 <_dtoa_r+0x884>
 80103c6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80103ca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80103cc:	4646      	mov	r6, r8
 80103ce:	9a08      	ldr	r2, [sp, #32]
 80103d0:	2101      	movs	r1, #1
 80103d2:	441a      	add	r2, r3
 80103d4:	4658      	mov	r0, fp
 80103d6:	4498      	add	r8, r3
 80103d8:	9208      	str	r2, [sp, #32]
 80103da:	f000 ffb7 	bl	801134c <__i2b>
 80103de:	4605      	mov	r5, r0
 80103e0:	b15e      	cbz	r6, 80103fa <_dtoa_r+0x74a>
 80103e2:	9b08      	ldr	r3, [sp, #32]
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	dd08      	ble.n	80103fa <_dtoa_r+0x74a>
 80103e8:	42b3      	cmp	r3, r6
 80103ea:	9a08      	ldr	r2, [sp, #32]
 80103ec:	bfa8      	it	ge
 80103ee:	4633      	movge	r3, r6
 80103f0:	eba8 0803 	sub.w	r8, r8, r3
 80103f4:	1af6      	subs	r6, r6, r3
 80103f6:	1ad3      	subs	r3, r2, r3
 80103f8:	9308      	str	r3, [sp, #32]
 80103fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80103fc:	b1f3      	cbz	r3, 801043c <_dtoa_r+0x78c>
 80103fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010400:	2b00      	cmp	r3, #0
 8010402:	f000 80b7 	beq.w	8010574 <_dtoa_r+0x8c4>
 8010406:	b18c      	cbz	r4, 801042c <_dtoa_r+0x77c>
 8010408:	4629      	mov	r1, r5
 801040a:	4622      	mov	r2, r4
 801040c:	4658      	mov	r0, fp
 801040e:	f001 f85d 	bl	80114cc <__pow5mult>
 8010412:	464a      	mov	r2, r9
 8010414:	4601      	mov	r1, r0
 8010416:	4605      	mov	r5, r0
 8010418:	4658      	mov	r0, fp
 801041a:	f000 ffad 	bl	8011378 <__multiply>
 801041e:	4649      	mov	r1, r9
 8010420:	9004      	str	r0, [sp, #16]
 8010422:	4658      	mov	r0, fp
 8010424:	f000 fe94 	bl	8011150 <_Bfree>
 8010428:	9b04      	ldr	r3, [sp, #16]
 801042a:	4699      	mov	r9, r3
 801042c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801042e:	1b1a      	subs	r2, r3, r4
 8010430:	d004      	beq.n	801043c <_dtoa_r+0x78c>
 8010432:	4649      	mov	r1, r9
 8010434:	4658      	mov	r0, fp
 8010436:	f001 f849 	bl	80114cc <__pow5mult>
 801043a:	4681      	mov	r9, r0
 801043c:	2101      	movs	r1, #1
 801043e:	4658      	mov	r0, fp
 8010440:	f000 ff84 	bl	801134c <__i2b>
 8010444:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010446:	4604      	mov	r4, r0
 8010448:	2b00      	cmp	r3, #0
 801044a:	f000 81cf 	beq.w	80107ec <_dtoa_r+0xb3c>
 801044e:	461a      	mov	r2, r3
 8010450:	4601      	mov	r1, r0
 8010452:	4658      	mov	r0, fp
 8010454:	f001 f83a 	bl	80114cc <__pow5mult>
 8010458:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801045a:	2b01      	cmp	r3, #1
 801045c:	4604      	mov	r4, r0
 801045e:	f300 8095 	bgt.w	801058c <_dtoa_r+0x8dc>
 8010462:	9b02      	ldr	r3, [sp, #8]
 8010464:	2b00      	cmp	r3, #0
 8010466:	f040 8087 	bne.w	8010578 <_dtoa_r+0x8c8>
 801046a:	9b03      	ldr	r3, [sp, #12]
 801046c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010470:	2b00      	cmp	r3, #0
 8010472:	f040 8089 	bne.w	8010588 <_dtoa_r+0x8d8>
 8010476:	9b03      	ldr	r3, [sp, #12]
 8010478:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801047c:	0d1b      	lsrs	r3, r3, #20
 801047e:	051b      	lsls	r3, r3, #20
 8010480:	b12b      	cbz	r3, 801048e <_dtoa_r+0x7de>
 8010482:	9b08      	ldr	r3, [sp, #32]
 8010484:	3301      	adds	r3, #1
 8010486:	9308      	str	r3, [sp, #32]
 8010488:	f108 0801 	add.w	r8, r8, #1
 801048c:	2301      	movs	r3, #1
 801048e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010490:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010492:	2b00      	cmp	r3, #0
 8010494:	f000 81b0 	beq.w	80107f8 <_dtoa_r+0xb48>
 8010498:	6923      	ldr	r3, [r4, #16]
 801049a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801049e:	6918      	ldr	r0, [r3, #16]
 80104a0:	f000 ff08 	bl	80112b4 <__hi0bits>
 80104a4:	f1c0 0020 	rsb	r0, r0, #32
 80104a8:	9b08      	ldr	r3, [sp, #32]
 80104aa:	4418      	add	r0, r3
 80104ac:	f010 001f 	ands.w	r0, r0, #31
 80104b0:	d077      	beq.n	80105a2 <_dtoa_r+0x8f2>
 80104b2:	f1c0 0320 	rsb	r3, r0, #32
 80104b6:	2b04      	cmp	r3, #4
 80104b8:	dd6b      	ble.n	8010592 <_dtoa_r+0x8e2>
 80104ba:	9b08      	ldr	r3, [sp, #32]
 80104bc:	f1c0 001c 	rsb	r0, r0, #28
 80104c0:	4403      	add	r3, r0
 80104c2:	4480      	add	r8, r0
 80104c4:	4406      	add	r6, r0
 80104c6:	9308      	str	r3, [sp, #32]
 80104c8:	f1b8 0f00 	cmp.w	r8, #0
 80104cc:	dd05      	ble.n	80104da <_dtoa_r+0x82a>
 80104ce:	4649      	mov	r1, r9
 80104d0:	4642      	mov	r2, r8
 80104d2:	4658      	mov	r0, fp
 80104d4:	f001 f854 	bl	8011580 <__lshift>
 80104d8:	4681      	mov	r9, r0
 80104da:	9b08      	ldr	r3, [sp, #32]
 80104dc:	2b00      	cmp	r3, #0
 80104de:	dd05      	ble.n	80104ec <_dtoa_r+0x83c>
 80104e0:	4621      	mov	r1, r4
 80104e2:	461a      	mov	r2, r3
 80104e4:	4658      	mov	r0, fp
 80104e6:	f001 f84b 	bl	8011580 <__lshift>
 80104ea:	4604      	mov	r4, r0
 80104ec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d059      	beq.n	80105a6 <_dtoa_r+0x8f6>
 80104f2:	4621      	mov	r1, r4
 80104f4:	4648      	mov	r0, r9
 80104f6:	f001 f8af 	bl	8011658 <__mcmp>
 80104fa:	2800      	cmp	r0, #0
 80104fc:	da53      	bge.n	80105a6 <_dtoa_r+0x8f6>
 80104fe:	1e7b      	subs	r3, r7, #1
 8010500:	9304      	str	r3, [sp, #16]
 8010502:	4649      	mov	r1, r9
 8010504:	2300      	movs	r3, #0
 8010506:	220a      	movs	r2, #10
 8010508:	4658      	mov	r0, fp
 801050a:	f000 fe43 	bl	8011194 <__multadd>
 801050e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010510:	4681      	mov	r9, r0
 8010512:	2b00      	cmp	r3, #0
 8010514:	f000 8172 	beq.w	80107fc <_dtoa_r+0xb4c>
 8010518:	2300      	movs	r3, #0
 801051a:	4629      	mov	r1, r5
 801051c:	220a      	movs	r2, #10
 801051e:	4658      	mov	r0, fp
 8010520:	f000 fe38 	bl	8011194 <__multadd>
 8010524:	9b00      	ldr	r3, [sp, #0]
 8010526:	2b00      	cmp	r3, #0
 8010528:	4605      	mov	r5, r0
 801052a:	dc67      	bgt.n	80105fc <_dtoa_r+0x94c>
 801052c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801052e:	2b02      	cmp	r3, #2
 8010530:	dc41      	bgt.n	80105b6 <_dtoa_r+0x906>
 8010532:	e063      	b.n	80105fc <_dtoa_r+0x94c>
 8010534:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010536:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801053a:	e746      	b.n	80103ca <_dtoa_r+0x71a>
 801053c:	9b07      	ldr	r3, [sp, #28]
 801053e:	1e5c      	subs	r4, r3, #1
 8010540:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010542:	42a3      	cmp	r3, r4
 8010544:	bfbf      	itttt	lt
 8010546:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010548:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801054a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801054c:	1ae3      	sublt	r3, r4, r3
 801054e:	bfb4      	ite	lt
 8010550:	18d2      	addlt	r2, r2, r3
 8010552:	1b1c      	subge	r4, r3, r4
 8010554:	9b07      	ldr	r3, [sp, #28]
 8010556:	bfbc      	itt	lt
 8010558:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801055a:	2400      	movlt	r4, #0
 801055c:	2b00      	cmp	r3, #0
 801055e:	bfb5      	itete	lt
 8010560:	eba8 0603 	sublt.w	r6, r8, r3
 8010564:	9b07      	ldrge	r3, [sp, #28]
 8010566:	2300      	movlt	r3, #0
 8010568:	4646      	movge	r6, r8
 801056a:	e730      	b.n	80103ce <_dtoa_r+0x71e>
 801056c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801056e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8010570:	4646      	mov	r6, r8
 8010572:	e735      	b.n	80103e0 <_dtoa_r+0x730>
 8010574:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010576:	e75c      	b.n	8010432 <_dtoa_r+0x782>
 8010578:	2300      	movs	r3, #0
 801057a:	e788      	b.n	801048e <_dtoa_r+0x7de>
 801057c:	3fe00000 	.word	0x3fe00000
 8010580:	40240000 	.word	0x40240000
 8010584:	40140000 	.word	0x40140000
 8010588:	9b02      	ldr	r3, [sp, #8]
 801058a:	e780      	b.n	801048e <_dtoa_r+0x7de>
 801058c:	2300      	movs	r3, #0
 801058e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010590:	e782      	b.n	8010498 <_dtoa_r+0x7e8>
 8010592:	d099      	beq.n	80104c8 <_dtoa_r+0x818>
 8010594:	9a08      	ldr	r2, [sp, #32]
 8010596:	331c      	adds	r3, #28
 8010598:	441a      	add	r2, r3
 801059a:	4498      	add	r8, r3
 801059c:	441e      	add	r6, r3
 801059e:	9208      	str	r2, [sp, #32]
 80105a0:	e792      	b.n	80104c8 <_dtoa_r+0x818>
 80105a2:	4603      	mov	r3, r0
 80105a4:	e7f6      	b.n	8010594 <_dtoa_r+0x8e4>
 80105a6:	9b07      	ldr	r3, [sp, #28]
 80105a8:	9704      	str	r7, [sp, #16]
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	dc20      	bgt.n	80105f0 <_dtoa_r+0x940>
 80105ae:	9300      	str	r3, [sp, #0]
 80105b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80105b2:	2b02      	cmp	r3, #2
 80105b4:	dd1e      	ble.n	80105f4 <_dtoa_r+0x944>
 80105b6:	9b00      	ldr	r3, [sp, #0]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	f47f aec0 	bne.w	801033e <_dtoa_r+0x68e>
 80105be:	4621      	mov	r1, r4
 80105c0:	2205      	movs	r2, #5
 80105c2:	4658      	mov	r0, fp
 80105c4:	f000 fde6 	bl	8011194 <__multadd>
 80105c8:	4601      	mov	r1, r0
 80105ca:	4604      	mov	r4, r0
 80105cc:	4648      	mov	r0, r9
 80105ce:	f001 f843 	bl	8011658 <__mcmp>
 80105d2:	2800      	cmp	r0, #0
 80105d4:	f77f aeb3 	ble.w	801033e <_dtoa_r+0x68e>
 80105d8:	4656      	mov	r6, sl
 80105da:	2331      	movs	r3, #49	@ 0x31
 80105dc:	f806 3b01 	strb.w	r3, [r6], #1
 80105e0:	9b04      	ldr	r3, [sp, #16]
 80105e2:	3301      	adds	r3, #1
 80105e4:	9304      	str	r3, [sp, #16]
 80105e6:	e6ae      	b.n	8010346 <_dtoa_r+0x696>
 80105e8:	9c07      	ldr	r4, [sp, #28]
 80105ea:	9704      	str	r7, [sp, #16]
 80105ec:	4625      	mov	r5, r4
 80105ee:	e7f3      	b.n	80105d8 <_dtoa_r+0x928>
 80105f0:	9b07      	ldr	r3, [sp, #28]
 80105f2:	9300      	str	r3, [sp, #0]
 80105f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	f000 8104 	beq.w	8010804 <_dtoa_r+0xb54>
 80105fc:	2e00      	cmp	r6, #0
 80105fe:	dd05      	ble.n	801060c <_dtoa_r+0x95c>
 8010600:	4629      	mov	r1, r5
 8010602:	4632      	mov	r2, r6
 8010604:	4658      	mov	r0, fp
 8010606:	f000 ffbb 	bl	8011580 <__lshift>
 801060a:	4605      	mov	r5, r0
 801060c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801060e:	2b00      	cmp	r3, #0
 8010610:	d05a      	beq.n	80106c8 <_dtoa_r+0xa18>
 8010612:	6869      	ldr	r1, [r5, #4]
 8010614:	4658      	mov	r0, fp
 8010616:	f000 fd5b 	bl	80110d0 <_Balloc>
 801061a:	4606      	mov	r6, r0
 801061c:	b928      	cbnz	r0, 801062a <_dtoa_r+0x97a>
 801061e:	4b84      	ldr	r3, [pc, #528]	@ (8010830 <_dtoa_r+0xb80>)
 8010620:	4602      	mov	r2, r0
 8010622:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010626:	f7ff bb5a 	b.w	800fcde <_dtoa_r+0x2e>
 801062a:	692a      	ldr	r2, [r5, #16]
 801062c:	3202      	adds	r2, #2
 801062e:	0092      	lsls	r2, r2, #2
 8010630:	f105 010c 	add.w	r1, r5, #12
 8010634:	300c      	adds	r0, #12
 8010636:	f7ff fa94 	bl	800fb62 <memcpy>
 801063a:	2201      	movs	r2, #1
 801063c:	4631      	mov	r1, r6
 801063e:	4658      	mov	r0, fp
 8010640:	f000 ff9e 	bl	8011580 <__lshift>
 8010644:	f10a 0301 	add.w	r3, sl, #1
 8010648:	9307      	str	r3, [sp, #28]
 801064a:	9b00      	ldr	r3, [sp, #0]
 801064c:	4453      	add	r3, sl
 801064e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010650:	9b02      	ldr	r3, [sp, #8]
 8010652:	f003 0301 	and.w	r3, r3, #1
 8010656:	462f      	mov	r7, r5
 8010658:	930a      	str	r3, [sp, #40]	@ 0x28
 801065a:	4605      	mov	r5, r0
 801065c:	9b07      	ldr	r3, [sp, #28]
 801065e:	4621      	mov	r1, r4
 8010660:	3b01      	subs	r3, #1
 8010662:	4648      	mov	r0, r9
 8010664:	9300      	str	r3, [sp, #0]
 8010666:	f7ff fa99 	bl	800fb9c <quorem>
 801066a:	4639      	mov	r1, r7
 801066c:	9002      	str	r0, [sp, #8]
 801066e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010672:	4648      	mov	r0, r9
 8010674:	f000 fff0 	bl	8011658 <__mcmp>
 8010678:	462a      	mov	r2, r5
 801067a:	9008      	str	r0, [sp, #32]
 801067c:	4621      	mov	r1, r4
 801067e:	4658      	mov	r0, fp
 8010680:	f001 f806 	bl	8011690 <__mdiff>
 8010684:	68c2      	ldr	r2, [r0, #12]
 8010686:	4606      	mov	r6, r0
 8010688:	bb02      	cbnz	r2, 80106cc <_dtoa_r+0xa1c>
 801068a:	4601      	mov	r1, r0
 801068c:	4648      	mov	r0, r9
 801068e:	f000 ffe3 	bl	8011658 <__mcmp>
 8010692:	4602      	mov	r2, r0
 8010694:	4631      	mov	r1, r6
 8010696:	4658      	mov	r0, fp
 8010698:	920e      	str	r2, [sp, #56]	@ 0x38
 801069a:	f000 fd59 	bl	8011150 <_Bfree>
 801069e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80106a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80106a2:	9e07      	ldr	r6, [sp, #28]
 80106a4:	ea43 0102 	orr.w	r1, r3, r2
 80106a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80106aa:	4319      	orrs	r1, r3
 80106ac:	d110      	bne.n	80106d0 <_dtoa_r+0xa20>
 80106ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80106b2:	d029      	beq.n	8010708 <_dtoa_r+0xa58>
 80106b4:	9b08      	ldr	r3, [sp, #32]
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	dd02      	ble.n	80106c0 <_dtoa_r+0xa10>
 80106ba:	9b02      	ldr	r3, [sp, #8]
 80106bc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80106c0:	9b00      	ldr	r3, [sp, #0]
 80106c2:	f883 8000 	strb.w	r8, [r3]
 80106c6:	e63f      	b.n	8010348 <_dtoa_r+0x698>
 80106c8:	4628      	mov	r0, r5
 80106ca:	e7bb      	b.n	8010644 <_dtoa_r+0x994>
 80106cc:	2201      	movs	r2, #1
 80106ce:	e7e1      	b.n	8010694 <_dtoa_r+0x9e4>
 80106d0:	9b08      	ldr	r3, [sp, #32]
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	db04      	blt.n	80106e0 <_dtoa_r+0xa30>
 80106d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80106d8:	430b      	orrs	r3, r1
 80106da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80106dc:	430b      	orrs	r3, r1
 80106de:	d120      	bne.n	8010722 <_dtoa_r+0xa72>
 80106e0:	2a00      	cmp	r2, #0
 80106e2:	dded      	ble.n	80106c0 <_dtoa_r+0xa10>
 80106e4:	4649      	mov	r1, r9
 80106e6:	2201      	movs	r2, #1
 80106e8:	4658      	mov	r0, fp
 80106ea:	f000 ff49 	bl	8011580 <__lshift>
 80106ee:	4621      	mov	r1, r4
 80106f0:	4681      	mov	r9, r0
 80106f2:	f000 ffb1 	bl	8011658 <__mcmp>
 80106f6:	2800      	cmp	r0, #0
 80106f8:	dc03      	bgt.n	8010702 <_dtoa_r+0xa52>
 80106fa:	d1e1      	bne.n	80106c0 <_dtoa_r+0xa10>
 80106fc:	f018 0f01 	tst.w	r8, #1
 8010700:	d0de      	beq.n	80106c0 <_dtoa_r+0xa10>
 8010702:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010706:	d1d8      	bne.n	80106ba <_dtoa_r+0xa0a>
 8010708:	9a00      	ldr	r2, [sp, #0]
 801070a:	2339      	movs	r3, #57	@ 0x39
 801070c:	7013      	strb	r3, [r2, #0]
 801070e:	4633      	mov	r3, r6
 8010710:	461e      	mov	r6, r3
 8010712:	3b01      	subs	r3, #1
 8010714:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010718:	2a39      	cmp	r2, #57	@ 0x39
 801071a:	d052      	beq.n	80107c2 <_dtoa_r+0xb12>
 801071c:	3201      	adds	r2, #1
 801071e:	701a      	strb	r2, [r3, #0]
 8010720:	e612      	b.n	8010348 <_dtoa_r+0x698>
 8010722:	2a00      	cmp	r2, #0
 8010724:	dd07      	ble.n	8010736 <_dtoa_r+0xa86>
 8010726:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801072a:	d0ed      	beq.n	8010708 <_dtoa_r+0xa58>
 801072c:	9a00      	ldr	r2, [sp, #0]
 801072e:	f108 0301 	add.w	r3, r8, #1
 8010732:	7013      	strb	r3, [r2, #0]
 8010734:	e608      	b.n	8010348 <_dtoa_r+0x698>
 8010736:	9b07      	ldr	r3, [sp, #28]
 8010738:	9a07      	ldr	r2, [sp, #28]
 801073a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801073e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010740:	4293      	cmp	r3, r2
 8010742:	d028      	beq.n	8010796 <_dtoa_r+0xae6>
 8010744:	4649      	mov	r1, r9
 8010746:	2300      	movs	r3, #0
 8010748:	220a      	movs	r2, #10
 801074a:	4658      	mov	r0, fp
 801074c:	f000 fd22 	bl	8011194 <__multadd>
 8010750:	42af      	cmp	r7, r5
 8010752:	4681      	mov	r9, r0
 8010754:	f04f 0300 	mov.w	r3, #0
 8010758:	f04f 020a 	mov.w	r2, #10
 801075c:	4639      	mov	r1, r7
 801075e:	4658      	mov	r0, fp
 8010760:	d107      	bne.n	8010772 <_dtoa_r+0xac2>
 8010762:	f000 fd17 	bl	8011194 <__multadd>
 8010766:	4607      	mov	r7, r0
 8010768:	4605      	mov	r5, r0
 801076a:	9b07      	ldr	r3, [sp, #28]
 801076c:	3301      	adds	r3, #1
 801076e:	9307      	str	r3, [sp, #28]
 8010770:	e774      	b.n	801065c <_dtoa_r+0x9ac>
 8010772:	f000 fd0f 	bl	8011194 <__multadd>
 8010776:	4629      	mov	r1, r5
 8010778:	4607      	mov	r7, r0
 801077a:	2300      	movs	r3, #0
 801077c:	220a      	movs	r2, #10
 801077e:	4658      	mov	r0, fp
 8010780:	f000 fd08 	bl	8011194 <__multadd>
 8010784:	4605      	mov	r5, r0
 8010786:	e7f0      	b.n	801076a <_dtoa_r+0xaba>
 8010788:	9b00      	ldr	r3, [sp, #0]
 801078a:	2b00      	cmp	r3, #0
 801078c:	bfcc      	ite	gt
 801078e:	461e      	movgt	r6, r3
 8010790:	2601      	movle	r6, #1
 8010792:	4456      	add	r6, sl
 8010794:	2700      	movs	r7, #0
 8010796:	4649      	mov	r1, r9
 8010798:	2201      	movs	r2, #1
 801079a:	4658      	mov	r0, fp
 801079c:	f000 fef0 	bl	8011580 <__lshift>
 80107a0:	4621      	mov	r1, r4
 80107a2:	4681      	mov	r9, r0
 80107a4:	f000 ff58 	bl	8011658 <__mcmp>
 80107a8:	2800      	cmp	r0, #0
 80107aa:	dcb0      	bgt.n	801070e <_dtoa_r+0xa5e>
 80107ac:	d102      	bne.n	80107b4 <_dtoa_r+0xb04>
 80107ae:	f018 0f01 	tst.w	r8, #1
 80107b2:	d1ac      	bne.n	801070e <_dtoa_r+0xa5e>
 80107b4:	4633      	mov	r3, r6
 80107b6:	461e      	mov	r6, r3
 80107b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80107bc:	2a30      	cmp	r2, #48	@ 0x30
 80107be:	d0fa      	beq.n	80107b6 <_dtoa_r+0xb06>
 80107c0:	e5c2      	b.n	8010348 <_dtoa_r+0x698>
 80107c2:	459a      	cmp	sl, r3
 80107c4:	d1a4      	bne.n	8010710 <_dtoa_r+0xa60>
 80107c6:	9b04      	ldr	r3, [sp, #16]
 80107c8:	3301      	adds	r3, #1
 80107ca:	9304      	str	r3, [sp, #16]
 80107cc:	2331      	movs	r3, #49	@ 0x31
 80107ce:	f88a 3000 	strb.w	r3, [sl]
 80107d2:	e5b9      	b.n	8010348 <_dtoa_r+0x698>
 80107d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80107d6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8010834 <_dtoa_r+0xb84>
 80107da:	b11b      	cbz	r3, 80107e4 <_dtoa_r+0xb34>
 80107dc:	f10a 0308 	add.w	r3, sl, #8
 80107e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80107e2:	6013      	str	r3, [r2, #0]
 80107e4:	4650      	mov	r0, sl
 80107e6:	b019      	add	sp, #100	@ 0x64
 80107e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80107ee:	2b01      	cmp	r3, #1
 80107f0:	f77f ae37 	ble.w	8010462 <_dtoa_r+0x7b2>
 80107f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80107f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80107f8:	2001      	movs	r0, #1
 80107fa:	e655      	b.n	80104a8 <_dtoa_r+0x7f8>
 80107fc:	9b00      	ldr	r3, [sp, #0]
 80107fe:	2b00      	cmp	r3, #0
 8010800:	f77f aed6 	ble.w	80105b0 <_dtoa_r+0x900>
 8010804:	4656      	mov	r6, sl
 8010806:	4621      	mov	r1, r4
 8010808:	4648      	mov	r0, r9
 801080a:	f7ff f9c7 	bl	800fb9c <quorem>
 801080e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010812:	f806 8b01 	strb.w	r8, [r6], #1
 8010816:	9b00      	ldr	r3, [sp, #0]
 8010818:	eba6 020a 	sub.w	r2, r6, sl
 801081c:	4293      	cmp	r3, r2
 801081e:	ddb3      	ble.n	8010788 <_dtoa_r+0xad8>
 8010820:	4649      	mov	r1, r9
 8010822:	2300      	movs	r3, #0
 8010824:	220a      	movs	r2, #10
 8010826:	4658      	mov	r0, fp
 8010828:	f000 fcb4 	bl	8011194 <__multadd>
 801082c:	4681      	mov	r9, r0
 801082e:	e7ea      	b.n	8010806 <_dtoa_r+0xb56>
 8010830:	0801430b 	.word	0x0801430b
 8010834:	0801428f 	.word	0x0801428f

08010838 <_free_r>:
 8010838:	b538      	push	{r3, r4, r5, lr}
 801083a:	4605      	mov	r5, r0
 801083c:	2900      	cmp	r1, #0
 801083e:	d041      	beq.n	80108c4 <_free_r+0x8c>
 8010840:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010844:	1f0c      	subs	r4, r1, #4
 8010846:	2b00      	cmp	r3, #0
 8010848:	bfb8      	it	lt
 801084a:	18e4      	addlt	r4, r4, r3
 801084c:	f000 fc34 	bl	80110b8 <__malloc_lock>
 8010850:	4a1d      	ldr	r2, [pc, #116]	@ (80108c8 <_free_r+0x90>)
 8010852:	6813      	ldr	r3, [r2, #0]
 8010854:	b933      	cbnz	r3, 8010864 <_free_r+0x2c>
 8010856:	6063      	str	r3, [r4, #4]
 8010858:	6014      	str	r4, [r2, #0]
 801085a:	4628      	mov	r0, r5
 801085c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010860:	f000 bc30 	b.w	80110c4 <__malloc_unlock>
 8010864:	42a3      	cmp	r3, r4
 8010866:	d908      	bls.n	801087a <_free_r+0x42>
 8010868:	6820      	ldr	r0, [r4, #0]
 801086a:	1821      	adds	r1, r4, r0
 801086c:	428b      	cmp	r3, r1
 801086e:	bf01      	itttt	eq
 8010870:	6819      	ldreq	r1, [r3, #0]
 8010872:	685b      	ldreq	r3, [r3, #4]
 8010874:	1809      	addeq	r1, r1, r0
 8010876:	6021      	streq	r1, [r4, #0]
 8010878:	e7ed      	b.n	8010856 <_free_r+0x1e>
 801087a:	461a      	mov	r2, r3
 801087c:	685b      	ldr	r3, [r3, #4]
 801087e:	b10b      	cbz	r3, 8010884 <_free_r+0x4c>
 8010880:	42a3      	cmp	r3, r4
 8010882:	d9fa      	bls.n	801087a <_free_r+0x42>
 8010884:	6811      	ldr	r1, [r2, #0]
 8010886:	1850      	adds	r0, r2, r1
 8010888:	42a0      	cmp	r0, r4
 801088a:	d10b      	bne.n	80108a4 <_free_r+0x6c>
 801088c:	6820      	ldr	r0, [r4, #0]
 801088e:	4401      	add	r1, r0
 8010890:	1850      	adds	r0, r2, r1
 8010892:	4283      	cmp	r3, r0
 8010894:	6011      	str	r1, [r2, #0]
 8010896:	d1e0      	bne.n	801085a <_free_r+0x22>
 8010898:	6818      	ldr	r0, [r3, #0]
 801089a:	685b      	ldr	r3, [r3, #4]
 801089c:	6053      	str	r3, [r2, #4]
 801089e:	4408      	add	r0, r1
 80108a0:	6010      	str	r0, [r2, #0]
 80108a2:	e7da      	b.n	801085a <_free_r+0x22>
 80108a4:	d902      	bls.n	80108ac <_free_r+0x74>
 80108a6:	230c      	movs	r3, #12
 80108a8:	602b      	str	r3, [r5, #0]
 80108aa:	e7d6      	b.n	801085a <_free_r+0x22>
 80108ac:	6820      	ldr	r0, [r4, #0]
 80108ae:	1821      	adds	r1, r4, r0
 80108b0:	428b      	cmp	r3, r1
 80108b2:	bf04      	itt	eq
 80108b4:	6819      	ldreq	r1, [r3, #0]
 80108b6:	685b      	ldreq	r3, [r3, #4]
 80108b8:	6063      	str	r3, [r4, #4]
 80108ba:	bf04      	itt	eq
 80108bc:	1809      	addeq	r1, r1, r0
 80108be:	6021      	streq	r1, [r4, #0]
 80108c0:	6054      	str	r4, [r2, #4]
 80108c2:	e7ca      	b.n	801085a <_free_r+0x22>
 80108c4:	bd38      	pop	{r3, r4, r5, pc}
 80108c6:	bf00      	nop
 80108c8:	20002e1c 	.word	0x20002e1c

080108cc <rshift>:
 80108cc:	6903      	ldr	r3, [r0, #16]
 80108ce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80108d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80108d6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80108da:	f100 0414 	add.w	r4, r0, #20
 80108de:	dd45      	ble.n	801096c <rshift+0xa0>
 80108e0:	f011 011f 	ands.w	r1, r1, #31
 80108e4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80108e8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80108ec:	d10c      	bne.n	8010908 <rshift+0x3c>
 80108ee:	f100 0710 	add.w	r7, r0, #16
 80108f2:	4629      	mov	r1, r5
 80108f4:	42b1      	cmp	r1, r6
 80108f6:	d334      	bcc.n	8010962 <rshift+0x96>
 80108f8:	1a9b      	subs	r3, r3, r2
 80108fa:	009b      	lsls	r3, r3, #2
 80108fc:	1eea      	subs	r2, r5, #3
 80108fe:	4296      	cmp	r6, r2
 8010900:	bf38      	it	cc
 8010902:	2300      	movcc	r3, #0
 8010904:	4423      	add	r3, r4
 8010906:	e015      	b.n	8010934 <rshift+0x68>
 8010908:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801090c:	f1c1 0820 	rsb	r8, r1, #32
 8010910:	40cf      	lsrs	r7, r1
 8010912:	f105 0e04 	add.w	lr, r5, #4
 8010916:	46a1      	mov	r9, r4
 8010918:	4576      	cmp	r6, lr
 801091a:	46f4      	mov	ip, lr
 801091c:	d815      	bhi.n	801094a <rshift+0x7e>
 801091e:	1a9a      	subs	r2, r3, r2
 8010920:	0092      	lsls	r2, r2, #2
 8010922:	3a04      	subs	r2, #4
 8010924:	3501      	adds	r5, #1
 8010926:	42ae      	cmp	r6, r5
 8010928:	bf38      	it	cc
 801092a:	2200      	movcc	r2, #0
 801092c:	18a3      	adds	r3, r4, r2
 801092e:	50a7      	str	r7, [r4, r2]
 8010930:	b107      	cbz	r7, 8010934 <rshift+0x68>
 8010932:	3304      	adds	r3, #4
 8010934:	1b1a      	subs	r2, r3, r4
 8010936:	42a3      	cmp	r3, r4
 8010938:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801093c:	bf08      	it	eq
 801093e:	2300      	moveq	r3, #0
 8010940:	6102      	str	r2, [r0, #16]
 8010942:	bf08      	it	eq
 8010944:	6143      	streq	r3, [r0, #20]
 8010946:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801094a:	f8dc c000 	ldr.w	ip, [ip]
 801094e:	fa0c fc08 	lsl.w	ip, ip, r8
 8010952:	ea4c 0707 	orr.w	r7, ip, r7
 8010956:	f849 7b04 	str.w	r7, [r9], #4
 801095a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801095e:	40cf      	lsrs	r7, r1
 8010960:	e7da      	b.n	8010918 <rshift+0x4c>
 8010962:	f851 cb04 	ldr.w	ip, [r1], #4
 8010966:	f847 cf04 	str.w	ip, [r7, #4]!
 801096a:	e7c3      	b.n	80108f4 <rshift+0x28>
 801096c:	4623      	mov	r3, r4
 801096e:	e7e1      	b.n	8010934 <rshift+0x68>

08010970 <__hexdig_fun>:
 8010970:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8010974:	2b09      	cmp	r3, #9
 8010976:	d802      	bhi.n	801097e <__hexdig_fun+0xe>
 8010978:	3820      	subs	r0, #32
 801097a:	b2c0      	uxtb	r0, r0
 801097c:	4770      	bx	lr
 801097e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8010982:	2b05      	cmp	r3, #5
 8010984:	d801      	bhi.n	801098a <__hexdig_fun+0x1a>
 8010986:	3847      	subs	r0, #71	@ 0x47
 8010988:	e7f7      	b.n	801097a <__hexdig_fun+0xa>
 801098a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801098e:	2b05      	cmp	r3, #5
 8010990:	d801      	bhi.n	8010996 <__hexdig_fun+0x26>
 8010992:	3827      	subs	r0, #39	@ 0x27
 8010994:	e7f1      	b.n	801097a <__hexdig_fun+0xa>
 8010996:	2000      	movs	r0, #0
 8010998:	4770      	bx	lr
	...

0801099c <__gethex>:
 801099c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109a0:	b085      	sub	sp, #20
 80109a2:	468a      	mov	sl, r1
 80109a4:	9302      	str	r3, [sp, #8]
 80109a6:	680b      	ldr	r3, [r1, #0]
 80109a8:	9001      	str	r0, [sp, #4]
 80109aa:	4690      	mov	r8, r2
 80109ac:	1c9c      	adds	r4, r3, #2
 80109ae:	46a1      	mov	r9, r4
 80109b0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80109b4:	2830      	cmp	r0, #48	@ 0x30
 80109b6:	d0fa      	beq.n	80109ae <__gethex+0x12>
 80109b8:	eba9 0303 	sub.w	r3, r9, r3
 80109bc:	f1a3 0b02 	sub.w	fp, r3, #2
 80109c0:	f7ff ffd6 	bl	8010970 <__hexdig_fun>
 80109c4:	4605      	mov	r5, r0
 80109c6:	2800      	cmp	r0, #0
 80109c8:	d168      	bne.n	8010a9c <__gethex+0x100>
 80109ca:	49a0      	ldr	r1, [pc, #640]	@ (8010c4c <__gethex+0x2b0>)
 80109cc:	2201      	movs	r2, #1
 80109ce:	4648      	mov	r0, r9
 80109d0:	f7ff f82b 	bl	800fa2a <strncmp>
 80109d4:	4607      	mov	r7, r0
 80109d6:	2800      	cmp	r0, #0
 80109d8:	d167      	bne.n	8010aaa <__gethex+0x10e>
 80109da:	f899 0001 	ldrb.w	r0, [r9, #1]
 80109de:	4626      	mov	r6, r4
 80109e0:	f7ff ffc6 	bl	8010970 <__hexdig_fun>
 80109e4:	2800      	cmp	r0, #0
 80109e6:	d062      	beq.n	8010aae <__gethex+0x112>
 80109e8:	4623      	mov	r3, r4
 80109ea:	7818      	ldrb	r0, [r3, #0]
 80109ec:	2830      	cmp	r0, #48	@ 0x30
 80109ee:	4699      	mov	r9, r3
 80109f0:	f103 0301 	add.w	r3, r3, #1
 80109f4:	d0f9      	beq.n	80109ea <__gethex+0x4e>
 80109f6:	f7ff ffbb 	bl	8010970 <__hexdig_fun>
 80109fa:	fab0 f580 	clz	r5, r0
 80109fe:	096d      	lsrs	r5, r5, #5
 8010a00:	f04f 0b01 	mov.w	fp, #1
 8010a04:	464a      	mov	r2, r9
 8010a06:	4616      	mov	r6, r2
 8010a08:	3201      	adds	r2, #1
 8010a0a:	7830      	ldrb	r0, [r6, #0]
 8010a0c:	f7ff ffb0 	bl	8010970 <__hexdig_fun>
 8010a10:	2800      	cmp	r0, #0
 8010a12:	d1f8      	bne.n	8010a06 <__gethex+0x6a>
 8010a14:	498d      	ldr	r1, [pc, #564]	@ (8010c4c <__gethex+0x2b0>)
 8010a16:	2201      	movs	r2, #1
 8010a18:	4630      	mov	r0, r6
 8010a1a:	f7ff f806 	bl	800fa2a <strncmp>
 8010a1e:	2800      	cmp	r0, #0
 8010a20:	d13f      	bne.n	8010aa2 <__gethex+0x106>
 8010a22:	b944      	cbnz	r4, 8010a36 <__gethex+0x9a>
 8010a24:	1c74      	adds	r4, r6, #1
 8010a26:	4622      	mov	r2, r4
 8010a28:	4616      	mov	r6, r2
 8010a2a:	3201      	adds	r2, #1
 8010a2c:	7830      	ldrb	r0, [r6, #0]
 8010a2e:	f7ff ff9f 	bl	8010970 <__hexdig_fun>
 8010a32:	2800      	cmp	r0, #0
 8010a34:	d1f8      	bne.n	8010a28 <__gethex+0x8c>
 8010a36:	1ba4      	subs	r4, r4, r6
 8010a38:	00a7      	lsls	r7, r4, #2
 8010a3a:	7833      	ldrb	r3, [r6, #0]
 8010a3c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010a40:	2b50      	cmp	r3, #80	@ 0x50
 8010a42:	d13e      	bne.n	8010ac2 <__gethex+0x126>
 8010a44:	7873      	ldrb	r3, [r6, #1]
 8010a46:	2b2b      	cmp	r3, #43	@ 0x2b
 8010a48:	d033      	beq.n	8010ab2 <__gethex+0x116>
 8010a4a:	2b2d      	cmp	r3, #45	@ 0x2d
 8010a4c:	d034      	beq.n	8010ab8 <__gethex+0x11c>
 8010a4e:	1c71      	adds	r1, r6, #1
 8010a50:	2400      	movs	r4, #0
 8010a52:	7808      	ldrb	r0, [r1, #0]
 8010a54:	f7ff ff8c 	bl	8010970 <__hexdig_fun>
 8010a58:	1e43      	subs	r3, r0, #1
 8010a5a:	b2db      	uxtb	r3, r3
 8010a5c:	2b18      	cmp	r3, #24
 8010a5e:	d830      	bhi.n	8010ac2 <__gethex+0x126>
 8010a60:	f1a0 0210 	sub.w	r2, r0, #16
 8010a64:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010a68:	f7ff ff82 	bl	8010970 <__hexdig_fun>
 8010a6c:	f100 3cff 	add.w	ip, r0, #4294967295
 8010a70:	fa5f fc8c 	uxtb.w	ip, ip
 8010a74:	f1bc 0f18 	cmp.w	ip, #24
 8010a78:	f04f 030a 	mov.w	r3, #10
 8010a7c:	d91e      	bls.n	8010abc <__gethex+0x120>
 8010a7e:	b104      	cbz	r4, 8010a82 <__gethex+0xe6>
 8010a80:	4252      	negs	r2, r2
 8010a82:	4417      	add	r7, r2
 8010a84:	f8ca 1000 	str.w	r1, [sl]
 8010a88:	b1ed      	cbz	r5, 8010ac6 <__gethex+0x12a>
 8010a8a:	f1bb 0f00 	cmp.w	fp, #0
 8010a8e:	bf0c      	ite	eq
 8010a90:	2506      	moveq	r5, #6
 8010a92:	2500      	movne	r5, #0
 8010a94:	4628      	mov	r0, r5
 8010a96:	b005      	add	sp, #20
 8010a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a9c:	2500      	movs	r5, #0
 8010a9e:	462c      	mov	r4, r5
 8010aa0:	e7b0      	b.n	8010a04 <__gethex+0x68>
 8010aa2:	2c00      	cmp	r4, #0
 8010aa4:	d1c7      	bne.n	8010a36 <__gethex+0x9a>
 8010aa6:	4627      	mov	r7, r4
 8010aa8:	e7c7      	b.n	8010a3a <__gethex+0x9e>
 8010aaa:	464e      	mov	r6, r9
 8010aac:	462f      	mov	r7, r5
 8010aae:	2501      	movs	r5, #1
 8010ab0:	e7c3      	b.n	8010a3a <__gethex+0x9e>
 8010ab2:	2400      	movs	r4, #0
 8010ab4:	1cb1      	adds	r1, r6, #2
 8010ab6:	e7cc      	b.n	8010a52 <__gethex+0xb6>
 8010ab8:	2401      	movs	r4, #1
 8010aba:	e7fb      	b.n	8010ab4 <__gethex+0x118>
 8010abc:	fb03 0002 	mla	r0, r3, r2, r0
 8010ac0:	e7ce      	b.n	8010a60 <__gethex+0xc4>
 8010ac2:	4631      	mov	r1, r6
 8010ac4:	e7de      	b.n	8010a84 <__gethex+0xe8>
 8010ac6:	eba6 0309 	sub.w	r3, r6, r9
 8010aca:	3b01      	subs	r3, #1
 8010acc:	4629      	mov	r1, r5
 8010ace:	2b07      	cmp	r3, #7
 8010ad0:	dc0a      	bgt.n	8010ae8 <__gethex+0x14c>
 8010ad2:	9801      	ldr	r0, [sp, #4]
 8010ad4:	f000 fafc 	bl	80110d0 <_Balloc>
 8010ad8:	4604      	mov	r4, r0
 8010ada:	b940      	cbnz	r0, 8010aee <__gethex+0x152>
 8010adc:	4b5c      	ldr	r3, [pc, #368]	@ (8010c50 <__gethex+0x2b4>)
 8010ade:	4602      	mov	r2, r0
 8010ae0:	21e4      	movs	r1, #228	@ 0xe4
 8010ae2:	485c      	ldr	r0, [pc, #368]	@ (8010c54 <__gethex+0x2b8>)
 8010ae4:	f001 ffb0 	bl	8012a48 <__assert_func>
 8010ae8:	3101      	adds	r1, #1
 8010aea:	105b      	asrs	r3, r3, #1
 8010aec:	e7ef      	b.n	8010ace <__gethex+0x132>
 8010aee:	f100 0a14 	add.w	sl, r0, #20
 8010af2:	2300      	movs	r3, #0
 8010af4:	4655      	mov	r5, sl
 8010af6:	469b      	mov	fp, r3
 8010af8:	45b1      	cmp	r9, r6
 8010afa:	d337      	bcc.n	8010b6c <__gethex+0x1d0>
 8010afc:	f845 bb04 	str.w	fp, [r5], #4
 8010b00:	eba5 050a 	sub.w	r5, r5, sl
 8010b04:	10ad      	asrs	r5, r5, #2
 8010b06:	6125      	str	r5, [r4, #16]
 8010b08:	4658      	mov	r0, fp
 8010b0a:	f000 fbd3 	bl	80112b4 <__hi0bits>
 8010b0e:	016d      	lsls	r5, r5, #5
 8010b10:	f8d8 6000 	ldr.w	r6, [r8]
 8010b14:	1a2d      	subs	r5, r5, r0
 8010b16:	42b5      	cmp	r5, r6
 8010b18:	dd54      	ble.n	8010bc4 <__gethex+0x228>
 8010b1a:	1bad      	subs	r5, r5, r6
 8010b1c:	4629      	mov	r1, r5
 8010b1e:	4620      	mov	r0, r4
 8010b20:	f000 ff67 	bl	80119f2 <__any_on>
 8010b24:	4681      	mov	r9, r0
 8010b26:	b178      	cbz	r0, 8010b48 <__gethex+0x1ac>
 8010b28:	1e6b      	subs	r3, r5, #1
 8010b2a:	1159      	asrs	r1, r3, #5
 8010b2c:	f003 021f 	and.w	r2, r3, #31
 8010b30:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8010b34:	f04f 0901 	mov.w	r9, #1
 8010b38:	fa09 f202 	lsl.w	r2, r9, r2
 8010b3c:	420a      	tst	r2, r1
 8010b3e:	d003      	beq.n	8010b48 <__gethex+0x1ac>
 8010b40:	454b      	cmp	r3, r9
 8010b42:	dc36      	bgt.n	8010bb2 <__gethex+0x216>
 8010b44:	f04f 0902 	mov.w	r9, #2
 8010b48:	4629      	mov	r1, r5
 8010b4a:	4620      	mov	r0, r4
 8010b4c:	f7ff febe 	bl	80108cc <rshift>
 8010b50:	442f      	add	r7, r5
 8010b52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010b56:	42bb      	cmp	r3, r7
 8010b58:	da42      	bge.n	8010be0 <__gethex+0x244>
 8010b5a:	9801      	ldr	r0, [sp, #4]
 8010b5c:	4621      	mov	r1, r4
 8010b5e:	f000 faf7 	bl	8011150 <_Bfree>
 8010b62:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010b64:	2300      	movs	r3, #0
 8010b66:	6013      	str	r3, [r2, #0]
 8010b68:	25a3      	movs	r5, #163	@ 0xa3
 8010b6a:	e793      	b.n	8010a94 <__gethex+0xf8>
 8010b6c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8010b70:	2a2e      	cmp	r2, #46	@ 0x2e
 8010b72:	d012      	beq.n	8010b9a <__gethex+0x1fe>
 8010b74:	2b20      	cmp	r3, #32
 8010b76:	d104      	bne.n	8010b82 <__gethex+0x1e6>
 8010b78:	f845 bb04 	str.w	fp, [r5], #4
 8010b7c:	f04f 0b00 	mov.w	fp, #0
 8010b80:	465b      	mov	r3, fp
 8010b82:	7830      	ldrb	r0, [r6, #0]
 8010b84:	9303      	str	r3, [sp, #12]
 8010b86:	f7ff fef3 	bl	8010970 <__hexdig_fun>
 8010b8a:	9b03      	ldr	r3, [sp, #12]
 8010b8c:	f000 000f 	and.w	r0, r0, #15
 8010b90:	4098      	lsls	r0, r3
 8010b92:	ea4b 0b00 	orr.w	fp, fp, r0
 8010b96:	3304      	adds	r3, #4
 8010b98:	e7ae      	b.n	8010af8 <__gethex+0x15c>
 8010b9a:	45b1      	cmp	r9, r6
 8010b9c:	d8ea      	bhi.n	8010b74 <__gethex+0x1d8>
 8010b9e:	492b      	ldr	r1, [pc, #172]	@ (8010c4c <__gethex+0x2b0>)
 8010ba0:	9303      	str	r3, [sp, #12]
 8010ba2:	2201      	movs	r2, #1
 8010ba4:	4630      	mov	r0, r6
 8010ba6:	f7fe ff40 	bl	800fa2a <strncmp>
 8010baa:	9b03      	ldr	r3, [sp, #12]
 8010bac:	2800      	cmp	r0, #0
 8010bae:	d1e1      	bne.n	8010b74 <__gethex+0x1d8>
 8010bb0:	e7a2      	b.n	8010af8 <__gethex+0x15c>
 8010bb2:	1ea9      	subs	r1, r5, #2
 8010bb4:	4620      	mov	r0, r4
 8010bb6:	f000 ff1c 	bl	80119f2 <__any_on>
 8010bba:	2800      	cmp	r0, #0
 8010bbc:	d0c2      	beq.n	8010b44 <__gethex+0x1a8>
 8010bbe:	f04f 0903 	mov.w	r9, #3
 8010bc2:	e7c1      	b.n	8010b48 <__gethex+0x1ac>
 8010bc4:	da09      	bge.n	8010bda <__gethex+0x23e>
 8010bc6:	1b75      	subs	r5, r6, r5
 8010bc8:	4621      	mov	r1, r4
 8010bca:	9801      	ldr	r0, [sp, #4]
 8010bcc:	462a      	mov	r2, r5
 8010bce:	f000 fcd7 	bl	8011580 <__lshift>
 8010bd2:	1b7f      	subs	r7, r7, r5
 8010bd4:	4604      	mov	r4, r0
 8010bd6:	f100 0a14 	add.w	sl, r0, #20
 8010bda:	f04f 0900 	mov.w	r9, #0
 8010bde:	e7b8      	b.n	8010b52 <__gethex+0x1b6>
 8010be0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010be4:	42bd      	cmp	r5, r7
 8010be6:	dd6f      	ble.n	8010cc8 <__gethex+0x32c>
 8010be8:	1bed      	subs	r5, r5, r7
 8010bea:	42ae      	cmp	r6, r5
 8010bec:	dc34      	bgt.n	8010c58 <__gethex+0x2bc>
 8010bee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010bf2:	2b02      	cmp	r3, #2
 8010bf4:	d022      	beq.n	8010c3c <__gethex+0x2a0>
 8010bf6:	2b03      	cmp	r3, #3
 8010bf8:	d024      	beq.n	8010c44 <__gethex+0x2a8>
 8010bfa:	2b01      	cmp	r3, #1
 8010bfc:	d115      	bne.n	8010c2a <__gethex+0x28e>
 8010bfe:	42ae      	cmp	r6, r5
 8010c00:	d113      	bne.n	8010c2a <__gethex+0x28e>
 8010c02:	2e01      	cmp	r6, #1
 8010c04:	d10b      	bne.n	8010c1e <__gethex+0x282>
 8010c06:	9a02      	ldr	r2, [sp, #8]
 8010c08:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010c0c:	6013      	str	r3, [r2, #0]
 8010c0e:	2301      	movs	r3, #1
 8010c10:	6123      	str	r3, [r4, #16]
 8010c12:	f8ca 3000 	str.w	r3, [sl]
 8010c16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010c18:	2562      	movs	r5, #98	@ 0x62
 8010c1a:	601c      	str	r4, [r3, #0]
 8010c1c:	e73a      	b.n	8010a94 <__gethex+0xf8>
 8010c1e:	1e71      	subs	r1, r6, #1
 8010c20:	4620      	mov	r0, r4
 8010c22:	f000 fee6 	bl	80119f2 <__any_on>
 8010c26:	2800      	cmp	r0, #0
 8010c28:	d1ed      	bne.n	8010c06 <__gethex+0x26a>
 8010c2a:	9801      	ldr	r0, [sp, #4]
 8010c2c:	4621      	mov	r1, r4
 8010c2e:	f000 fa8f 	bl	8011150 <_Bfree>
 8010c32:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010c34:	2300      	movs	r3, #0
 8010c36:	6013      	str	r3, [r2, #0]
 8010c38:	2550      	movs	r5, #80	@ 0x50
 8010c3a:	e72b      	b.n	8010a94 <__gethex+0xf8>
 8010c3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d1f3      	bne.n	8010c2a <__gethex+0x28e>
 8010c42:	e7e0      	b.n	8010c06 <__gethex+0x26a>
 8010c44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d1dd      	bne.n	8010c06 <__gethex+0x26a>
 8010c4a:	e7ee      	b.n	8010c2a <__gethex+0x28e>
 8010c4c:	080141f8 	.word	0x080141f8
 8010c50:	0801430b 	.word	0x0801430b
 8010c54:	0801431c 	.word	0x0801431c
 8010c58:	1e6f      	subs	r7, r5, #1
 8010c5a:	f1b9 0f00 	cmp.w	r9, #0
 8010c5e:	d130      	bne.n	8010cc2 <__gethex+0x326>
 8010c60:	b127      	cbz	r7, 8010c6c <__gethex+0x2d0>
 8010c62:	4639      	mov	r1, r7
 8010c64:	4620      	mov	r0, r4
 8010c66:	f000 fec4 	bl	80119f2 <__any_on>
 8010c6a:	4681      	mov	r9, r0
 8010c6c:	117a      	asrs	r2, r7, #5
 8010c6e:	2301      	movs	r3, #1
 8010c70:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010c74:	f007 071f 	and.w	r7, r7, #31
 8010c78:	40bb      	lsls	r3, r7
 8010c7a:	4213      	tst	r3, r2
 8010c7c:	4629      	mov	r1, r5
 8010c7e:	4620      	mov	r0, r4
 8010c80:	bf18      	it	ne
 8010c82:	f049 0902 	orrne.w	r9, r9, #2
 8010c86:	f7ff fe21 	bl	80108cc <rshift>
 8010c8a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8010c8e:	1b76      	subs	r6, r6, r5
 8010c90:	2502      	movs	r5, #2
 8010c92:	f1b9 0f00 	cmp.w	r9, #0
 8010c96:	d047      	beq.n	8010d28 <__gethex+0x38c>
 8010c98:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010c9c:	2b02      	cmp	r3, #2
 8010c9e:	d015      	beq.n	8010ccc <__gethex+0x330>
 8010ca0:	2b03      	cmp	r3, #3
 8010ca2:	d017      	beq.n	8010cd4 <__gethex+0x338>
 8010ca4:	2b01      	cmp	r3, #1
 8010ca6:	d109      	bne.n	8010cbc <__gethex+0x320>
 8010ca8:	f019 0f02 	tst.w	r9, #2
 8010cac:	d006      	beq.n	8010cbc <__gethex+0x320>
 8010cae:	f8da 3000 	ldr.w	r3, [sl]
 8010cb2:	ea49 0903 	orr.w	r9, r9, r3
 8010cb6:	f019 0f01 	tst.w	r9, #1
 8010cba:	d10e      	bne.n	8010cda <__gethex+0x33e>
 8010cbc:	f045 0510 	orr.w	r5, r5, #16
 8010cc0:	e032      	b.n	8010d28 <__gethex+0x38c>
 8010cc2:	f04f 0901 	mov.w	r9, #1
 8010cc6:	e7d1      	b.n	8010c6c <__gethex+0x2d0>
 8010cc8:	2501      	movs	r5, #1
 8010cca:	e7e2      	b.n	8010c92 <__gethex+0x2f6>
 8010ccc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010cce:	f1c3 0301 	rsb	r3, r3, #1
 8010cd2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010cd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d0f0      	beq.n	8010cbc <__gethex+0x320>
 8010cda:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010cde:	f104 0314 	add.w	r3, r4, #20
 8010ce2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010ce6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010cea:	f04f 0c00 	mov.w	ip, #0
 8010cee:	4618      	mov	r0, r3
 8010cf0:	f853 2b04 	ldr.w	r2, [r3], #4
 8010cf4:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010cf8:	d01b      	beq.n	8010d32 <__gethex+0x396>
 8010cfa:	3201      	adds	r2, #1
 8010cfc:	6002      	str	r2, [r0, #0]
 8010cfe:	2d02      	cmp	r5, #2
 8010d00:	f104 0314 	add.w	r3, r4, #20
 8010d04:	d13c      	bne.n	8010d80 <__gethex+0x3e4>
 8010d06:	f8d8 2000 	ldr.w	r2, [r8]
 8010d0a:	3a01      	subs	r2, #1
 8010d0c:	42b2      	cmp	r2, r6
 8010d0e:	d109      	bne.n	8010d24 <__gethex+0x388>
 8010d10:	1171      	asrs	r1, r6, #5
 8010d12:	2201      	movs	r2, #1
 8010d14:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010d18:	f006 061f 	and.w	r6, r6, #31
 8010d1c:	fa02 f606 	lsl.w	r6, r2, r6
 8010d20:	421e      	tst	r6, r3
 8010d22:	d13a      	bne.n	8010d9a <__gethex+0x3fe>
 8010d24:	f045 0520 	orr.w	r5, r5, #32
 8010d28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010d2a:	601c      	str	r4, [r3, #0]
 8010d2c:	9b02      	ldr	r3, [sp, #8]
 8010d2e:	601f      	str	r7, [r3, #0]
 8010d30:	e6b0      	b.n	8010a94 <__gethex+0xf8>
 8010d32:	4299      	cmp	r1, r3
 8010d34:	f843 cc04 	str.w	ip, [r3, #-4]
 8010d38:	d8d9      	bhi.n	8010cee <__gethex+0x352>
 8010d3a:	68a3      	ldr	r3, [r4, #8]
 8010d3c:	459b      	cmp	fp, r3
 8010d3e:	db17      	blt.n	8010d70 <__gethex+0x3d4>
 8010d40:	6861      	ldr	r1, [r4, #4]
 8010d42:	9801      	ldr	r0, [sp, #4]
 8010d44:	3101      	adds	r1, #1
 8010d46:	f000 f9c3 	bl	80110d0 <_Balloc>
 8010d4a:	4681      	mov	r9, r0
 8010d4c:	b918      	cbnz	r0, 8010d56 <__gethex+0x3ba>
 8010d4e:	4b1a      	ldr	r3, [pc, #104]	@ (8010db8 <__gethex+0x41c>)
 8010d50:	4602      	mov	r2, r0
 8010d52:	2184      	movs	r1, #132	@ 0x84
 8010d54:	e6c5      	b.n	8010ae2 <__gethex+0x146>
 8010d56:	6922      	ldr	r2, [r4, #16]
 8010d58:	3202      	adds	r2, #2
 8010d5a:	f104 010c 	add.w	r1, r4, #12
 8010d5e:	0092      	lsls	r2, r2, #2
 8010d60:	300c      	adds	r0, #12
 8010d62:	f7fe fefe 	bl	800fb62 <memcpy>
 8010d66:	4621      	mov	r1, r4
 8010d68:	9801      	ldr	r0, [sp, #4]
 8010d6a:	f000 f9f1 	bl	8011150 <_Bfree>
 8010d6e:	464c      	mov	r4, r9
 8010d70:	6923      	ldr	r3, [r4, #16]
 8010d72:	1c5a      	adds	r2, r3, #1
 8010d74:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010d78:	6122      	str	r2, [r4, #16]
 8010d7a:	2201      	movs	r2, #1
 8010d7c:	615a      	str	r2, [r3, #20]
 8010d7e:	e7be      	b.n	8010cfe <__gethex+0x362>
 8010d80:	6922      	ldr	r2, [r4, #16]
 8010d82:	455a      	cmp	r2, fp
 8010d84:	dd0b      	ble.n	8010d9e <__gethex+0x402>
 8010d86:	2101      	movs	r1, #1
 8010d88:	4620      	mov	r0, r4
 8010d8a:	f7ff fd9f 	bl	80108cc <rshift>
 8010d8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010d92:	3701      	adds	r7, #1
 8010d94:	42bb      	cmp	r3, r7
 8010d96:	f6ff aee0 	blt.w	8010b5a <__gethex+0x1be>
 8010d9a:	2501      	movs	r5, #1
 8010d9c:	e7c2      	b.n	8010d24 <__gethex+0x388>
 8010d9e:	f016 061f 	ands.w	r6, r6, #31
 8010da2:	d0fa      	beq.n	8010d9a <__gethex+0x3fe>
 8010da4:	4453      	add	r3, sl
 8010da6:	f1c6 0620 	rsb	r6, r6, #32
 8010daa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010dae:	f000 fa81 	bl	80112b4 <__hi0bits>
 8010db2:	42b0      	cmp	r0, r6
 8010db4:	dbe7      	blt.n	8010d86 <__gethex+0x3ea>
 8010db6:	e7f0      	b.n	8010d9a <__gethex+0x3fe>
 8010db8:	0801430b 	.word	0x0801430b

08010dbc <L_shift>:
 8010dbc:	f1c2 0208 	rsb	r2, r2, #8
 8010dc0:	0092      	lsls	r2, r2, #2
 8010dc2:	b570      	push	{r4, r5, r6, lr}
 8010dc4:	f1c2 0620 	rsb	r6, r2, #32
 8010dc8:	6843      	ldr	r3, [r0, #4]
 8010dca:	6804      	ldr	r4, [r0, #0]
 8010dcc:	fa03 f506 	lsl.w	r5, r3, r6
 8010dd0:	432c      	orrs	r4, r5
 8010dd2:	40d3      	lsrs	r3, r2
 8010dd4:	6004      	str	r4, [r0, #0]
 8010dd6:	f840 3f04 	str.w	r3, [r0, #4]!
 8010dda:	4288      	cmp	r0, r1
 8010ddc:	d3f4      	bcc.n	8010dc8 <L_shift+0xc>
 8010dde:	bd70      	pop	{r4, r5, r6, pc}

08010de0 <__match>:
 8010de0:	b530      	push	{r4, r5, lr}
 8010de2:	6803      	ldr	r3, [r0, #0]
 8010de4:	3301      	adds	r3, #1
 8010de6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010dea:	b914      	cbnz	r4, 8010df2 <__match+0x12>
 8010dec:	6003      	str	r3, [r0, #0]
 8010dee:	2001      	movs	r0, #1
 8010df0:	bd30      	pop	{r4, r5, pc}
 8010df2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010df6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8010dfa:	2d19      	cmp	r5, #25
 8010dfc:	bf98      	it	ls
 8010dfe:	3220      	addls	r2, #32
 8010e00:	42a2      	cmp	r2, r4
 8010e02:	d0f0      	beq.n	8010de6 <__match+0x6>
 8010e04:	2000      	movs	r0, #0
 8010e06:	e7f3      	b.n	8010df0 <__match+0x10>

08010e08 <__hexnan>:
 8010e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e0c:	680b      	ldr	r3, [r1, #0]
 8010e0e:	6801      	ldr	r1, [r0, #0]
 8010e10:	115e      	asrs	r6, r3, #5
 8010e12:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010e16:	f013 031f 	ands.w	r3, r3, #31
 8010e1a:	b087      	sub	sp, #28
 8010e1c:	bf18      	it	ne
 8010e1e:	3604      	addne	r6, #4
 8010e20:	2500      	movs	r5, #0
 8010e22:	1f37      	subs	r7, r6, #4
 8010e24:	4682      	mov	sl, r0
 8010e26:	4690      	mov	r8, r2
 8010e28:	9301      	str	r3, [sp, #4]
 8010e2a:	f846 5c04 	str.w	r5, [r6, #-4]
 8010e2e:	46b9      	mov	r9, r7
 8010e30:	463c      	mov	r4, r7
 8010e32:	9502      	str	r5, [sp, #8]
 8010e34:	46ab      	mov	fp, r5
 8010e36:	784a      	ldrb	r2, [r1, #1]
 8010e38:	1c4b      	adds	r3, r1, #1
 8010e3a:	9303      	str	r3, [sp, #12]
 8010e3c:	b342      	cbz	r2, 8010e90 <__hexnan+0x88>
 8010e3e:	4610      	mov	r0, r2
 8010e40:	9105      	str	r1, [sp, #20]
 8010e42:	9204      	str	r2, [sp, #16]
 8010e44:	f7ff fd94 	bl	8010970 <__hexdig_fun>
 8010e48:	2800      	cmp	r0, #0
 8010e4a:	d151      	bne.n	8010ef0 <__hexnan+0xe8>
 8010e4c:	9a04      	ldr	r2, [sp, #16]
 8010e4e:	9905      	ldr	r1, [sp, #20]
 8010e50:	2a20      	cmp	r2, #32
 8010e52:	d818      	bhi.n	8010e86 <__hexnan+0x7e>
 8010e54:	9b02      	ldr	r3, [sp, #8]
 8010e56:	459b      	cmp	fp, r3
 8010e58:	dd13      	ble.n	8010e82 <__hexnan+0x7a>
 8010e5a:	454c      	cmp	r4, r9
 8010e5c:	d206      	bcs.n	8010e6c <__hexnan+0x64>
 8010e5e:	2d07      	cmp	r5, #7
 8010e60:	dc04      	bgt.n	8010e6c <__hexnan+0x64>
 8010e62:	462a      	mov	r2, r5
 8010e64:	4649      	mov	r1, r9
 8010e66:	4620      	mov	r0, r4
 8010e68:	f7ff ffa8 	bl	8010dbc <L_shift>
 8010e6c:	4544      	cmp	r4, r8
 8010e6e:	d952      	bls.n	8010f16 <__hexnan+0x10e>
 8010e70:	2300      	movs	r3, #0
 8010e72:	f1a4 0904 	sub.w	r9, r4, #4
 8010e76:	f844 3c04 	str.w	r3, [r4, #-4]
 8010e7a:	f8cd b008 	str.w	fp, [sp, #8]
 8010e7e:	464c      	mov	r4, r9
 8010e80:	461d      	mov	r5, r3
 8010e82:	9903      	ldr	r1, [sp, #12]
 8010e84:	e7d7      	b.n	8010e36 <__hexnan+0x2e>
 8010e86:	2a29      	cmp	r2, #41	@ 0x29
 8010e88:	d157      	bne.n	8010f3a <__hexnan+0x132>
 8010e8a:	3102      	adds	r1, #2
 8010e8c:	f8ca 1000 	str.w	r1, [sl]
 8010e90:	f1bb 0f00 	cmp.w	fp, #0
 8010e94:	d051      	beq.n	8010f3a <__hexnan+0x132>
 8010e96:	454c      	cmp	r4, r9
 8010e98:	d206      	bcs.n	8010ea8 <__hexnan+0xa0>
 8010e9a:	2d07      	cmp	r5, #7
 8010e9c:	dc04      	bgt.n	8010ea8 <__hexnan+0xa0>
 8010e9e:	462a      	mov	r2, r5
 8010ea0:	4649      	mov	r1, r9
 8010ea2:	4620      	mov	r0, r4
 8010ea4:	f7ff ff8a 	bl	8010dbc <L_shift>
 8010ea8:	4544      	cmp	r4, r8
 8010eaa:	d936      	bls.n	8010f1a <__hexnan+0x112>
 8010eac:	f1a8 0204 	sub.w	r2, r8, #4
 8010eb0:	4623      	mov	r3, r4
 8010eb2:	f853 1b04 	ldr.w	r1, [r3], #4
 8010eb6:	f842 1f04 	str.w	r1, [r2, #4]!
 8010eba:	429f      	cmp	r7, r3
 8010ebc:	d2f9      	bcs.n	8010eb2 <__hexnan+0xaa>
 8010ebe:	1b3b      	subs	r3, r7, r4
 8010ec0:	f023 0303 	bic.w	r3, r3, #3
 8010ec4:	3304      	adds	r3, #4
 8010ec6:	3401      	adds	r4, #1
 8010ec8:	3e03      	subs	r6, #3
 8010eca:	42b4      	cmp	r4, r6
 8010ecc:	bf88      	it	hi
 8010ece:	2304      	movhi	r3, #4
 8010ed0:	4443      	add	r3, r8
 8010ed2:	2200      	movs	r2, #0
 8010ed4:	f843 2b04 	str.w	r2, [r3], #4
 8010ed8:	429f      	cmp	r7, r3
 8010eda:	d2fb      	bcs.n	8010ed4 <__hexnan+0xcc>
 8010edc:	683b      	ldr	r3, [r7, #0]
 8010ede:	b91b      	cbnz	r3, 8010ee8 <__hexnan+0xe0>
 8010ee0:	4547      	cmp	r7, r8
 8010ee2:	d128      	bne.n	8010f36 <__hexnan+0x12e>
 8010ee4:	2301      	movs	r3, #1
 8010ee6:	603b      	str	r3, [r7, #0]
 8010ee8:	2005      	movs	r0, #5
 8010eea:	b007      	add	sp, #28
 8010eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ef0:	3501      	adds	r5, #1
 8010ef2:	2d08      	cmp	r5, #8
 8010ef4:	f10b 0b01 	add.w	fp, fp, #1
 8010ef8:	dd06      	ble.n	8010f08 <__hexnan+0x100>
 8010efa:	4544      	cmp	r4, r8
 8010efc:	d9c1      	bls.n	8010e82 <__hexnan+0x7a>
 8010efe:	2300      	movs	r3, #0
 8010f00:	f844 3c04 	str.w	r3, [r4, #-4]
 8010f04:	2501      	movs	r5, #1
 8010f06:	3c04      	subs	r4, #4
 8010f08:	6822      	ldr	r2, [r4, #0]
 8010f0a:	f000 000f 	and.w	r0, r0, #15
 8010f0e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010f12:	6020      	str	r0, [r4, #0]
 8010f14:	e7b5      	b.n	8010e82 <__hexnan+0x7a>
 8010f16:	2508      	movs	r5, #8
 8010f18:	e7b3      	b.n	8010e82 <__hexnan+0x7a>
 8010f1a:	9b01      	ldr	r3, [sp, #4]
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d0dd      	beq.n	8010edc <__hexnan+0xd4>
 8010f20:	f1c3 0320 	rsb	r3, r3, #32
 8010f24:	f04f 32ff 	mov.w	r2, #4294967295
 8010f28:	40da      	lsrs	r2, r3
 8010f2a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010f2e:	4013      	ands	r3, r2
 8010f30:	f846 3c04 	str.w	r3, [r6, #-4]
 8010f34:	e7d2      	b.n	8010edc <__hexnan+0xd4>
 8010f36:	3f04      	subs	r7, #4
 8010f38:	e7d0      	b.n	8010edc <__hexnan+0xd4>
 8010f3a:	2004      	movs	r0, #4
 8010f3c:	e7d5      	b.n	8010eea <__hexnan+0xe2>
	...

08010f40 <malloc>:
 8010f40:	4b02      	ldr	r3, [pc, #8]	@ (8010f4c <malloc+0xc>)
 8010f42:	4601      	mov	r1, r0
 8010f44:	6818      	ldr	r0, [r3, #0]
 8010f46:	f000 b825 	b.w	8010f94 <_malloc_r>
 8010f4a:	bf00      	nop
 8010f4c:	2000018c 	.word	0x2000018c

08010f50 <sbrk_aligned>:
 8010f50:	b570      	push	{r4, r5, r6, lr}
 8010f52:	4e0f      	ldr	r6, [pc, #60]	@ (8010f90 <sbrk_aligned+0x40>)
 8010f54:	460c      	mov	r4, r1
 8010f56:	6831      	ldr	r1, [r6, #0]
 8010f58:	4605      	mov	r5, r0
 8010f5a:	b911      	cbnz	r1, 8010f62 <sbrk_aligned+0x12>
 8010f5c:	f001 fd64 	bl	8012a28 <_sbrk_r>
 8010f60:	6030      	str	r0, [r6, #0]
 8010f62:	4621      	mov	r1, r4
 8010f64:	4628      	mov	r0, r5
 8010f66:	f001 fd5f 	bl	8012a28 <_sbrk_r>
 8010f6a:	1c43      	adds	r3, r0, #1
 8010f6c:	d103      	bne.n	8010f76 <sbrk_aligned+0x26>
 8010f6e:	f04f 34ff 	mov.w	r4, #4294967295
 8010f72:	4620      	mov	r0, r4
 8010f74:	bd70      	pop	{r4, r5, r6, pc}
 8010f76:	1cc4      	adds	r4, r0, #3
 8010f78:	f024 0403 	bic.w	r4, r4, #3
 8010f7c:	42a0      	cmp	r0, r4
 8010f7e:	d0f8      	beq.n	8010f72 <sbrk_aligned+0x22>
 8010f80:	1a21      	subs	r1, r4, r0
 8010f82:	4628      	mov	r0, r5
 8010f84:	f001 fd50 	bl	8012a28 <_sbrk_r>
 8010f88:	3001      	adds	r0, #1
 8010f8a:	d1f2      	bne.n	8010f72 <sbrk_aligned+0x22>
 8010f8c:	e7ef      	b.n	8010f6e <sbrk_aligned+0x1e>
 8010f8e:	bf00      	nop
 8010f90:	20002e18 	.word	0x20002e18

08010f94 <_malloc_r>:
 8010f94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f98:	1ccd      	adds	r5, r1, #3
 8010f9a:	f025 0503 	bic.w	r5, r5, #3
 8010f9e:	3508      	adds	r5, #8
 8010fa0:	2d0c      	cmp	r5, #12
 8010fa2:	bf38      	it	cc
 8010fa4:	250c      	movcc	r5, #12
 8010fa6:	2d00      	cmp	r5, #0
 8010fa8:	4606      	mov	r6, r0
 8010faa:	db01      	blt.n	8010fb0 <_malloc_r+0x1c>
 8010fac:	42a9      	cmp	r1, r5
 8010fae:	d904      	bls.n	8010fba <_malloc_r+0x26>
 8010fb0:	230c      	movs	r3, #12
 8010fb2:	6033      	str	r3, [r6, #0]
 8010fb4:	2000      	movs	r0, #0
 8010fb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010fba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011090 <_malloc_r+0xfc>
 8010fbe:	f000 f87b 	bl	80110b8 <__malloc_lock>
 8010fc2:	f8d8 3000 	ldr.w	r3, [r8]
 8010fc6:	461c      	mov	r4, r3
 8010fc8:	bb44      	cbnz	r4, 801101c <_malloc_r+0x88>
 8010fca:	4629      	mov	r1, r5
 8010fcc:	4630      	mov	r0, r6
 8010fce:	f7ff ffbf 	bl	8010f50 <sbrk_aligned>
 8010fd2:	1c43      	adds	r3, r0, #1
 8010fd4:	4604      	mov	r4, r0
 8010fd6:	d158      	bne.n	801108a <_malloc_r+0xf6>
 8010fd8:	f8d8 4000 	ldr.w	r4, [r8]
 8010fdc:	4627      	mov	r7, r4
 8010fde:	2f00      	cmp	r7, #0
 8010fe0:	d143      	bne.n	801106a <_malloc_r+0xd6>
 8010fe2:	2c00      	cmp	r4, #0
 8010fe4:	d04b      	beq.n	801107e <_malloc_r+0xea>
 8010fe6:	6823      	ldr	r3, [r4, #0]
 8010fe8:	4639      	mov	r1, r7
 8010fea:	4630      	mov	r0, r6
 8010fec:	eb04 0903 	add.w	r9, r4, r3
 8010ff0:	f001 fd1a 	bl	8012a28 <_sbrk_r>
 8010ff4:	4581      	cmp	r9, r0
 8010ff6:	d142      	bne.n	801107e <_malloc_r+0xea>
 8010ff8:	6821      	ldr	r1, [r4, #0]
 8010ffa:	1a6d      	subs	r5, r5, r1
 8010ffc:	4629      	mov	r1, r5
 8010ffe:	4630      	mov	r0, r6
 8011000:	f7ff ffa6 	bl	8010f50 <sbrk_aligned>
 8011004:	3001      	adds	r0, #1
 8011006:	d03a      	beq.n	801107e <_malloc_r+0xea>
 8011008:	6823      	ldr	r3, [r4, #0]
 801100a:	442b      	add	r3, r5
 801100c:	6023      	str	r3, [r4, #0]
 801100e:	f8d8 3000 	ldr.w	r3, [r8]
 8011012:	685a      	ldr	r2, [r3, #4]
 8011014:	bb62      	cbnz	r2, 8011070 <_malloc_r+0xdc>
 8011016:	f8c8 7000 	str.w	r7, [r8]
 801101a:	e00f      	b.n	801103c <_malloc_r+0xa8>
 801101c:	6822      	ldr	r2, [r4, #0]
 801101e:	1b52      	subs	r2, r2, r5
 8011020:	d420      	bmi.n	8011064 <_malloc_r+0xd0>
 8011022:	2a0b      	cmp	r2, #11
 8011024:	d917      	bls.n	8011056 <_malloc_r+0xc2>
 8011026:	1961      	adds	r1, r4, r5
 8011028:	42a3      	cmp	r3, r4
 801102a:	6025      	str	r5, [r4, #0]
 801102c:	bf18      	it	ne
 801102e:	6059      	strne	r1, [r3, #4]
 8011030:	6863      	ldr	r3, [r4, #4]
 8011032:	bf08      	it	eq
 8011034:	f8c8 1000 	streq.w	r1, [r8]
 8011038:	5162      	str	r2, [r4, r5]
 801103a:	604b      	str	r3, [r1, #4]
 801103c:	4630      	mov	r0, r6
 801103e:	f000 f841 	bl	80110c4 <__malloc_unlock>
 8011042:	f104 000b 	add.w	r0, r4, #11
 8011046:	1d23      	adds	r3, r4, #4
 8011048:	f020 0007 	bic.w	r0, r0, #7
 801104c:	1ac2      	subs	r2, r0, r3
 801104e:	bf1c      	itt	ne
 8011050:	1a1b      	subne	r3, r3, r0
 8011052:	50a3      	strne	r3, [r4, r2]
 8011054:	e7af      	b.n	8010fb6 <_malloc_r+0x22>
 8011056:	6862      	ldr	r2, [r4, #4]
 8011058:	42a3      	cmp	r3, r4
 801105a:	bf0c      	ite	eq
 801105c:	f8c8 2000 	streq.w	r2, [r8]
 8011060:	605a      	strne	r2, [r3, #4]
 8011062:	e7eb      	b.n	801103c <_malloc_r+0xa8>
 8011064:	4623      	mov	r3, r4
 8011066:	6864      	ldr	r4, [r4, #4]
 8011068:	e7ae      	b.n	8010fc8 <_malloc_r+0x34>
 801106a:	463c      	mov	r4, r7
 801106c:	687f      	ldr	r7, [r7, #4]
 801106e:	e7b6      	b.n	8010fde <_malloc_r+0x4a>
 8011070:	461a      	mov	r2, r3
 8011072:	685b      	ldr	r3, [r3, #4]
 8011074:	42a3      	cmp	r3, r4
 8011076:	d1fb      	bne.n	8011070 <_malloc_r+0xdc>
 8011078:	2300      	movs	r3, #0
 801107a:	6053      	str	r3, [r2, #4]
 801107c:	e7de      	b.n	801103c <_malloc_r+0xa8>
 801107e:	230c      	movs	r3, #12
 8011080:	6033      	str	r3, [r6, #0]
 8011082:	4630      	mov	r0, r6
 8011084:	f000 f81e 	bl	80110c4 <__malloc_unlock>
 8011088:	e794      	b.n	8010fb4 <_malloc_r+0x20>
 801108a:	6005      	str	r5, [r0, #0]
 801108c:	e7d6      	b.n	801103c <_malloc_r+0xa8>
 801108e:	bf00      	nop
 8011090:	20002e1c 	.word	0x20002e1c

08011094 <__ascii_mbtowc>:
 8011094:	b082      	sub	sp, #8
 8011096:	b901      	cbnz	r1, 801109a <__ascii_mbtowc+0x6>
 8011098:	a901      	add	r1, sp, #4
 801109a:	b142      	cbz	r2, 80110ae <__ascii_mbtowc+0x1a>
 801109c:	b14b      	cbz	r3, 80110b2 <__ascii_mbtowc+0x1e>
 801109e:	7813      	ldrb	r3, [r2, #0]
 80110a0:	600b      	str	r3, [r1, #0]
 80110a2:	7812      	ldrb	r2, [r2, #0]
 80110a4:	1e10      	subs	r0, r2, #0
 80110a6:	bf18      	it	ne
 80110a8:	2001      	movne	r0, #1
 80110aa:	b002      	add	sp, #8
 80110ac:	4770      	bx	lr
 80110ae:	4610      	mov	r0, r2
 80110b0:	e7fb      	b.n	80110aa <__ascii_mbtowc+0x16>
 80110b2:	f06f 0001 	mvn.w	r0, #1
 80110b6:	e7f8      	b.n	80110aa <__ascii_mbtowc+0x16>

080110b8 <__malloc_lock>:
 80110b8:	4801      	ldr	r0, [pc, #4]	@ (80110c0 <__malloc_lock+0x8>)
 80110ba:	f7fe bd50 	b.w	800fb5e <__retarget_lock_acquire_recursive>
 80110be:	bf00      	nop
 80110c0:	20002e14 	.word	0x20002e14

080110c4 <__malloc_unlock>:
 80110c4:	4801      	ldr	r0, [pc, #4]	@ (80110cc <__malloc_unlock+0x8>)
 80110c6:	f7fe bd4b 	b.w	800fb60 <__retarget_lock_release_recursive>
 80110ca:	bf00      	nop
 80110cc:	20002e14 	.word	0x20002e14

080110d0 <_Balloc>:
 80110d0:	b570      	push	{r4, r5, r6, lr}
 80110d2:	69c6      	ldr	r6, [r0, #28]
 80110d4:	4604      	mov	r4, r0
 80110d6:	460d      	mov	r5, r1
 80110d8:	b976      	cbnz	r6, 80110f8 <_Balloc+0x28>
 80110da:	2010      	movs	r0, #16
 80110dc:	f7ff ff30 	bl	8010f40 <malloc>
 80110e0:	4602      	mov	r2, r0
 80110e2:	61e0      	str	r0, [r4, #28]
 80110e4:	b920      	cbnz	r0, 80110f0 <_Balloc+0x20>
 80110e6:	4b18      	ldr	r3, [pc, #96]	@ (8011148 <_Balloc+0x78>)
 80110e8:	4818      	ldr	r0, [pc, #96]	@ (801114c <_Balloc+0x7c>)
 80110ea:	216b      	movs	r1, #107	@ 0x6b
 80110ec:	f001 fcac 	bl	8012a48 <__assert_func>
 80110f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80110f4:	6006      	str	r6, [r0, #0]
 80110f6:	60c6      	str	r6, [r0, #12]
 80110f8:	69e6      	ldr	r6, [r4, #28]
 80110fa:	68f3      	ldr	r3, [r6, #12]
 80110fc:	b183      	cbz	r3, 8011120 <_Balloc+0x50>
 80110fe:	69e3      	ldr	r3, [r4, #28]
 8011100:	68db      	ldr	r3, [r3, #12]
 8011102:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011106:	b9b8      	cbnz	r0, 8011138 <_Balloc+0x68>
 8011108:	2101      	movs	r1, #1
 801110a:	fa01 f605 	lsl.w	r6, r1, r5
 801110e:	1d72      	adds	r2, r6, #5
 8011110:	0092      	lsls	r2, r2, #2
 8011112:	4620      	mov	r0, r4
 8011114:	f001 fcb6 	bl	8012a84 <_calloc_r>
 8011118:	b160      	cbz	r0, 8011134 <_Balloc+0x64>
 801111a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801111e:	e00e      	b.n	801113e <_Balloc+0x6e>
 8011120:	2221      	movs	r2, #33	@ 0x21
 8011122:	2104      	movs	r1, #4
 8011124:	4620      	mov	r0, r4
 8011126:	f001 fcad 	bl	8012a84 <_calloc_r>
 801112a:	69e3      	ldr	r3, [r4, #28]
 801112c:	60f0      	str	r0, [r6, #12]
 801112e:	68db      	ldr	r3, [r3, #12]
 8011130:	2b00      	cmp	r3, #0
 8011132:	d1e4      	bne.n	80110fe <_Balloc+0x2e>
 8011134:	2000      	movs	r0, #0
 8011136:	bd70      	pop	{r4, r5, r6, pc}
 8011138:	6802      	ldr	r2, [r0, #0]
 801113a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801113e:	2300      	movs	r3, #0
 8011140:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011144:	e7f7      	b.n	8011136 <_Balloc+0x66>
 8011146:	bf00      	nop
 8011148:	0801429c 	.word	0x0801429c
 801114c:	0801437c 	.word	0x0801437c

08011150 <_Bfree>:
 8011150:	b570      	push	{r4, r5, r6, lr}
 8011152:	69c6      	ldr	r6, [r0, #28]
 8011154:	4605      	mov	r5, r0
 8011156:	460c      	mov	r4, r1
 8011158:	b976      	cbnz	r6, 8011178 <_Bfree+0x28>
 801115a:	2010      	movs	r0, #16
 801115c:	f7ff fef0 	bl	8010f40 <malloc>
 8011160:	4602      	mov	r2, r0
 8011162:	61e8      	str	r0, [r5, #28]
 8011164:	b920      	cbnz	r0, 8011170 <_Bfree+0x20>
 8011166:	4b09      	ldr	r3, [pc, #36]	@ (801118c <_Bfree+0x3c>)
 8011168:	4809      	ldr	r0, [pc, #36]	@ (8011190 <_Bfree+0x40>)
 801116a:	218f      	movs	r1, #143	@ 0x8f
 801116c:	f001 fc6c 	bl	8012a48 <__assert_func>
 8011170:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011174:	6006      	str	r6, [r0, #0]
 8011176:	60c6      	str	r6, [r0, #12]
 8011178:	b13c      	cbz	r4, 801118a <_Bfree+0x3a>
 801117a:	69eb      	ldr	r3, [r5, #28]
 801117c:	6862      	ldr	r2, [r4, #4]
 801117e:	68db      	ldr	r3, [r3, #12]
 8011180:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011184:	6021      	str	r1, [r4, #0]
 8011186:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801118a:	bd70      	pop	{r4, r5, r6, pc}
 801118c:	0801429c 	.word	0x0801429c
 8011190:	0801437c 	.word	0x0801437c

08011194 <__multadd>:
 8011194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011198:	690d      	ldr	r5, [r1, #16]
 801119a:	4607      	mov	r7, r0
 801119c:	460c      	mov	r4, r1
 801119e:	461e      	mov	r6, r3
 80111a0:	f101 0c14 	add.w	ip, r1, #20
 80111a4:	2000      	movs	r0, #0
 80111a6:	f8dc 3000 	ldr.w	r3, [ip]
 80111aa:	b299      	uxth	r1, r3
 80111ac:	fb02 6101 	mla	r1, r2, r1, r6
 80111b0:	0c1e      	lsrs	r6, r3, #16
 80111b2:	0c0b      	lsrs	r3, r1, #16
 80111b4:	fb02 3306 	mla	r3, r2, r6, r3
 80111b8:	b289      	uxth	r1, r1
 80111ba:	3001      	adds	r0, #1
 80111bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80111c0:	4285      	cmp	r5, r0
 80111c2:	f84c 1b04 	str.w	r1, [ip], #4
 80111c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80111ca:	dcec      	bgt.n	80111a6 <__multadd+0x12>
 80111cc:	b30e      	cbz	r6, 8011212 <__multadd+0x7e>
 80111ce:	68a3      	ldr	r3, [r4, #8]
 80111d0:	42ab      	cmp	r3, r5
 80111d2:	dc19      	bgt.n	8011208 <__multadd+0x74>
 80111d4:	6861      	ldr	r1, [r4, #4]
 80111d6:	4638      	mov	r0, r7
 80111d8:	3101      	adds	r1, #1
 80111da:	f7ff ff79 	bl	80110d0 <_Balloc>
 80111de:	4680      	mov	r8, r0
 80111e0:	b928      	cbnz	r0, 80111ee <__multadd+0x5a>
 80111e2:	4602      	mov	r2, r0
 80111e4:	4b0c      	ldr	r3, [pc, #48]	@ (8011218 <__multadd+0x84>)
 80111e6:	480d      	ldr	r0, [pc, #52]	@ (801121c <__multadd+0x88>)
 80111e8:	21ba      	movs	r1, #186	@ 0xba
 80111ea:	f001 fc2d 	bl	8012a48 <__assert_func>
 80111ee:	6922      	ldr	r2, [r4, #16]
 80111f0:	3202      	adds	r2, #2
 80111f2:	f104 010c 	add.w	r1, r4, #12
 80111f6:	0092      	lsls	r2, r2, #2
 80111f8:	300c      	adds	r0, #12
 80111fa:	f7fe fcb2 	bl	800fb62 <memcpy>
 80111fe:	4621      	mov	r1, r4
 8011200:	4638      	mov	r0, r7
 8011202:	f7ff ffa5 	bl	8011150 <_Bfree>
 8011206:	4644      	mov	r4, r8
 8011208:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801120c:	3501      	adds	r5, #1
 801120e:	615e      	str	r6, [r3, #20]
 8011210:	6125      	str	r5, [r4, #16]
 8011212:	4620      	mov	r0, r4
 8011214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011218:	0801430b 	.word	0x0801430b
 801121c:	0801437c 	.word	0x0801437c

08011220 <__s2b>:
 8011220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011224:	460c      	mov	r4, r1
 8011226:	4615      	mov	r5, r2
 8011228:	461f      	mov	r7, r3
 801122a:	2209      	movs	r2, #9
 801122c:	3308      	adds	r3, #8
 801122e:	4606      	mov	r6, r0
 8011230:	fb93 f3f2 	sdiv	r3, r3, r2
 8011234:	2100      	movs	r1, #0
 8011236:	2201      	movs	r2, #1
 8011238:	429a      	cmp	r2, r3
 801123a:	db09      	blt.n	8011250 <__s2b+0x30>
 801123c:	4630      	mov	r0, r6
 801123e:	f7ff ff47 	bl	80110d0 <_Balloc>
 8011242:	b940      	cbnz	r0, 8011256 <__s2b+0x36>
 8011244:	4602      	mov	r2, r0
 8011246:	4b19      	ldr	r3, [pc, #100]	@ (80112ac <__s2b+0x8c>)
 8011248:	4819      	ldr	r0, [pc, #100]	@ (80112b0 <__s2b+0x90>)
 801124a:	21d3      	movs	r1, #211	@ 0xd3
 801124c:	f001 fbfc 	bl	8012a48 <__assert_func>
 8011250:	0052      	lsls	r2, r2, #1
 8011252:	3101      	adds	r1, #1
 8011254:	e7f0      	b.n	8011238 <__s2b+0x18>
 8011256:	9b08      	ldr	r3, [sp, #32]
 8011258:	6143      	str	r3, [r0, #20]
 801125a:	2d09      	cmp	r5, #9
 801125c:	f04f 0301 	mov.w	r3, #1
 8011260:	6103      	str	r3, [r0, #16]
 8011262:	dd16      	ble.n	8011292 <__s2b+0x72>
 8011264:	f104 0909 	add.w	r9, r4, #9
 8011268:	46c8      	mov	r8, r9
 801126a:	442c      	add	r4, r5
 801126c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011270:	4601      	mov	r1, r0
 8011272:	3b30      	subs	r3, #48	@ 0x30
 8011274:	220a      	movs	r2, #10
 8011276:	4630      	mov	r0, r6
 8011278:	f7ff ff8c 	bl	8011194 <__multadd>
 801127c:	45a0      	cmp	r8, r4
 801127e:	d1f5      	bne.n	801126c <__s2b+0x4c>
 8011280:	f1a5 0408 	sub.w	r4, r5, #8
 8011284:	444c      	add	r4, r9
 8011286:	1b2d      	subs	r5, r5, r4
 8011288:	1963      	adds	r3, r4, r5
 801128a:	42bb      	cmp	r3, r7
 801128c:	db04      	blt.n	8011298 <__s2b+0x78>
 801128e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011292:	340a      	adds	r4, #10
 8011294:	2509      	movs	r5, #9
 8011296:	e7f6      	b.n	8011286 <__s2b+0x66>
 8011298:	f814 3b01 	ldrb.w	r3, [r4], #1
 801129c:	4601      	mov	r1, r0
 801129e:	3b30      	subs	r3, #48	@ 0x30
 80112a0:	220a      	movs	r2, #10
 80112a2:	4630      	mov	r0, r6
 80112a4:	f7ff ff76 	bl	8011194 <__multadd>
 80112a8:	e7ee      	b.n	8011288 <__s2b+0x68>
 80112aa:	bf00      	nop
 80112ac:	0801430b 	.word	0x0801430b
 80112b0:	0801437c 	.word	0x0801437c

080112b4 <__hi0bits>:
 80112b4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80112b8:	4603      	mov	r3, r0
 80112ba:	bf36      	itet	cc
 80112bc:	0403      	lslcc	r3, r0, #16
 80112be:	2000      	movcs	r0, #0
 80112c0:	2010      	movcc	r0, #16
 80112c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80112c6:	bf3c      	itt	cc
 80112c8:	021b      	lslcc	r3, r3, #8
 80112ca:	3008      	addcc	r0, #8
 80112cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80112d0:	bf3c      	itt	cc
 80112d2:	011b      	lslcc	r3, r3, #4
 80112d4:	3004      	addcc	r0, #4
 80112d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80112da:	bf3c      	itt	cc
 80112dc:	009b      	lslcc	r3, r3, #2
 80112de:	3002      	addcc	r0, #2
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	db05      	blt.n	80112f0 <__hi0bits+0x3c>
 80112e4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80112e8:	f100 0001 	add.w	r0, r0, #1
 80112ec:	bf08      	it	eq
 80112ee:	2020      	moveq	r0, #32
 80112f0:	4770      	bx	lr

080112f2 <__lo0bits>:
 80112f2:	6803      	ldr	r3, [r0, #0]
 80112f4:	4602      	mov	r2, r0
 80112f6:	f013 0007 	ands.w	r0, r3, #7
 80112fa:	d00b      	beq.n	8011314 <__lo0bits+0x22>
 80112fc:	07d9      	lsls	r1, r3, #31
 80112fe:	d421      	bmi.n	8011344 <__lo0bits+0x52>
 8011300:	0798      	lsls	r0, r3, #30
 8011302:	bf49      	itett	mi
 8011304:	085b      	lsrmi	r3, r3, #1
 8011306:	089b      	lsrpl	r3, r3, #2
 8011308:	2001      	movmi	r0, #1
 801130a:	6013      	strmi	r3, [r2, #0]
 801130c:	bf5c      	itt	pl
 801130e:	6013      	strpl	r3, [r2, #0]
 8011310:	2002      	movpl	r0, #2
 8011312:	4770      	bx	lr
 8011314:	b299      	uxth	r1, r3
 8011316:	b909      	cbnz	r1, 801131c <__lo0bits+0x2a>
 8011318:	0c1b      	lsrs	r3, r3, #16
 801131a:	2010      	movs	r0, #16
 801131c:	b2d9      	uxtb	r1, r3
 801131e:	b909      	cbnz	r1, 8011324 <__lo0bits+0x32>
 8011320:	3008      	adds	r0, #8
 8011322:	0a1b      	lsrs	r3, r3, #8
 8011324:	0719      	lsls	r1, r3, #28
 8011326:	bf04      	itt	eq
 8011328:	091b      	lsreq	r3, r3, #4
 801132a:	3004      	addeq	r0, #4
 801132c:	0799      	lsls	r1, r3, #30
 801132e:	bf04      	itt	eq
 8011330:	089b      	lsreq	r3, r3, #2
 8011332:	3002      	addeq	r0, #2
 8011334:	07d9      	lsls	r1, r3, #31
 8011336:	d403      	bmi.n	8011340 <__lo0bits+0x4e>
 8011338:	085b      	lsrs	r3, r3, #1
 801133a:	f100 0001 	add.w	r0, r0, #1
 801133e:	d003      	beq.n	8011348 <__lo0bits+0x56>
 8011340:	6013      	str	r3, [r2, #0]
 8011342:	4770      	bx	lr
 8011344:	2000      	movs	r0, #0
 8011346:	4770      	bx	lr
 8011348:	2020      	movs	r0, #32
 801134a:	4770      	bx	lr

0801134c <__i2b>:
 801134c:	b510      	push	{r4, lr}
 801134e:	460c      	mov	r4, r1
 8011350:	2101      	movs	r1, #1
 8011352:	f7ff febd 	bl	80110d0 <_Balloc>
 8011356:	4602      	mov	r2, r0
 8011358:	b928      	cbnz	r0, 8011366 <__i2b+0x1a>
 801135a:	4b05      	ldr	r3, [pc, #20]	@ (8011370 <__i2b+0x24>)
 801135c:	4805      	ldr	r0, [pc, #20]	@ (8011374 <__i2b+0x28>)
 801135e:	f240 1145 	movw	r1, #325	@ 0x145
 8011362:	f001 fb71 	bl	8012a48 <__assert_func>
 8011366:	2301      	movs	r3, #1
 8011368:	6144      	str	r4, [r0, #20]
 801136a:	6103      	str	r3, [r0, #16]
 801136c:	bd10      	pop	{r4, pc}
 801136e:	bf00      	nop
 8011370:	0801430b 	.word	0x0801430b
 8011374:	0801437c 	.word	0x0801437c

08011378 <__multiply>:
 8011378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801137c:	4614      	mov	r4, r2
 801137e:	690a      	ldr	r2, [r1, #16]
 8011380:	6923      	ldr	r3, [r4, #16]
 8011382:	429a      	cmp	r2, r3
 8011384:	bfa8      	it	ge
 8011386:	4623      	movge	r3, r4
 8011388:	460f      	mov	r7, r1
 801138a:	bfa4      	itt	ge
 801138c:	460c      	movge	r4, r1
 801138e:	461f      	movge	r7, r3
 8011390:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8011394:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8011398:	68a3      	ldr	r3, [r4, #8]
 801139a:	6861      	ldr	r1, [r4, #4]
 801139c:	eb0a 0609 	add.w	r6, sl, r9
 80113a0:	42b3      	cmp	r3, r6
 80113a2:	b085      	sub	sp, #20
 80113a4:	bfb8      	it	lt
 80113a6:	3101      	addlt	r1, #1
 80113a8:	f7ff fe92 	bl	80110d0 <_Balloc>
 80113ac:	b930      	cbnz	r0, 80113bc <__multiply+0x44>
 80113ae:	4602      	mov	r2, r0
 80113b0:	4b44      	ldr	r3, [pc, #272]	@ (80114c4 <__multiply+0x14c>)
 80113b2:	4845      	ldr	r0, [pc, #276]	@ (80114c8 <__multiply+0x150>)
 80113b4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80113b8:	f001 fb46 	bl	8012a48 <__assert_func>
 80113bc:	f100 0514 	add.w	r5, r0, #20
 80113c0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80113c4:	462b      	mov	r3, r5
 80113c6:	2200      	movs	r2, #0
 80113c8:	4543      	cmp	r3, r8
 80113ca:	d321      	bcc.n	8011410 <__multiply+0x98>
 80113cc:	f107 0114 	add.w	r1, r7, #20
 80113d0:	f104 0214 	add.w	r2, r4, #20
 80113d4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80113d8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80113dc:	9302      	str	r3, [sp, #8]
 80113de:	1b13      	subs	r3, r2, r4
 80113e0:	3b15      	subs	r3, #21
 80113e2:	f023 0303 	bic.w	r3, r3, #3
 80113e6:	3304      	adds	r3, #4
 80113e8:	f104 0715 	add.w	r7, r4, #21
 80113ec:	42ba      	cmp	r2, r7
 80113ee:	bf38      	it	cc
 80113f0:	2304      	movcc	r3, #4
 80113f2:	9301      	str	r3, [sp, #4]
 80113f4:	9b02      	ldr	r3, [sp, #8]
 80113f6:	9103      	str	r1, [sp, #12]
 80113f8:	428b      	cmp	r3, r1
 80113fa:	d80c      	bhi.n	8011416 <__multiply+0x9e>
 80113fc:	2e00      	cmp	r6, #0
 80113fe:	dd03      	ble.n	8011408 <__multiply+0x90>
 8011400:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011404:	2b00      	cmp	r3, #0
 8011406:	d05b      	beq.n	80114c0 <__multiply+0x148>
 8011408:	6106      	str	r6, [r0, #16]
 801140a:	b005      	add	sp, #20
 801140c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011410:	f843 2b04 	str.w	r2, [r3], #4
 8011414:	e7d8      	b.n	80113c8 <__multiply+0x50>
 8011416:	f8b1 a000 	ldrh.w	sl, [r1]
 801141a:	f1ba 0f00 	cmp.w	sl, #0
 801141e:	d024      	beq.n	801146a <__multiply+0xf2>
 8011420:	f104 0e14 	add.w	lr, r4, #20
 8011424:	46a9      	mov	r9, r5
 8011426:	f04f 0c00 	mov.w	ip, #0
 801142a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801142e:	f8d9 3000 	ldr.w	r3, [r9]
 8011432:	fa1f fb87 	uxth.w	fp, r7
 8011436:	b29b      	uxth	r3, r3
 8011438:	fb0a 330b 	mla	r3, sl, fp, r3
 801143c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8011440:	f8d9 7000 	ldr.w	r7, [r9]
 8011444:	4463      	add	r3, ip
 8011446:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801144a:	fb0a c70b 	mla	r7, sl, fp, ip
 801144e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8011452:	b29b      	uxth	r3, r3
 8011454:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011458:	4572      	cmp	r2, lr
 801145a:	f849 3b04 	str.w	r3, [r9], #4
 801145e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011462:	d8e2      	bhi.n	801142a <__multiply+0xb2>
 8011464:	9b01      	ldr	r3, [sp, #4]
 8011466:	f845 c003 	str.w	ip, [r5, r3]
 801146a:	9b03      	ldr	r3, [sp, #12]
 801146c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011470:	3104      	adds	r1, #4
 8011472:	f1b9 0f00 	cmp.w	r9, #0
 8011476:	d021      	beq.n	80114bc <__multiply+0x144>
 8011478:	682b      	ldr	r3, [r5, #0]
 801147a:	f104 0c14 	add.w	ip, r4, #20
 801147e:	46ae      	mov	lr, r5
 8011480:	f04f 0a00 	mov.w	sl, #0
 8011484:	f8bc b000 	ldrh.w	fp, [ip]
 8011488:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801148c:	fb09 770b 	mla	r7, r9, fp, r7
 8011490:	4457      	add	r7, sl
 8011492:	b29b      	uxth	r3, r3
 8011494:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011498:	f84e 3b04 	str.w	r3, [lr], #4
 801149c:	f85c 3b04 	ldr.w	r3, [ip], #4
 80114a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80114a4:	f8be 3000 	ldrh.w	r3, [lr]
 80114a8:	fb09 330a 	mla	r3, r9, sl, r3
 80114ac:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80114b0:	4562      	cmp	r2, ip
 80114b2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80114b6:	d8e5      	bhi.n	8011484 <__multiply+0x10c>
 80114b8:	9f01      	ldr	r7, [sp, #4]
 80114ba:	51eb      	str	r3, [r5, r7]
 80114bc:	3504      	adds	r5, #4
 80114be:	e799      	b.n	80113f4 <__multiply+0x7c>
 80114c0:	3e01      	subs	r6, #1
 80114c2:	e79b      	b.n	80113fc <__multiply+0x84>
 80114c4:	0801430b 	.word	0x0801430b
 80114c8:	0801437c 	.word	0x0801437c

080114cc <__pow5mult>:
 80114cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80114d0:	4615      	mov	r5, r2
 80114d2:	f012 0203 	ands.w	r2, r2, #3
 80114d6:	4607      	mov	r7, r0
 80114d8:	460e      	mov	r6, r1
 80114da:	d007      	beq.n	80114ec <__pow5mult+0x20>
 80114dc:	4c25      	ldr	r4, [pc, #148]	@ (8011574 <__pow5mult+0xa8>)
 80114de:	3a01      	subs	r2, #1
 80114e0:	2300      	movs	r3, #0
 80114e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80114e6:	f7ff fe55 	bl	8011194 <__multadd>
 80114ea:	4606      	mov	r6, r0
 80114ec:	10ad      	asrs	r5, r5, #2
 80114ee:	d03d      	beq.n	801156c <__pow5mult+0xa0>
 80114f0:	69fc      	ldr	r4, [r7, #28]
 80114f2:	b97c      	cbnz	r4, 8011514 <__pow5mult+0x48>
 80114f4:	2010      	movs	r0, #16
 80114f6:	f7ff fd23 	bl	8010f40 <malloc>
 80114fa:	4602      	mov	r2, r0
 80114fc:	61f8      	str	r0, [r7, #28]
 80114fe:	b928      	cbnz	r0, 801150c <__pow5mult+0x40>
 8011500:	4b1d      	ldr	r3, [pc, #116]	@ (8011578 <__pow5mult+0xac>)
 8011502:	481e      	ldr	r0, [pc, #120]	@ (801157c <__pow5mult+0xb0>)
 8011504:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011508:	f001 fa9e 	bl	8012a48 <__assert_func>
 801150c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011510:	6004      	str	r4, [r0, #0]
 8011512:	60c4      	str	r4, [r0, #12]
 8011514:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011518:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801151c:	b94c      	cbnz	r4, 8011532 <__pow5mult+0x66>
 801151e:	f240 2171 	movw	r1, #625	@ 0x271
 8011522:	4638      	mov	r0, r7
 8011524:	f7ff ff12 	bl	801134c <__i2b>
 8011528:	2300      	movs	r3, #0
 801152a:	f8c8 0008 	str.w	r0, [r8, #8]
 801152e:	4604      	mov	r4, r0
 8011530:	6003      	str	r3, [r0, #0]
 8011532:	f04f 0900 	mov.w	r9, #0
 8011536:	07eb      	lsls	r3, r5, #31
 8011538:	d50a      	bpl.n	8011550 <__pow5mult+0x84>
 801153a:	4631      	mov	r1, r6
 801153c:	4622      	mov	r2, r4
 801153e:	4638      	mov	r0, r7
 8011540:	f7ff ff1a 	bl	8011378 <__multiply>
 8011544:	4631      	mov	r1, r6
 8011546:	4680      	mov	r8, r0
 8011548:	4638      	mov	r0, r7
 801154a:	f7ff fe01 	bl	8011150 <_Bfree>
 801154e:	4646      	mov	r6, r8
 8011550:	106d      	asrs	r5, r5, #1
 8011552:	d00b      	beq.n	801156c <__pow5mult+0xa0>
 8011554:	6820      	ldr	r0, [r4, #0]
 8011556:	b938      	cbnz	r0, 8011568 <__pow5mult+0x9c>
 8011558:	4622      	mov	r2, r4
 801155a:	4621      	mov	r1, r4
 801155c:	4638      	mov	r0, r7
 801155e:	f7ff ff0b 	bl	8011378 <__multiply>
 8011562:	6020      	str	r0, [r4, #0]
 8011564:	f8c0 9000 	str.w	r9, [r0]
 8011568:	4604      	mov	r4, r0
 801156a:	e7e4      	b.n	8011536 <__pow5mult+0x6a>
 801156c:	4630      	mov	r0, r6
 801156e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011572:	bf00      	nop
 8011574:	080143d8 	.word	0x080143d8
 8011578:	0801429c 	.word	0x0801429c
 801157c:	0801437c 	.word	0x0801437c

08011580 <__lshift>:
 8011580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011584:	460c      	mov	r4, r1
 8011586:	6849      	ldr	r1, [r1, #4]
 8011588:	6923      	ldr	r3, [r4, #16]
 801158a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801158e:	68a3      	ldr	r3, [r4, #8]
 8011590:	4607      	mov	r7, r0
 8011592:	4691      	mov	r9, r2
 8011594:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011598:	f108 0601 	add.w	r6, r8, #1
 801159c:	42b3      	cmp	r3, r6
 801159e:	db0b      	blt.n	80115b8 <__lshift+0x38>
 80115a0:	4638      	mov	r0, r7
 80115a2:	f7ff fd95 	bl	80110d0 <_Balloc>
 80115a6:	4605      	mov	r5, r0
 80115a8:	b948      	cbnz	r0, 80115be <__lshift+0x3e>
 80115aa:	4602      	mov	r2, r0
 80115ac:	4b28      	ldr	r3, [pc, #160]	@ (8011650 <__lshift+0xd0>)
 80115ae:	4829      	ldr	r0, [pc, #164]	@ (8011654 <__lshift+0xd4>)
 80115b0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80115b4:	f001 fa48 	bl	8012a48 <__assert_func>
 80115b8:	3101      	adds	r1, #1
 80115ba:	005b      	lsls	r3, r3, #1
 80115bc:	e7ee      	b.n	801159c <__lshift+0x1c>
 80115be:	2300      	movs	r3, #0
 80115c0:	f100 0114 	add.w	r1, r0, #20
 80115c4:	f100 0210 	add.w	r2, r0, #16
 80115c8:	4618      	mov	r0, r3
 80115ca:	4553      	cmp	r3, sl
 80115cc:	db33      	blt.n	8011636 <__lshift+0xb6>
 80115ce:	6920      	ldr	r0, [r4, #16]
 80115d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80115d4:	f104 0314 	add.w	r3, r4, #20
 80115d8:	f019 091f 	ands.w	r9, r9, #31
 80115dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80115e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80115e4:	d02b      	beq.n	801163e <__lshift+0xbe>
 80115e6:	f1c9 0e20 	rsb	lr, r9, #32
 80115ea:	468a      	mov	sl, r1
 80115ec:	2200      	movs	r2, #0
 80115ee:	6818      	ldr	r0, [r3, #0]
 80115f0:	fa00 f009 	lsl.w	r0, r0, r9
 80115f4:	4310      	orrs	r0, r2
 80115f6:	f84a 0b04 	str.w	r0, [sl], #4
 80115fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80115fe:	459c      	cmp	ip, r3
 8011600:	fa22 f20e 	lsr.w	r2, r2, lr
 8011604:	d8f3      	bhi.n	80115ee <__lshift+0x6e>
 8011606:	ebac 0304 	sub.w	r3, ip, r4
 801160a:	3b15      	subs	r3, #21
 801160c:	f023 0303 	bic.w	r3, r3, #3
 8011610:	3304      	adds	r3, #4
 8011612:	f104 0015 	add.w	r0, r4, #21
 8011616:	4584      	cmp	ip, r0
 8011618:	bf38      	it	cc
 801161a:	2304      	movcc	r3, #4
 801161c:	50ca      	str	r2, [r1, r3]
 801161e:	b10a      	cbz	r2, 8011624 <__lshift+0xa4>
 8011620:	f108 0602 	add.w	r6, r8, #2
 8011624:	3e01      	subs	r6, #1
 8011626:	4638      	mov	r0, r7
 8011628:	612e      	str	r6, [r5, #16]
 801162a:	4621      	mov	r1, r4
 801162c:	f7ff fd90 	bl	8011150 <_Bfree>
 8011630:	4628      	mov	r0, r5
 8011632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011636:	f842 0f04 	str.w	r0, [r2, #4]!
 801163a:	3301      	adds	r3, #1
 801163c:	e7c5      	b.n	80115ca <__lshift+0x4a>
 801163e:	3904      	subs	r1, #4
 8011640:	f853 2b04 	ldr.w	r2, [r3], #4
 8011644:	f841 2f04 	str.w	r2, [r1, #4]!
 8011648:	459c      	cmp	ip, r3
 801164a:	d8f9      	bhi.n	8011640 <__lshift+0xc0>
 801164c:	e7ea      	b.n	8011624 <__lshift+0xa4>
 801164e:	bf00      	nop
 8011650:	0801430b 	.word	0x0801430b
 8011654:	0801437c 	.word	0x0801437c

08011658 <__mcmp>:
 8011658:	690a      	ldr	r2, [r1, #16]
 801165a:	4603      	mov	r3, r0
 801165c:	6900      	ldr	r0, [r0, #16]
 801165e:	1a80      	subs	r0, r0, r2
 8011660:	b530      	push	{r4, r5, lr}
 8011662:	d10e      	bne.n	8011682 <__mcmp+0x2a>
 8011664:	3314      	adds	r3, #20
 8011666:	3114      	adds	r1, #20
 8011668:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801166c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011670:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011674:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011678:	4295      	cmp	r5, r2
 801167a:	d003      	beq.n	8011684 <__mcmp+0x2c>
 801167c:	d205      	bcs.n	801168a <__mcmp+0x32>
 801167e:	f04f 30ff 	mov.w	r0, #4294967295
 8011682:	bd30      	pop	{r4, r5, pc}
 8011684:	42a3      	cmp	r3, r4
 8011686:	d3f3      	bcc.n	8011670 <__mcmp+0x18>
 8011688:	e7fb      	b.n	8011682 <__mcmp+0x2a>
 801168a:	2001      	movs	r0, #1
 801168c:	e7f9      	b.n	8011682 <__mcmp+0x2a>
	...

08011690 <__mdiff>:
 8011690:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011694:	4689      	mov	r9, r1
 8011696:	4606      	mov	r6, r0
 8011698:	4611      	mov	r1, r2
 801169a:	4648      	mov	r0, r9
 801169c:	4614      	mov	r4, r2
 801169e:	f7ff ffdb 	bl	8011658 <__mcmp>
 80116a2:	1e05      	subs	r5, r0, #0
 80116a4:	d112      	bne.n	80116cc <__mdiff+0x3c>
 80116a6:	4629      	mov	r1, r5
 80116a8:	4630      	mov	r0, r6
 80116aa:	f7ff fd11 	bl	80110d0 <_Balloc>
 80116ae:	4602      	mov	r2, r0
 80116b0:	b928      	cbnz	r0, 80116be <__mdiff+0x2e>
 80116b2:	4b3f      	ldr	r3, [pc, #252]	@ (80117b0 <__mdiff+0x120>)
 80116b4:	f240 2137 	movw	r1, #567	@ 0x237
 80116b8:	483e      	ldr	r0, [pc, #248]	@ (80117b4 <__mdiff+0x124>)
 80116ba:	f001 f9c5 	bl	8012a48 <__assert_func>
 80116be:	2301      	movs	r3, #1
 80116c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80116c4:	4610      	mov	r0, r2
 80116c6:	b003      	add	sp, #12
 80116c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116cc:	bfbc      	itt	lt
 80116ce:	464b      	movlt	r3, r9
 80116d0:	46a1      	movlt	r9, r4
 80116d2:	4630      	mov	r0, r6
 80116d4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80116d8:	bfba      	itte	lt
 80116da:	461c      	movlt	r4, r3
 80116dc:	2501      	movlt	r5, #1
 80116de:	2500      	movge	r5, #0
 80116e0:	f7ff fcf6 	bl	80110d0 <_Balloc>
 80116e4:	4602      	mov	r2, r0
 80116e6:	b918      	cbnz	r0, 80116f0 <__mdiff+0x60>
 80116e8:	4b31      	ldr	r3, [pc, #196]	@ (80117b0 <__mdiff+0x120>)
 80116ea:	f240 2145 	movw	r1, #581	@ 0x245
 80116ee:	e7e3      	b.n	80116b8 <__mdiff+0x28>
 80116f0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80116f4:	6926      	ldr	r6, [r4, #16]
 80116f6:	60c5      	str	r5, [r0, #12]
 80116f8:	f109 0310 	add.w	r3, r9, #16
 80116fc:	f109 0514 	add.w	r5, r9, #20
 8011700:	f104 0e14 	add.w	lr, r4, #20
 8011704:	f100 0b14 	add.w	fp, r0, #20
 8011708:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801170c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011710:	9301      	str	r3, [sp, #4]
 8011712:	46d9      	mov	r9, fp
 8011714:	f04f 0c00 	mov.w	ip, #0
 8011718:	9b01      	ldr	r3, [sp, #4]
 801171a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801171e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011722:	9301      	str	r3, [sp, #4]
 8011724:	fa1f f38a 	uxth.w	r3, sl
 8011728:	4619      	mov	r1, r3
 801172a:	b283      	uxth	r3, r0
 801172c:	1acb      	subs	r3, r1, r3
 801172e:	0c00      	lsrs	r0, r0, #16
 8011730:	4463      	add	r3, ip
 8011732:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011736:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801173a:	b29b      	uxth	r3, r3
 801173c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011740:	4576      	cmp	r6, lr
 8011742:	f849 3b04 	str.w	r3, [r9], #4
 8011746:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801174a:	d8e5      	bhi.n	8011718 <__mdiff+0x88>
 801174c:	1b33      	subs	r3, r6, r4
 801174e:	3b15      	subs	r3, #21
 8011750:	f023 0303 	bic.w	r3, r3, #3
 8011754:	3415      	adds	r4, #21
 8011756:	3304      	adds	r3, #4
 8011758:	42a6      	cmp	r6, r4
 801175a:	bf38      	it	cc
 801175c:	2304      	movcc	r3, #4
 801175e:	441d      	add	r5, r3
 8011760:	445b      	add	r3, fp
 8011762:	461e      	mov	r6, r3
 8011764:	462c      	mov	r4, r5
 8011766:	4544      	cmp	r4, r8
 8011768:	d30e      	bcc.n	8011788 <__mdiff+0xf8>
 801176a:	f108 0103 	add.w	r1, r8, #3
 801176e:	1b49      	subs	r1, r1, r5
 8011770:	f021 0103 	bic.w	r1, r1, #3
 8011774:	3d03      	subs	r5, #3
 8011776:	45a8      	cmp	r8, r5
 8011778:	bf38      	it	cc
 801177a:	2100      	movcc	r1, #0
 801177c:	440b      	add	r3, r1
 801177e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011782:	b191      	cbz	r1, 80117aa <__mdiff+0x11a>
 8011784:	6117      	str	r7, [r2, #16]
 8011786:	e79d      	b.n	80116c4 <__mdiff+0x34>
 8011788:	f854 1b04 	ldr.w	r1, [r4], #4
 801178c:	46e6      	mov	lr, ip
 801178e:	0c08      	lsrs	r0, r1, #16
 8011790:	fa1c fc81 	uxtah	ip, ip, r1
 8011794:	4471      	add	r1, lr
 8011796:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801179a:	b289      	uxth	r1, r1
 801179c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80117a0:	f846 1b04 	str.w	r1, [r6], #4
 80117a4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80117a8:	e7dd      	b.n	8011766 <__mdiff+0xd6>
 80117aa:	3f01      	subs	r7, #1
 80117ac:	e7e7      	b.n	801177e <__mdiff+0xee>
 80117ae:	bf00      	nop
 80117b0:	0801430b 	.word	0x0801430b
 80117b4:	0801437c 	.word	0x0801437c

080117b8 <__ulp>:
 80117b8:	b082      	sub	sp, #8
 80117ba:	ed8d 0b00 	vstr	d0, [sp]
 80117be:	9a01      	ldr	r2, [sp, #4]
 80117c0:	4b0f      	ldr	r3, [pc, #60]	@ (8011800 <__ulp+0x48>)
 80117c2:	4013      	ands	r3, r2
 80117c4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	dc08      	bgt.n	80117de <__ulp+0x26>
 80117cc:	425b      	negs	r3, r3
 80117ce:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80117d2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80117d6:	da04      	bge.n	80117e2 <__ulp+0x2a>
 80117d8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80117dc:	4113      	asrs	r3, r2
 80117de:	2200      	movs	r2, #0
 80117e0:	e008      	b.n	80117f4 <__ulp+0x3c>
 80117e2:	f1a2 0314 	sub.w	r3, r2, #20
 80117e6:	2b1e      	cmp	r3, #30
 80117e8:	bfda      	itte	le
 80117ea:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80117ee:	40da      	lsrle	r2, r3
 80117f0:	2201      	movgt	r2, #1
 80117f2:	2300      	movs	r3, #0
 80117f4:	4619      	mov	r1, r3
 80117f6:	4610      	mov	r0, r2
 80117f8:	ec41 0b10 	vmov	d0, r0, r1
 80117fc:	b002      	add	sp, #8
 80117fe:	4770      	bx	lr
 8011800:	7ff00000 	.word	0x7ff00000

08011804 <__b2d>:
 8011804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011808:	6906      	ldr	r6, [r0, #16]
 801180a:	f100 0814 	add.w	r8, r0, #20
 801180e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8011812:	1f37      	subs	r7, r6, #4
 8011814:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011818:	4610      	mov	r0, r2
 801181a:	f7ff fd4b 	bl	80112b4 <__hi0bits>
 801181e:	f1c0 0320 	rsb	r3, r0, #32
 8011822:	280a      	cmp	r0, #10
 8011824:	600b      	str	r3, [r1, #0]
 8011826:	491b      	ldr	r1, [pc, #108]	@ (8011894 <__b2d+0x90>)
 8011828:	dc15      	bgt.n	8011856 <__b2d+0x52>
 801182a:	f1c0 0c0b 	rsb	ip, r0, #11
 801182e:	fa22 f30c 	lsr.w	r3, r2, ip
 8011832:	45b8      	cmp	r8, r7
 8011834:	ea43 0501 	orr.w	r5, r3, r1
 8011838:	bf34      	ite	cc
 801183a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801183e:	2300      	movcs	r3, #0
 8011840:	3015      	adds	r0, #21
 8011842:	fa02 f000 	lsl.w	r0, r2, r0
 8011846:	fa23 f30c 	lsr.w	r3, r3, ip
 801184a:	4303      	orrs	r3, r0
 801184c:	461c      	mov	r4, r3
 801184e:	ec45 4b10 	vmov	d0, r4, r5
 8011852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011856:	45b8      	cmp	r8, r7
 8011858:	bf3a      	itte	cc
 801185a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801185e:	f1a6 0708 	subcc.w	r7, r6, #8
 8011862:	2300      	movcs	r3, #0
 8011864:	380b      	subs	r0, #11
 8011866:	d012      	beq.n	801188e <__b2d+0x8a>
 8011868:	f1c0 0120 	rsb	r1, r0, #32
 801186c:	fa23 f401 	lsr.w	r4, r3, r1
 8011870:	4082      	lsls	r2, r0
 8011872:	4322      	orrs	r2, r4
 8011874:	4547      	cmp	r7, r8
 8011876:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801187a:	bf8c      	ite	hi
 801187c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8011880:	2200      	movls	r2, #0
 8011882:	4083      	lsls	r3, r0
 8011884:	40ca      	lsrs	r2, r1
 8011886:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801188a:	4313      	orrs	r3, r2
 801188c:	e7de      	b.n	801184c <__b2d+0x48>
 801188e:	ea42 0501 	orr.w	r5, r2, r1
 8011892:	e7db      	b.n	801184c <__b2d+0x48>
 8011894:	3ff00000 	.word	0x3ff00000

08011898 <__d2b>:
 8011898:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801189c:	460f      	mov	r7, r1
 801189e:	2101      	movs	r1, #1
 80118a0:	ec59 8b10 	vmov	r8, r9, d0
 80118a4:	4616      	mov	r6, r2
 80118a6:	f7ff fc13 	bl	80110d0 <_Balloc>
 80118aa:	4604      	mov	r4, r0
 80118ac:	b930      	cbnz	r0, 80118bc <__d2b+0x24>
 80118ae:	4602      	mov	r2, r0
 80118b0:	4b23      	ldr	r3, [pc, #140]	@ (8011940 <__d2b+0xa8>)
 80118b2:	4824      	ldr	r0, [pc, #144]	@ (8011944 <__d2b+0xac>)
 80118b4:	f240 310f 	movw	r1, #783	@ 0x30f
 80118b8:	f001 f8c6 	bl	8012a48 <__assert_func>
 80118bc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80118c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80118c4:	b10d      	cbz	r5, 80118ca <__d2b+0x32>
 80118c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80118ca:	9301      	str	r3, [sp, #4]
 80118cc:	f1b8 0300 	subs.w	r3, r8, #0
 80118d0:	d023      	beq.n	801191a <__d2b+0x82>
 80118d2:	4668      	mov	r0, sp
 80118d4:	9300      	str	r3, [sp, #0]
 80118d6:	f7ff fd0c 	bl	80112f2 <__lo0bits>
 80118da:	e9dd 1200 	ldrd	r1, r2, [sp]
 80118de:	b1d0      	cbz	r0, 8011916 <__d2b+0x7e>
 80118e0:	f1c0 0320 	rsb	r3, r0, #32
 80118e4:	fa02 f303 	lsl.w	r3, r2, r3
 80118e8:	430b      	orrs	r3, r1
 80118ea:	40c2      	lsrs	r2, r0
 80118ec:	6163      	str	r3, [r4, #20]
 80118ee:	9201      	str	r2, [sp, #4]
 80118f0:	9b01      	ldr	r3, [sp, #4]
 80118f2:	61a3      	str	r3, [r4, #24]
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	bf0c      	ite	eq
 80118f8:	2201      	moveq	r2, #1
 80118fa:	2202      	movne	r2, #2
 80118fc:	6122      	str	r2, [r4, #16]
 80118fe:	b1a5      	cbz	r5, 801192a <__d2b+0x92>
 8011900:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011904:	4405      	add	r5, r0
 8011906:	603d      	str	r5, [r7, #0]
 8011908:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801190c:	6030      	str	r0, [r6, #0]
 801190e:	4620      	mov	r0, r4
 8011910:	b003      	add	sp, #12
 8011912:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011916:	6161      	str	r1, [r4, #20]
 8011918:	e7ea      	b.n	80118f0 <__d2b+0x58>
 801191a:	a801      	add	r0, sp, #4
 801191c:	f7ff fce9 	bl	80112f2 <__lo0bits>
 8011920:	9b01      	ldr	r3, [sp, #4]
 8011922:	6163      	str	r3, [r4, #20]
 8011924:	3020      	adds	r0, #32
 8011926:	2201      	movs	r2, #1
 8011928:	e7e8      	b.n	80118fc <__d2b+0x64>
 801192a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801192e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011932:	6038      	str	r0, [r7, #0]
 8011934:	6918      	ldr	r0, [r3, #16]
 8011936:	f7ff fcbd 	bl	80112b4 <__hi0bits>
 801193a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801193e:	e7e5      	b.n	801190c <__d2b+0x74>
 8011940:	0801430b 	.word	0x0801430b
 8011944:	0801437c 	.word	0x0801437c

08011948 <__ratio>:
 8011948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801194c:	b085      	sub	sp, #20
 801194e:	e9cd 1000 	strd	r1, r0, [sp]
 8011952:	a902      	add	r1, sp, #8
 8011954:	f7ff ff56 	bl	8011804 <__b2d>
 8011958:	9800      	ldr	r0, [sp, #0]
 801195a:	a903      	add	r1, sp, #12
 801195c:	ec55 4b10 	vmov	r4, r5, d0
 8011960:	f7ff ff50 	bl	8011804 <__b2d>
 8011964:	9b01      	ldr	r3, [sp, #4]
 8011966:	6919      	ldr	r1, [r3, #16]
 8011968:	9b00      	ldr	r3, [sp, #0]
 801196a:	691b      	ldr	r3, [r3, #16]
 801196c:	1ac9      	subs	r1, r1, r3
 801196e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8011972:	1a9b      	subs	r3, r3, r2
 8011974:	ec5b ab10 	vmov	sl, fp, d0
 8011978:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801197c:	2b00      	cmp	r3, #0
 801197e:	bfce      	itee	gt
 8011980:	462a      	movgt	r2, r5
 8011982:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011986:	465a      	movle	r2, fp
 8011988:	462f      	mov	r7, r5
 801198a:	46d9      	mov	r9, fp
 801198c:	bfcc      	ite	gt
 801198e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011992:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8011996:	464b      	mov	r3, r9
 8011998:	4652      	mov	r2, sl
 801199a:	4620      	mov	r0, r4
 801199c:	4639      	mov	r1, r7
 801199e:	f7ee ff5d 	bl	800085c <__aeabi_ddiv>
 80119a2:	ec41 0b10 	vmov	d0, r0, r1
 80119a6:	b005      	add	sp, #20
 80119a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080119ac <__copybits>:
 80119ac:	3901      	subs	r1, #1
 80119ae:	b570      	push	{r4, r5, r6, lr}
 80119b0:	1149      	asrs	r1, r1, #5
 80119b2:	6914      	ldr	r4, [r2, #16]
 80119b4:	3101      	adds	r1, #1
 80119b6:	f102 0314 	add.w	r3, r2, #20
 80119ba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80119be:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80119c2:	1f05      	subs	r5, r0, #4
 80119c4:	42a3      	cmp	r3, r4
 80119c6:	d30c      	bcc.n	80119e2 <__copybits+0x36>
 80119c8:	1aa3      	subs	r3, r4, r2
 80119ca:	3b11      	subs	r3, #17
 80119cc:	f023 0303 	bic.w	r3, r3, #3
 80119d0:	3211      	adds	r2, #17
 80119d2:	42a2      	cmp	r2, r4
 80119d4:	bf88      	it	hi
 80119d6:	2300      	movhi	r3, #0
 80119d8:	4418      	add	r0, r3
 80119da:	2300      	movs	r3, #0
 80119dc:	4288      	cmp	r0, r1
 80119de:	d305      	bcc.n	80119ec <__copybits+0x40>
 80119e0:	bd70      	pop	{r4, r5, r6, pc}
 80119e2:	f853 6b04 	ldr.w	r6, [r3], #4
 80119e6:	f845 6f04 	str.w	r6, [r5, #4]!
 80119ea:	e7eb      	b.n	80119c4 <__copybits+0x18>
 80119ec:	f840 3b04 	str.w	r3, [r0], #4
 80119f0:	e7f4      	b.n	80119dc <__copybits+0x30>

080119f2 <__any_on>:
 80119f2:	f100 0214 	add.w	r2, r0, #20
 80119f6:	6900      	ldr	r0, [r0, #16]
 80119f8:	114b      	asrs	r3, r1, #5
 80119fa:	4298      	cmp	r0, r3
 80119fc:	b510      	push	{r4, lr}
 80119fe:	db11      	blt.n	8011a24 <__any_on+0x32>
 8011a00:	dd0a      	ble.n	8011a18 <__any_on+0x26>
 8011a02:	f011 011f 	ands.w	r1, r1, #31
 8011a06:	d007      	beq.n	8011a18 <__any_on+0x26>
 8011a08:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011a0c:	fa24 f001 	lsr.w	r0, r4, r1
 8011a10:	fa00 f101 	lsl.w	r1, r0, r1
 8011a14:	428c      	cmp	r4, r1
 8011a16:	d10b      	bne.n	8011a30 <__any_on+0x3e>
 8011a18:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011a1c:	4293      	cmp	r3, r2
 8011a1e:	d803      	bhi.n	8011a28 <__any_on+0x36>
 8011a20:	2000      	movs	r0, #0
 8011a22:	bd10      	pop	{r4, pc}
 8011a24:	4603      	mov	r3, r0
 8011a26:	e7f7      	b.n	8011a18 <__any_on+0x26>
 8011a28:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011a2c:	2900      	cmp	r1, #0
 8011a2e:	d0f5      	beq.n	8011a1c <__any_on+0x2a>
 8011a30:	2001      	movs	r0, #1
 8011a32:	e7f6      	b.n	8011a22 <__any_on+0x30>

08011a34 <_strtol_l.constprop.0>:
 8011a34:	2b24      	cmp	r3, #36	@ 0x24
 8011a36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a3a:	4686      	mov	lr, r0
 8011a3c:	4690      	mov	r8, r2
 8011a3e:	d801      	bhi.n	8011a44 <_strtol_l.constprop.0+0x10>
 8011a40:	2b01      	cmp	r3, #1
 8011a42:	d106      	bne.n	8011a52 <_strtol_l.constprop.0+0x1e>
 8011a44:	f7fe f860 	bl	800fb08 <__errno>
 8011a48:	2316      	movs	r3, #22
 8011a4a:	6003      	str	r3, [r0, #0]
 8011a4c:	2000      	movs	r0, #0
 8011a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a52:	4834      	ldr	r0, [pc, #208]	@ (8011b24 <_strtol_l.constprop.0+0xf0>)
 8011a54:	460d      	mov	r5, r1
 8011a56:	462a      	mov	r2, r5
 8011a58:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011a5c:	5d06      	ldrb	r6, [r0, r4]
 8011a5e:	f016 0608 	ands.w	r6, r6, #8
 8011a62:	d1f8      	bne.n	8011a56 <_strtol_l.constprop.0+0x22>
 8011a64:	2c2d      	cmp	r4, #45	@ 0x2d
 8011a66:	d12d      	bne.n	8011ac4 <_strtol_l.constprop.0+0x90>
 8011a68:	782c      	ldrb	r4, [r5, #0]
 8011a6a:	2601      	movs	r6, #1
 8011a6c:	1c95      	adds	r5, r2, #2
 8011a6e:	f033 0210 	bics.w	r2, r3, #16
 8011a72:	d109      	bne.n	8011a88 <_strtol_l.constprop.0+0x54>
 8011a74:	2c30      	cmp	r4, #48	@ 0x30
 8011a76:	d12a      	bne.n	8011ace <_strtol_l.constprop.0+0x9a>
 8011a78:	782a      	ldrb	r2, [r5, #0]
 8011a7a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011a7e:	2a58      	cmp	r2, #88	@ 0x58
 8011a80:	d125      	bne.n	8011ace <_strtol_l.constprop.0+0x9a>
 8011a82:	786c      	ldrb	r4, [r5, #1]
 8011a84:	2310      	movs	r3, #16
 8011a86:	3502      	adds	r5, #2
 8011a88:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8011a8c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011a90:	2200      	movs	r2, #0
 8011a92:	fbbc f9f3 	udiv	r9, ip, r3
 8011a96:	4610      	mov	r0, r2
 8011a98:	fb03 ca19 	mls	sl, r3, r9, ip
 8011a9c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8011aa0:	2f09      	cmp	r7, #9
 8011aa2:	d81b      	bhi.n	8011adc <_strtol_l.constprop.0+0xa8>
 8011aa4:	463c      	mov	r4, r7
 8011aa6:	42a3      	cmp	r3, r4
 8011aa8:	dd27      	ble.n	8011afa <_strtol_l.constprop.0+0xc6>
 8011aaa:	1c57      	adds	r7, r2, #1
 8011aac:	d007      	beq.n	8011abe <_strtol_l.constprop.0+0x8a>
 8011aae:	4581      	cmp	r9, r0
 8011ab0:	d320      	bcc.n	8011af4 <_strtol_l.constprop.0+0xc0>
 8011ab2:	d101      	bne.n	8011ab8 <_strtol_l.constprop.0+0x84>
 8011ab4:	45a2      	cmp	sl, r4
 8011ab6:	db1d      	blt.n	8011af4 <_strtol_l.constprop.0+0xc0>
 8011ab8:	fb00 4003 	mla	r0, r0, r3, r4
 8011abc:	2201      	movs	r2, #1
 8011abe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011ac2:	e7eb      	b.n	8011a9c <_strtol_l.constprop.0+0x68>
 8011ac4:	2c2b      	cmp	r4, #43	@ 0x2b
 8011ac6:	bf04      	itt	eq
 8011ac8:	782c      	ldrbeq	r4, [r5, #0]
 8011aca:	1c95      	addeq	r5, r2, #2
 8011acc:	e7cf      	b.n	8011a6e <_strtol_l.constprop.0+0x3a>
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d1da      	bne.n	8011a88 <_strtol_l.constprop.0+0x54>
 8011ad2:	2c30      	cmp	r4, #48	@ 0x30
 8011ad4:	bf0c      	ite	eq
 8011ad6:	2308      	moveq	r3, #8
 8011ad8:	230a      	movne	r3, #10
 8011ada:	e7d5      	b.n	8011a88 <_strtol_l.constprop.0+0x54>
 8011adc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8011ae0:	2f19      	cmp	r7, #25
 8011ae2:	d801      	bhi.n	8011ae8 <_strtol_l.constprop.0+0xb4>
 8011ae4:	3c37      	subs	r4, #55	@ 0x37
 8011ae6:	e7de      	b.n	8011aa6 <_strtol_l.constprop.0+0x72>
 8011ae8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8011aec:	2f19      	cmp	r7, #25
 8011aee:	d804      	bhi.n	8011afa <_strtol_l.constprop.0+0xc6>
 8011af0:	3c57      	subs	r4, #87	@ 0x57
 8011af2:	e7d8      	b.n	8011aa6 <_strtol_l.constprop.0+0x72>
 8011af4:	f04f 32ff 	mov.w	r2, #4294967295
 8011af8:	e7e1      	b.n	8011abe <_strtol_l.constprop.0+0x8a>
 8011afa:	1c53      	adds	r3, r2, #1
 8011afc:	d108      	bne.n	8011b10 <_strtol_l.constprop.0+0xdc>
 8011afe:	2322      	movs	r3, #34	@ 0x22
 8011b00:	f8ce 3000 	str.w	r3, [lr]
 8011b04:	4660      	mov	r0, ip
 8011b06:	f1b8 0f00 	cmp.w	r8, #0
 8011b0a:	d0a0      	beq.n	8011a4e <_strtol_l.constprop.0+0x1a>
 8011b0c:	1e69      	subs	r1, r5, #1
 8011b0e:	e006      	b.n	8011b1e <_strtol_l.constprop.0+0xea>
 8011b10:	b106      	cbz	r6, 8011b14 <_strtol_l.constprop.0+0xe0>
 8011b12:	4240      	negs	r0, r0
 8011b14:	f1b8 0f00 	cmp.w	r8, #0
 8011b18:	d099      	beq.n	8011a4e <_strtol_l.constprop.0+0x1a>
 8011b1a:	2a00      	cmp	r2, #0
 8011b1c:	d1f6      	bne.n	8011b0c <_strtol_l.constprop.0+0xd8>
 8011b1e:	f8c8 1000 	str.w	r1, [r8]
 8011b22:	e794      	b.n	8011a4e <_strtol_l.constprop.0+0x1a>
 8011b24:	080144d9 	.word	0x080144d9

08011b28 <_strtol_r>:
 8011b28:	f7ff bf84 	b.w	8011a34 <_strtol_l.constprop.0>

08011b2c <__ascii_wctomb>:
 8011b2c:	4603      	mov	r3, r0
 8011b2e:	4608      	mov	r0, r1
 8011b30:	b141      	cbz	r1, 8011b44 <__ascii_wctomb+0x18>
 8011b32:	2aff      	cmp	r2, #255	@ 0xff
 8011b34:	d904      	bls.n	8011b40 <__ascii_wctomb+0x14>
 8011b36:	228a      	movs	r2, #138	@ 0x8a
 8011b38:	601a      	str	r2, [r3, #0]
 8011b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8011b3e:	4770      	bx	lr
 8011b40:	700a      	strb	r2, [r1, #0]
 8011b42:	2001      	movs	r0, #1
 8011b44:	4770      	bx	lr

08011b46 <__ssputs_r>:
 8011b46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b4a:	688e      	ldr	r6, [r1, #8]
 8011b4c:	461f      	mov	r7, r3
 8011b4e:	42be      	cmp	r6, r7
 8011b50:	680b      	ldr	r3, [r1, #0]
 8011b52:	4682      	mov	sl, r0
 8011b54:	460c      	mov	r4, r1
 8011b56:	4690      	mov	r8, r2
 8011b58:	d82d      	bhi.n	8011bb6 <__ssputs_r+0x70>
 8011b5a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011b5e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011b62:	d026      	beq.n	8011bb2 <__ssputs_r+0x6c>
 8011b64:	6965      	ldr	r5, [r4, #20]
 8011b66:	6909      	ldr	r1, [r1, #16]
 8011b68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011b6c:	eba3 0901 	sub.w	r9, r3, r1
 8011b70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011b74:	1c7b      	adds	r3, r7, #1
 8011b76:	444b      	add	r3, r9
 8011b78:	106d      	asrs	r5, r5, #1
 8011b7a:	429d      	cmp	r5, r3
 8011b7c:	bf38      	it	cc
 8011b7e:	461d      	movcc	r5, r3
 8011b80:	0553      	lsls	r3, r2, #21
 8011b82:	d527      	bpl.n	8011bd4 <__ssputs_r+0x8e>
 8011b84:	4629      	mov	r1, r5
 8011b86:	f7ff fa05 	bl	8010f94 <_malloc_r>
 8011b8a:	4606      	mov	r6, r0
 8011b8c:	b360      	cbz	r0, 8011be8 <__ssputs_r+0xa2>
 8011b8e:	6921      	ldr	r1, [r4, #16]
 8011b90:	464a      	mov	r2, r9
 8011b92:	f7fd ffe6 	bl	800fb62 <memcpy>
 8011b96:	89a3      	ldrh	r3, [r4, #12]
 8011b98:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011b9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011ba0:	81a3      	strh	r3, [r4, #12]
 8011ba2:	6126      	str	r6, [r4, #16]
 8011ba4:	6165      	str	r5, [r4, #20]
 8011ba6:	444e      	add	r6, r9
 8011ba8:	eba5 0509 	sub.w	r5, r5, r9
 8011bac:	6026      	str	r6, [r4, #0]
 8011bae:	60a5      	str	r5, [r4, #8]
 8011bb0:	463e      	mov	r6, r7
 8011bb2:	42be      	cmp	r6, r7
 8011bb4:	d900      	bls.n	8011bb8 <__ssputs_r+0x72>
 8011bb6:	463e      	mov	r6, r7
 8011bb8:	6820      	ldr	r0, [r4, #0]
 8011bba:	4632      	mov	r2, r6
 8011bbc:	4641      	mov	r1, r8
 8011bbe:	f000 fef6 	bl	80129ae <memmove>
 8011bc2:	68a3      	ldr	r3, [r4, #8]
 8011bc4:	1b9b      	subs	r3, r3, r6
 8011bc6:	60a3      	str	r3, [r4, #8]
 8011bc8:	6823      	ldr	r3, [r4, #0]
 8011bca:	4433      	add	r3, r6
 8011bcc:	6023      	str	r3, [r4, #0]
 8011bce:	2000      	movs	r0, #0
 8011bd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011bd4:	462a      	mov	r2, r5
 8011bd6:	f000 ff69 	bl	8012aac <_realloc_r>
 8011bda:	4606      	mov	r6, r0
 8011bdc:	2800      	cmp	r0, #0
 8011bde:	d1e0      	bne.n	8011ba2 <__ssputs_r+0x5c>
 8011be0:	6921      	ldr	r1, [r4, #16]
 8011be2:	4650      	mov	r0, sl
 8011be4:	f7fe fe28 	bl	8010838 <_free_r>
 8011be8:	230c      	movs	r3, #12
 8011bea:	f8ca 3000 	str.w	r3, [sl]
 8011bee:	89a3      	ldrh	r3, [r4, #12]
 8011bf0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011bf4:	81a3      	strh	r3, [r4, #12]
 8011bf6:	f04f 30ff 	mov.w	r0, #4294967295
 8011bfa:	e7e9      	b.n	8011bd0 <__ssputs_r+0x8a>

08011bfc <_svfiprintf_r>:
 8011bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c00:	4698      	mov	r8, r3
 8011c02:	898b      	ldrh	r3, [r1, #12]
 8011c04:	061b      	lsls	r3, r3, #24
 8011c06:	b09d      	sub	sp, #116	@ 0x74
 8011c08:	4607      	mov	r7, r0
 8011c0a:	460d      	mov	r5, r1
 8011c0c:	4614      	mov	r4, r2
 8011c0e:	d510      	bpl.n	8011c32 <_svfiprintf_r+0x36>
 8011c10:	690b      	ldr	r3, [r1, #16]
 8011c12:	b973      	cbnz	r3, 8011c32 <_svfiprintf_r+0x36>
 8011c14:	2140      	movs	r1, #64	@ 0x40
 8011c16:	f7ff f9bd 	bl	8010f94 <_malloc_r>
 8011c1a:	6028      	str	r0, [r5, #0]
 8011c1c:	6128      	str	r0, [r5, #16]
 8011c1e:	b930      	cbnz	r0, 8011c2e <_svfiprintf_r+0x32>
 8011c20:	230c      	movs	r3, #12
 8011c22:	603b      	str	r3, [r7, #0]
 8011c24:	f04f 30ff 	mov.w	r0, #4294967295
 8011c28:	b01d      	add	sp, #116	@ 0x74
 8011c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c2e:	2340      	movs	r3, #64	@ 0x40
 8011c30:	616b      	str	r3, [r5, #20]
 8011c32:	2300      	movs	r3, #0
 8011c34:	9309      	str	r3, [sp, #36]	@ 0x24
 8011c36:	2320      	movs	r3, #32
 8011c38:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011c3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011c40:	2330      	movs	r3, #48	@ 0x30
 8011c42:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011de0 <_svfiprintf_r+0x1e4>
 8011c46:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011c4a:	f04f 0901 	mov.w	r9, #1
 8011c4e:	4623      	mov	r3, r4
 8011c50:	469a      	mov	sl, r3
 8011c52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011c56:	b10a      	cbz	r2, 8011c5c <_svfiprintf_r+0x60>
 8011c58:	2a25      	cmp	r2, #37	@ 0x25
 8011c5a:	d1f9      	bne.n	8011c50 <_svfiprintf_r+0x54>
 8011c5c:	ebba 0b04 	subs.w	fp, sl, r4
 8011c60:	d00b      	beq.n	8011c7a <_svfiprintf_r+0x7e>
 8011c62:	465b      	mov	r3, fp
 8011c64:	4622      	mov	r2, r4
 8011c66:	4629      	mov	r1, r5
 8011c68:	4638      	mov	r0, r7
 8011c6a:	f7ff ff6c 	bl	8011b46 <__ssputs_r>
 8011c6e:	3001      	adds	r0, #1
 8011c70:	f000 80a7 	beq.w	8011dc2 <_svfiprintf_r+0x1c6>
 8011c74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011c76:	445a      	add	r2, fp
 8011c78:	9209      	str	r2, [sp, #36]	@ 0x24
 8011c7a:	f89a 3000 	ldrb.w	r3, [sl]
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	f000 809f 	beq.w	8011dc2 <_svfiprintf_r+0x1c6>
 8011c84:	2300      	movs	r3, #0
 8011c86:	f04f 32ff 	mov.w	r2, #4294967295
 8011c8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011c8e:	f10a 0a01 	add.w	sl, sl, #1
 8011c92:	9304      	str	r3, [sp, #16]
 8011c94:	9307      	str	r3, [sp, #28]
 8011c96:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011c9a:	931a      	str	r3, [sp, #104]	@ 0x68
 8011c9c:	4654      	mov	r4, sl
 8011c9e:	2205      	movs	r2, #5
 8011ca0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ca4:	484e      	ldr	r0, [pc, #312]	@ (8011de0 <_svfiprintf_r+0x1e4>)
 8011ca6:	f7ee fa9b 	bl	80001e0 <memchr>
 8011caa:	9a04      	ldr	r2, [sp, #16]
 8011cac:	b9d8      	cbnz	r0, 8011ce6 <_svfiprintf_r+0xea>
 8011cae:	06d0      	lsls	r0, r2, #27
 8011cb0:	bf44      	itt	mi
 8011cb2:	2320      	movmi	r3, #32
 8011cb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011cb8:	0711      	lsls	r1, r2, #28
 8011cba:	bf44      	itt	mi
 8011cbc:	232b      	movmi	r3, #43	@ 0x2b
 8011cbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011cc2:	f89a 3000 	ldrb.w	r3, [sl]
 8011cc6:	2b2a      	cmp	r3, #42	@ 0x2a
 8011cc8:	d015      	beq.n	8011cf6 <_svfiprintf_r+0xfa>
 8011cca:	9a07      	ldr	r2, [sp, #28]
 8011ccc:	4654      	mov	r4, sl
 8011cce:	2000      	movs	r0, #0
 8011cd0:	f04f 0c0a 	mov.w	ip, #10
 8011cd4:	4621      	mov	r1, r4
 8011cd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011cda:	3b30      	subs	r3, #48	@ 0x30
 8011cdc:	2b09      	cmp	r3, #9
 8011cde:	d94b      	bls.n	8011d78 <_svfiprintf_r+0x17c>
 8011ce0:	b1b0      	cbz	r0, 8011d10 <_svfiprintf_r+0x114>
 8011ce2:	9207      	str	r2, [sp, #28]
 8011ce4:	e014      	b.n	8011d10 <_svfiprintf_r+0x114>
 8011ce6:	eba0 0308 	sub.w	r3, r0, r8
 8011cea:	fa09 f303 	lsl.w	r3, r9, r3
 8011cee:	4313      	orrs	r3, r2
 8011cf0:	9304      	str	r3, [sp, #16]
 8011cf2:	46a2      	mov	sl, r4
 8011cf4:	e7d2      	b.n	8011c9c <_svfiprintf_r+0xa0>
 8011cf6:	9b03      	ldr	r3, [sp, #12]
 8011cf8:	1d19      	adds	r1, r3, #4
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	9103      	str	r1, [sp, #12]
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	bfbb      	ittet	lt
 8011d02:	425b      	neglt	r3, r3
 8011d04:	f042 0202 	orrlt.w	r2, r2, #2
 8011d08:	9307      	strge	r3, [sp, #28]
 8011d0a:	9307      	strlt	r3, [sp, #28]
 8011d0c:	bfb8      	it	lt
 8011d0e:	9204      	strlt	r2, [sp, #16]
 8011d10:	7823      	ldrb	r3, [r4, #0]
 8011d12:	2b2e      	cmp	r3, #46	@ 0x2e
 8011d14:	d10a      	bne.n	8011d2c <_svfiprintf_r+0x130>
 8011d16:	7863      	ldrb	r3, [r4, #1]
 8011d18:	2b2a      	cmp	r3, #42	@ 0x2a
 8011d1a:	d132      	bne.n	8011d82 <_svfiprintf_r+0x186>
 8011d1c:	9b03      	ldr	r3, [sp, #12]
 8011d1e:	1d1a      	adds	r2, r3, #4
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	9203      	str	r2, [sp, #12]
 8011d24:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011d28:	3402      	adds	r4, #2
 8011d2a:	9305      	str	r3, [sp, #20]
 8011d2c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011df0 <_svfiprintf_r+0x1f4>
 8011d30:	7821      	ldrb	r1, [r4, #0]
 8011d32:	2203      	movs	r2, #3
 8011d34:	4650      	mov	r0, sl
 8011d36:	f7ee fa53 	bl	80001e0 <memchr>
 8011d3a:	b138      	cbz	r0, 8011d4c <_svfiprintf_r+0x150>
 8011d3c:	9b04      	ldr	r3, [sp, #16]
 8011d3e:	eba0 000a 	sub.w	r0, r0, sl
 8011d42:	2240      	movs	r2, #64	@ 0x40
 8011d44:	4082      	lsls	r2, r0
 8011d46:	4313      	orrs	r3, r2
 8011d48:	3401      	adds	r4, #1
 8011d4a:	9304      	str	r3, [sp, #16]
 8011d4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d50:	4824      	ldr	r0, [pc, #144]	@ (8011de4 <_svfiprintf_r+0x1e8>)
 8011d52:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011d56:	2206      	movs	r2, #6
 8011d58:	f7ee fa42 	bl	80001e0 <memchr>
 8011d5c:	2800      	cmp	r0, #0
 8011d5e:	d036      	beq.n	8011dce <_svfiprintf_r+0x1d2>
 8011d60:	4b21      	ldr	r3, [pc, #132]	@ (8011de8 <_svfiprintf_r+0x1ec>)
 8011d62:	bb1b      	cbnz	r3, 8011dac <_svfiprintf_r+0x1b0>
 8011d64:	9b03      	ldr	r3, [sp, #12]
 8011d66:	3307      	adds	r3, #7
 8011d68:	f023 0307 	bic.w	r3, r3, #7
 8011d6c:	3308      	adds	r3, #8
 8011d6e:	9303      	str	r3, [sp, #12]
 8011d70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011d72:	4433      	add	r3, r6
 8011d74:	9309      	str	r3, [sp, #36]	@ 0x24
 8011d76:	e76a      	b.n	8011c4e <_svfiprintf_r+0x52>
 8011d78:	fb0c 3202 	mla	r2, ip, r2, r3
 8011d7c:	460c      	mov	r4, r1
 8011d7e:	2001      	movs	r0, #1
 8011d80:	e7a8      	b.n	8011cd4 <_svfiprintf_r+0xd8>
 8011d82:	2300      	movs	r3, #0
 8011d84:	3401      	adds	r4, #1
 8011d86:	9305      	str	r3, [sp, #20]
 8011d88:	4619      	mov	r1, r3
 8011d8a:	f04f 0c0a 	mov.w	ip, #10
 8011d8e:	4620      	mov	r0, r4
 8011d90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011d94:	3a30      	subs	r2, #48	@ 0x30
 8011d96:	2a09      	cmp	r2, #9
 8011d98:	d903      	bls.n	8011da2 <_svfiprintf_r+0x1a6>
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d0c6      	beq.n	8011d2c <_svfiprintf_r+0x130>
 8011d9e:	9105      	str	r1, [sp, #20]
 8011da0:	e7c4      	b.n	8011d2c <_svfiprintf_r+0x130>
 8011da2:	fb0c 2101 	mla	r1, ip, r1, r2
 8011da6:	4604      	mov	r4, r0
 8011da8:	2301      	movs	r3, #1
 8011daa:	e7f0      	b.n	8011d8e <_svfiprintf_r+0x192>
 8011dac:	ab03      	add	r3, sp, #12
 8011dae:	9300      	str	r3, [sp, #0]
 8011db0:	462a      	mov	r2, r5
 8011db2:	4b0e      	ldr	r3, [pc, #56]	@ (8011dec <_svfiprintf_r+0x1f0>)
 8011db4:	a904      	add	r1, sp, #16
 8011db6:	4638      	mov	r0, r7
 8011db8:	f7fc fe70 	bl	800ea9c <_printf_float>
 8011dbc:	1c42      	adds	r2, r0, #1
 8011dbe:	4606      	mov	r6, r0
 8011dc0:	d1d6      	bne.n	8011d70 <_svfiprintf_r+0x174>
 8011dc2:	89ab      	ldrh	r3, [r5, #12]
 8011dc4:	065b      	lsls	r3, r3, #25
 8011dc6:	f53f af2d 	bmi.w	8011c24 <_svfiprintf_r+0x28>
 8011dca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011dcc:	e72c      	b.n	8011c28 <_svfiprintf_r+0x2c>
 8011dce:	ab03      	add	r3, sp, #12
 8011dd0:	9300      	str	r3, [sp, #0]
 8011dd2:	462a      	mov	r2, r5
 8011dd4:	4b05      	ldr	r3, [pc, #20]	@ (8011dec <_svfiprintf_r+0x1f0>)
 8011dd6:	a904      	add	r1, sp, #16
 8011dd8:	4638      	mov	r0, r7
 8011dda:	f7fd f8f7 	bl	800efcc <_printf_i>
 8011dde:	e7ed      	b.n	8011dbc <_svfiprintf_r+0x1c0>
 8011de0:	080145d9 	.word	0x080145d9
 8011de4:	080145e3 	.word	0x080145e3
 8011de8:	0800ea9d 	.word	0x0800ea9d
 8011dec:	08011b47 	.word	0x08011b47
 8011df0:	080145df 	.word	0x080145df

08011df4 <_sungetc_r>:
 8011df4:	b538      	push	{r3, r4, r5, lr}
 8011df6:	1c4b      	adds	r3, r1, #1
 8011df8:	4614      	mov	r4, r2
 8011dfa:	d103      	bne.n	8011e04 <_sungetc_r+0x10>
 8011dfc:	f04f 35ff 	mov.w	r5, #4294967295
 8011e00:	4628      	mov	r0, r5
 8011e02:	bd38      	pop	{r3, r4, r5, pc}
 8011e04:	8993      	ldrh	r3, [r2, #12]
 8011e06:	f023 0320 	bic.w	r3, r3, #32
 8011e0a:	8193      	strh	r3, [r2, #12]
 8011e0c:	6853      	ldr	r3, [r2, #4]
 8011e0e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8011e10:	b2cd      	uxtb	r5, r1
 8011e12:	b18a      	cbz	r2, 8011e38 <_sungetc_r+0x44>
 8011e14:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8011e16:	429a      	cmp	r2, r3
 8011e18:	dd08      	ble.n	8011e2c <_sungetc_r+0x38>
 8011e1a:	6823      	ldr	r3, [r4, #0]
 8011e1c:	1e5a      	subs	r2, r3, #1
 8011e1e:	6022      	str	r2, [r4, #0]
 8011e20:	f803 5c01 	strb.w	r5, [r3, #-1]
 8011e24:	6863      	ldr	r3, [r4, #4]
 8011e26:	3301      	adds	r3, #1
 8011e28:	6063      	str	r3, [r4, #4]
 8011e2a:	e7e9      	b.n	8011e00 <_sungetc_r+0xc>
 8011e2c:	4621      	mov	r1, r4
 8011e2e:	f000 fd84 	bl	801293a <__submore>
 8011e32:	2800      	cmp	r0, #0
 8011e34:	d0f1      	beq.n	8011e1a <_sungetc_r+0x26>
 8011e36:	e7e1      	b.n	8011dfc <_sungetc_r+0x8>
 8011e38:	6921      	ldr	r1, [r4, #16]
 8011e3a:	6822      	ldr	r2, [r4, #0]
 8011e3c:	b141      	cbz	r1, 8011e50 <_sungetc_r+0x5c>
 8011e3e:	4291      	cmp	r1, r2
 8011e40:	d206      	bcs.n	8011e50 <_sungetc_r+0x5c>
 8011e42:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8011e46:	42a9      	cmp	r1, r5
 8011e48:	d102      	bne.n	8011e50 <_sungetc_r+0x5c>
 8011e4a:	3a01      	subs	r2, #1
 8011e4c:	6022      	str	r2, [r4, #0]
 8011e4e:	e7ea      	b.n	8011e26 <_sungetc_r+0x32>
 8011e50:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8011e54:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011e58:	6363      	str	r3, [r4, #52]	@ 0x34
 8011e5a:	2303      	movs	r3, #3
 8011e5c:	63a3      	str	r3, [r4, #56]	@ 0x38
 8011e5e:	4623      	mov	r3, r4
 8011e60:	f803 5f46 	strb.w	r5, [r3, #70]!
 8011e64:	6023      	str	r3, [r4, #0]
 8011e66:	2301      	movs	r3, #1
 8011e68:	e7de      	b.n	8011e28 <_sungetc_r+0x34>

08011e6a <__ssrefill_r>:
 8011e6a:	b510      	push	{r4, lr}
 8011e6c:	460c      	mov	r4, r1
 8011e6e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8011e70:	b169      	cbz	r1, 8011e8e <__ssrefill_r+0x24>
 8011e72:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011e76:	4299      	cmp	r1, r3
 8011e78:	d001      	beq.n	8011e7e <__ssrefill_r+0x14>
 8011e7a:	f7fe fcdd 	bl	8010838 <_free_r>
 8011e7e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011e80:	6063      	str	r3, [r4, #4]
 8011e82:	2000      	movs	r0, #0
 8011e84:	6360      	str	r0, [r4, #52]	@ 0x34
 8011e86:	b113      	cbz	r3, 8011e8e <__ssrefill_r+0x24>
 8011e88:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8011e8a:	6023      	str	r3, [r4, #0]
 8011e8c:	bd10      	pop	{r4, pc}
 8011e8e:	6923      	ldr	r3, [r4, #16]
 8011e90:	6023      	str	r3, [r4, #0]
 8011e92:	2300      	movs	r3, #0
 8011e94:	6063      	str	r3, [r4, #4]
 8011e96:	89a3      	ldrh	r3, [r4, #12]
 8011e98:	f043 0320 	orr.w	r3, r3, #32
 8011e9c:	81a3      	strh	r3, [r4, #12]
 8011e9e:	f04f 30ff 	mov.w	r0, #4294967295
 8011ea2:	e7f3      	b.n	8011e8c <__ssrefill_r+0x22>

08011ea4 <__ssvfiscanf_r>:
 8011ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ea8:	460c      	mov	r4, r1
 8011eaa:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8011eae:	2100      	movs	r1, #0
 8011eb0:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8011eb4:	49a5      	ldr	r1, [pc, #660]	@ (801214c <__ssvfiscanf_r+0x2a8>)
 8011eb6:	91a0      	str	r1, [sp, #640]	@ 0x280
 8011eb8:	f10d 0804 	add.w	r8, sp, #4
 8011ebc:	49a4      	ldr	r1, [pc, #656]	@ (8012150 <__ssvfiscanf_r+0x2ac>)
 8011ebe:	4fa5      	ldr	r7, [pc, #660]	@ (8012154 <__ssvfiscanf_r+0x2b0>)
 8011ec0:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8011ec4:	4606      	mov	r6, r0
 8011ec6:	91a1      	str	r1, [sp, #644]	@ 0x284
 8011ec8:	9300      	str	r3, [sp, #0]
 8011eca:	7813      	ldrb	r3, [r2, #0]
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	f000 8158 	beq.w	8012182 <__ssvfiscanf_r+0x2de>
 8011ed2:	5cf9      	ldrb	r1, [r7, r3]
 8011ed4:	f011 0108 	ands.w	r1, r1, #8
 8011ed8:	f102 0501 	add.w	r5, r2, #1
 8011edc:	d019      	beq.n	8011f12 <__ssvfiscanf_r+0x6e>
 8011ede:	6863      	ldr	r3, [r4, #4]
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	dd0f      	ble.n	8011f04 <__ssvfiscanf_r+0x60>
 8011ee4:	6823      	ldr	r3, [r4, #0]
 8011ee6:	781a      	ldrb	r2, [r3, #0]
 8011ee8:	5cba      	ldrb	r2, [r7, r2]
 8011eea:	0712      	lsls	r2, r2, #28
 8011eec:	d401      	bmi.n	8011ef2 <__ssvfiscanf_r+0x4e>
 8011eee:	462a      	mov	r2, r5
 8011ef0:	e7eb      	b.n	8011eca <__ssvfiscanf_r+0x26>
 8011ef2:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8011ef4:	3201      	adds	r2, #1
 8011ef6:	9245      	str	r2, [sp, #276]	@ 0x114
 8011ef8:	6862      	ldr	r2, [r4, #4]
 8011efa:	3301      	adds	r3, #1
 8011efc:	3a01      	subs	r2, #1
 8011efe:	6062      	str	r2, [r4, #4]
 8011f00:	6023      	str	r3, [r4, #0]
 8011f02:	e7ec      	b.n	8011ede <__ssvfiscanf_r+0x3a>
 8011f04:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011f06:	4621      	mov	r1, r4
 8011f08:	4630      	mov	r0, r6
 8011f0a:	4798      	blx	r3
 8011f0c:	2800      	cmp	r0, #0
 8011f0e:	d0e9      	beq.n	8011ee4 <__ssvfiscanf_r+0x40>
 8011f10:	e7ed      	b.n	8011eee <__ssvfiscanf_r+0x4a>
 8011f12:	2b25      	cmp	r3, #37	@ 0x25
 8011f14:	d012      	beq.n	8011f3c <__ssvfiscanf_r+0x98>
 8011f16:	4699      	mov	r9, r3
 8011f18:	6863      	ldr	r3, [r4, #4]
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	f340 8093 	ble.w	8012046 <__ssvfiscanf_r+0x1a2>
 8011f20:	6822      	ldr	r2, [r4, #0]
 8011f22:	7813      	ldrb	r3, [r2, #0]
 8011f24:	454b      	cmp	r3, r9
 8011f26:	f040 812c 	bne.w	8012182 <__ssvfiscanf_r+0x2de>
 8011f2a:	6863      	ldr	r3, [r4, #4]
 8011f2c:	3b01      	subs	r3, #1
 8011f2e:	6063      	str	r3, [r4, #4]
 8011f30:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8011f32:	3201      	adds	r2, #1
 8011f34:	3301      	adds	r3, #1
 8011f36:	6022      	str	r2, [r4, #0]
 8011f38:	9345      	str	r3, [sp, #276]	@ 0x114
 8011f3a:	e7d8      	b.n	8011eee <__ssvfiscanf_r+0x4a>
 8011f3c:	9141      	str	r1, [sp, #260]	@ 0x104
 8011f3e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8011f40:	7853      	ldrb	r3, [r2, #1]
 8011f42:	2b2a      	cmp	r3, #42	@ 0x2a
 8011f44:	bf02      	ittt	eq
 8011f46:	2310      	moveq	r3, #16
 8011f48:	1c95      	addeq	r5, r2, #2
 8011f4a:	9341      	streq	r3, [sp, #260]	@ 0x104
 8011f4c:	220a      	movs	r2, #10
 8011f4e:	46a9      	mov	r9, r5
 8011f50:	f819 1b01 	ldrb.w	r1, [r9], #1
 8011f54:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8011f58:	2b09      	cmp	r3, #9
 8011f5a:	d91e      	bls.n	8011f9a <__ssvfiscanf_r+0xf6>
 8011f5c:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8012158 <__ssvfiscanf_r+0x2b4>
 8011f60:	2203      	movs	r2, #3
 8011f62:	4650      	mov	r0, sl
 8011f64:	f7ee f93c 	bl	80001e0 <memchr>
 8011f68:	b138      	cbz	r0, 8011f7a <__ssvfiscanf_r+0xd6>
 8011f6a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011f6c:	eba0 000a 	sub.w	r0, r0, sl
 8011f70:	2301      	movs	r3, #1
 8011f72:	4083      	lsls	r3, r0
 8011f74:	4313      	orrs	r3, r2
 8011f76:	9341      	str	r3, [sp, #260]	@ 0x104
 8011f78:	464d      	mov	r5, r9
 8011f7a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011f7e:	2b78      	cmp	r3, #120	@ 0x78
 8011f80:	d806      	bhi.n	8011f90 <__ssvfiscanf_r+0xec>
 8011f82:	2b57      	cmp	r3, #87	@ 0x57
 8011f84:	d810      	bhi.n	8011fa8 <__ssvfiscanf_r+0x104>
 8011f86:	2b25      	cmp	r3, #37	@ 0x25
 8011f88:	d0c5      	beq.n	8011f16 <__ssvfiscanf_r+0x72>
 8011f8a:	d857      	bhi.n	801203c <__ssvfiscanf_r+0x198>
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d065      	beq.n	801205c <__ssvfiscanf_r+0x1b8>
 8011f90:	2303      	movs	r3, #3
 8011f92:	9347      	str	r3, [sp, #284]	@ 0x11c
 8011f94:	230a      	movs	r3, #10
 8011f96:	9342      	str	r3, [sp, #264]	@ 0x108
 8011f98:	e078      	b.n	801208c <__ssvfiscanf_r+0x1e8>
 8011f9a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8011f9c:	fb02 1103 	mla	r1, r2, r3, r1
 8011fa0:	3930      	subs	r1, #48	@ 0x30
 8011fa2:	9143      	str	r1, [sp, #268]	@ 0x10c
 8011fa4:	464d      	mov	r5, r9
 8011fa6:	e7d2      	b.n	8011f4e <__ssvfiscanf_r+0xaa>
 8011fa8:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8011fac:	2a20      	cmp	r2, #32
 8011fae:	d8ef      	bhi.n	8011f90 <__ssvfiscanf_r+0xec>
 8011fb0:	a101      	add	r1, pc, #4	@ (adr r1, 8011fb8 <__ssvfiscanf_r+0x114>)
 8011fb2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011fb6:	bf00      	nop
 8011fb8:	0801206b 	.word	0x0801206b
 8011fbc:	08011f91 	.word	0x08011f91
 8011fc0:	08011f91 	.word	0x08011f91
 8011fc4:	080120c5 	.word	0x080120c5
 8011fc8:	08011f91 	.word	0x08011f91
 8011fcc:	08011f91 	.word	0x08011f91
 8011fd0:	08011f91 	.word	0x08011f91
 8011fd4:	08011f91 	.word	0x08011f91
 8011fd8:	08011f91 	.word	0x08011f91
 8011fdc:	08011f91 	.word	0x08011f91
 8011fe0:	08011f91 	.word	0x08011f91
 8011fe4:	080120db 	.word	0x080120db
 8011fe8:	080120c1 	.word	0x080120c1
 8011fec:	08012043 	.word	0x08012043
 8011ff0:	08012043 	.word	0x08012043
 8011ff4:	08012043 	.word	0x08012043
 8011ff8:	08011f91 	.word	0x08011f91
 8011ffc:	0801207d 	.word	0x0801207d
 8012000:	08011f91 	.word	0x08011f91
 8012004:	08011f91 	.word	0x08011f91
 8012008:	08011f91 	.word	0x08011f91
 801200c:	08011f91 	.word	0x08011f91
 8012010:	080120eb 	.word	0x080120eb
 8012014:	08012085 	.word	0x08012085
 8012018:	08012063 	.word	0x08012063
 801201c:	08011f91 	.word	0x08011f91
 8012020:	08011f91 	.word	0x08011f91
 8012024:	080120e7 	.word	0x080120e7
 8012028:	08011f91 	.word	0x08011f91
 801202c:	080120c1 	.word	0x080120c1
 8012030:	08011f91 	.word	0x08011f91
 8012034:	08011f91 	.word	0x08011f91
 8012038:	0801206b 	.word	0x0801206b
 801203c:	3b45      	subs	r3, #69	@ 0x45
 801203e:	2b02      	cmp	r3, #2
 8012040:	d8a6      	bhi.n	8011f90 <__ssvfiscanf_r+0xec>
 8012042:	2305      	movs	r3, #5
 8012044:	e021      	b.n	801208a <__ssvfiscanf_r+0x1e6>
 8012046:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8012048:	4621      	mov	r1, r4
 801204a:	4630      	mov	r0, r6
 801204c:	4798      	blx	r3
 801204e:	2800      	cmp	r0, #0
 8012050:	f43f af66 	beq.w	8011f20 <__ssvfiscanf_r+0x7c>
 8012054:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8012056:	2800      	cmp	r0, #0
 8012058:	f040 808b 	bne.w	8012172 <__ssvfiscanf_r+0x2ce>
 801205c:	f04f 30ff 	mov.w	r0, #4294967295
 8012060:	e08b      	b.n	801217a <__ssvfiscanf_r+0x2d6>
 8012062:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8012064:	f042 0220 	orr.w	r2, r2, #32
 8012068:	9241      	str	r2, [sp, #260]	@ 0x104
 801206a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801206c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012070:	9241      	str	r2, [sp, #260]	@ 0x104
 8012072:	2210      	movs	r2, #16
 8012074:	2b6e      	cmp	r3, #110	@ 0x6e
 8012076:	9242      	str	r2, [sp, #264]	@ 0x108
 8012078:	d902      	bls.n	8012080 <__ssvfiscanf_r+0x1dc>
 801207a:	e005      	b.n	8012088 <__ssvfiscanf_r+0x1e4>
 801207c:	2300      	movs	r3, #0
 801207e:	9342      	str	r3, [sp, #264]	@ 0x108
 8012080:	2303      	movs	r3, #3
 8012082:	e002      	b.n	801208a <__ssvfiscanf_r+0x1e6>
 8012084:	2308      	movs	r3, #8
 8012086:	9342      	str	r3, [sp, #264]	@ 0x108
 8012088:	2304      	movs	r3, #4
 801208a:	9347      	str	r3, [sp, #284]	@ 0x11c
 801208c:	6863      	ldr	r3, [r4, #4]
 801208e:	2b00      	cmp	r3, #0
 8012090:	dd39      	ble.n	8012106 <__ssvfiscanf_r+0x262>
 8012092:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8012094:	0659      	lsls	r1, r3, #25
 8012096:	d404      	bmi.n	80120a2 <__ssvfiscanf_r+0x1fe>
 8012098:	6823      	ldr	r3, [r4, #0]
 801209a:	781a      	ldrb	r2, [r3, #0]
 801209c:	5cba      	ldrb	r2, [r7, r2]
 801209e:	0712      	lsls	r2, r2, #28
 80120a0:	d438      	bmi.n	8012114 <__ssvfiscanf_r+0x270>
 80120a2:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80120a4:	2b02      	cmp	r3, #2
 80120a6:	dc47      	bgt.n	8012138 <__ssvfiscanf_r+0x294>
 80120a8:	466b      	mov	r3, sp
 80120aa:	4622      	mov	r2, r4
 80120ac:	a941      	add	r1, sp, #260	@ 0x104
 80120ae:	4630      	mov	r0, r6
 80120b0:	f000 f9ae 	bl	8012410 <_scanf_chars>
 80120b4:	2801      	cmp	r0, #1
 80120b6:	d064      	beq.n	8012182 <__ssvfiscanf_r+0x2de>
 80120b8:	2802      	cmp	r0, #2
 80120ba:	f47f af18 	bne.w	8011eee <__ssvfiscanf_r+0x4a>
 80120be:	e7c9      	b.n	8012054 <__ssvfiscanf_r+0x1b0>
 80120c0:	220a      	movs	r2, #10
 80120c2:	e7d7      	b.n	8012074 <__ssvfiscanf_r+0x1d0>
 80120c4:	4629      	mov	r1, r5
 80120c6:	4640      	mov	r0, r8
 80120c8:	f000 fbfe 	bl	80128c8 <__sccl>
 80120cc:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80120ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80120d2:	9341      	str	r3, [sp, #260]	@ 0x104
 80120d4:	4605      	mov	r5, r0
 80120d6:	2301      	movs	r3, #1
 80120d8:	e7d7      	b.n	801208a <__ssvfiscanf_r+0x1e6>
 80120da:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80120dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80120e0:	9341      	str	r3, [sp, #260]	@ 0x104
 80120e2:	2300      	movs	r3, #0
 80120e4:	e7d1      	b.n	801208a <__ssvfiscanf_r+0x1e6>
 80120e6:	2302      	movs	r3, #2
 80120e8:	e7cf      	b.n	801208a <__ssvfiscanf_r+0x1e6>
 80120ea:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80120ec:	06c3      	lsls	r3, r0, #27
 80120ee:	f53f aefe 	bmi.w	8011eee <__ssvfiscanf_r+0x4a>
 80120f2:	9b00      	ldr	r3, [sp, #0]
 80120f4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80120f6:	1d19      	adds	r1, r3, #4
 80120f8:	9100      	str	r1, [sp, #0]
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	07c0      	lsls	r0, r0, #31
 80120fe:	bf4c      	ite	mi
 8012100:	801a      	strhmi	r2, [r3, #0]
 8012102:	601a      	strpl	r2, [r3, #0]
 8012104:	e6f3      	b.n	8011eee <__ssvfiscanf_r+0x4a>
 8012106:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8012108:	4621      	mov	r1, r4
 801210a:	4630      	mov	r0, r6
 801210c:	4798      	blx	r3
 801210e:	2800      	cmp	r0, #0
 8012110:	d0bf      	beq.n	8012092 <__ssvfiscanf_r+0x1ee>
 8012112:	e79f      	b.n	8012054 <__ssvfiscanf_r+0x1b0>
 8012114:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8012116:	3201      	adds	r2, #1
 8012118:	9245      	str	r2, [sp, #276]	@ 0x114
 801211a:	6862      	ldr	r2, [r4, #4]
 801211c:	3a01      	subs	r2, #1
 801211e:	2a00      	cmp	r2, #0
 8012120:	6062      	str	r2, [r4, #4]
 8012122:	dd02      	ble.n	801212a <__ssvfiscanf_r+0x286>
 8012124:	3301      	adds	r3, #1
 8012126:	6023      	str	r3, [r4, #0]
 8012128:	e7b6      	b.n	8012098 <__ssvfiscanf_r+0x1f4>
 801212a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801212c:	4621      	mov	r1, r4
 801212e:	4630      	mov	r0, r6
 8012130:	4798      	blx	r3
 8012132:	2800      	cmp	r0, #0
 8012134:	d0b0      	beq.n	8012098 <__ssvfiscanf_r+0x1f4>
 8012136:	e78d      	b.n	8012054 <__ssvfiscanf_r+0x1b0>
 8012138:	2b04      	cmp	r3, #4
 801213a:	dc0f      	bgt.n	801215c <__ssvfiscanf_r+0x2b8>
 801213c:	466b      	mov	r3, sp
 801213e:	4622      	mov	r2, r4
 8012140:	a941      	add	r1, sp, #260	@ 0x104
 8012142:	4630      	mov	r0, r6
 8012144:	f000 f9be 	bl	80124c4 <_scanf_i>
 8012148:	e7b4      	b.n	80120b4 <__ssvfiscanf_r+0x210>
 801214a:	bf00      	nop
 801214c:	08011df5 	.word	0x08011df5
 8012150:	08011e6b 	.word	0x08011e6b
 8012154:	080144d9 	.word	0x080144d9
 8012158:	080145df 	.word	0x080145df
 801215c:	4b0a      	ldr	r3, [pc, #40]	@ (8012188 <__ssvfiscanf_r+0x2e4>)
 801215e:	2b00      	cmp	r3, #0
 8012160:	f43f aec5 	beq.w	8011eee <__ssvfiscanf_r+0x4a>
 8012164:	466b      	mov	r3, sp
 8012166:	4622      	mov	r2, r4
 8012168:	a941      	add	r1, sp, #260	@ 0x104
 801216a:	4630      	mov	r0, r6
 801216c:	f7fd f84e 	bl	800f20c <_scanf_float>
 8012170:	e7a0      	b.n	80120b4 <__ssvfiscanf_r+0x210>
 8012172:	89a3      	ldrh	r3, [r4, #12]
 8012174:	065b      	lsls	r3, r3, #25
 8012176:	f53f af71 	bmi.w	801205c <__ssvfiscanf_r+0x1b8>
 801217a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 801217e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012182:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8012184:	e7f9      	b.n	801217a <__ssvfiscanf_r+0x2d6>
 8012186:	bf00      	nop
 8012188:	0800f20d 	.word	0x0800f20d

0801218c <__sfputc_r>:
 801218c:	6893      	ldr	r3, [r2, #8]
 801218e:	3b01      	subs	r3, #1
 8012190:	2b00      	cmp	r3, #0
 8012192:	b410      	push	{r4}
 8012194:	6093      	str	r3, [r2, #8]
 8012196:	da08      	bge.n	80121aa <__sfputc_r+0x1e>
 8012198:	6994      	ldr	r4, [r2, #24]
 801219a:	42a3      	cmp	r3, r4
 801219c:	db01      	blt.n	80121a2 <__sfputc_r+0x16>
 801219e:	290a      	cmp	r1, #10
 80121a0:	d103      	bne.n	80121aa <__sfputc_r+0x1e>
 80121a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80121a6:	f7fd bb96 	b.w	800f8d6 <__swbuf_r>
 80121aa:	6813      	ldr	r3, [r2, #0]
 80121ac:	1c58      	adds	r0, r3, #1
 80121ae:	6010      	str	r0, [r2, #0]
 80121b0:	7019      	strb	r1, [r3, #0]
 80121b2:	4608      	mov	r0, r1
 80121b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80121b8:	4770      	bx	lr

080121ba <__sfputs_r>:
 80121ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121bc:	4606      	mov	r6, r0
 80121be:	460f      	mov	r7, r1
 80121c0:	4614      	mov	r4, r2
 80121c2:	18d5      	adds	r5, r2, r3
 80121c4:	42ac      	cmp	r4, r5
 80121c6:	d101      	bne.n	80121cc <__sfputs_r+0x12>
 80121c8:	2000      	movs	r0, #0
 80121ca:	e007      	b.n	80121dc <__sfputs_r+0x22>
 80121cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80121d0:	463a      	mov	r2, r7
 80121d2:	4630      	mov	r0, r6
 80121d4:	f7ff ffda 	bl	801218c <__sfputc_r>
 80121d8:	1c43      	adds	r3, r0, #1
 80121da:	d1f3      	bne.n	80121c4 <__sfputs_r+0xa>
 80121dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080121e0 <_vfiprintf_r>:
 80121e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121e4:	460d      	mov	r5, r1
 80121e6:	b09d      	sub	sp, #116	@ 0x74
 80121e8:	4614      	mov	r4, r2
 80121ea:	4698      	mov	r8, r3
 80121ec:	4606      	mov	r6, r0
 80121ee:	b118      	cbz	r0, 80121f8 <_vfiprintf_r+0x18>
 80121f0:	6a03      	ldr	r3, [r0, #32]
 80121f2:	b90b      	cbnz	r3, 80121f8 <_vfiprintf_r+0x18>
 80121f4:	f7fd faaa 	bl	800f74c <__sinit>
 80121f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80121fa:	07d9      	lsls	r1, r3, #31
 80121fc:	d405      	bmi.n	801220a <_vfiprintf_r+0x2a>
 80121fe:	89ab      	ldrh	r3, [r5, #12]
 8012200:	059a      	lsls	r2, r3, #22
 8012202:	d402      	bmi.n	801220a <_vfiprintf_r+0x2a>
 8012204:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012206:	f7fd fcaa 	bl	800fb5e <__retarget_lock_acquire_recursive>
 801220a:	89ab      	ldrh	r3, [r5, #12]
 801220c:	071b      	lsls	r3, r3, #28
 801220e:	d501      	bpl.n	8012214 <_vfiprintf_r+0x34>
 8012210:	692b      	ldr	r3, [r5, #16]
 8012212:	b99b      	cbnz	r3, 801223c <_vfiprintf_r+0x5c>
 8012214:	4629      	mov	r1, r5
 8012216:	4630      	mov	r0, r6
 8012218:	f7fd fb9c 	bl	800f954 <__swsetup_r>
 801221c:	b170      	cbz	r0, 801223c <_vfiprintf_r+0x5c>
 801221e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012220:	07dc      	lsls	r4, r3, #31
 8012222:	d504      	bpl.n	801222e <_vfiprintf_r+0x4e>
 8012224:	f04f 30ff 	mov.w	r0, #4294967295
 8012228:	b01d      	add	sp, #116	@ 0x74
 801222a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801222e:	89ab      	ldrh	r3, [r5, #12]
 8012230:	0598      	lsls	r0, r3, #22
 8012232:	d4f7      	bmi.n	8012224 <_vfiprintf_r+0x44>
 8012234:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012236:	f7fd fc93 	bl	800fb60 <__retarget_lock_release_recursive>
 801223a:	e7f3      	b.n	8012224 <_vfiprintf_r+0x44>
 801223c:	2300      	movs	r3, #0
 801223e:	9309      	str	r3, [sp, #36]	@ 0x24
 8012240:	2320      	movs	r3, #32
 8012242:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012246:	f8cd 800c 	str.w	r8, [sp, #12]
 801224a:	2330      	movs	r3, #48	@ 0x30
 801224c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80123fc <_vfiprintf_r+0x21c>
 8012250:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012254:	f04f 0901 	mov.w	r9, #1
 8012258:	4623      	mov	r3, r4
 801225a:	469a      	mov	sl, r3
 801225c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012260:	b10a      	cbz	r2, 8012266 <_vfiprintf_r+0x86>
 8012262:	2a25      	cmp	r2, #37	@ 0x25
 8012264:	d1f9      	bne.n	801225a <_vfiprintf_r+0x7a>
 8012266:	ebba 0b04 	subs.w	fp, sl, r4
 801226a:	d00b      	beq.n	8012284 <_vfiprintf_r+0xa4>
 801226c:	465b      	mov	r3, fp
 801226e:	4622      	mov	r2, r4
 8012270:	4629      	mov	r1, r5
 8012272:	4630      	mov	r0, r6
 8012274:	f7ff ffa1 	bl	80121ba <__sfputs_r>
 8012278:	3001      	adds	r0, #1
 801227a:	f000 80a7 	beq.w	80123cc <_vfiprintf_r+0x1ec>
 801227e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012280:	445a      	add	r2, fp
 8012282:	9209      	str	r2, [sp, #36]	@ 0x24
 8012284:	f89a 3000 	ldrb.w	r3, [sl]
 8012288:	2b00      	cmp	r3, #0
 801228a:	f000 809f 	beq.w	80123cc <_vfiprintf_r+0x1ec>
 801228e:	2300      	movs	r3, #0
 8012290:	f04f 32ff 	mov.w	r2, #4294967295
 8012294:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012298:	f10a 0a01 	add.w	sl, sl, #1
 801229c:	9304      	str	r3, [sp, #16]
 801229e:	9307      	str	r3, [sp, #28]
 80122a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80122a4:	931a      	str	r3, [sp, #104]	@ 0x68
 80122a6:	4654      	mov	r4, sl
 80122a8:	2205      	movs	r2, #5
 80122aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80122ae:	4853      	ldr	r0, [pc, #332]	@ (80123fc <_vfiprintf_r+0x21c>)
 80122b0:	f7ed ff96 	bl	80001e0 <memchr>
 80122b4:	9a04      	ldr	r2, [sp, #16]
 80122b6:	b9d8      	cbnz	r0, 80122f0 <_vfiprintf_r+0x110>
 80122b8:	06d1      	lsls	r1, r2, #27
 80122ba:	bf44      	itt	mi
 80122bc:	2320      	movmi	r3, #32
 80122be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80122c2:	0713      	lsls	r3, r2, #28
 80122c4:	bf44      	itt	mi
 80122c6:	232b      	movmi	r3, #43	@ 0x2b
 80122c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80122cc:	f89a 3000 	ldrb.w	r3, [sl]
 80122d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80122d2:	d015      	beq.n	8012300 <_vfiprintf_r+0x120>
 80122d4:	9a07      	ldr	r2, [sp, #28]
 80122d6:	4654      	mov	r4, sl
 80122d8:	2000      	movs	r0, #0
 80122da:	f04f 0c0a 	mov.w	ip, #10
 80122de:	4621      	mov	r1, r4
 80122e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80122e4:	3b30      	subs	r3, #48	@ 0x30
 80122e6:	2b09      	cmp	r3, #9
 80122e8:	d94b      	bls.n	8012382 <_vfiprintf_r+0x1a2>
 80122ea:	b1b0      	cbz	r0, 801231a <_vfiprintf_r+0x13a>
 80122ec:	9207      	str	r2, [sp, #28]
 80122ee:	e014      	b.n	801231a <_vfiprintf_r+0x13a>
 80122f0:	eba0 0308 	sub.w	r3, r0, r8
 80122f4:	fa09 f303 	lsl.w	r3, r9, r3
 80122f8:	4313      	orrs	r3, r2
 80122fa:	9304      	str	r3, [sp, #16]
 80122fc:	46a2      	mov	sl, r4
 80122fe:	e7d2      	b.n	80122a6 <_vfiprintf_r+0xc6>
 8012300:	9b03      	ldr	r3, [sp, #12]
 8012302:	1d19      	adds	r1, r3, #4
 8012304:	681b      	ldr	r3, [r3, #0]
 8012306:	9103      	str	r1, [sp, #12]
 8012308:	2b00      	cmp	r3, #0
 801230a:	bfbb      	ittet	lt
 801230c:	425b      	neglt	r3, r3
 801230e:	f042 0202 	orrlt.w	r2, r2, #2
 8012312:	9307      	strge	r3, [sp, #28]
 8012314:	9307      	strlt	r3, [sp, #28]
 8012316:	bfb8      	it	lt
 8012318:	9204      	strlt	r2, [sp, #16]
 801231a:	7823      	ldrb	r3, [r4, #0]
 801231c:	2b2e      	cmp	r3, #46	@ 0x2e
 801231e:	d10a      	bne.n	8012336 <_vfiprintf_r+0x156>
 8012320:	7863      	ldrb	r3, [r4, #1]
 8012322:	2b2a      	cmp	r3, #42	@ 0x2a
 8012324:	d132      	bne.n	801238c <_vfiprintf_r+0x1ac>
 8012326:	9b03      	ldr	r3, [sp, #12]
 8012328:	1d1a      	adds	r2, r3, #4
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	9203      	str	r2, [sp, #12]
 801232e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012332:	3402      	adds	r4, #2
 8012334:	9305      	str	r3, [sp, #20]
 8012336:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801240c <_vfiprintf_r+0x22c>
 801233a:	7821      	ldrb	r1, [r4, #0]
 801233c:	2203      	movs	r2, #3
 801233e:	4650      	mov	r0, sl
 8012340:	f7ed ff4e 	bl	80001e0 <memchr>
 8012344:	b138      	cbz	r0, 8012356 <_vfiprintf_r+0x176>
 8012346:	9b04      	ldr	r3, [sp, #16]
 8012348:	eba0 000a 	sub.w	r0, r0, sl
 801234c:	2240      	movs	r2, #64	@ 0x40
 801234e:	4082      	lsls	r2, r0
 8012350:	4313      	orrs	r3, r2
 8012352:	3401      	adds	r4, #1
 8012354:	9304      	str	r3, [sp, #16]
 8012356:	f814 1b01 	ldrb.w	r1, [r4], #1
 801235a:	4829      	ldr	r0, [pc, #164]	@ (8012400 <_vfiprintf_r+0x220>)
 801235c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012360:	2206      	movs	r2, #6
 8012362:	f7ed ff3d 	bl	80001e0 <memchr>
 8012366:	2800      	cmp	r0, #0
 8012368:	d03f      	beq.n	80123ea <_vfiprintf_r+0x20a>
 801236a:	4b26      	ldr	r3, [pc, #152]	@ (8012404 <_vfiprintf_r+0x224>)
 801236c:	bb1b      	cbnz	r3, 80123b6 <_vfiprintf_r+0x1d6>
 801236e:	9b03      	ldr	r3, [sp, #12]
 8012370:	3307      	adds	r3, #7
 8012372:	f023 0307 	bic.w	r3, r3, #7
 8012376:	3308      	adds	r3, #8
 8012378:	9303      	str	r3, [sp, #12]
 801237a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801237c:	443b      	add	r3, r7
 801237e:	9309      	str	r3, [sp, #36]	@ 0x24
 8012380:	e76a      	b.n	8012258 <_vfiprintf_r+0x78>
 8012382:	fb0c 3202 	mla	r2, ip, r2, r3
 8012386:	460c      	mov	r4, r1
 8012388:	2001      	movs	r0, #1
 801238a:	e7a8      	b.n	80122de <_vfiprintf_r+0xfe>
 801238c:	2300      	movs	r3, #0
 801238e:	3401      	adds	r4, #1
 8012390:	9305      	str	r3, [sp, #20]
 8012392:	4619      	mov	r1, r3
 8012394:	f04f 0c0a 	mov.w	ip, #10
 8012398:	4620      	mov	r0, r4
 801239a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801239e:	3a30      	subs	r2, #48	@ 0x30
 80123a0:	2a09      	cmp	r2, #9
 80123a2:	d903      	bls.n	80123ac <_vfiprintf_r+0x1cc>
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d0c6      	beq.n	8012336 <_vfiprintf_r+0x156>
 80123a8:	9105      	str	r1, [sp, #20]
 80123aa:	e7c4      	b.n	8012336 <_vfiprintf_r+0x156>
 80123ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80123b0:	4604      	mov	r4, r0
 80123b2:	2301      	movs	r3, #1
 80123b4:	e7f0      	b.n	8012398 <_vfiprintf_r+0x1b8>
 80123b6:	ab03      	add	r3, sp, #12
 80123b8:	9300      	str	r3, [sp, #0]
 80123ba:	462a      	mov	r2, r5
 80123bc:	4b12      	ldr	r3, [pc, #72]	@ (8012408 <_vfiprintf_r+0x228>)
 80123be:	a904      	add	r1, sp, #16
 80123c0:	4630      	mov	r0, r6
 80123c2:	f7fc fb6b 	bl	800ea9c <_printf_float>
 80123c6:	4607      	mov	r7, r0
 80123c8:	1c78      	adds	r0, r7, #1
 80123ca:	d1d6      	bne.n	801237a <_vfiprintf_r+0x19a>
 80123cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80123ce:	07d9      	lsls	r1, r3, #31
 80123d0:	d405      	bmi.n	80123de <_vfiprintf_r+0x1fe>
 80123d2:	89ab      	ldrh	r3, [r5, #12]
 80123d4:	059a      	lsls	r2, r3, #22
 80123d6:	d402      	bmi.n	80123de <_vfiprintf_r+0x1fe>
 80123d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80123da:	f7fd fbc1 	bl	800fb60 <__retarget_lock_release_recursive>
 80123de:	89ab      	ldrh	r3, [r5, #12]
 80123e0:	065b      	lsls	r3, r3, #25
 80123e2:	f53f af1f 	bmi.w	8012224 <_vfiprintf_r+0x44>
 80123e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80123e8:	e71e      	b.n	8012228 <_vfiprintf_r+0x48>
 80123ea:	ab03      	add	r3, sp, #12
 80123ec:	9300      	str	r3, [sp, #0]
 80123ee:	462a      	mov	r2, r5
 80123f0:	4b05      	ldr	r3, [pc, #20]	@ (8012408 <_vfiprintf_r+0x228>)
 80123f2:	a904      	add	r1, sp, #16
 80123f4:	4630      	mov	r0, r6
 80123f6:	f7fc fde9 	bl	800efcc <_printf_i>
 80123fa:	e7e4      	b.n	80123c6 <_vfiprintf_r+0x1e6>
 80123fc:	080145d9 	.word	0x080145d9
 8012400:	080145e3 	.word	0x080145e3
 8012404:	0800ea9d 	.word	0x0800ea9d
 8012408:	080121bb 	.word	0x080121bb
 801240c:	080145df 	.word	0x080145df

08012410 <_scanf_chars>:
 8012410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012414:	4615      	mov	r5, r2
 8012416:	688a      	ldr	r2, [r1, #8]
 8012418:	4680      	mov	r8, r0
 801241a:	460c      	mov	r4, r1
 801241c:	b932      	cbnz	r2, 801242c <_scanf_chars+0x1c>
 801241e:	698a      	ldr	r2, [r1, #24]
 8012420:	2a00      	cmp	r2, #0
 8012422:	bf14      	ite	ne
 8012424:	f04f 32ff 	movne.w	r2, #4294967295
 8012428:	2201      	moveq	r2, #1
 801242a:	608a      	str	r2, [r1, #8]
 801242c:	6822      	ldr	r2, [r4, #0]
 801242e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80124c0 <_scanf_chars+0xb0>
 8012432:	06d1      	lsls	r1, r2, #27
 8012434:	bf5f      	itttt	pl
 8012436:	681a      	ldrpl	r2, [r3, #0]
 8012438:	1d11      	addpl	r1, r2, #4
 801243a:	6019      	strpl	r1, [r3, #0]
 801243c:	6816      	ldrpl	r6, [r2, #0]
 801243e:	2700      	movs	r7, #0
 8012440:	69a0      	ldr	r0, [r4, #24]
 8012442:	b188      	cbz	r0, 8012468 <_scanf_chars+0x58>
 8012444:	2801      	cmp	r0, #1
 8012446:	d107      	bne.n	8012458 <_scanf_chars+0x48>
 8012448:	682b      	ldr	r3, [r5, #0]
 801244a:	781a      	ldrb	r2, [r3, #0]
 801244c:	6963      	ldr	r3, [r4, #20]
 801244e:	5c9b      	ldrb	r3, [r3, r2]
 8012450:	b953      	cbnz	r3, 8012468 <_scanf_chars+0x58>
 8012452:	2f00      	cmp	r7, #0
 8012454:	d031      	beq.n	80124ba <_scanf_chars+0xaa>
 8012456:	e022      	b.n	801249e <_scanf_chars+0x8e>
 8012458:	2802      	cmp	r0, #2
 801245a:	d120      	bne.n	801249e <_scanf_chars+0x8e>
 801245c:	682b      	ldr	r3, [r5, #0]
 801245e:	781b      	ldrb	r3, [r3, #0]
 8012460:	f819 3003 	ldrb.w	r3, [r9, r3]
 8012464:	071b      	lsls	r3, r3, #28
 8012466:	d41a      	bmi.n	801249e <_scanf_chars+0x8e>
 8012468:	6823      	ldr	r3, [r4, #0]
 801246a:	06da      	lsls	r2, r3, #27
 801246c:	bf5e      	ittt	pl
 801246e:	682b      	ldrpl	r3, [r5, #0]
 8012470:	781b      	ldrbpl	r3, [r3, #0]
 8012472:	f806 3b01 	strbpl.w	r3, [r6], #1
 8012476:	682a      	ldr	r2, [r5, #0]
 8012478:	686b      	ldr	r3, [r5, #4]
 801247a:	3201      	adds	r2, #1
 801247c:	602a      	str	r2, [r5, #0]
 801247e:	68a2      	ldr	r2, [r4, #8]
 8012480:	3b01      	subs	r3, #1
 8012482:	3a01      	subs	r2, #1
 8012484:	606b      	str	r3, [r5, #4]
 8012486:	3701      	adds	r7, #1
 8012488:	60a2      	str	r2, [r4, #8]
 801248a:	b142      	cbz	r2, 801249e <_scanf_chars+0x8e>
 801248c:	2b00      	cmp	r3, #0
 801248e:	dcd7      	bgt.n	8012440 <_scanf_chars+0x30>
 8012490:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8012494:	4629      	mov	r1, r5
 8012496:	4640      	mov	r0, r8
 8012498:	4798      	blx	r3
 801249a:	2800      	cmp	r0, #0
 801249c:	d0d0      	beq.n	8012440 <_scanf_chars+0x30>
 801249e:	6823      	ldr	r3, [r4, #0]
 80124a0:	f013 0310 	ands.w	r3, r3, #16
 80124a4:	d105      	bne.n	80124b2 <_scanf_chars+0xa2>
 80124a6:	68e2      	ldr	r2, [r4, #12]
 80124a8:	3201      	adds	r2, #1
 80124aa:	60e2      	str	r2, [r4, #12]
 80124ac:	69a2      	ldr	r2, [r4, #24]
 80124ae:	b102      	cbz	r2, 80124b2 <_scanf_chars+0xa2>
 80124b0:	7033      	strb	r3, [r6, #0]
 80124b2:	6923      	ldr	r3, [r4, #16]
 80124b4:	443b      	add	r3, r7
 80124b6:	6123      	str	r3, [r4, #16]
 80124b8:	2000      	movs	r0, #0
 80124ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80124be:	bf00      	nop
 80124c0:	080144d9 	.word	0x080144d9

080124c4 <_scanf_i>:
 80124c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124c8:	4698      	mov	r8, r3
 80124ca:	4b74      	ldr	r3, [pc, #464]	@ (801269c <_scanf_i+0x1d8>)
 80124cc:	460c      	mov	r4, r1
 80124ce:	4682      	mov	sl, r0
 80124d0:	4616      	mov	r6, r2
 80124d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80124d6:	b087      	sub	sp, #28
 80124d8:	ab03      	add	r3, sp, #12
 80124da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80124de:	4b70      	ldr	r3, [pc, #448]	@ (80126a0 <_scanf_i+0x1dc>)
 80124e0:	69a1      	ldr	r1, [r4, #24]
 80124e2:	4a70      	ldr	r2, [pc, #448]	@ (80126a4 <_scanf_i+0x1e0>)
 80124e4:	2903      	cmp	r1, #3
 80124e6:	bf08      	it	eq
 80124e8:	461a      	moveq	r2, r3
 80124ea:	68a3      	ldr	r3, [r4, #8]
 80124ec:	9201      	str	r2, [sp, #4]
 80124ee:	1e5a      	subs	r2, r3, #1
 80124f0:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80124f4:	bf88      	it	hi
 80124f6:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80124fa:	4627      	mov	r7, r4
 80124fc:	bf82      	ittt	hi
 80124fe:	eb03 0905 	addhi.w	r9, r3, r5
 8012502:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8012506:	60a3      	strhi	r3, [r4, #8]
 8012508:	f857 3b1c 	ldr.w	r3, [r7], #28
 801250c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8012510:	bf98      	it	ls
 8012512:	f04f 0900 	movls.w	r9, #0
 8012516:	6023      	str	r3, [r4, #0]
 8012518:	463d      	mov	r5, r7
 801251a:	f04f 0b00 	mov.w	fp, #0
 801251e:	6831      	ldr	r1, [r6, #0]
 8012520:	ab03      	add	r3, sp, #12
 8012522:	7809      	ldrb	r1, [r1, #0]
 8012524:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8012528:	2202      	movs	r2, #2
 801252a:	f7ed fe59 	bl	80001e0 <memchr>
 801252e:	b328      	cbz	r0, 801257c <_scanf_i+0xb8>
 8012530:	f1bb 0f01 	cmp.w	fp, #1
 8012534:	d159      	bne.n	80125ea <_scanf_i+0x126>
 8012536:	6862      	ldr	r2, [r4, #4]
 8012538:	b92a      	cbnz	r2, 8012546 <_scanf_i+0x82>
 801253a:	6822      	ldr	r2, [r4, #0]
 801253c:	2108      	movs	r1, #8
 801253e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012542:	6061      	str	r1, [r4, #4]
 8012544:	6022      	str	r2, [r4, #0]
 8012546:	6822      	ldr	r2, [r4, #0]
 8012548:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 801254c:	6022      	str	r2, [r4, #0]
 801254e:	68a2      	ldr	r2, [r4, #8]
 8012550:	1e51      	subs	r1, r2, #1
 8012552:	60a1      	str	r1, [r4, #8]
 8012554:	b192      	cbz	r2, 801257c <_scanf_i+0xb8>
 8012556:	6832      	ldr	r2, [r6, #0]
 8012558:	1c51      	adds	r1, r2, #1
 801255a:	6031      	str	r1, [r6, #0]
 801255c:	7812      	ldrb	r2, [r2, #0]
 801255e:	f805 2b01 	strb.w	r2, [r5], #1
 8012562:	6872      	ldr	r2, [r6, #4]
 8012564:	3a01      	subs	r2, #1
 8012566:	2a00      	cmp	r2, #0
 8012568:	6072      	str	r2, [r6, #4]
 801256a:	dc07      	bgt.n	801257c <_scanf_i+0xb8>
 801256c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8012570:	4631      	mov	r1, r6
 8012572:	4650      	mov	r0, sl
 8012574:	4790      	blx	r2
 8012576:	2800      	cmp	r0, #0
 8012578:	f040 8085 	bne.w	8012686 <_scanf_i+0x1c2>
 801257c:	f10b 0b01 	add.w	fp, fp, #1
 8012580:	f1bb 0f03 	cmp.w	fp, #3
 8012584:	d1cb      	bne.n	801251e <_scanf_i+0x5a>
 8012586:	6863      	ldr	r3, [r4, #4]
 8012588:	b90b      	cbnz	r3, 801258e <_scanf_i+0xca>
 801258a:	230a      	movs	r3, #10
 801258c:	6063      	str	r3, [r4, #4]
 801258e:	6863      	ldr	r3, [r4, #4]
 8012590:	4945      	ldr	r1, [pc, #276]	@ (80126a8 <_scanf_i+0x1e4>)
 8012592:	6960      	ldr	r0, [r4, #20]
 8012594:	1ac9      	subs	r1, r1, r3
 8012596:	f000 f997 	bl	80128c8 <__sccl>
 801259a:	f04f 0b00 	mov.w	fp, #0
 801259e:	68a3      	ldr	r3, [r4, #8]
 80125a0:	6822      	ldr	r2, [r4, #0]
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d03d      	beq.n	8012622 <_scanf_i+0x15e>
 80125a6:	6831      	ldr	r1, [r6, #0]
 80125a8:	6960      	ldr	r0, [r4, #20]
 80125aa:	f891 c000 	ldrb.w	ip, [r1]
 80125ae:	f810 000c 	ldrb.w	r0, [r0, ip]
 80125b2:	2800      	cmp	r0, #0
 80125b4:	d035      	beq.n	8012622 <_scanf_i+0x15e>
 80125b6:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80125ba:	d124      	bne.n	8012606 <_scanf_i+0x142>
 80125bc:	0510      	lsls	r0, r2, #20
 80125be:	d522      	bpl.n	8012606 <_scanf_i+0x142>
 80125c0:	f10b 0b01 	add.w	fp, fp, #1
 80125c4:	f1b9 0f00 	cmp.w	r9, #0
 80125c8:	d003      	beq.n	80125d2 <_scanf_i+0x10e>
 80125ca:	3301      	adds	r3, #1
 80125cc:	f109 39ff 	add.w	r9, r9, #4294967295
 80125d0:	60a3      	str	r3, [r4, #8]
 80125d2:	6873      	ldr	r3, [r6, #4]
 80125d4:	3b01      	subs	r3, #1
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	6073      	str	r3, [r6, #4]
 80125da:	dd1b      	ble.n	8012614 <_scanf_i+0x150>
 80125dc:	6833      	ldr	r3, [r6, #0]
 80125de:	3301      	adds	r3, #1
 80125e0:	6033      	str	r3, [r6, #0]
 80125e2:	68a3      	ldr	r3, [r4, #8]
 80125e4:	3b01      	subs	r3, #1
 80125e6:	60a3      	str	r3, [r4, #8]
 80125e8:	e7d9      	b.n	801259e <_scanf_i+0xda>
 80125ea:	f1bb 0f02 	cmp.w	fp, #2
 80125ee:	d1ae      	bne.n	801254e <_scanf_i+0x8a>
 80125f0:	6822      	ldr	r2, [r4, #0]
 80125f2:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80125f6:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80125fa:	d1bf      	bne.n	801257c <_scanf_i+0xb8>
 80125fc:	2110      	movs	r1, #16
 80125fe:	6061      	str	r1, [r4, #4]
 8012600:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8012604:	e7a2      	b.n	801254c <_scanf_i+0x88>
 8012606:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 801260a:	6022      	str	r2, [r4, #0]
 801260c:	780b      	ldrb	r3, [r1, #0]
 801260e:	f805 3b01 	strb.w	r3, [r5], #1
 8012612:	e7de      	b.n	80125d2 <_scanf_i+0x10e>
 8012614:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8012618:	4631      	mov	r1, r6
 801261a:	4650      	mov	r0, sl
 801261c:	4798      	blx	r3
 801261e:	2800      	cmp	r0, #0
 8012620:	d0df      	beq.n	80125e2 <_scanf_i+0x11e>
 8012622:	6823      	ldr	r3, [r4, #0]
 8012624:	05d9      	lsls	r1, r3, #23
 8012626:	d50d      	bpl.n	8012644 <_scanf_i+0x180>
 8012628:	42bd      	cmp	r5, r7
 801262a:	d909      	bls.n	8012640 <_scanf_i+0x17c>
 801262c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8012630:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8012634:	4632      	mov	r2, r6
 8012636:	4650      	mov	r0, sl
 8012638:	4798      	blx	r3
 801263a:	f105 39ff 	add.w	r9, r5, #4294967295
 801263e:	464d      	mov	r5, r9
 8012640:	42bd      	cmp	r5, r7
 8012642:	d028      	beq.n	8012696 <_scanf_i+0x1d2>
 8012644:	6822      	ldr	r2, [r4, #0]
 8012646:	f012 0210 	ands.w	r2, r2, #16
 801264a:	d113      	bne.n	8012674 <_scanf_i+0x1b0>
 801264c:	702a      	strb	r2, [r5, #0]
 801264e:	6863      	ldr	r3, [r4, #4]
 8012650:	9e01      	ldr	r6, [sp, #4]
 8012652:	4639      	mov	r1, r7
 8012654:	4650      	mov	r0, sl
 8012656:	47b0      	blx	r6
 8012658:	f8d8 3000 	ldr.w	r3, [r8]
 801265c:	6821      	ldr	r1, [r4, #0]
 801265e:	1d1a      	adds	r2, r3, #4
 8012660:	f8c8 2000 	str.w	r2, [r8]
 8012664:	f011 0f20 	tst.w	r1, #32
 8012668:	681b      	ldr	r3, [r3, #0]
 801266a:	d00f      	beq.n	801268c <_scanf_i+0x1c8>
 801266c:	6018      	str	r0, [r3, #0]
 801266e:	68e3      	ldr	r3, [r4, #12]
 8012670:	3301      	adds	r3, #1
 8012672:	60e3      	str	r3, [r4, #12]
 8012674:	6923      	ldr	r3, [r4, #16]
 8012676:	1bed      	subs	r5, r5, r7
 8012678:	445d      	add	r5, fp
 801267a:	442b      	add	r3, r5
 801267c:	6123      	str	r3, [r4, #16]
 801267e:	2000      	movs	r0, #0
 8012680:	b007      	add	sp, #28
 8012682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012686:	f04f 0b00 	mov.w	fp, #0
 801268a:	e7ca      	b.n	8012622 <_scanf_i+0x15e>
 801268c:	07ca      	lsls	r2, r1, #31
 801268e:	bf4c      	ite	mi
 8012690:	8018      	strhmi	r0, [r3, #0]
 8012692:	6018      	strpl	r0, [r3, #0]
 8012694:	e7eb      	b.n	801266e <_scanf_i+0x1aa>
 8012696:	2001      	movs	r0, #1
 8012698:	e7f2      	b.n	8012680 <_scanf_i+0x1bc>
 801269a:	bf00      	nop
 801269c:	08014134 	.word	0x08014134
 80126a0:	08011b29 	.word	0x08011b29
 80126a4:	08012be5 	.word	0x08012be5
 80126a8:	080145fa 	.word	0x080145fa

080126ac <__sflush_r>:
 80126ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80126b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126b4:	0716      	lsls	r6, r2, #28
 80126b6:	4605      	mov	r5, r0
 80126b8:	460c      	mov	r4, r1
 80126ba:	d454      	bmi.n	8012766 <__sflush_r+0xba>
 80126bc:	684b      	ldr	r3, [r1, #4]
 80126be:	2b00      	cmp	r3, #0
 80126c0:	dc02      	bgt.n	80126c8 <__sflush_r+0x1c>
 80126c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	dd48      	ble.n	801275a <__sflush_r+0xae>
 80126c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80126ca:	2e00      	cmp	r6, #0
 80126cc:	d045      	beq.n	801275a <__sflush_r+0xae>
 80126ce:	2300      	movs	r3, #0
 80126d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80126d4:	682f      	ldr	r7, [r5, #0]
 80126d6:	6a21      	ldr	r1, [r4, #32]
 80126d8:	602b      	str	r3, [r5, #0]
 80126da:	d030      	beq.n	801273e <__sflush_r+0x92>
 80126dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80126de:	89a3      	ldrh	r3, [r4, #12]
 80126e0:	0759      	lsls	r1, r3, #29
 80126e2:	d505      	bpl.n	80126f0 <__sflush_r+0x44>
 80126e4:	6863      	ldr	r3, [r4, #4]
 80126e6:	1ad2      	subs	r2, r2, r3
 80126e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80126ea:	b10b      	cbz	r3, 80126f0 <__sflush_r+0x44>
 80126ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80126ee:	1ad2      	subs	r2, r2, r3
 80126f0:	2300      	movs	r3, #0
 80126f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80126f4:	6a21      	ldr	r1, [r4, #32]
 80126f6:	4628      	mov	r0, r5
 80126f8:	47b0      	blx	r6
 80126fa:	1c43      	adds	r3, r0, #1
 80126fc:	89a3      	ldrh	r3, [r4, #12]
 80126fe:	d106      	bne.n	801270e <__sflush_r+0x62>
 8012700:	6829      	ldr	r1, [r5, #0]
 8012702:	291d      	cmp	r1, #29
 8012704:	d82b      	bhi.n	801275e <__sflush_r+0xb2>
 8012706:	4a2a      	ldr	r2, [pc, #168]	@ (80127b0 <__sflush_r+0x104>)
 8012708:	410a      	asrs	r2, r1
 801270a:	07d6      	lsls	r6, r2, #31
 801270c:	d427      	bmi.n	801275e <__sflush_r+0xb2>
 801270e:	2200      	movs	r2, #0
 8012710:	6062      	str	r2, [r4, #4]
 8012712:	04d9      	lsls	r1, r3, #19
 8012714:	6922      	ldr	r2, [r4, #16]
 8012716:	6022      	str	r2, [r4, #0]
 8012718:	d504      	bpl.n	8012724 <__sflush_r+0x78>
 801271a:	1c42      	adds	r2, r0, #1
 801271c:	d101      	bne.n	8012722 <__sflush_r+0x76>
 801271e:	682b      	ldr	r3, [r5, #0]
 8012720:	b903      	cbnz	r3, 8012724 <__sflush_r+0x78>
 8012722:	6560      	str	r0, [r4, #84]	@ 0x54
 8012724:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012726:	602f      	str	r7, [r5, #0]
 8012728:	b1b9      	cbz	r1, 801275a <__sflush_r+0xae>
 801272a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801272e:	4299      	cmp	r1, r3
 8012730:	d002      	beq.n	8012738 <__sflush_r+0x8c>
 8012732:	4628      	mov	r0, r5
 8012734:	f7fe f880 	bl	8010838 <_free_r>
 8012738:	2300      	movs	r3, #0
 801273a:	6363      	str	r3, [r4, #52]	@ 0x34
 801273c:	e00d      	b.n	801275a <__sflush_r+0xae>
 801273e:	2301      	movs	r3, #1
 8012740:	4628      	mov	r0, r5
 8012742:	47b0      	blx	r6
 8012744:	4602      	mov	r2, r0
 8012746:	1c50      	adds	r0, r2, #1
 8012748:	d1c9      	bne.n	80126de <__sflush_r+0x32>
 801274a:	682b      	ldr	r3, [r5, #0]
 801274c:	2b00      	cmp	r3, #0
 801274e:	d0c6      	beq.n	80126de <__sflush_r+0x32>
 8012750:	2b1d      	cmp	r3, #29
 8012752:	d001      	beq.n	8012758 <__sflush_r+0xac>
 8012754:	2b16      	cmp	r3, #22
 8012756:	d11e      	bne.n	8012796 <__sflush_r+0xea>
 8012758:	602f      	str	r7, [r5, #0]
 801275a:	2000      	movs	r0, #0
 801275c:	e022      	b.n	80127a4 <__sflush_r+0xf8>
 801275e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012762:	b21b      	sxth	r3, r3
 8012764:	e01b      	b.n	801279e <__sflush_r+0xf2>
 8012766:	690f      	ldr	r7, [r1, #16]
 8012768:	2f00      	cmp	r7, #0
 801276a:	d0f6      	beq.n	801275a <__sflush_r+0xae>
 801276c:	0793      	lsls	r3, r2, #30
 801276e:	680e      	ldr	r6, [r1, #0]
 8012770:	bf08      	it	eq
 8012772:	694b      	ldreq	r3, [r1, #20]
 8012774:	600f      	str	r7, [r1, #0]
 8012776:	bf18      	it	ne
 8012778:	2300      	movne	r3, #0
 801277a:	eba6 0807 	sub.w	r8, r6, r7
 801277e:	608b      	str	r3, [r1, #8]
 8012780:	f1b8 0f00 	cmp.w	r8, #0
 8012784:	dde9      	ble.n	801275a <__sflush_r+0xae>
 8012786:	6a21      	ldr	r1, [r4, #32]
 8012788:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801278a:	4643      	mov	r3, r8
 801278c:	463a      	mov	r2, r7
 801278e:	4628      	mov	r0, r5
 8012790:	47b0      	blx	r6
 8012792:	2800      	cmp	r0, #0
 8012794:	dc08      	bgt.n	80127a8 <__sflush_r+0xfc>
 8012796:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801279a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801279e:	81a3      	strh	r3, [r4, #12]
 80127a0:	f04f 30ff 	mov.w	r0, #4294967295
 80127a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127a8:	4407      	add	r7, r0
 80127aa:	eba8 0800 	sub.w	r8, r8, r0
 80127ae:	e7e7      	b.n	8012780 <__sflush_r+0xd4>
 80127b0:	dfbffffe 	.word	0xdfbffffe

080127b4 <_fflush_r>:
 80127b4:	b538      	push	{r3, r4, r5, lr}
 80127b6:	690b      	ldr	r3, [r1, #16]
 80127b8:	4605      	mov	r5, r0
 80127ba:	460c      	mov	r4, r1
 80127bc:	b913      	cbnz	r3, 80127c4 <_fflush_r+0x10>
 80127be:	2500      	movs	r5, #0
 80127c0:	4628      	mov	r0, r5
 80127c2:	bd38      	pop	{r3, r4, r5, pc}
 80127c4:	b118      	cbz	r0, 80127ce <_fflush_r+0x1a>
 80127c6:	6a03      	ldr	r3, [r0, #32]
 80127c8:	b90b      	cbnz	r3, 80127ce <_fflush_r+0x1a>
 80127ca:	f7fc ffbf 	bl	800f74c <__sinit>
 80127ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d0f3      	beq.n	80127be <_fflush_r+0xa>
 80127d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80127d8:	07d0      	lsls	r0, r2, #31
 80127da:	d404      	bmi.n	80127e6 <_fflush_r+0x32>
 80127dc:	0599      	lsls	r1, r3, #22
 80127de:	d402      	bmi.n	80127e6 <_fflush_r+0x32>
 80127e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80127e2:	f7fd f9bc 	bl	800fb5e <__retarget_lock_acquire_recursive>
 80127e6:	4628      	mov	r0, r5
 80127e8:	4621      	mov	r1, r4
 80127ea:	f7ff ff5f 	bl	80126ac <__sflush_r>
 80127ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80127f0:	07da      	lsls	r2, r3, #31
 80127f2:	4605      	mov	r5, r0
 80127f4:	d4e4      	bmi.n	80127c0 <_fflush_r+0xc>
 80127f6:	89a3      	ldrh	r3, [r4, #12]
 80127f8:	059b      	lsls	r3, r3, #22
 80127fa:	d4e1      	bmi.n	80127c0 <_fflush_r+0xc>
 80127fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80127fe:	f7fd f9af 	bl	800fb60 <__retarget_lock_release_recursive>
 8012802:	e7dd      	b.n	80127c0 <_fflush_r+0xc>

08012804 <__swhatbuf_r>:
 8012804:	b570      	push	{r4, r5, r6, lr}
 8012806:	460c      	mov	r4, r1
 8012808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801280c:	2900      	cmp	r1, #0
 801280e:	b096      	sub	sp, #88	@ 0x58
 8012810:	4615      	mov	r5, r2
 8012812:	461e      	mov	r6, r3
 8012814:	da0d      	bge.n	8012832 <__swhatbuf_r+0x2e>
 8012816:	89a3      	ldrh	r3, [r4, #12]
 8012818:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801281c:	f04f 0100 	mov.w	r1, #0
 8012820:	bf14      	ite	ne
 8012822:	2340      	movne	r3, #64	@ 0x40
 8012824:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012828:	2000      	movs	r0, #0
 801282a:	6031      	str	r1, [r6, #0]
 801282c:	602b      	str	r3, [r5, #0]
 801282e:	b016      	add	sp, #88	@ 0x58
 8012830:	bd70      	pop	{r4, r5, r6, pc}
 8012832:	466a      	mov	r2, sp
 8012834:	f000 f8d6 	bl	80129e4 <_fstat_r>
 8012838:	2800      	cmp	r0, #0
 801283a:	dbec      	blt.n	8012816 <__swhatbuf_r+0x12>
 801283c:	9901      	ldr	r1, [sp, #4]
 801283e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012842:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012846:	4259      	negs	r1, r3
 8012848:	4159      	adcs	r1, r3
 801284a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801284e:	e7eb      	b.n	8012828 <__swhatbuf_r+0x24>

08012850 <__smakebuf_r>:
 8012850:	898b      	ldrh	r3, [r1, #12]
 8012852:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012854:	079d      	lsls	r5, r3, #30
 8012856:	4606      	mov	r6, r0
 8012858:	460c      	mov	r4, r1
 801285a:	d507      	bpl.n	801286c <__smakebuf_r+0x1c>
 801285c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012860:	6023      	str	r3, [r4, #0]
 8012862:	6123      	str	r3, [r4, #16]
 8012864:	2301      	movs	r3, #1
 8012866:	6163      	str	r3, [r4, #20]
 8012868:	b003      	add	sp, #12
 801286a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801286c:	ab01      	add	r3, sp, #4
 801286e:	466a      	mov	r2, sp
 8012870:	f7ff ffc8 	bl	8012804 <__swhatbuf_r>
 8012874:	9f00      	ldr	r7, [sp, #0]
 8012876:	4605      	mov	r5, r0
 8012878:	4639      	mov	r1, r7
 801287a:	4630      	mov	r0, r6
 801287c:	f7fe fb8a 	bl	8010f94 <_malloc_r>
 8012880:	b948      	cbnz	r0, 8012896 <__smakebuf_r+0x46>
 8012882:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012886:	059a      	lsls	r2, r3, #22
 8012888:	d4ee      	bmi.n	8012868 <__smakebuf_r+0x18>
 801288a:	f023 0303 	bic.w	r3, r3, #3
 801288e:	f043 0302 	orr.w	r3, r3, #2
 8012892:	81a3      	strh	r3, [r4, #12]
 8012894:	e7e2      	b.n	801285c <__smakebuf_r+0xc>
 8012896:	89a3      	ldrh	r3, [r4, #12]
 8012898:	6020      	str	r0, [r4, #0]
 801289a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801289e:	81a3      	strh	r3, [r4, #12]
 80128a0:	9b01      	ldr	r3, [sp, #4]
 80128a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80128a6:	b15b      	cbz	r3, 80128c0 <__smakebuf_r+0x70>
 80128a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80128ac:	4630      	mov	r0, r6
 80128ae:	f000 f8ab 	bl	8012a08 <_isatty_r>
 80128b2:	b128      	cbz	r0, 80128c0 <__smakebuf_r+0x70>
 80128b4:	89a3      	ldrh	r3, [r4, #12]
 80128b6:	f023 0303 	bic.w	r3, r3, #3
 80128ba:	f043 0301 	orr.w	r3, r3, #1
 80128be:	81a3      	strh	r3, [r4, #12]
 80128c0:	89a3      	ldrh	r3, [r4, #12]
 80128c2:	431d      	orrs	r5, r3
 80128c4:	81a5      	strh	r5, [r4, #12]
 80128c6:	e7cf      	b.n	8012868 <__smakebuf_r+0x18>

080128c8 <__sccl>:
 80128c8:	b570      	push	{r4, r5, r6, lr}
 80128ca:	780b      	ldrb	r3, [r1, #0]
 80128cc:	4604      	mov	r4, r0
 80128ce:	2b5e      	cmp	r3, #94	@ 0x5e
 80128d0:	bf0b      	itete	eq
 80128d2:	784b      	ldrbeq	r3, [r1, #1]
 80128d4:	1c4a      	addne	r2, r1, #1
 80128d6:	1c8a      	addeq	r2, r1, #2
 80128d8:	2100      	movne	r1, #0
 80128da:	bf08      	it	eq
 80128dc:	2101      	moveq	r1, #1
 80128de:	3801      	subs	r0, #1
 80128e0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80128e4:	f800 1f01 	strb.w	r1, [r0, #1]!
 80128e8:	42a8      	cmp	r0, r5
 80128ea:	d1fb      	bne.n	80128e4 <__sccl+0x1c>
 80128ec:	b90b      	cbnz	r3, 80128f2 <__sccl+0x2a>
 80128ee:	1e50      	subs	r0, r2, #1
 80128f0:	bd70      	pop	{r4, r5, r6, pc}
 80128f2:	f081 0101 	eor.w	r1, r1, #1
 80128f6:	54e1      	strb	r1, [r4, r3]
 80128f8:	4610      	mov	r0, r2
 80128fa:	4602      	mov	r2, r0
 80128fc:	f812 5b01 	ldrb.w	r5, [r2], #1
 8012900:	2d2d      	cmp	r5, #45	@ 0x2d
 8012902:	d005      	beq.n	8012910 <__sccl+0x48>
 8012904:	2d5d      	cmp	r5, #93	@ 0x5d
 8012906:	d016      	beq.n	8012936 <__sccl+0x6e>
 8012908:	2d00      	cmp	r5, #0
 801290a:	d0f1      	beq.n	80128f0 <__sccl+0x28>
 801290c:	462b      	mov	r3, r5
 801290e:	e7f2      	b.n	80128f6 <__sccl+0x2e>
 8012910:	7846      	ldrb	r6, [r0, #1]
 8012912:	2e5d      	cmp	r6, #93	@ 0x5d
 8012914:	d0fa      	beq.n	801290c <__sccl+0x44>
 8012916:	42b3      	cmp	r3, r6
 8012918:	dcf8      	bgt.n	801290c <__sccl+0x44>
 801291a:	3002      	adds	r0, #2
 801291c:	461a      	mov	r2, r3
 801291e:	3201      	adds	r2, #1
 8012920:	4296      	cmp	r6, r2
 8012922:	54a1      	strb	r1, [r4, r2]
 8012924:	dcfb      	bgt.n	801291e <__sccl+0x56>
 8012926:	1af2      	subs	r2, r6, r3
 8012928:	3a01      	subs	r2, #1
 801292a:	1c5d      	adds	r5, r3, #1
 801292c:	42b3      	cmp	r3, r6
 801292e:	bfa8      	it	ge
 8012930:	2200      	movge	r2, #0
 8012932:	18ab      	adds	r3, r5, r2
 8012934:	e7e1      	b.n	80128fa <__sccl+0x32>
 8012936:	4610      	mov	r0, r2
 8012938:	e7da      	b.n	80128f0 <__sccl+0x28>

0801293a <__submore>:
 801293a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801293e:	460c      	mov	r4, r1
 8012940:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8012942:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012946:	4299      	cmp	r1, r3
 8012948:	d11d      	bne.n	8012986 <__submore+0x4c>
 801294a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801294e:	f7fe fb21 	bl	8010f94 <_malloc_r>
 8012952:	b918      	cbnz	r0, 801295c <__submore+0x22>
 8012954:	f04f 30ff 	mov.w	r0, #4294967295
 8012958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801295c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012960:	63a3      	str	r3, [r4, #56]	@ 0x38
 8012962:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8012966:	6360      	str	r0, [r4, #52]	@ 0x34
 8012968:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 801296c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8012970:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8012974:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012978:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 801297c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8012980:	6020      	str	r0, [r4, #0]
 8012982:	2000      	movs	r0, #0
 8012984:	e7e8      	b.n	8012958 <__submore+0x1e>
 8012986:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8012988:	0077      	lsls	r7, r6, #1
 801298a:	463a      	mov	r2, r7
 801298c:	f000 f88e 	bl	8012aac <_realloc_r>
 8012990:	4605      	mov	r5, r0
 8012992:	2800      	cmp	r0, #0
 8012994:	d0de      	beq.n	8012954 <__submore+0x1a>
 8012996:	eb00 0806 	add.w	r8, r0, r6
 801299a:	4601      	mov	r1, r0
 801299c:	4632      	mov	r2, r6
 801299e:	4640      	mov	r0, r8
 80129a0:	f7fd f8df 	bl	800fb62 <memcpy>
 80129a4:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80129a8:	f8c4 8000 	str.w	r8, [r4]
 80129ac:	e7e9      	b.n	8012982 <__submore+0x48>

080129ae <memmove>:
 80129ae:	4288      	cmp	r0, r1
 80129b0:	b510      	push	{r4, lr}
 80129b2:	eb01 0402 	add.w	r4, r1, r2
 80129b6:	d902      	bls.n	80129be <memmove+0x10>
 80129b8:	4284      	cmp	r4, r0
 80129ba:	4623      	mov	r3, r4
 80129bc:	d807      	bhi.n	80129ce <memmove+0x20>
 80129be:	1e43      	subs	r3, r0, #1
 80129c0:	42a1      	cmp	r1, r4
 80129c2:	d008      	beq.n	80129d6 <memmove+0x28>
 80129c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80129c8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80129cc:	e7f8      	b.n	80129c0 <memmove+0x12>
 80129ce:	4402      	add	r2, r0
 80129d0:	4601      	mov	r1, r0
 80129d2:	428a      	cmp	r2, r1
 80129d4:	d100      	bne.n	80129d8 <memmove+0x2a>
 80129d6:	bd10      	pop	{r4, pc}
 80129d8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80129dc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80129e0:	e7f7      	b.n	80129d2 <memmove+0x24>
	...

080129e4 <_fstat_r>:
 80129e4:	b538      	push	{r3, r4, r5, lr}
 80129e6:	4d07      	ldr	r5, [pc, #28]	@ (8012a04 <_fstat_r+0x20>)
 80129e8:	2300      	movs	r3, #0
 80129ea:	4604      	mov	r4, r0
 80129ec:	4608      	mov	r0, r1
 80129ee:	4611      	mov	r1, r2
 80129f0:	602b      	str	r3, [r5, #0]
 80129f2:	f7f1 fc1f 	bl	8004234 <_fstat>
 80129f6:	1c43      	adds	r3, r0, #1
 80129f8:	d102      	bne.n	8012a00 <_fstat_r+0x1c>
 80129fa:	682b      	ldr	r3, [r5, #0]
 80129fc:	b103      	cbz	r3, 8012a00 <_fstat_r+0x1c>
 80129fe:	6023      	str	r3, [r4, #0]
 8012a00:	bd38      	pop	{r3, r4, r5, pc}
 8012a02:	bf00      	nop
 8012a04:	20002e10 	.word	0x20002e10

08012a08 <_isatty_r>:
 8012a08:	b538      	push	{r3, r4, r5, lr}
 8012a0a:	4d06      	ldr	r5, [pc, #24]	@ (8012a24 <_isatty_r+0x1c>)
 8012a0c:	2300      	movs	r3, #0
 8012a0e:	4604      	mov	r4, r0
 8012a10:	4608      	mov	r0, r1
 8012a12:	602b      	str	r3, [r5, #0]
 8012a14:	f7f1 fc1e 	bl	8004254 <_isatty>
 8012a18:	1c43      	adds	r3, r0, #1
 8012a1a:	d102      	bne.n	8012a22 <_isatty_r+0x1a>
 8012a1c:	682b      	ldr	r3, [r5, #0]
 8012a1e:	b103      	cbz	r3, 8012a22 <_isatty_r+0x1a>
 8012a20:	6023      	str	r3, [r4, #0]
 8012a22:	bd38      	pop	{r3, r4, r5, pc}
 8012a24:	20002e10 	.word	0x20002e10

08012a28 <_sbrk_r>:
 8012a28:	b538      	push	{r3, r4, r5, lr}
 8012a2a:	4d06      	ldr	r5, [pc, #24]	@ (8012a44 <_sbrk_r+0x1c>)
 8012a2c:	2300      	movs	r3, #0
 8012a2e:	4604      	mov	r4, r0
 8012a30:	4608      	mov	r0, r1
 8012a32:	602b      	str	r3, [r5, #0]
 8012a34:	f7f1 fc26 	bl	8004284 <_sbrk>
 8012a38:	1c43      	adds	r3, r0, #1
 8012a3a:	d102      	bne.n	8012a42 <_sbrk_r+0x1a>
 8012a3c:	682b      	ldr	r3, [r5, #0]
 8012a3e:	b103      	cbz	r3, 8012a42 <_sbrk_r+0x1a>
 8012a40:	6023      	str	r3, [r4, #0]
 8012a42:	bd38      	pop	{r3, r4, r5, pc}
 8012a44:	20002e10 	.word	0x20002e10

08012a48 <__assert_func>:
 8012a48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012a4a:	4614      	mov	r4, r2
 8012a4c:	461a      	mov	r2, r3
 8012a4e:	4b09      	ldr	r3, [pc, #36]	@ (8012a74 <__assert_func+0x2c>)
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	4605      	mov	r5, r0
 8012a54:	68d8      	ldr	r0, [r3, #12]
 8012a56:	b954      	cbnz	r4, 8012a6e <__assert_func+0x26>
 8012a58:	4b07      	ldr	r3, [pc, #28]	@ (8012a78 <__assert_func+0x30>)
 8012a5a:	461c      	mov	r4, r3
 8012a5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012a60:	9100      	str	r1, [sp, #0]
 8012a62:	462b      	mov	r3, r5
 8012a64:	4905      	ldr	r1, [pc, #20]	@ (8012a7c <__assert_func+0x34>)
 8012a66:	f000 f8bf 	bl	8012be8 <fiprintf>
 8012a6a:	f000 f8cf 	bl	8012c0c <abort>
 8012a6e:	4b04      	ldr	r3, [pc, #16]	@ (8012a80 <__assert_func+0x38>)
 8012a70:	e7f4      	b.n	8012a5c <__assert_func+0x14>
 8012a72:	bf00      	nop
 8012a74:	2000018c 	.word	0x2000018c
 8012a78:	08014640 	.word	0x08014640
 8012a7c:	08014612 	.word	0x08014612
 8012a80:	08014605 	.word	0x08014605

08012a84 <_calloc_r>:
 8012a84:	b570      	push	{r4, r5, r6, lr}
 8012a86:	fba1 5402 	umull	r5, r4, r1, r2
 8012a8a:	b93c      	cbnz	r4, 8012a9c <_calloc_r+0x18>
 8012a8c:	4629      	mov	r1, r5
 8012a8e:	f7fe fa81 	bl	8010f94 <_malloc_r>
 8012a92:	4606      	mov	r6, r0
 8012a94:	b928      	cbnz	r0, 8012aa2 <_calloc_r+0x1e>
 8012a96:	2600      	movs	r6, #0
 8012a98:	4630      	mov	r0, r6
 8012a9a:	bd70      	pop	{r4, r5, r6, pc}
 8012a9c:	220c      	movs	r2, #12
 8012a9e:	6002      	str	r2, [r0, #0]
 8012aa0:	e7f9      	b.n	8012a96 <_calloc_r+0x12>
 8012aa2:	462a      	mov	r2, r5
 8012aa4:	4621      	mov	r1, r4
 8012aa6:	f7fc ffab 	bl	800fa00 <memset>
 8012aaa:	e7f5      	b.n	8012a98 <_calloc_r+0x14>

08012aac <_realloc_r>:
 8012aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ab0:	4680      	mov	r8, r0
 8012ab2:	4615      	mov	r5, r2
 8012ab4:	460c      	mov	r4, r1
 8012ab6:	b921      	cbnz	r1, 8012ac2 <_realloc_r+0x16>
 8012ab8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012abc:	4611      	mov	r1, r2
 8012abe:	f7fe ba69 	b.w	8010f94 <_malloc_r>
 8012ac2:	b92a      	cbnz	r2, 8012ad0 <_realloc_r+0x24>
 8012ac4:	f7fd feb8 	bl	8010838 <_free_r>
 8012ac8:	2400      	movs	r4, #0
 8012aca:	4620      	mov	r0, r4
 8012acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ad0:	f000 f8a3 	bl	8012c1a <_malloc_usable_size_r>
 8012ad4:	4285      	cmp	r5, r0
 8012ad6:	4606      	mov	r6, r0
 8012ad8:	d802      	bhi.n	8012ae0 <_realloc_r+0x34>
 8012ada:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012ade:	d8f4      	bhi.n	8012aca <_realloc_r+0x1e>
 8012ae0:	4629      	mov	r1, r5
 8012ae2:	4640      	mov	r0, r8
 8012ae4:	f7fe fa56 	bl	8010f94 <_malloc_r>
 8012ae8:	4607      	mov	r7, r0
 8012aea:	2800      	cmp	r0, #0
 8012aec:	d0ec      	beq.n	8012ac8 <_realloc_r+0x1c>
 8012aee:	42b5      	cmp	r5, r6
 8012af0:	462a      	mov	r2, r5
 8012af2:	4621      	mov	r1, r4
 8012af4:	bf28      	it	cs
 8012af6:	4632      	movcs	r2, r6
 8012af8:	f7fd f833 	bl	800fb62 <memcpy>
 8012afc:	4621      	mov	r1, r4
 8012afe:	4640      	mov	r0, r8
 8012b00:	f7fd fe9a 	bl	8010838 <_free_r>
 8012b04:	463c      	mov	r4, r7
 8012b06:	e7e0      	b.n	8012aca <_realloc_r+0x1e>

08012b08 <_strtoul_l.constprop.0>:
 8012b08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012b0c:	4e34      	ldr	r6, [pc, #208]	@ (8012be0 <_strtoul_l.constprop.0+0xd8>)
 8012b0e:	4686      	mov	lr, r0
 8012b10:	460d      	mov	r5, r1
 8012b12:	4628      	mov	r0, r5
 8012b14:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012b18:	5d37      	ldrb	r7, [r6, r4]
 8012b1a:	f017 0708 	ands.w	r7, r7, #8
 8012b1e:	d1f8      	bne.n	8012b12 <_strtoul_l.constprop.0+0xa>
 8012b20:	2c2d      	cmp	r4, #45	@ 0x2d
 8012b22:	d12f      	bne.n	8012b84 <_strtoul_l.constprop.0+0x7c>
 8012b24:	782c      	ldrb	r4, [r5, #0]
 8012b26:	2701      	movs	r7, #1
 8012b28:	1c85      	adds	r5, r0, #2
 8012b2a:	f033 0010 	bics.w	r0, r3, #16
 8012b2e:	d109      	bne.n	8012b44 <_strtoul_l.constprop.0+0x3c>
 8012b30:	2c30      	cmp	r4, #48	@ 0x30
 8012b32:	d12c      	bne.n	8012b8e <_strtoul_l.constprop.0+0x86>
 8012b34:	7828      	ldrb	r0, [r5, #0]
 8012b36:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8012b3a:	2858      	cmp	r0, #88	@ 0x58
 8012b3c:	d127      	bne.n	8012b8e <_strtoul_l.constprop.0+0x86>
 8012b3e:	786c      	ldrb	r4, [r5, #1]
 8012b40:	2310      	movs	r3, #16
 8012b42:	3502      	adds	r5, #2
 8012b44:	f04f 38ff 	mov.w	r8, #4294967295
 8012b48:	2600      	movs	r6, #0
 8012b4a:	fbb8 f8f3 	udiv	r8, r8, r3
 8012b4e:	fb03 f908 	mul.w	r9, r3, r8
 8012b52:	ea6f 0909 	mvn.w	r9, r9
 8012b56:	4630      	mov	r0, r6
 8012b58:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8012b5c:	f1bc 0f09 	cmp.w	ip, #9
 8012b60:	d81c      	bhi.n	8012b9c <_strtoul_l.constprop.0+0x94>
 8012b62:	4664      	mov	r4, ip
 8012b64:	42a3      	cmp	r3, r4
 8012b66:	dd2a      	ble.n	8012bbe <_strtoul_l.constprop.0+0xb6>
 8012b68:	f1b6 3fff 	cmp.w	r6, #4294967295
 8012b6c:	d007      	beq.n	8012b7e <_strtoul_l.constprop.0+0x76>
 8012b6e:	4580      	cmp	r8, r0
 8012b70:	d322      	bcc.n	8012bb8 <_strtoul_l.constprop.0+0xb0>
 8012b72:	d101      	bne.n	8012b78 <_strtoul_l.constprop.0+0x70>
 8012b74:	45a1      	cmp	r9, r4
 8012b76:	db1f      	blt.n	8012bb8 <_strtoul_l.constprop.0+0xb0>
 8012b78:	fb00 4003 	mla	r0, r0, r3, r4
 8012b7c:	2601      	movs	r6, #1
 8012b7e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012b82:	e7e9      	b.n	8012b58 <_strtoul_l.constprop.0+0x50>
 8012b84:	2c2b      	cmp	r4, #43	@ 0x2b
 8012b86:	bf04      	itt	eq
 8012b88:	782c      	ldrbeq	r4, [r5, #0]
 8012b8a:	1c85      	addeq	r5, r0, #2
 8012b8c:	e7cd      	b.n	8012b2a <_strtoul_l.constprop.0+0x22>
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d1d8      	bne.n	8012b44 <_strtoul_l.constprop.0+0x3c>
 8012b92:	2c30      	cmp	r4, #48	@ 0x30
 8012b94:	bf0c      	ite	eq
 8012b96:	2308      	moveq	r3, #8
 8012b98:	230a      	movne	r3, #10
 8012b9a:	e7d3      	b.n	8012b44 <_strtoul_l.constprop.0+0x3c>
 8012b9c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8012ba0:	f1bc 0f19 	cmp.w	ip, #25
 8012ba4:	d801      	bhi.n	8012baa <_strtoul_l.constprop.0+0xa2>
 8012ba6:	3c37      	subs	r4, #55	@ 0x37
 8012ba8:	e7dc      	b.n	8012b64 <_strtoul_l.constprop.0+0x5c>
 8012baa:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8012bae:	f1bc 0f19 	cmp.w	ip, #25
 8012bb2:	d804      	bhi.n	8012bbe <_strtoul_l.constprop.0+0xb6>
 8012bb4:	3c57      	subs	r4, #87	@ 0x57
 8012bb6:	e7d5      	b.n	8012b64 <_strtoul_l.constprop.0+0x5c>
 8012bb8:	f04f 36ff 	mov.w	r6, #4294967295
 8012bbc:	e7df      	b.n	8012b7e <_strtoul_l.constprop.0+0x76>
 8012bbe:	1c73      	adds	r3, r6, #1
 8012bc0:	d106      	bne.n	8012bd0 <_strtoul_l.constprop.0+0xc8>
 8012bc2:	2322      	movs	r3, #34	@ 0x22
 8012bc4:	f8ce 3000 	str.w	r3, [lr]
 8012bc8:	4630      	mov	r0, r6
 8012bca:	b932      	cbnz	r2, 8012bda <_strtoul_l.constprop.0+0xd2>
 8012bcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012bd0:	b107      	cbz	r7, 8012bd4 <_strtoul_l.constprop.0+0xcc>
 8012bd2:	4240      	negs	r0, r0
 8012bd4:	2a00      	cmp	r2, #0
 8012bd6:	d0f9      	beq.n	8012bcc <_strtoul_l.constprop.0+0xc4>
 8012bd8:	b106      	cbz	r6, 8012bdc <_strtoul_l.constprop.0+0xd4>
 8012bda:	1e69      	subs	r1, r5, #1
 8012bdc:	6011      	str	r1, [r2, #0]
 8012bde:	e7f5      	b.n	8012bcc <_strtoul_l.constprop.0+0xc4>
 8012be0:	080144d9 	.word	0x080144d9

08012be4 <_strtoul_r>:
 8012be4:	f7ff bf90 	b.w	8012b08 <_strtoul_l.constprop.0>

08012be8 <fiprintf>:
 8012be8:	b40e      	push	{r1, r2, r3}
 8012bea:	b503      	push	{r0, r1, lr}
 8012bec:	4601      	mov	r1, r0
 8012bee:	ab03      	add	r3, sp, #12
 8012bf0:	4805      	ldr	r0, [pc, #20]	@ (8012c08 <fiprintf+0x20>)
 8012bf2:	f853 2b04 	ldr.w	r2, [r3], #4
 8012bf6:	6800      	ldr	r0, [r0, #0]
 8012bf8:	9301      	str	r3, [sp, #4]
 8012bfa:	f7ff faf1 	bl	80121e0 <_vfiprintf_r>
 8012bfe:	b002      	add	sp, #8
 8012c00:	f85d eb04 	ldr.w	lr, [sp], #4
 8012c04:	b003      	add	sp, #12
 8012c06:	4770      	bx	lr
 8012c08:	2000018c 	.word	0x2000018c

08012c0c <abort>:
 8012c0c:	b508      	push	{r3, lr}
 8012c0e:	2006      	movs	r0, #6
 8012c10:	f000 f834 	bl	8012c7c <raise>
 8012c14:	2001      	movs	r0, #1
 8012c16:	f7f1 fabd 	bl	8004194 <_exit>

08012c1a <_malloc_usable_size_r>:
 8012c1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012c1e:	1f18      	subs	r0, r3, #4
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	bfbc      	itt	lt
 8012c24:	580b      	ldrlt	r3, [r1, r0]
 8012c26:	18c0      	addlt	r0, r0, r3
 8012c28:	4770      	bx	lr

08012c2a <_raise_r>:
 8012c2a:	291f      	cmp	r1, #31
 8012c2c:	b538      	push	{r3, r4, r5, lr}
 8012c2e:	4605      	mov	r5, r0
 8012c30:	460c      	mov	r4, r1
 8012c32:	d904      	bls.n	8012c3e <_raise_r+0x14>
 8012c34:	2316      	movs	r3, #22
 8012c36:	6003      	str	r3, [r0, #0]
 8012c38:	f04f 30ff 	mov.w	r0, #4294967295
 8012c3c:	bd38      	pop	{r3, r4, r5, pc}
 8012c3e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012c40:	b112      	cbz	r2, 8012c48 <_raise_r+0x1e>
 8012c42:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012c46:	b94b      	cbnz	r3, 8012c5c <_raise_r+0x32>
 8012c48:	4628      	mov	r0, r5
 8012c4a:	f000 f831 	bl	8012cb0 <_getpid_r>
 8012c4e:	4622      	mov	r2, r4
 8012c50:	4601      	mov	r1, r0
 8012c52:	4628      	mov	r0, r5
 8012c54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012c58:	f000 b818 	b.w	8012c8c <_kill_r>
 8012c5c:	2b01      	cmp	r3, #1
 8012c5e:	d00a      	beq.n	8012c76 <_raise_r+0x4c>
 8012c60:	1c59      	adds	r1, r3, #1
 8012c62:	d103      	bne.n	8012c6c <_raise_r+0x42>
 8012c64:	2316      	movs	r3, #22
 8012c66:	6003      	str	r3, [r0, #0]
 8012c68:	2001      	movs	r0, #1
 8012c6a:	e7e7      	b.n	8012c3c <_raise_r+0x12>
 8012c6c:	2100      	movs	r1, #0
 8012c6e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012c72:	4620      	mov	r0, r4
 8012c74:	4798      	blx	r3
 8012c76:	2000      	movs	r0, #0
 8012c78:	e7e0      	b.n	8012c3c <_raise_r+0x12>
	...

08012c7c <raise>:
 8012c7c:	4b02      	ldr	r3, [pc, #8]	@ (8012c88 <raise+0xc>)
 8012c7e:	4601      	mov	r1, r0
 8012c80:	6818      	ldr	r0, [r3, #0]
 8012c82:	f7ff bfd2 	b.w	8012c2a <_raise_r>
 8012c86:	bf00      	nop
 8012c88:	2000018c 	.word	0x2000018c

08012c8c <_kill_r>:
 8012c8c:	b538      	push	{r3, r4, r5, lr}
 8012c8e:	4d07      	ldr	r5, [pc, #28]	@ (8012cac <_kill_r+0x20>)
 8012c90:	2300      	movs	r3, #0
 8012c92:	4604      	mov	r4, r0
 8012c94:	4608      	mov	r0, r1
 8012c96:	4611      	mov	r1, r2
 8012c98:	602b      	str	r3, [r5, #0]
 8012c9a:	f7f1 fa6b 	bl	8004174 <_kill>
 8012c9e:	1c43      	adds	r3, r0, #1
 8012ca0:	d102      	bne.n	8012ca8 <_kill_r+0x1c>
 8012ca2:	682b      	ldr	r3, [r5, #0]
 8012ca4:	b103      	cbz	r3, 8012ca8 <_kill_r+0x1c>
 8012ca6:	6023      	str	r3, [r4, #0]
 8012ca8:	bd38      	pop	{r3, r4, r5, pc}
 8012caa:	bf00      	nop
 8012cac:	20002e10 	.word	0x20002e10

08012cb0 <_getpid_r>:
 8012cb0:	f7f1 ba58 	b.w	8004164 <_getpid>

08012cb4 <pow>:
 8012cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cb6:	ed2d 8b02 	vpush	{d8}
 8012cba:	eeb0 8a40 	vmov.f32	s16, s0
 8012cbe:	eef0 8a60 	vmov.f32	s17, s1
 8012cc2:	ec55 4b11 	vmov	r4, r5, d1
 8012cc6:	f000 f873 	bl	8012db0 <__ieee754_pow>
 8012cca:	4622      	mov	r2, r4
 8012ccc:	462b      	mov	r3, r5
 8012cce:	4620      	mov	r0, r4
 8012cd0:	4629      	mov	r1, r5
 8012cd2:	ec57 6b10 	vmov	r6, r7, d0
 8012cd6:	f7ed ff31 	bl	8000b3c <__aeabi_dcmpun>
 8012cda:	2800      	cmp	r0, #0
 8012cdc:	d13b      	bne.n	8012d56 <pow+0xa2>
 8012cde:	ec51 0b18 	vmov	r0, r1, d8
 8012ce2:	2200      	movs	r2, #0
 8012ce4:	2300      	movs	r3, #0
 8012ce6:	f7ed fef7 	bl	8000ad8 <__aeabi_dcmpeq>
 8012cea:	b1b8      	cbz	r0, 8012d1c <pow+0x68>
 8012cec:	2200      	movs	r2, #0
 8012cee:	2300      	movs	r3, #0
 8012cf0:	4620      	mov	r0, r4
 8012cf2:	4629      	mov	r1, r5
 8012cf4:	f7ed fef0 	bl	8000ad8 <__aeabi_dcmpeq>
 8012cf8:	2800      	cmp	r0, #0
 8012cfa:	d146      	bne.n	8012d8a <pow+0xd6>
 8012cfc:	ec45 4b10 	vmov	d0, r4, r5
 8012d00:	f000 f848 	bl	8012d94 <finite>
 8012d04:	b338      	cbz	r0, 8012d56 <pow+0xa2>
 8012d06:	2200      	movs	r2, #0
 8012d08:	2300      	movs	r3, #0
 8012d0a:	4620      	mov	r0, r4
 8012d0c:	4629      	mov	r1, r5
 8012d0e:	f7ed feed 	bl	8000aec <__aeabi_dcmplt>
 8012d12:	b300      	cbz	r0, 8012d56 <pow+0xa2>
 8012d14:	f7fc fef8 	bl	800fb08 <__errno>
 8012d18:	2322      	movs	r3, #34	@ 0x22
 8012d1a:	e01b      	b.n	8012d54 <pow+0xa0>
 8012d1c:	ec47 6b10 	vmov	d0, r6, r7
 8012d20:	f000 f838 	bl	8012d94 <finite>
 8012d24:	b9e0      	cbnz	r0, 8012d60 <pow+0xac>
 8012d26:	eeb0 0a48 	vmov.f32	s0, s16
 8012d2a:	eef0 0a68 	vmov.f32	s1, s17
 8012d2e:	f000 f831 	bl	8012d94 <finite>
 8012d32:	b1a8      	cbz	r0, 8012d60 <pow+0xac>
 8012d34:	ec45 4b10 	vmov	d0, r4, r5
 8012d38:	f000 f82c 	bl	8012d94 <finite>
 8012d3c:	b180      	cbz	r0, 8012d60 <pow+0xac>
 8012d3e:	4632      	mov	r2, r6
 8012d40:	463b      	mov	r3, r7
 8012d42:	4630      	mov	r0, r6
 8012d44:	4639      	mov	r1, r7
 8012d46:	f7ed fef9 	bl	8000b3c <__aeabi_dcmpun>
 8012d4a:	2800      	cmp	r0, #0
 8012d4c:	d0e2      	beq.n	8012d14 <pow+0x60>
 8012d4e:	f7fc fedb 	bl	800fb08 <__errno>
 8012d52:	2321      	movs	r3, #33	@ 0x21
 8012d54:	6003      	str	r3, [r0, #0]
 8012d56:	ecbd 8b02 	vpop	{d8}
 8012d5a:	ec47 6b10 	vmov	d0, r6, r7
 8012d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d60:	2200      	movs	r2, #0
 8012d62:	2300      	movs	r3, #0
 8012d64:	4630      	mov	r0, r6
 8012d66:	4639      	mov	r1, r7
 8012d68:	f7ed feb6 	bl	8000ad8 <__aeabi_dcmpeq>
 8012d6c:	2800      	cmp	r0, #0
 8012d6e:	d0f2      	beq.n	8012d56 <pow+0xa2>
 8012d70:	eeb0 0a48 	vmov.f32	s0, s16
 8012d74:	eef0 0a68 	vmov.f32	s1, s17
 8012d78:	f000 f80c 	bl	8012d94 <finite>
 8012d7c:	2800      	cmp	r0, #0
 8012d7e:	d0ea      	beq.n	8012d56 <pow+0xa2>
 8012d80:	ec45 4b10 	vmov	d0, r4, r5
 8012d84:	f000 f806 	bl	8012d94 <finite>
 8012d88:	e7c3      	b.n	8012d12 <pow+0x5e>
 8012d8a:	4f01      	ldr	r7, [pc, #4]	@ (8012d90 <pow+0xdc>)
 8012d8c:	2600      	movs	r6, #0
 8012d8e:	e7e2      	b.n	8012d56 <pow+0xa2>
 8012d90:	3ff00000 	.word	0x3ff00000

08012d94 <finite>:
 8012d94:	b082      	sub	sp, #8
 8012d96:	ed8d 0b00 	vstr	d0, [sp]
 8012d9a:	9801      	ldr	r0, [sp, #4]
 8012d9c:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8012da0:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8012da4:	0fc0      	lsrs	r0, r0, #31
 8012da6:	b002      	add	sp, #8
 8012da8:	4770      	bx	lr
 8012daa:	0000      	movs	r0, r0
 8012dac:	0000      	movs	r0, r0
	...

08012db0 <__ieee754_pow>:
 8012db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012db4:	b091      	sub	sp, #68	@ 0x44
 8012db6:	ed8d 1b00 	vstr	d1, [sp]
 8012dba:	e9dd 1900 	ldrd	r1, r9, [sp]
 8012dbe:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8012dc2:	ea5a 0001 	orrs.w	r0, sl, r1
 8012dc6:	ec57 6b10 	vmov	r6, r7, d0
 8012dca:	d113      	bne.n	8012df4 <__ieee754_pow+0x44>
 8012dcc:	19b3      	adds	r3, r6, r6
 8012dce:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8012dd2:	4152      	adcs	r2, r2
 8012dd4:	4298      	cmp	r0, r3
 8012dd6:	4b98      	ldr	r3, [pc, #608]	@ (8013038 <__ieee754_pow+0x288>)
 8012dd8:	4193      	sbcs	r3, r2
 8012dda:	f080 84ea 	bcs.w	80137b2 <__ieee754_pow+0xa02>
 8012dde:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012de2:	4630      	mov	r0, r6
 8012de4:	4639      	mov	r1, r7
 8012de6:	f7ed fa59 	bl	800029c <__adddf3>
 8012dea:	ec41 0b10 	vmov	d0, r0, r1
 8012dee:	b011      	add	sp, #68	@ 0x44
 8012df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012df4:	4a91      	ldr	r2, [pc, #580]	@ (801303c <__ieee754_pow+0x28c>)
 8012df6:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8012dfa:	4590      	cmp	r8, r2
 8012dfc:	463d      	mov	r5, r7
 8012dfe:	4633      	mov	r3, r6
 8012e00:	d806      	bhi.n	8012e10 <__ieee754_pow+0x60>
 8012e02:	d101      	bne.n	8012e08 <__ieee754_pow+0x58>
 8012e04:	2e00      	cmp	r6, #0
 8012e06:	d1ea      	bne.n	8012dde <__ieee754_pow+0x2e>
 8012e08:	4592      	cmp	sl, r2
 8012e0a:	d801      	bhi.n	8012e10 <__ieee754_pow+0x60>
 8012e0c:	d10e      	bne.n	8012e2c <__ieee754_pow+0x7c>
 8012e0e:	b169      	cbz	r1, 8012e2c <__ieee754_pow+0x7c>
 8012e10:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8012e14:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8012e18:	431d      	orrs	r5, r3
 8012e1a:	d1e0      	bne.n	8012dde <__ieee754_pow+0x2e>
 8012e1c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012e20:	18db      	adds	r3, r3, r3
 8012e22:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8012e26:	4152      	adcs	r2, r2
 8012e28:	429d      	cmp	r5, r3
 8012e2a:	e7d4      	b.n	8012dd6 <__ieee754_pow+0x26>
 8012e2c:	2d00      	cmp	r5, #0
 8012e2e:	46c3      	mov	fp, r8
 8012e30:	da3a      	bge.n	8012ea8 <__ieee754_pow+0xf8>
 8012e32:	4a83      	ldr	r2, [pc, #524]	@ (8013040 <__ieee754_pow+0x290>)
 8012e34:	4592      	cmp	sl, r2
 8012e36:	d84d      	bhi.n	8012ed4 <__ieee754_pow+0x124>
 8012e38:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8012e3c:	4592      	cmp	sl, r2
 8012e3e:	f240 84c7 	bls.w	80137d0 <__ieee754_pow+0xa20>
 8012e42:	ea4f 522a 	mov.w	r2, sl, asr #20
 8012e46:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8012e4a:	2a14      	cmp	r2, #20
 8012e4c:	dd0f      	ble.n	8012e6e <__ieee754_pow+0xbe>
 8012e4e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8012e52:	fa21 f402 	lsr.w	r4, r1, r2
 8012e56:	fa04 f202 	lsl.w	r2, r4, r2
 8012e5a:	428a      	cmp	r2, r1
 8012e5c:	f040 84b8 	bne.w	80137d0 <__ieee754_pow+0xa20>
 8012e60:	f004 0401 	and.w	r4, r4, #1
 8012e64:	f1c4 0402 	rsb	r4, r4, #2
 8012e68:	2900      	cmp	r1, #0
 8012e6a:	d158      	bne.n	8012f1e <__ieee754_pow+0x16e>
 8012e6c:	e00e      	b.n	8012e8c <__ieee754_pow+0xdc>
 8012e6e:	2900      	cmp	r1, #0
 8012e70:	d154      	bne.n	8012f1c <__ieee754_pow+0x16c>
 8012e72:	f1c2 0214 	rsb	r2, r2, #20
 8012e76:	fa4a f402 	asr.w	r4, sl, r2
 8012e7a:	fa04 f202 	lsl.w	r2, r4, r2
 8012e7e:	4552      	cmp	r2, sl
 8012e80:	f040 84a3 	bne.w	80137ca <__ieee754_pow+0xa1a>
 8012e84:	f004 0401 	and.w	r4, r4, #1
 8012e88:	f1c4 0402 	rsb	r4, r4, #2
 8012e8c:	4a6d      	ldr	r2, [pc, #436]	@ (8013044 <__ieee754_pow+0x294>)
 8012e8e:	4592      	cmp	sl, r2
 8012e90:	d12e      	bne.n	8012ef0 <__ieee754_pow+0x140>
 8012e92:	f1b9 0f00 	cmp.w	r9, #0
 8012e96:	f280 8494 	bge.w	80137c2 <__ieee754_pow+0xa12>
 8012e9a:	496a      	ldr	r1, [pc, #424]	@ (8013044 <__ieee754_pow+0x294>)
 8012e9c:	4632      	mov	r2, r6
 8012e9e:	463b      	mov	r3, r7
 8012ea0:	2000      	movs	r0, #0
 8012ea2:	f7ed fcdb 	bl	800085c <__aeabi_ddiv>
 8012ea6:	e7a0      	b.n	8012dea <__ieee754_pow+0x3a>
 8012ea8:	2400      	movs	r4, #0
 8012eaa:	bbc1      	cbnz	r1, 8012f1e <__ieee754_pow+0x16e>
 8012eac:	4a63      	ldr	r2, [pc, #396]	@ (801303c <__ieee754_pow+0x28c>)
 8012eae:	4592      	cmp	sl, r2
 8012eb0:	d1ec      	bne.n	8012e8c <__ieee754_pow+0xdc>
 8012eb2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8012eb6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8012eba:	431a      	orrs	r2, r3
 8012ebc:	f000 8479 	beq.w	80137b2 <__ieee754_pow+0xa02>
 8012ec0:	4b61      	ldr	r3, [pc, #388]	@ (8013048 <__ieee754_pow+0x298>)
 8012ec2:	4598      	cmp	r8, r3
 8012ec4:	d908      	bls.n	8012ed8 <__ieee754_pow+0x128>
 8012ec6:	f1b9 0f00 	cmp.w	r9, #0
 8012eca:	f2c0 8476 	blt.w	80137ba <__ieee754_pow+0xa0a>
 8012ece:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012ed2:	e78a      	b.n	8012dea <__ieee754_pow+0x3a>
 8012ed4:	2402      	movs	r4, #2
 8012ed6:	e7e8      	b.n	8012eaa <__ieee754_pow+0xfa>
 8012ed8:	f1b9 0f00 	cmp.w	r9, #0
 8012edc:	f04f 0000 	mov.w	r0, #0
 8012ee0:	f04f 0100 	mov.w	r1, #0
 8012ee4:	da81      	bge.n	8012dea <__ieee754_pow+0x3a>
 8012ee6:	e9dd 0300 	ldrd	r0, r3, [sp]
 8012eea:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8012eee:	e77c      	b.n	8012dea <__ieee754_pow+0x3a>
 8012ef0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8012ef4:	d106      	bne.n	8012f04 <__ieee754_pow+0x154>
 8012ef6:	4632      	mov	r2, r6
 8012ef8:	463b      	mov	r3, r7
 8012efa:	4630      	mov	r0, r6
 8012efc:	4639      	mov	r1, r7
 8012efe:	f7ed fb83 	bl	8000608 <__aeabi_dmul>
 8012f02:	e772      	b.n	8012dea <__ieee754_pow+0x3a>
 8012f04:	4a51      	ldr	r2, [pc, #324]	@ (801304c <__ieee754_pow+0x29c>)
 8012f06:	4591      	cmp	r9, r2
 8012f08:	d109      	bne.n	8012f1e <__ieee754_pow+0x16e>
 8012f0a:	2d00      	cmp	r5, #0
 8012f0c:	db07      	blt.n	8012f1e <__ieee754_pow+0x16e>
 8012f0e:	ec47 6b10 	vmov	d0, r6, r7
 8012f12:	b011      	add	sp, #68	@ 0x44
 8012f14:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f18:	f000 bd52 	b.w	80139c0 <__ieee754_sqrt>
 8012f1c:	2400      	movs	r4, #0
 8012f1e:	ec47 6b10 	vmov	d0, r6, r7
 8012f22:	9302      	str	r3, [sp, #8]
 8012f24:	f000 fc88 	bl	8013838 <fabs>
 8012f28:	9b02      	ldr	r3, [sp, #8]
 8012f2a:	ec51 0b10 	vmov	r0, r1, d0
 8012f2e:	bb53      	cbnz	r3, 8012f86 <__ieee754_pow+0x1d6>
 8012f30:	4b44      	ldr	r3, [pc, #272]	@ (8013044 <__ieee754_pow+0x294>)
 8012f32:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8012f36:	429a      	cmp	r2, r3
 8012f38:	d002      	beq.n	8012f40 <__ieee754_pow+0x190>
 8012f3a:	f1b8 0f00 	cmp.w	r8, #0
 8012f3e:	d122      	bne.n	8012f86 <__ieee754_pow+0x1d6>
 8012f40:	f1b9 0f00 	cmp.w	r9, #0
 8012f44:	da05      	bge.n	8012f52 <__ieee754_pow+0x1a2>
 8012f46:	4602      	mov	r2, r0
 8012f48:	460b      	mov	r3, r1
 8012f4a:	2000      	movs	r0, #0
 8012f4c:	493d      	ldr	r1, [pc, #244]	@ (8013044 <__ieee754_pow+0x294>)
 8012f4e:	f7ed fc85 	bl	800085c <__aeabi_ddiv>
 8012f52:	2d00      	cmp	r5, #0
 8012f54:	f6bf af49 	bge.w	8012dea <__ieee754_pow+0x3a>
 8012f58:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8012f5c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8012f60:	ea58 0804 	orrs.w	r8, r8, r4
 8012f64:	d108      	bne.n	8012f78 <__ieee754_pow+0x1c8>
 8012f66:	4602      	mov	r2, r0
 8012f68:	460b      	mov	r3, r1
 8012f6a:	4610      	mov	r0, r2
 8012f6c:	4619      	mov	r1, r3
 8012f6e:	f7ed f993 	bl	8000298 <__aeabi_dsub>
 8012f72:	4602      	mov	r2, r0
 8012f74:	460b      	mov	r3, r1
 8012f76:	e794      	b.n	8012ea2 <__ieee754_pow+0xf2>
 8012f78:	2c01      	cmp	r4, #1
 8012f7a:	f47f af36 	bne.w	8012dea <__ieee754_pow+0x3a>
 8012f7e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012f82:	4619      	mov	r1, r3
 8012f84:	e731      	b.n	8012dea <__ieee754_pow+0x3a>
 8012f86:	0feb      	lsrs	r3, r5, #31
 8012f88:	3b01      	subs	r3, #1
 8012f8a:	ea53 0204 	orrs.w	r2, r3, r4
 8012f8e:	d102      	bne.n	8012f96 <__ieee754_pow+0x1e6>
 8012f90:	4632      	mov	r2, r6
 8012f92:	463b      	mov	r3, r7
 8012f94:	e7e9      	b.n	8012f6a <__ieee754_pow+0x1ba>
 8012f96:	3c01      	subs	r4, #1
 8012f98:	431c      	orrs	r4, r3
 8012f9a:	d016      	beq.n	8012fca <__ieee754_pow+0x21a>
 8012f9c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8013028 <__ieee754_pow+0x278>
 8012fa0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8012fa4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012fa8:	f240 8112 	bls.w	80131d0 <__ieee754_pow+0x420>
 8012fac:	4b28      	ldr	r3, [pc, #160]	@ (8013050 <__ieee754_pow+0x2a0>)
 8012fae:	459a      	cmp	sl, r3
 8012fb0:	4b25      	ldr	r3, [pc, #148]	@ (8013048 <__ieee754_pow+0x298>)
 8012fb2:	d916      	bls.n	8012fe2 <__ieee754_pow+0x232>
 8012fb4:	4598      	cmp	r8, r3
 8012fb6:	d80b      	bhi.n	8012fd0 <__ieee754_pow+0x220>
 8012fb8:	f1b9 0f00 	cmp.w	r9, #0
 8012fbc:	da0b      	bge.n	8012fd6 <__ieee754_pow+0x226>
 8012fbe:	2000      	movs	r0, #0
 8012fc0:	b011      	add	sp, #68	@ 0x44
 8012fc2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fc6:	f000 bcf3 	b.w	80139b0 <__math_oflow>
 8012fca:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8013030 <__ieee754_pow+0x280>
 8012fce:	e7e7      	b.n	8012fa0 <__ieee754_pow+0x1f0>
 8012fd0:	f1b9 0f00 	cmp.w	r9, #0
 8012fd4:	dcf3      	bgt.n	8012fbe <__ieee754_pow+0x20e>
 8012fd6:	2000      	movs	r0, #0
 8012fd8:	b011      	add	sp, #68	@ 0x44
 8012fda:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fde:	f000 bcdf 	b.w	80139a0 <__math_uflow>
 8012fe2:	4598      	cmp	r8, r3
 8012fe4:	d20c      	bcs.n	8013000 <__ieee754_pow+0x250>
 8012fe6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012fea:	2200      	movs	r2, #0
 8012fec:	2300      	movs	r3, #0
 8012fee:	f7ed fd7d 	bl	8000aec <__aeabi_dcmplt>
 8012ff2:	3800      	subs	r0, #0
 8012ff4:	bf18      	it	ne
 8012ff6:	2001      	movne	r0, #1
 8012ff8:	f1b9 0f00 	cmp.w	r9, #0
 8012ffc:	daec      	bge.n	8012fd8 <__ieee754_pow+0x228>
 8012ffe:	e7df      	b.n	8012fc0 <__ieee754_pow+0x210>
 8013000:	4b10      	ldr	r3, [pc, #64]	@ (8013044 <__ieee754_pow+0x294>)
 8013002:	4598      	cmp	r8, r3
 8013004:	f04f 0200 	mov.w	r2, #0
 8013008:	d924      	bls.n	8013054 <__ieee754_pow+0x2a4>
 801300a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801300e:	2300      	movs	r3, #0
 8013010:	f7ed fd6c 	bl	8000aec <__aeabi_dcmplt>
 8013014:	3800      	subs	r0, #0
 8013016:	bf18      	it	ne
 8013018:	2001      	movne	r0, #1
 801301a:	f1b9 0f00 	cmp.w	r9, #0
 801301e:	dccf      	bgt.n	8012fc0 <__ieee754_pow+0x210>
 8013020:	e7da      	b.n	8012fd8 <__ieee754_pow+0x228>
 8013022:	bf00      	nop
 8013024:	f3af 8000 	nop.w
 8013028:	00000000 	.word	0x00000000
 801302c:	3ff00000 	.word	0x3ff00000
 8013030:	00000000 	.word	0x00000000
 8013034:	bff00000 	.word	0xbff00000
 8013038:	fff00000 	.word	0xfff00000
 801303c:	7ff00000 	.word	0x7ff00000
 8013040:	433fffff 	.word	0x433fffff
 8013044:	3ff00000 	.word	0x3ff00000
 8013048:	3fefffff 	.word	0x3fefffff
 801304c:	3fe00000 	.word	0x3fe00000
 8013050:	43f00000 	.word	0x43f00000
 8013054:	4b5a      	ldr	r3, [pc, #360]	@ (80131c0 <__ieee754_pow+0x410>)
 8013056:	f7ed f91f 	bl	8000298 <__aeabi_dsub>
 801305a:	a351      	add	r3, pc, #324	@ (adr r3, 80131a0 <__ieee754_pow+0x3f0>)
 801305c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013060:	4604      	mov	r4, r0
 8013062:	460d      	mov	r5, r1
 8013064:	f7ed fad0 	bl	8000608 <__aeabi_dmul>
 8013068:	a34f      	add	r3, pc, #316	@ (adr r3, 80131a8 <__ieee754_pow+0x3f8>)
 801306a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801306e:	4606      	mov	r6, r0
 8013070:	460f      	mov	r7, r1
 8013072:	4620      	mov	r0, r4
 8013074:	4629      	mov	r1, r5
 8013076:	f7ed fac7 	bl	8000608 <__aeabi_dmul>
 801307a:	4b52      	ldr	r3, [pc, #328]	@ (80131c4 <__ieee754_pow+0x414>)
 801307c:	4682      	mov	sl, r0
 801307e:	468b      	mov	fp, r1
 8013080:	2200      	movs	r2, #0
 8013082:	4620      	mov	r0, r4
 8013084:	4629      	mov	r1, r5
 8013086:	f7ed fabf 	bl	8000608 <__aeabi_dmul>
 801308a:	4602      	mov	r2, r0
 801308c:	460b      	mov	r3, r1
 801308e:	a148      	add	r1, pc, #288	@ (adr r1, 80131b0 <__ieee754_pow+0x400>)
 8013090:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013094:	f7ed f900 	bl	8000298 <__aeabi_dsub>
 8013098:	4622      	mov	r2, r4
 801309a:	462b      	mov	r3, r5
 801309c:	f7ed fab4 	bl	8000608 <__aeabi_dmul>
 80130a0:	4602      	mov	r2, r0
 80130a2:	460b      	mov	r3, r1
 80130a4:	2000      	movs	r0, #0
 80130a6:	4948      	ldr	r1, [pc, #288]	@ (80131c8 <__ieee754_pow+0x418>)
 80130a8:	f7ed f8f6 	bl	8000298 <__aeabi_dsub>
 80130ac:	4622      	mov	r2, r4
 80130ae:	4680      	mov	r8, r0
 80130b0:	4689      	mov	r9, r1
 80130b2:	462b      	mov	r3, r5
 80130b4:	4620      	mov	r0, r4
 80130b6:	4629      	mov	r1, r5
 80130b8:	f7ed faa6 	bl	8000608 <__aeabi_dmul>
 80130bc:	4602      	mov	r2, r0
 80130be:	460b      	mov	r3, r1
 80130c0:	4640      	mov	r0, r8
 80130c2:	4649      	mov	r1, r9
 80130c4:	f7ed faa0 	bl	8000608 <__aeabi_dmul>
 80130c8:	a33b      	add	r3, pc, #236	@ (adr r3, 80131b8 <__ieee754_pow+0x408>)
 80130ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130ce:	f7ed fa9b 	bl	8000608 <__aeabi_dmul>
 80130d2:	4602      	mov	r2, r0
 80130d4:	460b      	mov	r3, r1
 80130d6:	4650      	mov	r0, sl
 80130d8:	4659      	mov	r1, fp
 80130da:	f7ed f8dd 	bl	8000298 <__aeabi_dsub>
 80130de:	4602      	mov	r2, r0
 80130e0:	460b      	mov	r3, r1
 80130e2:	4680      	mov	r8, r0
 80130e4:	4689      	mov	r9, r1
 80130e6:	4630      	mov	r0, r6
 80130e8:	4639      	mov	r1, r7
 80130ea:	f7ed f8d7 	bl	800029c <__adddf3>
 80130ee:	2400      	movs	r4, #0
 80130f0:	4632      	mov	r2, r6
 80130f2:	463b      	mov	r3, r7
 80130f4:	4620      	mov	r0, r4
 80130f6:	460d      	mov	r5, r1
 80130f8:	f7ed f8ce 	bl	8000298 <__aeabi_dsub>
 80130fc:	4602      	mov	r2, r0
 80130fe:	460b      	mov	r3, r1
 8013100:	4640      	mov	r0, r8
 8013102:	4649      	mov	r1, r9
 8013104:	f7ed f8c8 	bl	8000298 <__aeabi_dsub>
 8013108:	e9dd 2300 	ldrd	r2, r3, [sp]
 801310c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013110:	2300      	movs	r3, #0
 8013112:	9304      	str	r3, [sp, #16]
 8013114:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8013118:	4606      	mov	r6, r0
 801311a:	460f      	mov	r7, r1
 801311c:	4652      	mov	r2, sl
 801311e:	465b      	mov	r3, fp
 8013120:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013124:	f7ed f8b8 	bl	8000298 <__aeabi_dsub>
 8013128:	4622      	mov	r2, r4
 801312a:	462b      	mov	r3, r5
 801312c:	f7ed fa6c 	bl	8000608 <__aeabi_dmul>
 8013130:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013134:	4680      	mov	r8, r0
 8013136:	4689      	mov	r9, r1
 8013138:	4630      	mov	r0, r6
 801313a:	4639      	mov	r1, r7
 801313c:	f7ed fa64 	bl	8000608 <__aeabi_dmul>
 8013140:	4602      	mov	r2, r0
 8013142:	460b      	mov	r3, r1
 8013144:	4640      	mov	r0, r8
 8013146:	4649      	mov	r1, r9
 8013148:	f7ed f8a8 	bl	800029c <__adddf3>
 801314c:	4652      	mov	r2, sl
 801314e:	465b      	mov	r3, fp
 8013150:	4606      	mov	r6, r0
 8013152:	460f      	mov	r7, r1
 8013154:	4620      	mov	r0, r4
 8013156:	4629      	mov	r1, r5
 8013158:	f7ed fa56 	bl	8000608 <__aeabi_dmul>
 801315c:	460b      	mov	r3, r1
 801315e:	4602      	mov	r2, r0
 8013160:	4680      	mov	r8, r0
 8013162:	4689      	mov	r9, r1
 8013164:	4630      	mov	r0, r6
 8013166:	4639      	mov	r1, r7
 8013168:	f7ed f898 	bl	800029c <__adddf3>
 801316c:	4b17      	ldr	r3, [pc, #92]	@ (80131cc <__ieee754_pow+0x41c>)
 801316e:	4299      	cmp	r1, r3
 8013170:	4604      	mov	r4, r0
 8013172:	460d      	mov	r5, r1
 8013174:	468a      	mov	sl, r1
 8013176:	468b      	mov	fp, r1
 8013178:	f340 82ef 	ble.w	801375a <__ieee754_pow+0x9aa>
 801317c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8013180:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8013184:	4303      	orrs	r3, r0
 8013186:	f000 81e8 	beq.w	801355a <__ieee754_pow+0x7aa>
 801318a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801318e:	2200      	movs	r2, #0
 8013190:	2300      	movs	r3, #0
 8013192:	f7ed fcab 	bl	8000aec <__aeabi_dcmplt>
 8013196:	3800      	subs	r0, #0
 8013198:	bf18      	it	ne
 801319a:	2001      	movne	r0, #1
 801319c:	e710      	b.n	8012fc0 <__ieee754_pow+0x210>
 801319e:	bf00      	nop
 80131a0:	60000000 	.word	0x60000000
 80131a4:	3ff71547 	.word	0x3ff71547
 80131a8:	f85ddf44 	.word	0xf85ddf44
 80131ac:	3e54ae0b 	.word	0x3e54ae0b
 80131b0:	55555555 	.word	0x55555555
 80131b4:	3fd55555 	.word	0x3fd55555
 80131b8:	652b82fe 	.word	0x652b82fe
 80131bc:	3ff71547 	.word	0x3ff71547
 80131c0:	3ff00000 	.word	0x3ff00000
 80131c4:	3fd00000 	.word	0x3fd00000
 80131c8:	3fe00000 	.word	0x3fe00000
 80131cc:	408fffff 	.word	0x408fffff
 80131d0:	4bd5      	ldr	r3, [pc, #852]	@ (8013528 <__ieee754_pow+0x778>)
 80131d2:	402b      	ands	r3, r5
 80131d4:	2200      	movs	r2, #0
 80131d6:	b92b      	cbnz	r3, 80131e4 <__ieee754_pow+0x434>
 80131d8:	4bd4      	ldr	r3, [pc, #848]	@ (801352c <__ieee754_pow+0x77c>)
 80131da:	f7ed fa15 	bl	8000608 <__aeabi_dmul>
 80131de:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80131e2:	468b      	mov	fp, r1
 80131e4:	ea4f 532b 	mov.w	r3, fp, asr #20
 80131e8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80131ec:	4413      	add	r3, r2
 80131ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80131f0:	4bcf      	ldr	r3, [pc, #828]	@ (8013530 <__ieee754_pow+0x780>)
 80131f2:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 80131f6:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 80131fa:	459b      	cmp	fp, r3
 80131fc:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8013200:	dd08      	ble.n	8013214 <__ieee754_pow+0x464>
 8013202:	4bcc      	ldr	r3, [pc, #816]	@ (8013534 <__ieee754_pow+0x784>)
 8013204:	459b      	cmp	fp, r3
 8013206:	f340 81a5 	ble.w	8013554 <__ieee754_pow+0x7a4>
 801320a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801320c:	3301      	adds	r3, #1
 801320e:	930a      	str	r3, [sp, #40]	@ 0x28
 8013210:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8013214:	f04f 0a00 	mov.w	sl, #0
 8013218:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801321c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801321e:	4bc6      	ldr	r3, [pc, #792]	@ (8013538 <__ieee754_pow+0x788>)
 8013220:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013224:	ed93 7b00 	vldr	d7, [r3]
 8013228:	4629      	mov	r1, r5
 801322a:	ec53 2b17 	vmov	r2, r3, d7
 801322e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013232:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013236:	f7ed f82f 	bl	8000298 <__aeabi_dsub>
 801323a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801323e:	4606      	mov	r6, r0
 8013240:	460f      	mov	r7, r1
 8013242:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013246:	f7ed f829 	bl	800029c <__adddf3>
 801324a:	4602      	mov	r2, r0
 801324c:	460b      	mov	r3, r1
 801324e:	2000      	movs	r0, #0
 8013250:	49ba      	ldr	r1, [pc, #744]	@ (801353c <__ieee754_pow+0x78c>)
 8013252:	f7ed fb03 	bl	800085c <__aeabi_ddiv>
 8013256:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 801325a:	4602      	mov	r2, r0
 801325c:	460b      	mov	r3, r1
 801325e:	4630      	mov	r0, r6
 8013260:	4639      	mov	r1, r7
 8013262:	f7ed f9d1 	bl	8000608 <__aeabi_dmul>
 8013266:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801326a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 801326e:	106d      	asrs	r5, r5, #1
 8013270:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8013274:	f04f 0b00 	mov.w	fp, #0
 8013278:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 801327c:	4661      	mov	r1, ip
 801327e:	2200      	movs	r2, #0
 8013280:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8013284:	4658      	mov	r0, fp
 8013286:	46e1      	mov	r9, ip
 8013288:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 801328c:	4614      	mov	r4, r2
 801328e:	461d      	mov	r5, r3
 8013290:	f7ed f9ba 	bl	8000608 <__aeabi_dmul>
 8013294:	4602      	mov	r2, r0
 8013296:	460b      	mov	r3, r1
 8013298:	4630      	mov	r0, r6
 801329a:	4639      	mov	r1, r7
 801329c:	f7ec fffc 	bl	8000298 <__aeabi_dsub>
 80132a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80132a4:	4606      	mov	r6, r0
 80132a6:	460f      	mov	r7, r1
 80132a8:	4620      	mov	r0, r4
 80132aa:	4629      	mov	r1, r5
 80132ac:	f7ec fff4 	bl	8000298 <__aeabi_dsub>
 80132b0:	4602      	mov	r2, r0
 80132b2:	460b      	mov	r3, r1
 80132b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80132b8:	f7ec ffee 	bl	8000298 <__aeabi_dsub>
 80132bc:	465a      	mov	r2, fp
 80132be:	464b      	mov	r3, r9
 80132c0:	f7ed f9a2 	bl	8000608 <__aeabi_dmul>
 80132c4:	4602      	mov	r2, r0
 80132c6:	460b      	mov	r3, r1
 80132c8:	4630      	mov	r0, r6
 80132ca:	4639      	mov	r1, r7
 80132cc:	f7ec ffe4 	bl	8000298 <__aeabi_dsub>
 80132d0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80132d4:	f7ed f998 	bl	8000608 <__aeabi_dmul>
 80132d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80132dc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80132e0:	4610      	mov	r0, r2
 80132e2:	4619      	mov	r1, r3
 80132e4:	f7ed f990 	bl	8000608 <__aeabi_dmul>
 80132e8:	a37d      	add	r3, pc, #500	@ (adr r3, 80134e0 <__ieee754_pow+0x730>)
 80132ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132ee:	4604      	mov	r4, r0
 80132f0:	460d      	mov	r5, r1
 80132f2:	f7ed f989 	bl	8000608 <__aeabi_dmul>
 80132f6:	a37c      	add	r3, pc, #496	@ (adr r3, 80134e8 <__ieee754_pow+0x738>)
 80132f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132fc:	f7ec ffce 	bl	800029c <__adddf3>
 8013300:	4622      	mov	r2, r4
 8013302:	462b      	mov	r3, r5
 8013304:	f7ed f980 	bl	8000608 <__aeabi_dmul>
 8013308:	a379      	add	r3, pc, #484	@ (adr r3, 80134f0 <__ieee754_pow+0x740>)
 801330a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801330e:	f7ec ffc5 	bl	800029c <__adddf3>
 8013312:	4622      	mov	r2, r4
 8013314:	462b      	mov	r3, r5
 8013316:	f7ed f977 	bl	8000608 <__aeabi_dmul>
 801331a:	a377      	add	r3, pc, #476	@ (adr r3, 80134f8 <__ieee754_pow+0x748>)
 801331c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013320:	f7ec ffbc 	bl	800029c <__adddf3>
 8013324:	4622      	mov	r2, r4
 8013326:	462b      	mov	r3, r5
 8013328:	f7ed f96e 	bl	8000608 <__aeabi_dmul>
 801332c:	a374      	add	r3, pc, #464	@ (adr r3, 8013500 <__ieee754_pow+0x750>)
 801332e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013332:	f7ec ffb3 	bl	800029c <__adddf3>
 8013336:	4622      	mov	r2, r4
 8013338:	462b      	mov	r3, r5
 801333a:	f7ed f965 	bl	8000608 <__aeabi_dmul>
 801333e:	a372      	add	r3, pc, #456	@ (adr r3, 8013508 <__ieee754_pow+0x758>)
 8013340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013344:	f7ec ffaa 	bl	800029c <__adddf3>
 8013348:	4622      	mov	r2, r4
 801334a:	4606      	mov	r6, r0
 801334c:	460f      	mov	r7, r1
 801334e:	462b      	mov	r3, r5
 8013350:	4620      	mov	r0, r4
 8013352:	4629      	mov	r1, r5
 8013354:	f7ed f958 	bl	8000608 <__aeabi_dmul>
 8013358:	4602      	mov	r2, r0
 801335a:	460b      	mov	r3, r1
 801335c:	4630      	mov	r0, r6
 801335e:	4639      	mov	r1, r7
 8013360:	f7ed f952 	bl	8000608 <__aeabi_dmul>
 8013364:	465a      	mov	r2, fp
 8013366:	4604      	mov	r4, r0
 8013368:	460d      	mov	r5, r1
 801336a:	464b      	mov	r3, r9
 801336c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013370:	f7ec ff94 	bl	800029c <__adddf3>
 8013374:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013378:	f7ed f946 	bl	8000608 <__aeabi_dmul>
 801337c:	4622      	mov	r2, r4
 801337e:	462b      	mov	r3, r5
 8013380:	f7ec ff8c 	bl	800029c <__adddf3>
 8013384:	465a      	mov	r2, fp
 8013386:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801338a:	464b      	mov	r3, r9
 801338c:	4658      	mov	r0, fp
 801338e:	4649      	mov	r1, r9
 8013390:	f7ed f93a 	bl	8000608 <__aeabi_dmul>
 8013394:	4b6a      	ldr	r3, [pc, #424]	@ (8013540 <__ieee754_pow+0x790>)
 8013396:	2200      	movs	r2, #0
 8013398:	4606      	mov	r6, r0
 801339a:	460f      	mov	r7, r1
 801339c:	f7ec ff7e 	bl	800029c <__adddf3>
 80133a0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80133a4:	f7ec ff7a 	bl	800029c <__adddf3>
 80133a8:	46d8      	mov	r8, fp
 80133aa:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80133ae:	460d      	mov	r5, r1
 80133b0:	465a      	mov	r2, fp
 80133b2:	460b      	mov	r3, r1
 80133b4:	4640      	mov	r0, r8
 80133b6:	4649      	mov	r1, r9
 80133b8:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80133bc:	f7ed f924 	bl	8000608 <__aeabi_dmul>
 80133c0:	465c      	mov	r4, fp
 80133c2:	4680      	mov	r8, r0
 80133c4:	4689      	mov	r9, r1
 80133c6:	4b5e      	ldr	r3, [pc, #376]	@ (8013540 <__ieee754_pow+0x790>)
 80133c8:	2200      	movs	r2, #0
 80133ca:	4620      	mov	r0, r4
 80133cc:	4629      	mov	r1, r5
 80133ce:	f7ec ff63 	bl	8000298 <__aeabi_dsub>
 80133d2:	4632      	mov	r2, r6
 80133d4:	463b      	mov	r3, r7
 80133d6:	f7ec ff5f 	bl	8000298 <__aeabi_dsub>
 80133da:	4602      	mov	r2, r0
 80133dc:	460b      	mov	r3, r1
 80133de:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80133e2:	f7ec ff59 	bl	8000298 <__aeabi_dsub>
 80133e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80133ea:	f7ed f90d 	bl	8000608 <__aeabi_dmul>
 80133ee:	4622      	mov	r2, r4
 80133f0:	4606      	mov	r6, r0
 80133f2:	460f      	mov	r7, r1
 80133f4:	462b      	mov	r3, r5
 80133f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80133fa:	f7ed f905 	bl	8000608 <__aeabi_dmul>
 80133fe:	4602      	mov	r2, r0
 8013400:	460b      	mov	r3, r1
 8013402:	4630      	mov	r0, r6
 8013404:	4639      	mov	r1, r7
 8013406:	f7ec ff49 	bl	800029c <__adddf3>
 801340a:	4606      	mov	r6, r0
 801340c:	460f      	mov	r7, r1
 801340e:	4602      	mov	r2, r0
 8013410:	460b      	mov	r3, r1
 8013412:	4640      	mov	r0, r8
 8013414:	4649      	mov	r1, r9
 8013416:	f7ec ff41 	bl	800029c <__adddf3>
 801341a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 801341e:	a33c      	add	r3, pc, #240	@ (adr r3, 8013510 <__ieee754_pow+0x760>)
 8013420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013424:	4658      	mov	r0, fp
 8013426:	e9cd bc08 	strd	fp, ip, [sp, #32]
 801342a:	460d      	mov	r5, r1
 801342c:	f7ed f8ec 	bl	8000608 <__aeabi_dmul>
 8013430:	465c      	mov	r4, fp
 8013432:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013436:	4642      	mov	r2, r8
 8013438:	464b      	mov	r3, r9
 801343a:	4620      	mov	r0, r4
 801343c:	4629      	mov	r1, r5
 801343e:	f7ec ff2b 	bl	8000298 <__aeabi_dsub>
 8013442:	4602      	mov	r2, r0
 8013444:	460b      	mov	r3, r1
 8013446:	4630      	mov	r0, r6
 8013448:	4639      	mov	r1, r7
 801344a:	f7ec ff25 	bl	8000298 <__aeabi_dsub>
 801344e:	a332      	add	r3, pc, #200	@ (adr r3, 8013518 <__ieee754_pow+0x768>)
 8013450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013454:	f7ed f8d8 	bl	8000608 <__aeabi_dmul>
 8013458:	a331      	add	r3, pc, #196	@ (adr r3, 8013520 <__ieee754_pow+0x770>)
 801345a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801345e:	4606      	mov	r6, r0
 8013460:	460f      	mov	r7, r1
 8013462:	4620      	mov	r0, r4
 8013464:	4629      	mov	r1, r5
 8013466:	f7ed f8cf 	bl	8000608 <__aeabi_dmul>
 801346a:	4602      	mov	r2, r0
 801346c:	460b      	mov	r3, r1
 801346e:	4630      	mov	r0, r6
 8013470:	4639      	mov	r1, r7
 8013472:	f7ec ff13 	bl	800029c <__adddf3>
 8013476:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013478:	4b32      	ldr	r3, [pc, #200]	@ (8013544 <__ieee754_pow+0x794>)
 801347a:	4413      	add	r3, r2
 801347c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013480:	f7ec ff0c 	bl	800029c <__adddf3>
 8013484:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013488:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801348a:	f7ed f853 	bl	8000534 <__aeabi_i2d>
 801348e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013490:	4b2d      	ldr	r3, [pc, #180]	@ (8013548 <__ieee754_pow+0x798>)
 8013492:	4413      	add	r3, r2
 8013494:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013498:	4606      	mov	r6, r0
 801349a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801349e:	460f      	mov	r7, r1
 80134a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80134a4:	f7ec fefa 	bl	800029c <__adddf3>
 80134a8:	4642      	mov	r2, r8
 80134aa:	464b      	mov	r3, r9
 80134ac:	f7ec fef6 	bl	800029c <__adddf3>
 80134b0:	4632      	mov	r2, r6
 80134b2:	463b      	mov	r3, r7
 80134b4:	f7ec fef2 	bl	800029c <__adddf3>
 80134b8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80134bc:	4632      	mov	r2, r6
 80134be:	463b      	mov	r3, r7
 80134c0:	4658      	mov	r0, fp
 80134c2:	460d      	mov	r5, r1
 80134c4:	f7ec fee8 	bl	8000298 <__aeabi_dsub>
 80134c8:	4642      	mov	r2, r8
 80134ca:	464b      	mov	r3, r9
 80134cc:	f7ec fee4 	bl	8000298 <__aeabi_dsub>
 80134d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80134d4:	f7ec fee0 	bl	8000298 <__aeabi_dsub>
 80134d8:	465c      	mov	r4, fp
 80134da:	4602      	mov	r2, r0
 80134dc:	e036      	b.n	801354c <__ieee754_pow+0x79c>
 80134de:	bf00      	nop
 80134e0:	4a454eef 	.word	0x4a454eef
 80134e4:	3fca7e28 	.word	0x3fca7e28
 80134e8:	93c9db65 	.word	0x93c9db65
 80134ec:	3fcd864a 	.word	0x3fcd864a
 80134f0:	a91d4101 	.word	0xa91d4101
 80134f4:	3fd17460 	.word	0x3fd17460
 80134f8:	518f264d 	.word	0x518f264d
 80134fc:	3fd55555 	.word	0x3fd55555
 8013500:	db6fabff 	.word	0xdb6fabff
 8013504:	3fdb6db6 	.word	0x3fdb6db6
 8013508:	33333303 	.word	0x33333303
 801350c:	3fe33333 	.word	0x3fe33333
 8013510:	e0000000 	.word	0xe0000000
 8013514:	3feec709 	.word	0x3feec709
 8013518:	dc3a03fd 	.word	0xdc3a03fd
 801351c:	3feec709 	.word	0x3feec709
 8013520:	145b01f5 	.word	0x145b01f5
 8013524:	be3e2fe0 	.word	0xbe3e2fe0
 8013528:	7ff00000 	.word	0x7ff00000
 801352c:	43400000 	.word	0x43400000
 8013530:	0003988e 	.word	0x0003988e
 8013534:	000bb679 	.word	0x000bb679
 8013538:	08014668 	.word	0x08014668
 801353c:	3ff00000 	.word	0x3ff00000
 8013540:	40080000 	.word	0x40080000
 8013544:	08014648 	.word	0x08014648
 8013548:	08014658 	.word	0x08014658
 801354c:	460b      	mov	r3, r1
 801354e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013552:	e5d7      	b.n	8013104 <__ieee754_pow+0x354>
 8013554:	f04f 0a01 	mov.w	sl, #1
 8013558:	e65e      	b.n	8013218 <__ieee754_pow+0x468>
 801355a:	a3b4      	add	r3, pc, #720	@ (adr r3, 801382c <__ieee754_pow+0xa7c>)
 801355c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013560:	4630      	mov	r0, r6
 8013562:	4639      	mov	r1, r7
 8013564:	f7ec fe9a 	bl	800029c <__adddf3>
 8013568:	4642      	mov	r2, r8
 801356a:	e9cd 0100 	strd	r0, r1, [sp]
 801356e:	464b      	mov	r3, r9
 8013570:	4620      	mov	r0, r4
 8013572:	4629      	mov	r1, r5
 8013574:	f7ec fe90 	bl	8000298 <__aeabi_dsub>
 8013578:	4602      	mov	r2, r0
 801357a:	460b      	mov	r3, r1
 801357c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013580:	f7ed fad2 	bl	8000b28 <__aeabi_dcmpgt>
 8013584:	2800      	cmp	r0, #0
 8013586:	f47f ae00 	bne.w	801318a <__ieee754_pow+0x3da>
 801358a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 801358e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8013592:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8013596:	fa43 fa0a 	asr.w	sl, r3, sl
 801359a:	44da      	add	sl, fp
 801359c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80135a0:	489d      	ldr	r0, [pc, #628]	@ (8013818 <__ieee754_pow+0xa68>)
 80135a2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80135a6:	4108      	asrs	r0, r1
 80135a8:	ea00 030a 	and.w	r3, r0, sl
 80135ac:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80135b0:	f1c1 0114 	rsb	r1, r1, #20
 80135b4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80135b8:	fa4a fa01 	asr.w	sl, sl, r1
 80135bc:	f1bb 0f00 	cmp.w	fp, #0
 80135c0:	4640      	mov	r0, r8
 80135c2:	4649      	mov	r1, r9
 80135c4:	f04f 0200 	mov.w	r2, #0
 80135c8:	bfb8      	it	lt
 80135ca:	f1ca 0a00 	rsblt	sl, sl, #0
 80135ce:	f7ec fe63 	bl	8000298 <__aeabi_dsub>
 80135d2:	4680      	mov	r8, r0
 80135d4:	4689      	mov	r9, r1
 80135d6:	4632      	mov	r2, r6
 80135d8:	463b      	mov	r3, r7
 80135da:	4640      	mov	r0, r8
 80135dc:	4649      	mov	r1, r9
 80135de:	f7ec fe5d 	bl	800029c <__adddf3>
 80135e2:	2400      	movs	r4, #0
 80135e4:	a37c      	add	r3, pc, #496	@ (adr r3, 80137d8 <__ieee754_pow+0xa28>)
 80135e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135ea:	4620      	mov	r0, r4
 80135ec:	460d      	mov	r5, r1
 80135ee:	f7ed f80b 	bl	8000608 <__aeabi_dmul>
 80135f2:	4642      	mov	r2, r8
 80135f4:	e9cd 0100 	strd	r0, r1, [sp]
 80135f8:	464b      	mov	r3, r9
 80135fa:	4620      	mov	r0, r4
 80135fc:	4629      	mov	r1, r5
 80135fe:	f7ec fe4b 	bl	8000298 <__aeabi_dsub>
 8013602:	4602      	mov	r2, r0
 8013604:	460b      	mov	r3, r1
 8013606:	4630      	mov	r0, r6
 8013608:	4639      	mov	r1, r7
 801360a:	f7ec fe45 	bl	8000298 <__aeabi_dsub>
 801360e:	a374      	add	r3, pc, #464	@ (adr r3, 80137e0 <__ieee754_pow+0xa30>)
 8013610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013614:	f7ec fff8 	bl	8000608 <__aeabi_dmul>
 8013618:	a373      	add	r3, pc, #460	@ (adr r3, 80137e8 <__ieee754_pow+0xa38>)
 801361a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801361e:	4680      	mov	r8, r0
 8013620:	4689      	mov	r9, r1
 8013622:	4620      	mov	r0, r4
 8013624:	4629      	mov	r1, r5
 8013626:	f7ec ffef 	bl	8000608 <__aeabi_dmul>
 801362a:	4602      	mov	r2, r0
 801362c:	460b      	mov	r3, r1
 801362e:	4640      	mov	r0, r8
 8013630:	4649      	mov	r1, r9
 8013632:	f7ec fe33 	bl	800029c <__adddf3>
 8013636:	4604      	mov	r4, r0
 8013638:	460d      	mov	r5, r1
 801363a:	4602      	mov	r2, r0
 801363c:	460b      	mov	r3, r1
 801363e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013642:	f7ec fe2b 	bl	800029c <__adddf3>
 8013646:	e9dd 2300 	ldrd	r2, r3, [sp]
 801364a:	4680      	mov	r8, r0
 801364c:	4689      	mov	r9, r1
 801364e:	f7ec fe23 	bl	8000298 <__aeabi_dsub>
 8013652:	4602      	mov	r2, r0
 8013654:	460b      	mov	r3, r1
 8013656:	4620      	mov	r0, r4
 8013658:	4629      	mov	r1, r5
 801365a:	f7ec fe1d 	bl	8000298 <__aeabi_dsub>
 801365e:	4642      	mov	r2, r8
 8013660:	4606      	mov	r6, r0
 8013662:	460f      	mov	r7, r1
 8013664:	464b      	mov	r3, r9
 8013666:	4640      	mov	r0, r8
 8013668:	4649      	mov	r1, r9
 801366a:	f7ec ffcd 	bl	8000608 <__aeabi_dmul>
 801366e:	a360      	add	r3, pc, #384	@ (adr r3, 80137f0 <__ieee754_pow+0xa40>)
 8013670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013674:	4604      	mov	r4, r0
 8013676:	460d      	mov	r5, r1
 8013678:	f7ec ffc6 	bl	8000608 <__aeabi_dmul>
 801367c:	a35e      	add	r3, pc, #376	@ (adr r3, 80137f8 <__ieee754_pow+0xa48>)
 801367e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013682:	f7ec fe09 	bl	8000298 <__aeabi_dsub>
 8013686:	4622      	mov	r2, r4
 8013688:	462b      	mov	r3, r5
 801368a:	f7ec ffbd 	bl	8000608 <__aeabi_dmul>
 801368e:	a35c      	add	r3, pc, #368	@ (adr r3, 8013800 <__ieee754_pow+0xa50>)
 8013690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013694:	f7ec fe02 	bl	800029c <__adddf3>
 8013698:	4622      	mov	r2, r4
 801369a:	462b      	mov	r3, r5
 801369c:	f7ec ffb4 	bl	8000608 <__aeabi_dmul>
 80136a0:	a359      	add	r3, pc, #356	@ (adr r3, 8013808 <__ieee754_pow+0xa58>)
 80136a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136a6:	f7ec fdf7 	bl	8000298 <__aeabi_dsub>
 80136aa:	4622      	mov	r2, r4
 80136ac:	462b      	mov	r3, r5
 80136ae:	f7ec ffab 	bl	8000608 <__aeabi_dmul>
 80136b2:	a357      	add	r3, pc, #348	@ (adr r3, 8013810 <__ieee754_pow+0xa60>)
 80136b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136b8:	f7ec fdf0 	bl	800029c <__adddf3>
 80136bc:	4622      	mov	r2, r4
 80136be:	462b      	mov	r3, r5
 80136c0:	f7ec ffa2 	bl	8000608 <__aeabi_dmul>
 80136c4:	4602      	mov	r2, r0
 80136c6:	460b      	mov	r3, r1
 80136c8:	4640      	mov	r0, r8
 80136ca:	4649      	mov	r1, r9
 80136cc:	f7ec fde4 	bl	8000298 <__aeabi_dsub>
 80136d0:	4604      	mov	r4, r0
 80136d2:	460d      	mov	r5, r1
 80136d4:	4602      	mov	r2, r0
 80136d6:	460b      	mov	r3, r1
 80136d8:	4640      	mov	r0, r8
 80136da:	4649      	mov	r1, r9
 80136dc:	f7ec ff94 	bl	8000608 <__aeabi_dmul>
 80136e0:	2200      	movs	r2, #0
 80136e2:	e9cd 0100 	strd	r0, r1, [sp]
 80136e6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80136ea:	4620      	mov	r0, r4
 80136ec:	4629      	mov	r1, r5
 80136ee:	f7ec fdd3 	bl	8000298 <__aeabi_dsub>
 80136f2:	4602      	mov	r2, r0
 80136f4:	460b      	mov	r3, r1
 80136f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80136fa:	f7ed f8af 	bl	800085c <__aeabi_ddiv>
 80136fe:	4632      	mov	r2, r6
 8013700:	4604      	mov	r4, r0
 8013702:	460d      	mov	r5, r1
 8013704:	463b      	mov	r3, r7
 8013706:	4640      	mov	r0, r8
 8013708:	4649      	mov	r1, r9
 801370a:	f7ec ff7d 	bl	8000608 <__aeabi_dmul>
 801370e:	4632      	mov	r2, r6
 8013710:	463b      	mov	r3, r7
 8013712:	f7ec fdc3 	bl	800029c <__adddf3>
 8013716:	4602      	mov	r2, r0
 8013718:	460b      	mov	r3, r1
 801371a:	4620      	mov	r0, r4
 801371c:	4629      	mov	r1, r5
 801371e:	f7ec fdbb 	bl	8000298 <__aeabi_dsub>
 8013722:	4642      	mov	r2, r8
 8013724:	464b      	mov	r3, r9
 8013726:	f7ec fdb7 	bl	8000298 <__aeabi_dsub>
 801372a:	460b      	mov	r3, r1
 801372c:	4602      	mov	r2, r0
 801372e:	493b      	ldr	r1, [pc, #236]	@ (801381c <__ieee754_pow+0xa6c>)
 8013730:	2000      	movs	r0, #0
 8013732:	f7ec fdb1 	bl	8000298 <__aeabi_dsub>
 8013736:	ec41 0b10 	vmov	d0, r0, r1
 801373a:	ee10 3a90 	vmov	r3, s1
 801373e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8013742:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013746:	da30      	bge.n	80137aa <__ieee754_pow+0x9fa>
 8013748:	4650      	mov	r0, sl
 801374a:	f000 f87d 	bl	8013848 <scalbn>
 801374e:	ec51 0b10 	vmov	r0, r1, d0
 8013752:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013756:	f7ff bbd2 	b.w	8012efe <__ieee754_pow+0x14e>
 801375a:	4c31      	ldr	r4, [pc, #196]	@ (8013820 <__ieee754_pow+0xa70>)
 801375c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8013760:	42a3      	cmp	r3, r4
 8013762:	d91a      	bls.n	801379a <__ieee754_pow+0x9ea>
 8013764:	4b2f      	ldr	r3, [pc, #188]	@ (8013824 <__ieee754_pow+0xa74>)
 8013766:	440b      	add	r3, r1
 8013768:	4303      	orrs	r3, r0
 801376a:	d009      	beq.n	8013780 <__ieee754_pow+0x9d0>
 801376c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013770:	2200      	movs	r2, #0
 8013772:	2300      	movs	r3, #0
 8013774:	f7ed f9ba 	bl	8000aec <__aeabi_dcmplt>
 8013778:	3800      	subs	r0, #0
 801377a:	bf18      	it	ne
 801377c:	2001      	movne	r0, #1
 801377e:	e42b      	b.n	8012fd8 <__ieee754_pow+0x228>
 8013780:	4642      	mov	r2, r8
 8013782:	464b      	mov	r3, r9
 8013784:	f7ec fd88 	bl	8000298 <__aeabi_dsub>
 8013788:	4632      	mov	r2, r6
 801378a:	463b      	mov	r3, r7
 801378c:	f7ed f9c2 	bl	8000b14 <__aeabi_dcmpge>
 8013790:	2800      	cmp	r0, #0
 8013792:	d1eb      	bne.n	801376c <__ieee754_pow+0x9bc>
 8013794:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8013834 <__ieee754_pow+0xa84>
 8013798:	e6f7      	b.n	801358a <__ieee754_pow+0x7da>
 801379a:	469a      	mov	sl, r3
 801379c:	4b22      	ldr	r3, [pc, #136]	@ (8013828 <__ieee754_pow+0xa78>)
 801379e:	459a      	cmp	sl, r3
 80137a0:	f63f aef3 	bhi.w	801358a <__ieee754_pow+0x7da>
 80137a4:	f8dd a010 	ldr.w	sl, [sp, #16]
 80137a8:	e715      	b.n	80135d6 <__ieee754_pow+0x826>
 80137aa:	ec51 0b10 	vmov	r0, r1, d0
 80137ae:	4619      	mov	r1, r3
 80137b0:	e7cf      	b.n	8013752 <__ieee754_pow+0x9a2>
 80137b2:	491a      	ldr	r1, [pc, #104]	@ (801381c <__ieee754_pow+0xa6c>)
 80137b4:	2000      	movs	r0, #0
 80137b6:	f7ff bb18 	b.w	8012dea <__ieee754_pow+0x3a>
 80137ba:	2000      	movs	r0, #0
 80137bc:	2100      	movs	r1, #0
 80137be:	f7ff bb14 	b.w	8012dea <__ieee754_pow+0x3a>
 80137c2:	4630      	mov	r0, r6
 80137c4:	4639      	mov	r1, r7
 80137c6:	f7ff bb10 	b.w	8012dea <__ieee754_pow+0x3a>
 80137ca:	460c      	mov	r4, r1
 80137cc:	f7ff bb5e 	b.w	8012e8c <__ieee754_pow+0xdc>
 80137d0:	2400      	movs	r4, #0
 80137d2:	f7ff bb49 	b.w	8012e68 <__ieee754_pow+0xb8>
 80137d6:	bf00      	nop
 80137d8:	00000000 	.word	0x00000000
 80137dc:	3fe62e43 	.word	0x3fe62e43
 80137e0:	fefa39ef 	.word	0xfefa39ef
 80137e4:	3fe62e42 	.word	0x3fe62e42
 80137e8:	0ca86c39 	.word	0x0ca86c39
 80137ec:	be205c61 	.word	0xbe205c61
 80137f0:	72bea4d0 	.word	0x72bea4d0
 80137f4:	3e663769 	.word	0x3e663769
 80137f8:	c5d26bf1 	.word	0xc5d26bf1
 80137fc:	3ebbbd41 	.word	0x3ebbbd41
 8013800:	af25de2c 	.word	0xaf25de2c
 8013804:	3f11566a 	.word	0x3f11566a
 8013808:	16bebd93 	.word	0x16bebd93
 801380c:	3f66c16c 	.word	0x3f66c16c
 8013810:	5555553e 	.word	0x5555553e
 8013814:	3fc55555 	.word	0x3fc55555
 8013818:	fff00000 	.word	0xfff00000
 801381c:	3ff00000 	.word	0x3ff00000
 8013820:	4090cbff 	.word	0x4090cbff
 8013824:	3f6f3400 	.word	0x3f6f3400
 8013828:	3fe00000 	.word	0x3fe00000
 801382c:	652b82fe 	.word	0x652b82fe
 8013830:	3c971547 	.word	0x3c971547
 8013834:	4090cc00 	.word	0x4090cc00

08013838 <fabs>:
 8013838:	ec51 0b10 	vmov	r0, r1, d0
 801383c:	4602      	mov	r2, r0
 801383e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8013842:	ec43 2b10 	vmov	d0, r2, r3
 8013846:	4770      	bx	lr

08013848 <scalbn>:
 8013848:	b570      	push	{r4, r5, r6, lr}
 801384a:	ec55 4b10 	vmov	r4, r5, d0
 801384e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8013852:	4606      	mov	r6, r0
 8013854:	462b      	mov	r3, r5
 8013856:	b991      	cbnz	r1, 801387e <scalbn+0x36>
 8013858:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801385c:	4323      	orrs	r3, r4
 801385e:	d03d      	beq.n	80138dc <scalbn+0x94>
 8013860:	4b35      	ldr	r3, [pc, #212]	@ (8013938 <scalbn+0xf0>)
 8013862:	4620      	mov	r0, r4
 8013864:	4629      	mov	r1, r5
 8013866:	2200      	movs	r2, #0
 8013868:	f7ec fece 	bl	8000608 <__aeabi_dmul>
 801386c:	4b33      	ldr	r3, [pc, #204]	@ (801393c <scalbn+0xf4>)
 801386e:	429e      	cmp	r6, r3
 8013870:	4604      	mov	r4, r0
 8013872:	460d      	mov	r5, r1
 8013874:	da0f      	bge.n	8013896 <scalbn+0x4e>
 8013876:	a328      	add	r3, pc, #160	@ (adr r3, 8013918 <scalbn+0xd0>)
 8013878:	e9d3 2300 	ldrd	r2, r3, [r3]
 801387c:	e01e      	b.n	80138bc <scalbn+0x74>
 801387e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8013882:	4291      	cmp	r1, r2
 8013884:	d10b      	bne.n	801389e <scalbn+0x56>
 8013886:	4622      	mov	r2, r4
 8013888:	4620      	mov	r0, r4
 801388a:	4629      	mov	r1, r5
 801388c:	f7ec fd06 	bl	800029c <__adddf3>
 8013890:	4604      	mov	r4, r0
 8013892:	460d      	mov	r5, r1
 8013894:	e022      	b.n	80138dc <scalbn+0x94>
 8013896:	460b      	mov	r3, r1
 8013898:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801389c:	3936      	subs	r1, #54	@ 0x36
 801389e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80138a2:	4296      	cmp	r6, r2
 80138a4:	dd0d      	ble.n	80138c2 <scalbn+0x7a>
 80138a6:	2d00      	cmp	r5, #0
 80138a8:	a11d      	add	r1, pc, #116	@ (adr r1, 8013920 <scalbn+0xd8>)
 80138aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80138ae:	da02      	bge.n	80138b6 <scalbn+0x6e>
 80138b0:	a11d      	add	r1, pc, #116	@ (adr r1, 8013928 <scalbn+0xe0>)
 80138b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80138b6:	a31a      	add	r3, pc, #104	@ (adr r3, 8013920 <scalbn+0xd8>)
 80138b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138bc:	f7ec fea4 	bl	8000608 <__aeabi_dmul>
 80138c0:	e7e6      	b.n	8013890 <scalbn+0x48>
 80138c2:	1872      	adds	r2, r6, r1
 80138c4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80138c8:	428a      	cmp	r2, r1
 80138ca:	dcec      	bgt.n	80138a6 <scalbn+0x5e>
 80138cc:	2a00      	cmp	r2, #0
 80138ce:	dd08      	ble.n	80138e2 <scalbn+0x9a>
 80138d0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80138d4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80138d8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80138dc:	ec45 4b10 	vmov	d0, r4, r5
 80138e0:	bd70      	pop	{r4, r5, r6, pc}
 80138e2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80138e6:	da08      	bge.n	80138fa <scalbn+0xb2>
 80138e8:	2d00      	cmp	r5, #0
 80138ea:	a10b      	add	r1, pc, #44	@ (adr r1, 8013918 <scalbn+0xd0>)
 80138ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80138f0:	dac1      	bge.n	8013876 <scalbn+0x2e>
 80138f2:	a10f      	add	r1, pc, #60	@ (adr r1, 8013930 <scalbn+0xe8>)
 80138f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80138f8:	e7bd      	b.n	8013876 <scalbn+0x2e>
 80138fa:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80138fe:	3236      	adds	r2, #54	@ 0x36
 8013900:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8013904:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013908:	4620      	mov	r0, r4
 801390a:	4b0d      	ldr	r3, [pc, #52]	@ (8013940 <scalbn+0xf8>)
 801390c:	4629      	mov	r1, r5
 801390e:	2200      	movs	r2, #0
 8013910:	e7d4      	b.n	80138bc <scalbn+0x74>
 8013912:	bf00      	nop
 8013914:	f3af 8000 	nop.w
 8013918:	c2f8f359 	.word	0xc2f8f359
 801391c:	01a56e1f 	.word	0x01a56e1f
 8013920:	8800759c 	.word	0x8800759c
 8013924:	7e37e43c 	.word	0x7e37e43c
 8013928:	8800759c 	.word	0x8800759c
 801392c:	fe37e43c 	.word	0xfe37e43c
 8013930:	c2f8f359 	.word	0xc2f8f359
 8013934:	81a56e1f 	.word	0x81a56e1f
 8013938:	43500000 	.word	0x43500000
 801393c:	ffff3cb0 	.word	0xffff3cb0
 8013940:	3c900000 	.word	0x3c900000

08013944 <with_errno>:
 8013944:	b510      	push	{r4, lr}
 8013946:	ed2d 8b02 	vpush	{d8}
 801394a:	eeb0 8a40 	vmov.f32	s16, s0
 801394e:	eef0 8a60 	vmov.f32	s17, s1
 8013952:	4604      	mov	r4, r0
 8013954:	f7fc f8d8 	bl	800fb08 <__errno>
 8013958:	eeb0 0a48 	vmov.f32	s0, s16
 801395c:	eef0 0a68 	vmov.f32	s1, s17
 8013960:	ecbd 8b02 	vpop	{d8}
 8013964:	6004      	str	r4, [r0, #0]
 8013966:	bd10      	pop	{r4, pc}

08013968 <xflow>:
 8013968:	4603      	mov	r3, r0
 801396a:	b507      	push	{r0, r1, r2, lr}
 801396c:	ec51 0b10 	vmov	r0, r1, d0
 8013970:	b183      	cbz	r3, 8013994 <xflow+0x2c>
 8013972:	4602      	mov	r2, r0
 8013974:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013978:	e9cd 2300 	strd	r2, r3, [sp]
 801397c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013980:	f7ec fe42 	bl	8000608 <__aeabi_dmul>
 8013984:	ec41 0b10 	vmov	d0, r0, r1
 8013988:	2022      	movs	r0, #34	@ 0x22
 801398a:	b003      	add	sp, #12
 801398c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013990:	f7ff bfd8 	b.w	8013944 <with_errno>
 8013994:	4602      	mov	r2, r0
 8013996:	460b      	mov	r3, r1
 8013998:	e7ee      	b.n	8013978 <xflow+0x10>
 801399a:	0000      	movs	r0, r0
 801399c:	0000      	movs	r0, r0
	...

080139a0 <__math_uflow>:
 80139a0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80139a8 <__math_uflow+0x8>
 80139a4:	f7ff bfe0 	b.w	8013968 <xflow>
 80139a8:	00000000 	.word	0x00000000
 80139ac:	10000000 	.word	0x10000000

080139b0 <__math_oflow>:
 80139b0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80139b8 <__math_oflow+0x8>
 80139b4:	f7ff bfd8 	b.w	8013968 <xflow>
 80139b8:	00000000 	.word	0x00000000
 80139bc:	70000000 	.word	0x70000000

080139c0 <__ieee754_sqrt>:
 80139c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139c4:	4a68      	ldr	r2, [pc, #416]	@ (8013b68 <__ieee754_sqrt+0x1a8>)
 80139c6:	ec55 4b10 	vmov	r4, r5, d0
 80139ca:	43aa      	bics	r2, r5
 80139cc:	462b      	mov	r3, r5
 80139ce:	4621      	mov	r1, r4
 80139d0:	d110      	bne.n	80139f4 <__ieee754_sqrt+0x34>
 80139d2:	4622      	mov	r2, r4
 80139d4:	4620      	mov	r0, r4
 80139d6:	4629      	mov	r1, r5
 80139d8:	f7ec fe16 	bl	8000608 <__aeabi_dmul>
 80139dc:	4602      	mov	r2, r0
 80139de:	460b      	mov	r3, r1
 80139e0:	4620      	mov	r0, r4
 80139e2:	4629      	mov	r1, r5
 80139e4:	f7ec fc5a 	bl	800029c <__adddf3>
 80139e8:	4604      	mov	r4, r0
 80139ea:	460d      	mov	r5, r1
 80139ec:	ec45 4b10 	vmov	d0, r4, r5
 80139f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139f4:	2d00      	cmp	r5, #0
 80139f6:	dc0e      	bgt.n	8013a16 <__ieee754_sqrt+0x56>
 80139f8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80139fc:	4322      	orrs	r2, r4
 80139fe:	d0f5      	beq.n	80139ec <__ieee754_sqrt+0x2c>
 8013a00:	b19d      	cbz	r5, 8013a2a <__ieee754_sqrt+0x6a>
 8013a02:	4622      	mov	r2, r4
 8013a04:	4620      	mov	r0, r4
 8013a06:	4629      	mov	r1, r5
 8013a08:	f7ec fc46 	bl	8000298 <__aeabi_dsub>
 8013a0c:	4602      	mov	r2, r0
 8013a0e:	460b      	mov	r3, r1
 8013a10:	f7ec ff24 	bl	800085c <__aeabi_ddiv>
 8013a14:	e7e8      	b.n	80139e8 <__ieee754_sqrt+0x28>
 8013a16:	152a      	asrs	r2, r5, #20
 8013a18:	d115      	bne.n	8013a46 <__ieee754_sqrt+0x86>
 8013a1a:	2000      	movs	r0, #0
 8013a1c:	e009      	b.n	8013a32 <__ieee754_sqrt+0x72>
 8013a1e:	0acb      	lsrs	r3, r1, #11
 8013a20:	3a15      	subs	r2, #21
 8013a22:	0549      	lsls	r1, r1, #21
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d0fa      	beq.n	8013a1e <__ieee754_sqrt+0x5e>
 8013a28:	e7f7      	b.n	8013a1a <__ieee754_sqrt+0x5a>
 8013a2a:	462a      	mov	r2, r5
 8013a2c:	e7fa      	b.n	8013a24 <__ieee754_sqrt+0x64>
 8013a2e:	005b      	lsls	r3, r3, #1
 8013a30:	3001      	adds	r0, #1
 8013a32:	02dc      	lsls	r4, r3, #11
 8013a34:	d5fb      	bpl.n	8013a2e <__ieee754_sqrt+0x6e>
 8013a36:	1e44      	subs	r4, r0, #1
 8013a38:	1b12      	subs	r2, r2, r4
 8013a3a:	f1c0 0420 	rsb	r4, r0, #32
 8013a3e:	fa21 f404 	lsr.w	r4, r1, r4
 8013a42:	4323      	orrs	r3, r4
 8013a44:	4081      	lsls	r1, r0
 8013a46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013a4a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8013a4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013a52:	07d2      	lsls	r2, r2, #31
 8013a54:	bf5c      	itt	pl
 8013a56:	005b      	lslpl	r3, r3, #1
 8013a58:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8013a5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013a60:	bf58      	it	pl
 8013a62:	0049      	lslpl	r1, r1, #1
 8013a64:	2600      	movs	r6, #0
 8013a66:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8013a6a:	106d      	asrs	r5, r5, #1
 8013a6c:	0049      	lsls	r1, r1, #1
 8013a6e:	2016      	movs	r0, #22
 8013a70:	4632      	mov	r2, r6
 8013a72:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8013a76:	1917      	adds	r7, r2, r4
 8013a78:	429f      	cmp	r7, r3
 8013a7a:	bfde      	ittt	le
 8013a7c:	193a      	addle	r2, r7, r4
 8013a7e:	1bdb      	suble	r3, r3, r7
 8013a80:	1936      	addle	r6, r6, r4
 8013a82:	0fcf      	lsrs	r7, r1, #31
 8013a84:	3801      	subs	r0, #1
 8013a86:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8013a8a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8013a8e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8013a92:	d1f0      	bne.n	8013a76 <__ieee754_sqrt+0xb6>
 8013a94:	4604      	mov	r4, r0
 8013a96:	2720      	movs	r7, #32
 8013a98:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8013a9c:	429a      	cmp	r2, r3
 8013a9e:	eb00 0e0c 	add.w	lr, r0, ip
 8013aa2:	db02      	blt.n	8013aaa <__ieee754_sqrt+0xea>
 8013aa4:	d113      	bne.n	8013ace <__ieee754_sqrt+0x10e>
 8013aa6:	458e      	cmp	lr, r1
 8013aa8:	d811      	bhi.n	8013ace <__ieee754_sqrt+0x10e>
 8013aaa:	f1be 0f00 	cmp.w	lr, #0
 8013aae:	eb0e 000c 	add.w	r0, lr, ip
 8013ab2:	da42      	bge.n	8013b3a <__ieee754_sqrt+0x17a>
 8013ab4:	2800      	cmp	r0, #0
 8013ab6:	db40      	blt.n	8013b3a <__ieee754_sqrt+0x17a>
 8013ab8:	f102 0801 	add.w	r8, r2, #1
 8013abc:	1a9b      	subs	r3, r3, r2
 8013abe:	458e      	cmp	lr, r1
 8013ac0:	bf88      	it	hi
 8013ac2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8013ac6:	eba1 010e 	sub.w	r1, r1, lr
 8013aca:	4464      	add	r4, ip
 8013acc:	4642      	mov	r2, r8
 8013ace:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8013ad2:	3f01      	subs	r7, #1
 8013ad4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8013ad8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8013adc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8013ae0:	d1dc      	bne.n	8013a9c <__ieee754_sqrt+0xdc>
 8013ae2:	4319      	orrs	r1, r3
 8013ae4:	d01b      	beq.n	8013b1e <__ieee754_sqrt+0x15e>
 8013ae6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8013b6c <__ieee754_sqrt+0x1ac>
 8013aea:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8013b70 <__ieee754_sqrt+0x1b0>
 8013aee:	e9da 0100 	ldrd	r0, r1, [sl]
 8013af2:	e9db 2300 	ldrd	r2, r3, [fp]
 8013af6:	f7ec fbcf 	bl	8000298 <__aeabi_dsub>
 8013afa:	e9da 8900 	ldrd	r8, r9, [sl]
 8013afe:	4602      	mov	r2, r0
 8013b00:	460b      	mov	r3, r1
 8013b02:	4640      	mov	r0, r8
 8013b04:	4649      	mov	r1, r9
 8013b06:	f7ec fffb 	bl	8000b00 <__aeabi_dcmple>
 8013b0a:	b140      	cbz	r0, 8013b1e <__ieee754_sqrt+0x15e>
 8013b0c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8013b10:	e9da 0100 	ldrd	r0, r1, [sl]
 8013b14:	e9db 2300 	ldrd	r2, r3, [fp]
 8013b18:	d111      	bne.n	8013b3e <__ieee754_sqrt+0x17e>
 8013b1a:	3601      	adds	r6, #1
 8013b1c:	463c      	mov	r4, r7
 8013b1e:	1072      	asrs	r2, r6, #1
 8013b20:	0863      	lsrs	r3, r4, #1
 8013b22:	07f1      	lsls	r1, r6, #31
 8013b24:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8013b28:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8013b2c:	bf48      	it	mi
 8013b2e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8013b32:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8013b36:	4618      	mov	r0, r3
 8013b38:	e756      	b.n	80139e8 <__ieee754_sqrt+0x28>
 8013b3a:	4690      	mov	r8, r2
 8013b3c:	e7be      	b.n	8013abc <__ieee754_sqrt+0xfc>
 8013b3e:	f7ec fbad 	bl	800029c <__adddf3>
 8013b42:	e9da 8900 	ldrd	r8, r9, [sl]
 8013b46:	4602      	mov	r2, r0
 8013b48:	460b      	mov	r3, r1
 8013b4a:	4640      	mov	r0, r8
 8013b4c:	4649      	mov	r1, r9
 8013b4e:	f7ec ffcd 	bl	8000aec <__aeabi_dcmplt>
 8013b52:	b120      	cbz	r0, 8013b5e <__ieee754_sqrt+0x19e>
 8013b54:	1ca0      	adds	r0, r4, #2
 8013b56:	bf08      	it	eq
 8013b58:	3601      	addeq	r6, #1
 8013b5a:	3402      	adds	r4, #2
 8013b5c:	e7df      	b.n	8013b1e <__ieee754_sqrt+0x15e>
 8013b5e:	1c63      	adds	r3, r4, #1
 8013b60:	f023 0401 	bic.w	r4, r3, #1
 8013b64:	e7db      	b.n	8013b1e <__ieee754_sqrt+0x15e>
 8013b66:	bf00      	nop
 8013b68:	7ff00000 	.word	0x7ff00000
 8013b6c:	200001e8 	.word	0x200001e8
 8013b70:	200001e0 	.word	0x200001e0

08013b74 <_init>:
 8013b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b76:	bf00      	nop
 8013b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013b7a:	bc08      	pop	{r3}
 8013b7c:	469e      	mov	lr, r3
 8013b7e:	4770      	bx	lr

08013b80 <_fini>:
 8013b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b82:	bf00      	nop
 8013b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013b86:	bc08      	pop	{r3}
 8013b88:	469e      	mov	lr, r3
 8013b8a:	4770      	bx	lr
